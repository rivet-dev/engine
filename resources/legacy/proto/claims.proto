syntax = "proto3";

package rivet.claims;

import "resources/legacy/proto/common.proto";
import "resources/legacy/proto/backend/matchmaker.proto";

message Entitlement {
	// Can issue a new token for a given session.
	message Refresh {
		rivet.common.Uuid session_id = 1;
	}

	// Can mutate a user with the given ID.
	message User {
		rivet.common.Uuid user_id = 1;
	}

	// Can access public methods to a given game's namespace.
	//
	// Issued in the development dashboard.
	message GameNamespacePublic {
		rivet.common.Uuid namespace_id = 1;
	}

	// Can mutate a matchmaker lobby with a given ID.
	//
	// Issued when starting a new lobby and passed to the process through the env.
	message MatchmakerLobby {
		rivet.common.Uuid lobby_id = 1;
	}

	// Can mutate a matchmaker player with a given ID.
	//
	// Issued during a seek request. This gets passed to the lobby server which in turn passes it
	// to the matchmaking API.
	message MatchmakerPlayer {
		rivet.common.Uuid player_id = 1;
	}

	// Can manage a job's run.
	//
	// Issued while running a job and passed as a parameter to the job sidecars.
	message JobRun {
		rivet.common.Uuid run_id = 1;
	}

	// Manage a game's cloud status.
	message GameCloud {
		rivet.common.Uuid game_id = 1;
	}

	// Development token that mocks server responses for local development.
	message GameNamespaceDevelopment {
		reserved 2;
		rivet.common.Uuid namespace_id = 1;
		string hostname = 3;
		repeated rivet.backend.matchmaker.LobbyRuntime.Port lobby_ports = 4;
	}

	// A token issued for a player from a development environment.
	//
	// This has no correlated player entry in the database; this is used purely to identify
	// players in development and validate the token mechanisms work from development environments.
	//
	// Issued during a seek request when using a development namespace development token. This
	// will be used to mock matchmaker requests.
	message MatchmakerDevelopmentPlayer {
		rivet.common.Uuid namespace_id = 1;

		// This UUID does not point to an actual player row. This only enables the game 
		// server to keep track of players internally.
		rivet.common.Uuid player_id = 2;
	}

	// Token used to upload files to an upload.
	message UploadFile {
		rivet.common.Uuid upload_id = 1;
		string path = 2;
		uint64 content_length = 3;
	}

	// Token to link a CLI to a given token.
	message CloudDeviceLink {
		rivet.common.Uuid device_link_id = 1;
	}

	// Token used to bypass various safety measures such as rate limiting.
	message Bypass {

	}

	// Issued to provisioned servers for communication with our API. This will be written to prebake servers
	// (see /docs/packages/cluster/SERVER_PROVISIONING.md).
	message ProvisionedServer {
	
	}
		
	// Token used to connect to a neon database through the OpenGB DB proxy
	message OpenGbDb {
		rivet.common.Uuid environment_id = 1;
		string db_name = 2;
	}

	message EnvService {
		rivet.common.Uuid env_id = 1;
	}

	reserved 10, 11, 16;

	oneof kind {
		Refresh refresh = 1;
		User user = 2;
		GameNamespacePublic game_namespace_public = 3;
		MatchmakerLobby matchmaker_lobby = 4;
		MatchmakerPlayer matchmaker_player = 5;
		JobRun job_run = 6;
		GameCloud game_cloud = 7;
		GameNamespaceDevelopment game_namespace_development = 8;
		MatchmakerDevelopmentPlayer matchmaker_development_player = 9;
		UploadFile upload_file = 12;
		CloudDeviceLink cloud_device_link = 14;
		Bypass bypass = 15;
		ProvisionedServer provisioned_server = 17;
		OpenGbDb opengb_db = 18;
		EnvService env_service = 19;
	}

	reserved 13;
}

message Claims {
	optional int64 exp = 1;
	int64 iat = 2;
	rivet.common.Uuid jti = 3;
	repeated Entitlement entitlements = 4;
}
