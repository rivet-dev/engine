// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameStatisticsOutput {
	/// Unsigned 64 bit integer.
	pub player_count: std::option::Option<i64>,
	#[allow(missing_docs)] // documentation missing in model
	pub namespaces: std::option::Option<
		std::collections::HashMap<std::string::String, crate::model::NamespaceStatistics>,
	>,
	#[allow(missing_docs)] // documentation missing in model
	pub regions: std::option::Option<
		std::collections::HashMap<std::string::String, crate::model::RegionStatistics>,
	>,
}
impl GetGameStatisticsOutput {
	/// Unsigned 64 bit integer.
	pub fn player_count(&self) -> std::option::Option<i64> {
		self.player_count
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn namespaces(
		&self,
	) -> std::option::Option<
		&std::collections::HashMap<std::string::String, crate::model::NamespaceStatistics>,
	> {
		self.namespaces.as_ref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn regions(
		&self,
	) -> std::option::Option<
		&std::collections::HashMap<std::string::String, crate::model::RegionStatistics>,
	> {
		self.regions.as_ref()
	}
}
impl std::fmt::Debug for GetGameStatisticsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameStatisticsOutput");
		formatter.field("player_count", &self.player_count);
		formatter.field("namespaces", &self.namespaces);
		formatter.field("regions", &self.regions);
		formatter.finish()
	}
}
/// See [`GetGameStatisticsOutput`](crate::output::GetGameStatisticsOutput)
pub mod get_game_statistics_output {
	/// A builder for [`GetGameStatisticsOutput`](crate::output::GetGameStatisticsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) player_count: std::option::Option<i64>,
		pub(crate) namespaces: std::option::Option<
			std::collections::HashMap<std::string::String, crate::model::NamespaceStatistics>,
		>,
		pub(crate) regions: std::option::Option<
			std::collections::HashMap<std::string::String, crate::model::RegionStatistics>,
		>,
	}
	impl Builder {
		/// Unsigned 64 bit integer.
		pub fn player_count(mut self, input: i64) -> Self {
			self.player_count = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_player_count(mut self, input: std::option::Option<i64>) -> Self {
			self.player_count = input;
			self
		}
		/// Adds a key-value pair to `namespaces`.
		///
		/// To override the contents of this collection use [`set_namespaces`](Self::set_namespaces).
		///
		pub fn namespaces(
			mut self,
			k: impl Into<std::string::String>,
			v: crate::model::NamespaceStatistics,
		) -> Self {
			let mut hash_map = self.namespaces.unwrap_or_default();
			hash_map.insert(k.into(), v);
			self.namespaces = Some(hash_map);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_namespaces(
			mut self,
			input: std::option::Option<
				std::collections::HashMap<std::string::String, crate::model::NamespaceStatistics>,
			>,
		) -> Self {
			self.namespaces = input;
			self
		}
		/// Adds a key-value pair to `regions`.
		///
		/// To override the contents of this collection use [`set_regions`](Self::set_regions).
		///
		pub fn regions(
			mut self,
			k: impl Into<std::string::String>,
			v: crate::model::RegionStatistics,
		) -> Self {
			let mut hash_map = self.regions.unwrap_or_default();
			hash_map.insert(k.into(), v);
			self.regions = Some(hash_map);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_regions(
			mut self,
			input: std::option::Option<
				std::collections::HashMap<std::string::String, crate::model::RegionStatistics>,
			>,
		) -> Self {
			self.regions = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameStatisticsOutput`](crate::output::GetGameStatisticsOutput)
		pub fn build(self) -> crate::output::GetGameStatisticsOutput {
			crate::output::GetGameStatisticsOutput {
				player_count: self.player_count,
				namespaces: self.namespaces,
				regions: self.regions,
			}
		}
	}
}
impl GetGameStatisticsOutput {
	/// Creates a new builder-style object to manufacture [`GetGameStatisticsOutput`](crate::output::GetGameStatisticsOutput)
	pub fn builder() -> crate::output::get_game_statistics_output::Builder {
		crate::output::get_game_statistics_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListRegionsOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub regions: std::option::Option<std::vec::Vec<crate::model::RegionInfo>>,
}
impl ListRegionsOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn regions(&self) -> std::option::Option<&[crate::model::RegionInfo]> {
		self.regions.as_deref()
	}
}
impl std::fmt::Debug for ListRegionsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListRegionsOutput");
		formatter.field("regions", &self.regions);
		formatter.finish()
	}
}
/// See [`ListRegionsOutput`](crate::output::ListRegionsOutput)
pub mod list_regions_output {
	/// A builder for [`ListRegionsOutput`](crate::output::ListRegionsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) regions: std::option::Option<std::vec::Vec<crate::model::RegionInfo>>,
	}
	impl Builder {
		/// Appends an item to `regions`.
		///
		/// To override the contents of this collection use [`set_regions`](Self::set_regions).
		///
		pub fn regions(mut self, input: crate::model::RegionInfo) -> Self {
			let mut v = self.regions.unwrap_or_default();
			v.push(input);
			self.regions = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_regions(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::RegionInfo>>,
		) -> Self {
			self.regions = input;
			self
		}
		/// Consumes the builder and constructs a [`ListRegionsOutput`](crate::output::ListRegionsOutput)
		pub fn build(self) -> crate::output::ListRegionsOutput {
			crate::output::ListRegionsOutput {
				regions: self.regions,
			}
		}
	}
}
impl ListRegionsOutput {
	/// Creates a new builder-style object to manufacture [`ListRegionsOutput`](crate::output::ListRegionsOutput)
	pub fn builder() -> crate::output::list_regions_output::Builder {
		crate::output::list_regions_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PlayerDisconnectedOutput {}
impl std::fmt::Debug for PlayerDisconnectedOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PlayerDisconnectedOutput");
		formatter.finish()
	}
}
/// See [`PlayerDisconnectedOutput`](crate::output::PlayerDisconnectedOutput)
pub mod player_disconnected_output {
	/// A builder for [`PlayerDisconnectedOutput`](crate::output::PlayerDisconnectedOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`PlayerDisconnectedOutput`](crate::output::PlayerDisconnectedOutput)
		pub fn build(self) -> crate::output::PlayerDisconnectedOutput {
			crate::output::PlayerDisconnectedOutput {}
		}
	}
}
impl PlayerDisconnectedOutput {
	/// Creates a new builder-style object to manufacture [`PlayerDisconnectedOutput`](crate::output::PlayerDisconnectedOutput)
	pub fn builder() -> crate::output::player_disconnected_output::Builder {
		crate::output::player_disconnected_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PlayerConnectedOutput {}
impl std::fmt::Debug for PlayerConnectedOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PlayerConnectedOutput");
		formatter.finish()
	}
}
/// See [`PlayerConnectedOutput`](crate::output::PlayerConnectedOutput)
pub mod player_connected_output {
	/// A builder for [`PlayerConnectedOutput`](crate::output::PlayerConnectedOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`PlayerConnectedOutput`](crate::output::PlayerConnectedOutput)
		pub fn build(self) -> crate::output::PlayerConnectedOutput {
			crate::output::PlayerConnectedOutput {}
		}
	}
}
impl PlayerConnectedOutput {
	/// Creates a new builder-style object to manufacture [`PlayerConnectedOutput`](crate::output::PlayerConnectedOutput)
	pub fn builder() -> crate::output::player_connected_output::Builder {
		crate::output::player_connected_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetLobbyClosedOutput {}
impl std::fmt::Debug for SetLobbyClosedOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SetLobbyClosedOutput");
		formatter.finish()
	}
}
/// See [`SetLobbyClosedOutput`](crate::output::SetLobbyClosedOutput)
pub mod set_lobby_closed_output {
	/// A builder for [`SetLobbyClosedOutput`](crate::output::SetLobbyClosedOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`SetLobbyClosedOutput`](crate::output::SetLobbyClosedOutput)
		pub fn build(self) -> crate::output::SetLobbyClosedOutput {
			crate::output::SetLobbyClosedOutput {}
		}
	}
}
impl SetLobbyClosedOutput {
	/// Creates a new builder-style object to manufacture [`SetLobbyClosedOutput`](crate::output::SetLobbyClosedOutput)
	pub fn builder() -> crate::output::set_lobby_closed_output::Builder {
		crate::output::set_lobby_closed_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListLobbiesOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub game_modes: std::option::Option<std::vec::Vec<crate::model::GameModeInfo>>,
	#[allow(missing_docs)] // documentation missing in model
	pub regions: std::option::Option<std::vec::Vec<crate::model::RegionInfo>>,
	#[allow(missing_docs)] // documentation missing in model
	pub lobbies: std::option::Option<std::vec::Vec<crate::model::LobbyInfo>>,
}
impl ListLobbiesOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn game_modes(&self) -> std::option::Option<&[crate::model::GameModeInfo]> {
		self.game_modes.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn regions(&self) -> std::option::Option<&[crate::model::RegionInfo]> {
		self.regions.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn lobbies(&self) -> std::option::Option<&[crate::model::LobbyInfo]> {
		self.lobbies.as_deref()
	}
}
impl std::fmt::Debug for ListLobbiesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListLobbiesOutput");
		formatter.field("game_modes", &self.game_modes);
		formatter.field("regions", &self.regions);
		formatter.field("lobbies", &self.lobbies);
		formatter.finish()
	}
}
/// See [`ListLobbiesOutput`](crate::output::ListLobbiesOutput)
pub mod list_lobbies_output {
	/// A builder for [`ListLobbiesOutput`](crate::output::ListLobbiesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_modes: std::option::Option<std::vec::Vec<crate::model::GameModeInfo>>,
		pub(crate) regions: std::option::Option<std::vec::Vec<crate::model::RegionInfo>>,
		pub(crate) lobbies: std::option::Option<std::vec::Vec<crate::model::LobbyInfo>>,
	}
	impl Builder {
		/// Appends an item to `game_modes`.
		///
		/// To override the contents of this collection use [`set_game_modes`](Self::set_game_modes).
		///
		pub fn game_modes(mut self, input: crate::model::GameModeInfo) -> Self {
			let mut v = self.game_modes.unwrap_or_default();
			v.push(input);
			self.game_modes = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_game_modes(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GameModeInfo>>,
		) -> Self {
			self.game_modes = input;
			self
		}
		/// Appends an item to `regions`.
		///
		/// To override the contents of this collection use [`set_regions`](Self::set_regions).
		///
		pub fn regions(mut self, input: crate::model::RegionInfo) -> Self {
			let mut v = self.regions.unwrap_or_default();
			v.push(input);
			self.regions = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_regions(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::RegionInfo>>,
		) -> Self {
			self.regions = input;
			self
		}
		/// Appends an item to `lobbies`.
		///
		/// To override the contents of this collection use [`set_lobbies`](Self::set_lobbies).
		///
		pub fn lobbies(mut self, input: crate::model::LobbyInfo) -> Self {
			let mut v = self.lobbies.unwrap_or_default();
			v.push(input);
			self.lobbies = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_lobbies(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::LobbyInfo>>,
		) -> Self {
			self.lobbies = input;
			self
		}
		/// Consumes the builder and constructs a [`ListLobbiesOutput`](crate::output::ListLobbiesOutput)
		pub fn build(self) -> crate::output::ListLobbiesOutput {
			crate::output::ListLobbiesOutput {
				game_modes: self.game_modes,
				regions: self.regions,
				lobbies: self.lobbies,
			}
		}
	}
}
impl ListLobbiesOutput {
	/// Creates a new builder-style object to manufacture [`ListLobbiesOutput`](crate::output::ListLobbiesOutput)
	pub fn builder() -> crate::output::list_lobbies_output::Builder {
		crate::output::list_lobbies_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct FindLobbyOutput {
	/// A matchmaker lobby.
	pub lobby: std::option::Option<crate::model::MatchmakerLobbyJoinInfo>,
}
impl FindLobbyOutput {
	/// A matchmaker lobby.
	pub fn lobby(&self) -> std::option::Option<&crate::model::MatchmakerLobbyJoinInfo> {
		self.lobby.as_ref()
	}
}
impl std::fmt::Debug for FindLobbyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("FindLobbyOutput");
		formatter.field("lobby", &self.lobby);
		formatter.finish()
	}
}
/// See [`FindLobbyOutput`](crate::output::FindLobbyOutput)
pub mod find_lobby_output {
	/// A builder for [`FindLobbyOutput`](crate::output::FindLobbyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby: std::option::Option<crate::model::MatchmakerLobbyJoinInfo>,
	}
	impl Builder {
		/// A matchmaker lobby.
		pub fn lobby(mut self, input: crate::model::MatchmakerLobbyJoinInfo) -> Self {
			self.lobby = Some(input);
			self
		}
		/// A matchmaker lobby.
		pub fn set_lobby(
			mut self,
			input: std::option::Option<crate::model::MatchmakerLobbyJoinInfo>,
		) -> Self {
			self.lobby = input;
			self
		}
		/// Consumes the builder and constructs a [`FindLobbyOutput`](crate::output::FindLobbyOutput)
		pub fn build(self) -> crate::output::FindLobbyOutput {
			crate::output::FindLobbyOutput { lobby: self.lobby }
		}
	}
}
impl FindLobbyOutput {
	/// Creates a new builder-style object to manufacture [`FindLobbyOutput`](crate::output::FindLobbyOutput)
	pub fn builder() -> crate::output::find_lobby_output::Builder {
		crate::output::find_lobby_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct JoinLobbyOutput {
	/// A matchmaker lobby.
	pub lobby: std::option::Option<crate::model::MatchmakerLobbyJoinInfo>,
}
impl JoinLobbyOutput {
	/// A matchmaker lobby.
	pub fn lobby(&self) -> std::option::Option<&crate::model::MatchmakerLobbyJoinInfo> {
		self.lobby.as_ref()
	}
}
impl std::fmt::Debug for JoinLobbyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("JoinLobbyOutput");
		formatter.field("lobby", &self.lobby);
		formatter.finish()
	}
}
/// See [`JoinLobbyOutput`](crate::output::JoinLobbyOutput)
pub mod join_lobby_output {
	/// A builder for [`JoinLobbyOutput`](crate::output::JoinLobbyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby: std::option::Option<crate::model::MatchmakerLobbyJoinInfo>,
	}
	impl Builder {
		/// A matchmaker lobby.
		pub fn lobby(mut self, input: crate::model::MatchmakerLobbyJoinInfo) -> Self {
			self.lobby = Some(input);
			self
		}
		/// A matchmaker lobby.
		pub fn set_lobby(
			mut self,
			input: std::option::Option<crate::model::MatchmakerLobbyJoinInfo>,
		) -> Self {
			self.lobby = input;
			self
		}
		/// Consumes the builder and constructs a [`JoinLobbyOutput`](crate::output::JoinLobbyOutput)
		pub fn build(self) -> crate::output::JoinLobbyOutput {
			crate::output::JoinLobbyOutput { lobby: self.lobby }
		}
	}
}
impl JoinLobbyOutput {
	/// Creates a new builder-style object to manufacture [`JoinLobbyOutput`](crate::output::JoinLobbyOutput)
	pub fn builder() -> crate::output::join_lobby_output::Builder {
		crate::output::join_lobby_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LobbyReadyOutput {}
impl std::fmt::Debug for LobbyReadyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LobbyReadyOutput");
		formatter.finish()
	}
}
/// See [`LobbyReadyOutput`](crate::output::LobbyReadyOutput)
pub mod lobby_ready_output {
	/// A builder for [`LobbyReadyOutput`](crate::output::LobbyReadyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`LobbyReadyOutput`](crate::output::LobbyReadyOutput)
		pub fn build(self) -> crate::output::LobbyReadyOutput {
			crate::output::LobbyReadyOutput {}
		}
	}
}
impl LobbyReadyOutput {
	/// Creates a new builder-style object to manufacture [`LobbyReadyOutput`](crate::output::LobbyReadyOutput)
	pub fn builder() -> crate::output::lobby_ready_output::Builder {
		crate::output::lobby_ready_output::Builder::default()
	}
}
