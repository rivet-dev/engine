// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Game region statistics.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegionStatistics {
	/// Unsigned 64 bit integer.
	pub player_count: std::option::Option<i64>,
	#[allow(missing_docs)] // documentation missing in model
	pub game_modes: std::option::Option<
		std::collections::HashMap<std::string::String, crate::model::GameModeStatistics>,
	>,
}
impl RegionStatistics {
	/// Unsigned 64 bit integer.
	pub fn player_count(&self) -> std::option::Option<i64> {
		self.player_count
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn game_modes(
		&self,
	) -> std::option::Option<
		&std::collections::HashMap<std::string::String, crate::model::GameModeStatistics>,
	> {
		self.game_modes.as_ref()
	}
}
impl std::fmt::Debug for RegionStatistics {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RegionStatistics");
		formatter.field("player_count", &self.player_count);
		formatter.field("game_modes", &self.game_modes);
		formatter.finish()
	}
}
/// See [`RegionStatistics`](crate::model::RegionStatistics)
pub mod region_statistics {
	/// A builder for [`RegionStatistics`](crate::model::RegionStatistics)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) player_count: std::option::Option<i64>,
		pub(crate) game_modes: std::option::Option<
			std::collections::HashMap<std::string::String, crate::model::GameModeStatistics>,
		>,
	}
	impl Builder {
		/// Unsigned 64 bit integer.
		pub fn player_count(mut self, input: i64) -> Self {
			self.player_count = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_player_count(mut self, input: std::option::Option<i64>) -> Self {
			self.player_count = input;
			self
		}
		/// Adds a key-value pair to `game_modes`.
		///
		/// To override the contents of this collection use [`set_game_modes`](Self::set_game_modes).
		///
		pub fn game_modes(
			mut self,
			k: impl Into<std::string::String>,
			v: crate::model::GameModeStatistics,
		) -> Self {
			let mut hash_map = self.game_modes.unwrap_or_default();
			hash_map.insert(k.into(), v);
			self.game_modes = Some(hash_map);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_game_modes(
			mut self,
			input: std::option::Option<
				std::collections::HashMap<std::string::String, crate::model::GameModeStatistics>,
			>,
		) -> Self {
			self.game_modes = input;
			self
		}
		/// Consumes the builder and constructs a [`RegionStatistics`](crate::model::RegionStatistics)
		pub fn build(self) -> crate::model::RegionStatistics {
			crate::model::RegionStatistics {
				player_count: self.player_count,
				game_modes: self.game_modes,
			}
		}
	}
}
impl RegionStatistics {
	/// Creates a new builder-style object to manufacture [`RegionStatistics`](crate::model::RegionStatistics)
	pub fn builder() -> crate::model::region_statistics::Builder {
		crate::model::region_statistics::Builder::default()
	}
}

/// Game mode statistics
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameModeStatistics {
	/// Unsigned 64 bit integer.
	pub player_count: std::option::Option<i64>,
}
impl GameModeStatistics {
	/// Unsigned 64 bit integer.
	pub fn player_count(&self) -> std::option::Option<i64> {
		self.player_count
	}
}
impl std::fmt::Debug for GameModeStatistics {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameModeStatistics");
		formatter.field("player_count", &self.player_count);
		formatter.finish()
	}
}
/// See [`GameModeStatistics`](crate::model::GameModeStatistics)
pub mod game_mode_statistics {
	/// A builder for [`GameModeStatistics`](crate::model::GameModeStatistics)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) player_count: std::option::Option<i64>,
	}
	impl Builder {
		/// Unsigned 64 bit integer.
		pub fn player_count(mut self, input: i64) -> Self {
			self.player_count = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_player_count(mut self, input: std::option::Option<i64>) -> Self {
			self.player_count = input;
			self
		}
		/// Consumes the builder and constructs a [`GameModeStatistics`](crate::model::GameModeStatistics)
		pub fn build(self) -> crate::model::GameModeStatistics {
			crate::model::GameModeStatistics {
				player_count: self.player_count,
			}
		}
	}
}
impl GameModeStatistics {
	/// Creates a new builder-style object to manufacture [`GameModeStatistics`](crate::model::GameModeStatistics)
	pub fn builder() -> crate::model::game_mode_statistics::Builder {
		crate::model::game_mode_statistics::Builder::default()
	}
}

/// Game namespace statistics.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NamespaceStatistics {
	/// Unsigned 64 bit integer.
	pub player_count: std::option::Option<i64>,
	#[allow(missing_docs)] // documentation missing in model
	pub game_modes: std::option::Option<
		std::collections::HashMap<std::string::String, crate::model::GameModeStatistics>,
	>,
}
impl NamespaceStatistics {
	/// Unsigned 64 bit integer.
	pub fn player_count(&self) -> std::option::Option<i64> {
		self.player_count
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn game_modes(
		&self,
	) -> std::option::Option<
		&std::collections::HashMap<std::string::String, crate::model::GameModeStatistics>,
	> {
		self.game_modes.as_ref()
	}
}
impl std::fmt::Debug for NamespaceStatistics {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("NamespaceStatistics");
		formatter.field("player_count", &self.player_count);
		formatter.field("game_modes", &self.game_modes);
		formatter.finish()
	}
}
/// See [`NamespaceStatistics`](crate::model::NamespaceStatistics)
pub mod namespace_statistics {
	/// A builder for [`NamespaceStatistics`](crate::model::NamespaceStatistics)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) player_count: std::option::Option<i64>,
		pub(crate) game_modes: std::option::Option<
			std::collections::HashMap<std::string::String, crate::model::GameModeStatistics>,
		>,
	}
	impl Builder {
		/// Unsigned 64 bit integer.
		pub fn player_count(mut self, input: i64) -> Self {
			self.player_count = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_player_count(mut self, input: std::option::Option<i64>) -> Self {
			self.player_count = input;
			self
		}
		/// Adds a key-value pair to `game_modes`.
		///
		/// To override the contents of this collection use [`set_game_modes`](Self::set_game_modes).
		///
		pub fn game_modes(
			mut self,
			k: impl Into<std::string::String>,
			v: crate::model::GameModeStatistics,
		) -> Self {
			let mut hash_map = self.game_modes.unwrap_or_default();
			hash_map.insert(k.into(), v);
			self.game_modes = Some(hash_map);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_game_modes(
			mut self,
			input: std::option::Option<
				std::collections::HashMap<std::string::String, crate::model::GameModeStatistics>,
			>,
		) -> Self {
			self.game_modes = input;
			self
		}
		/// Consumes the builder and constructs a [`NamespaceStatistics`](crate::model::NamespaceStatistics)
		pub fn build(self) -> crate::model::NamespaceStatistics {
			crate::model::NamespaceStatistics {
				player_count: self.player_count,
				game_modes: self.game_modes,
			}
		}
	}
}
impl NamespaceStatistics {
	/// Creates a new builder-style object to manufacture [`NamespaceStatistics`](crate::model::NamespaceStatistics)
	pub fn builder() -> crate::model::namespace_statistics::Builder {
		crate::model::namespace_statistics::Builder::default()
	}
}

/// A region that the player can connect to.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegionInfo {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub region_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub provider_display_name: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub region_display_name: std::option::Option<std::string::String>,
	/// Geographical coordinates for a location on Planet Earth.
	pub datacenter_coord: std::option::Option<crate::model::Coord>,
	/// Distance available in multiple units.
	pub datacenter_distance_from_client: std::option::Option<crate::model::Distance>,
}
impl RegionInfo {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn region_id(&self) -> std::option::Option<&str> {
		self.region_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn provider_display_name(&self) -> std::option::Option<&str> {
		self.provider_display_name.as_deref()
	}
	/// A universally unique identifier.
	pub fn region_display_name(&self) -> std::option::Option<&str> {
		self.region_display_name.as_deref()
	}
	/// Geographical coordinates for a location on Planet Earth.
	pub fn datacenter_coord(&self) -> std::option::Option<&crate::model::Coord> {
		self.datacenter_coord.as_ref()
	}
	/// Distance available in multiple units.
	pub fn datacenter_distance_from_client(&self) -> std::option::Option<&crate::model::Distance> {
		self.datacenter_distance_from_client.as_ref()
	}
}
impl std::fmt::Debug for RegionInfo {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RegionInfo");
		formatter.field("region_id", &self.region_id);
		formatter.field("provider_display_name", &self.provider_display_name);
		formatter.field("region_display_name", &self.region_display_name);
		formatter.field("datacenter_coord", &self.datacenter_coord);
		formatter.field(
			"datacenter_distance_from_client",
			&self.datacenter_distance_from_client,
		);
		formatter.finish()
	}
}
/// See [`RegionInfo`](crate::model::RegionInfo)
pub mod region_info {
	/// A builder for [`RegionInfo`](crate::model::RegionInfo)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) region_id: std::option::Option<std::string::String>,
		pub(crate) provider_display_name: std::option::Option<std::string::String>,
		pub(crate) region_display_name: std::option::Option<std::string::String>,
		pub(crate) datacenter_coord: std::option::Option<crate::model::Coord>,
		pub(crate) datacenter_distance_from_client: std::option::Option<crate::model::Distance>,
	}
	impl Builder {
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn region_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_region_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.region_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn provider_display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.provider_display_name = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_provider_display_name(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.provider_display_name = input;
			self
		}
		/// A universally unique identifier.
		pub fn region_display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_display_name = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_region_display_name(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.region_display_name = input;
			self
		}
		/// Geographical coordinates for a location on Planet Earth.
		pub fn datacenter_coord(mut self, input: crate::model::Coord) -> Self {
			self.datacenter_coord = Some(input);
			self
		}
		/// Geographical coordinates for a location on Planet Earth.
		pub fn set_datacenter_coord(
			mut self,
			input: std::option::Option<crate::model::Coord>,
		) -> Self {
			self.datacenter_coord = input;
			self
		}
		/// Distance available in multiple units.
		pub fn datacenter_distance_from_client(mut self, input: crate::model::Distance) -> Self {
			self.datacenter_distance_from_client = Some(input);
			self
		}
		/// Distance available in multiple units.
		pub fn set_datacenter_distance_from_client(
			mut self,
			input: std::option::Option<crate::model::Distance>,
		) -> Self {
			self.datacenter_distance_from_client = input;
			self
		}
		/// Consumes the builder and constructs a [`RegionInfo`](crate::model::RegionInfo)
		pub fn build(self) -> crate::model::RegionInfo {
			crate::model::RegionInfo {
				region_id: self.region_id,
				provider_display_name: self.provider_display_name,
				region_display_name: self.region_display_name,
				datacenter_coord: self.datacenter_coord,
				datacenter_distance_from_client: self.datacenter_distance_from_client,
			}
		}
	}
}
impl RegionInfo {
	/// Creates a new builder-style object to manufacture [`RegionInfo`](crate::model::RegionInfo)
	pub fn builder() -> crate::model::region_info::Builder {
		crate::model::region_info::Builder::default()
	}
}

/// Distance available in multiple units.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Distance {
	#[allow(missing_docs)] // documentation missing in model
	pub kilometers: std::option::Option<f64>,
	#[allow(missing_docs)] // documentation missing in model
	pub miles: std::option::Option<f64>,
}
impl Distance {
	#[allow(missing_docs)] // documentation missing in model
	pub fn kilometers(&self) -> std::option::Option<f64> {
		self.kilometers
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn miles(&self) -> std::option::Option<f64> {
		self.miles
	}
}
impl std::fmt::Debug for Distance {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("Distance");
		formatter.field("kilometers", &self.kilometers);
		formatter.field("miles", &self.miles);
		formatter.finish()
	}
}
/// See [`Distance`](crate::model::Distance)
pub mod distance {
	/// A builder for [`Distance`](crate::model::Distance)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) kilometers: std::option::Option<f64>,
		pub(crate) miles: std::option::Option<f64>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn kilometers(mut self, input: f64) -> Self {
			self.kilometers = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_kilometers(mut self, input: std::option::Option<f64>) -> Self {
			self.kilometers = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn miles(mut self, input: f64) -> Self {
			self.miles = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_miles(mut self, input: std::option::Option<f64>) -> Self {
			self.miles = input;
			self
		}
		/// Consumes the builder and constructs a [`Distance`](crate::model::Distance)
		pub fn build(self) -> crate::model::Distance {
			crate::model::Distance {
				kilometers: self.kilometers,
				miles: self.miles,
			}
		}
	}
}
impl Distance {
	/// Creates a new builder-style object to manufacture [`Distance`](crate::model::Distance)
	pub fn builder() -> crate::model::distance::Builder {
		crate::model::distance::Builder::default()
	}
}

/// Geographical coordinates for a location on Planet Earth.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Coord {
	#[allow(missing_docs)] // documentation missing in model
	pub latitude: std::option::Option<f64>,
	#[allow(missing_docs)] // documentation missing in model
	pub longitude: std::option::Option<f64>,
}
impl Coord {
	#[allow(missing_docs)] // documentation missing in model
	pub fn latitude(&self) -> std::option::Option<f64> {
		self.latitude
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn longitude(&self) -> std::option::Option<f64> {
		self.longitude
	}
}
impl std::fmt::Debug for Coord {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("Coord");
		formatter.field("latitude", &self.latitude);
		formatter.field("longitude", &self.longitude);
		formatter.finish()
	}
}
/// See [`Coord`](crate::model::Coord)
pub mod coord {
	/// A builder for [`Coord`](crate::model::Coord)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) latitude: std::option::Option<f64>,
		pub(crate) longitude: std::option::Option<f64>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn latitude(mut self, input: f64) -> Self {
			self.latitude = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_latitude(mut self, input: std::option::Option<f64>) -> Self {
			self.latitude = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn longitude(mut self, input: f64) -> Self {
			self.longitude = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_longitude(mut self, input: std::option::Option<f64>) -> Self {
			self.longitude = input;
			self
		}
		/// Consumes the builder and constructs a [`Coord`](crate::model::Coord)
		pub fn build(self) -> crate::model::Coord {
			crate::model::Coord {
				latitude: self.latitude,
				longitude: self.longitude,
			}
		}
	}
}
impl Coord {
	/// Creates a new builder-style object to manufacture [`Coord`](crate::model::Coord)
	pub fn builder() -> crate::model::coord::Builder {
		crate::model::coord::Builder::default()
	}
}

/// A public lobby in the lobby list.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LobbyInfo {
	#[allow(missing_docs)] // documentation missing in model
	pub region_id: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub game_mode_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub lobby_id: std::option::Option<std::string::String>,
	/// Unsigned 32 bit integer.
	pub max_players_normal: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_players_direct: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_players_party: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub total_player_count: std::option::Option<i32>,
}
impl LobbyInfo {
	#[allow(missing_docs)] // documentation missing in model
	pub fn region_id(&self) -> std::option::Option<&str> {
		self.region_id.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn game_mode_id(&self) -> std::option::Option<&str> {
		self.game_mode_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn lobby_id(&self) -> std::option::Option<&str> {
		self.lobby_id.as_deref()
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_normal(&self) -> std::option::Option<i32> {
		self.max_players_normal
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_direct(&self) -> std::option::Option<i32> {
		self.max_players_direct
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_party(&self) -> std::option::Option<i32> {
		self.max_players_party
	}
	/// Unsigned 32 bit integer.
	pub fn total_player_count(&self) -> std::option::Option<i32> {
		self.total_player_count
	}
}
impl std::fmt::Debug for LobbyInfo {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LobbyInfo");
		formatter.field("region_id", &self.region_id);
		formatter.field("game_mode_id", &self.game_mode_id);
		formatter.field("lobby_id", &self.lobby_id);
		formatter.field("max_players_normal", &self.max_players_normal);
		formatter.field("max_players_direct", &self.max_players_direct);
		formatter.field("max_players_party", &self.max_players_party);
		formatter.field("total_player_count", &self.total_player_count);
		formatter.finish()
	}
}
/// See [`LobbyInfo`](crate::model::LobbyInfo)
pub mod lobby_info {
	/// A builder for [`LobbyInfo`](crate::model::LobbyInfo)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) region_id: std::option::Option<std::string::String>,
		pub(crate) game_mode_id: std::option::Option<std::string::String>,
		pub(crate) lobby_id: std::option::Option<std::string::String>,
		pub(crate) max_players_normal: std::option::Option<i32>,
		pub(crate) max_players_direct: std::option::Option<i32>,
		pub(crate) max_players_party: std::option::Option<i32>,
		pub(crate) total_player_count: std::option::Option<i32>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn region_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_id = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_region_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.region_id = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn game_mode_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_mode_id = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_game_mode_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_mode_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn lobby_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.lobby_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_lobby_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.lobby_id = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_normal(mut self, input: i32) -> Self {
			self.max_players_normal = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_normal(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_normal = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_direct(mut self, input: i32) -> Self {
			self.max_players_direct = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_direct(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_direct = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_party(mut self, input: i32) -> Self {
			self.max_players_party = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_party(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_party = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn total_player_count(mut self, input: i32) -> Self {
			self.total_player_count = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_total_player_count(mut self, input: std::option::Option<i32>) -> Self {
			self.total_player_count = input;
			self
		}
		/// Consumes the builder and constructs a [`LobbyInfo`](crate::model::LobbyInfo)
		pub fn build(self) -> crate::model::LobbyInfo {
			crate::model::LobbyInfo {
				region_id: self.region_id,
				game_mode_id: self.game_mode_id,
				lobby_id: self.lobby_id,
				max_players_normal: self.max_players_normal,
				max_players_direct: self.max_players_direct,
				max_players_party: self.max_players_party,
				total_player_count: self.total_player_count,
			}
		}
	}
}
impl LobbyInfo {
	/// Creates a new builder-style object to manufacture [`LobbyInfo`](crate::model::LobbyInfo)
	pub fn builder() -> crate::model::lobby_info::Builder {
		crate::model::lobby_info::Builder::default()
	}
}

/// A game mode that the player can join.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameModeInfo {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub game_mode_id: std::option::Option<std::string::String>,
}
impl GameModeInfo {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn game_mode_id(&self) -> std::option::Option<&str> {
		self.game_mode_id.as_deref()
	}
}
impl std::fmt::Debug for GameModeInfo {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameModeInfo");
		formatter.field("game_mode_id", &self.game_mode_id);
		formatter.finish()
	}
}
/// See [`GameModeInfo`](crate::model::GameModeInfo)
pub mod game_mode_info {
	/// A builder for [`GameModeInfo`](crate::model::GameModeInfo)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_mode_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn game_mode_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_mode_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_game_mode_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_mode_id = input;
			self
		}
		/// Consumes the builder and constructs a [`GameModeInfo`](crate::model::GameModeInfo)
		pub fn build(self) -> crate::model::GameModeInfo {
			crate::model::GameModeInfo {
				game_mode_id: self.game_mode_id,
			}
		}
	}
}
impl GameModeInfo {
	/// Creates a new builder-style object to manufacture [`GameModeInfo`](crate::model::GameModeInfo)
	pub fn builder() -> crate::model::game_mode_info::Builder {
		crate::model::game_mode_info::Builder::default()
	}
}

/// A matchmaker lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerLobbyJoinInfo {
	/// A universally unique identifier.
	pub lobby_id: std::option::Option<std::string::String>,
	/// A matchmaker lobby region.
	pub region: std::option::Option<crate::model::MatchmakerLobbyJoinInfoRegion>,
	/// A list of lobby ports.
	pub ports: std::option::Option<
		std::collections::HashMap<std::string::String, crate::model::MatchmakerLobbyJoinInfoPort>,
	>,
	/// A matchmaker lobby player.
	pub player: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPlayer>,
}
impl MatchmakerLobbyJoinInfo {
	/// A universally unique identifier.
	pub fn lobby_id(&self) -> std::option::Option<&str> {
		self.lobby_id.as_deref()
	}
	/// A matchmaker lobby region.
	pub fn region(&self) -> std::option::Option<&crate::model::MatchmakerLobbyJoinInfoRegion> {
		self.region.as_ref()
	}
	/// A list of lobby ports.
	pub fn ports(
		&self,
	) -> std::option::Option<
		&std::collections::HashMap<std::string::String, crate::model::MatchmakerLobbyJoinInfoPort>,
	> {
		self.ports.as_ref()
	}
	/// A matchmaker lobby player.
	pub fn player(&self) -> std::option::Option<&crate::model::MatchmakerLobbyJoinInfoPlayer> {
		self.player.as_ref()
	}
}
impl std::fmt::Debug for MatchmakerLobbyJoinInfo {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerLobbyJoinInfo");
		formatter.field("lobby_id", &self.lobby_id);
		formatter.field("region", &self.region);
		formatter.field("ports", &self.ports);
		formatter.field("player", &self.player);
		formatter.finish()
	}
}
/// See [`MatchmakerLobbyJoinInfo`](crate::model::MatchmakerLobbyJoinInfo)
pub mod matchmaker_lobby_join_info {
	/// A builder for [`MatchmakerLobbyJoinInfo`](crate::model::MatchmakerLobbyJoinInfo)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby_id: std::option::Option<std::string::String>,
		pub(crate) region: std::option::Option<crate::model::MatchmakerLobbyJoinInfoRegion>,
		pub(crate) ports: std::option::Option<
			std::collections::HashMap<
				std::string::String,
				crate::model::MatchmakerLobbyJoinInfoPort,
			>,
		>,
		pub(crate) player: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPlayer>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn lobby_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.lobby_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_lobby_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.lobby_id = input;
			self
		}
		/// A matchmaker lobby region.
		pub fn region(mut self, input: crate::model::MatchmakerLobbyJoinInfoRegion) -> Self {
			self.region = Some(input);
			self
		}
		/// A matchmaker lobby region.
		pub fn set_region(
			mut self,
			input: std::option::Option<crate::model::MatchmakerLobbyJoinInfoRegion>,
		) -> Self {
			self.region = input;
			self
		}
		/// Adds a key-value pair to `ports`.
		///
		/// To override the contents of this collection use [`set_ports`](Self::set_ports).
		///
		/// A list of lobby ports.
		pub fn ports(
			mut self,
			k: impl Into<std::string::String>,
			v: crate::model::MatchmakerLobbyJoinInfoPort,
		) -> Self {
			let mut hash_map = self.ports.unwrap_or_default();
			hash_map.insert(k.into(), v);
			self.ports = Some(hash_map);
			self
		}
		/// A list of lobby ports.
		pub fn set_ports(
			mut self,
			input: std::option::Option<
				std::collections::HashMap<
					std::string::String,
					crate::model::MatchmakerLobbyJoinInfoPort,
				>,
			>,
		) -> Self {
			self.ports = input;
			self
		}
		/// A matchmaker lobby player.
		pub fn player(mut self, input: crate::model::MatchmakerLobbyJoinInfoPlayer) -> Self {
			self.player = Some(input);
			self
		}
		/// A matchmaker lobby player.
		pub fn set_player(
			mut self,
			input: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPlayer>,
		) -> Self {
			self.player = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerLobbyJoinInfo`](crate::model::MatchmakerLobbyJoinInfo)
		pub fn build(self) -> crate::model::MatchmakerLobbyJoinInfo {
			crate::model::MatchmakerLobbyJoinInfo {
				lobby_id: self.lobby_id,
				region: self.region,
				ports: self.ports,
				player: self.player,
			}
		}
	}
}
impl MatchmakerLobbyJoinInfo {
	/// Creates a new builder-style object to manufacture [`MatchmakerLobbyJoinInfo`](crate::model::MatchmakerLobbyJoinInfo)
	pub fn builder() -> crate::model::matchmaker_lobby_join_info::Builder {
		crate::model::matchmaker_lobby_join_info::Builder::default()
	}
}

/// A matchmaker lobby player.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerLobbyJoinInfoPlayer {
	/// Pass this token through the socket to the lobby server. The lobby server will validate this token with `rivet.api.matchmaker#PlayerConnected$player_token`.
	pub token: std::option::Option<std::string::String>,
}
impl MatchmakerLobbyJoinInfoPlayer {
	/// Pass this token through the socket to the lobby server. The lobby server will validate this token with `rivet.api.matchmaker#PlayerConnected$player_token`.
	pub fn token(&self) -> std::option::Option<&str> {
		self.token.as_deref()
	}
}
impl std::fmt::Debug for MatchmakerLobbyJoinInfoPlayer {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerLobbyJoinInfoPlayer");
		formatter.field("token", &"*** Sensitive Data Redacted ***");
		formatter.finish()
	}
}
/// See [`MatchmakerLobbyJoinInfoPlayer`](crate::model::MatchmakerLobbyJoinInfoPlayer)
pub mod matchmaker_lobby_join_info_player {
	/// A builder for [`MatchmakerLobbyJoinInfoPlayer`](crate::model::MatchmakerLobbyJoinInfoPlayer)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) token: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Pass this token through the socket to the lobby server. The lobby server will validate this token with `rivet.api.matchmaker#PlayerConnected$player_token`.
		pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
			self.token = Some(input.into());
			self
		}
		/// Pass this token through the socket to the lobby server. The lobby server will validate this token with `rivet.api.matchmaker#PlayerConnected$player_token`.
		pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.token = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerLobbyJoinInfoPlayer`](crate::model::MatchmakerLobbyJoinInfoPlayer)
		pub fn build(self) -> crate::model::MatchmakerLobbyJoinInfoPlayer {
			crate::model::MatchmakerLobbyJoinInfoPlayer { token: self.token }
		}
	}
}
impl MatchmakerLobbyJoinInfoPlayer {
	/// Creates a new builder-style object to manufacture [`MatchmakerLobbyJoinInfoPlayer`](crate::model::MatchmakerLobbyJoinInfoPlayer)
	pub fn builder() -> crate::model::matchmaker_lobby_join_info_player::Builder {
		crate::model::matchmaker_lobby_join_info_player::Builder::default()
	}
}

/// A matchmaker lobby port. Configured by `rivet.cloud#LobbyGroupRuntimeDockerPort$label`.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerLobbyJoinInfoPort {
	/// The host for the given port. Will be null if using a port range.
	pub host: std::option::Option<std::string::String>,
	/// The hostname for the given port.
	pub hostname: std::option::Option<std::string::String>,
	/// The port number for this lobby. Will be null if using a port range.
	pub port: std::option::Option<i32>,
	/// The port range for this lobby.
	pub port_range: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPortRange>,
	/// Wether or not this lobby port uses TLS. You cannot mix a non-TLS and TLS ports.
	pub is_tls: std::option::Option<bool>,
}
impl MatchmakerLobbyJoinInfoPort {
	/// The host for the given port. Will be null if using a port range.
	pub fn host(&self) -> std::option::Option<&str> {
		self.host.as_deref()
	}
	/// The hostname for the given port.
	pub fn hostname(&self) -> std::option::Option<&str> {
		self.hostname.as_deref()
	}
	/// The port number for this lobby. Will be null if using a port range.
	pub fn port(&self) -> std::option::Option<i32> {
		self.port
	}
	/// The port range for this lobby.
	pub fn port_range(
		&self,
	) -> std::option::Option<&crate::model::MatchmakerLobbyJoinInfoPortRange> {
		self.port_range.as_ref()
	}
	/// Wether or not this lobby port uses TLS. You cannot mix a non-TLS and TLS ports.
	pub fn is_tls(&self) -> std::option::Option<bool> {
		self.is_tls
	}
}
impl std::fmt::Debug for MatchmakerLobbyJoinInfoPort {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerLobbyJoinInfoPort");
		formatter.field("host", &self.host);
		formatter.field("hostname", &self.hostname);
		formatter.field("port", &self.port);
		formatter.field("port_range", &self.port_range);
		formatter.field("is_tls", &self.is_tls);
		formatter.finish()
	}
}
/// See [`MatchmakerLobbyJoinInfoPort`](crate::model::MatchmakerLobbyJoinInfoPort)
pub mod matchmaker_lobby_join_info_port {
	/// A builder for [`MatchmakerLobbyJoinInfoPort`](crate::model::MatchmakerLobbyJoinInfoPort)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) host: std::option::Option<std::string::String>,
		pub(crate) hostname: std::option::Option<std::string::String>,
		pub(crate) port: std::option::Option<i32>,
		pub(crate) port_range: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPortRange>,
		pub(crate) is_tls: std::option::Option<bool>,
	}
	impl Builder {
		/// The host for the given port. Will be null if using a port range.
		pub fn host(mut self, input: impl Into<std::string::String>) -> Self {
			self.host = Some(input.into());
			self
		}
		/// The host for the given port. Will be null if using a port range.
		pub fn set_host(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.host = input;
			self
		}
		/// The hostname for the given port.
		pub fn hostname(mut self, input: impl Into<std::string::String>) -> Self {
			self.hostname = Some(input.into());
			self
		}
		/// The hostname for the given port.
		pub fn set_hostname(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.hostname = input;
			self
		}
		/// The port number for this lobby. Will be null if using a port range.
		pub fn port(mut self, input: i32) -> Self {
			self.port = Some(input);
			self
		}
		/// The port number for this lobby. Will be null if using a port range.
		pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
			self.port = input;
			self
		}
		/// The port range for this lobby.
		pub fn port_range(mut self, input: crate::model::MatchmakerLobbyJoinInfoPortRange) -> Self {
			self.port_range = Some(input);
			self
		}
		/// The port range for this lobby.
		pub fn set_port_range(
			mut self,
			input: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPortRange>,
		) -> Self {
			self.port_range = input;
			self
		}
		/// Wether or not this lobby port uses TLS. You cannot mix a non-TLS and TLS ports.
		pub fn is_tls(mut self, input: bool) -> Self {
			self.is_tls = Some(input);
			self
		}
		/// Wether or not this lobby port uses TLS. You cannot mix a non-TLS and TLS ports.
		pub fn set_is_tls(mut self, input: std::option::Option<bool>) -> Self {
			self.is_tls = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerLobbyJoinInfoPort`](crate::model::MatchmakerLobbyJoinInfoPort)
		pub fn build(self) -> crate::model::MatchmakerLobbyJoinInfoPort {
			crate::model::MatchmakerLobbyJoinInfoPort {
				host: self.host,
				hostname: self.hostname,
				port: self.port,
				port_range: self.port_range,
				is_tls: self.is_tls,
			}
		}
	}
}
impl MatchmakerLobbyJoinInfoPort {
	/// Creates a new builder-style object to manufacture [`MatchmakerLobbyJoinInfoPort`](crate::model::MatchmakerLobbyJoinInfoPort)
	pub fn builder() -> crate::model::matchmaker_lobby_join_info_port::Builder {
		crate::model::matchmaker_lobby_join_info_port::Builder::default()
	}
}

/// Inclusive range of ports that can be connected to.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerLobbyJoinInfoPortRange {
	/// Minimum port that can be connected to. Inclusive range.
	pub min: std::option::Option<i32>,
	/// Maximum port that can be connected to. Inclusive range.
	pub max: std::option::Option<i32>,
}
impl MatchmakerLobbyJoinInfoPortRange {
	/// Minimum port that can be connected to. Inclusive range.
	pub fn min(&self) -> std::option::Option<i32> {
		self.min
	}
	/// Maximum port that can be connected to. Inclusive range.
	pub fn max(&self) -> std::option::Option<i32> {
		self.max
	}
}
impl std::fmt::Debug for MatchmakerLobbyJoinInfoPortRange {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerLobbyJoinInfoPortRange");
		formatter.field("min", &self.min);
		formatter.field("max", &self.max);
		formatter.finish()
	}
}
/// See [`MatchmakerLobbyJoinInfoPortRange`](crate::model::MatchmakerLobbyJoinInfoPortRange)
pub mod matchmaker_lobby_join_info_port_range {
	/// A builder for [`MatchmakerLobbyJoinInfoPortRange`](crate::model::MatchmakerLobbyJoinInfoPortRange)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) min: std::option::Option<i32>,
		pub(crate) max: std::option::Option<i32>,
	}
	impl Builder {
		/// Minimum port that can be connected to. Inclusive range.
		pub fn min(mut self, input: i32) -> Self {
			self.min = Some(input);
			self
		}
		/// Minimum port that can be connected to. Inclusive range.
		pub fn set_min(mut self, input: std::option::Option<i32>) -> Self {
			self.min = input;
			self
		}
		/// Maximum port that can be connected to. Inclusive range.
		pub fn max(mut self, input: i32) -> Self {
			self.max = Some(input);
			self
		}
		/// Maximum port that can be connected to. Inclusive range.
		pub fn set_max(mut self, input: std::option::Option<i32>) -> Self {
			self.max = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerLobbyJoinInfoPortRange`](crate::model::MatchmakerLobbyJoinInfoPortRange)
		pub fn build(self) -> crate::model::MatchmakerLobbyJoinInfoPortRange {
			crate::model::MatchmakerLobbyJoinInfoPortRange {
				min: self.min,
				max: self.max,
			}
		}
	}
}
impl MatchmakerLobbyJoinInfoPortRange {
	/// Creates a new builder-style object to manufacture [`MatchmakerLobbyJoinInfoPortRange`](crate::model::MatchmakerLobbyJoinInfoPortRange)
	pub fn builder() -> crate::model::matchmaker_lobby_join_info_port_range::Builder {
		crate::model::matchmaker_lobby_join_info_port_range::Builder::default()
	}
}

/// A matchmaker lobby region.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerLobbyJoinInfoRegion {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub region_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
}
impl MatchmakerLobbyJoinInfoRegion {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn region_id(&self) -> std::option::Option<&str> {
		self.region_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
}
impl std::fmt::Debug for MatchmakerLobbyJoinInfoRegion {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerLobbyJoinInfoRegion");
		formatter.field("region_id", &self.region_id);
		formatter.field("display_name", &self.display_name);
		formatter.finish()
	}
}
/// See [`MatchmakerLobbyJoinInfoRegion`](crate::model::MatchmakerLobbyJoinInfoRegion)
pub mod matchmaker_lobby_join_info_region {
	/// A builder for [`MatchmakerLobbyJoinInfoRegion`](crate::model::MatchmakerLobbyJoinInfoRegion)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) region_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn region_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_region_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.region_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerLobbyJoinInfoRegion`](crate::model::MatchmakerLobbyJoinInfoRegion)
		pub fn build(self) -> crate::model::MatchmakerLobbyJoinInfoRegion {
			crate::model::MatchmakerLobbyJoinInfoRegion {
				region_id: self.region_id,
				display_name: self.display_name,
			}
		}
	}
}
impl MatchmakerLobbyJoinInfoRegion {
	/// Creates a new builder-style object to manufacture [`MatchmakerLobbyJoinInfoRegion`](crate::model::MatchmakerLobbyJoinInfoRegion)
	pub fn builder() -> crate::model::matchmaker_lobby_join_info_region::Builder {
		crate::model::matchmaker_lobby_join_info_region::Builder::default()
	}
}

/// Methods to verify a captcha.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum CaptchaConfig {
	/// hCaptcha configuration.
	Hcaptcha(crate::model::CaptchaConfigHcaptcha),
	/// Cloudflare Turnstile configuration.
	Turnstile(crate::model::CaptchaConfigTurnstile),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl CaptchaConfig {
	/// Tries to convert the enum instance into [`Hcaptcha`](crate::model::CaptchaConfig::Hcaptcha), extracting the inner [`CaptchaConfigHcaptcha`](crate::model::CaptchaConfigHcaptcha).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_hcaptcha(&self) -> std::result::Result<&crate::model::CaptchaConfigHcaptcha, &Self> {
		if let CaptchaConfig::Hcaptcha(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Hcaptcha`](crate::model::CaptchaConfig::Hcaptcha).
	pub fn is_hcaptcha(&self) -> bool {
		self.as_hcaptcha().is_ok()
	}
	/// Tries to convert the enum instance into [`Turnstile`](crate::model::CaptchaConfig::Turnstile), extracting the inner [`CaptchaConfigTurnstile`](crate::model::CaptchaConfigTurnstile).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_turnstile(
		&self,
	) -> std::result::Result<&crate::model::CaptchaConfigTurnstile, &Self> {
		if let CaptchaConfig::Turnstile(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Turnstile`](crate::model::CaptchaConfig::Turnstile).
	pub fn is_turnstile(&self) -> bool {
		self.as_turnstile().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// Cloudflare Turnstile configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CaptchaConfigTurnstile {
	#[allow(missing_docs)] // documentation missing in model
	pub client_response: std::option::Option<std::string::String>,
}
impl CaptchaConfigTurnstile {
	#[allow(missing_docs)] // documentation missing in model
	pub fn client_response(&self) -> std::option::Option<&str> {
		self.client_response.as_deref()
	}
}
impl std::fmt::Debug for CaptchaConfigTurnstile {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CaptchaConfigTurnstile");
		formatter.field("client_response", &self.client_response);
		formatter.finish()
	}
}
/// See [`CaptchaConfigTurnstile`](crate::model::CaptchaConfigTurnstile)
pub mod captcha_config_turnstile {
	/// A builder for [`CaptchaConfigTurnstile`](crate::model::CaptchaConfigTurnstile)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) client_response: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn client_response(mut self, input: impl Into<std::string::String>) -> Self {
			self.client_response = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_client_response(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.client_response = input;
			self
		}
		/// Consumes the builder and constructs a [`CaptchaConfigTurnstile`](crate::model::CaptchaConfigTurnstile)
		pub fn build(self) -> crate::model::CaptchaConfigTurnstile {
			crate::model::CaptchaConfigTurnstile {
				client_response: self.client_response,
			}
		}
	}
}
impl CaptchaConfigTurnstile {
	/// Creates a new builder-style object to manufacture [`CaptchaConfigTurnstile`](crate::model::CaptchaConfigTurnstile)
	pub fn builder() -> crate::model::captcha_config_turnstile::Builder {
		crate::model::captcha_config_turnstile::Builder::default()
	}
}

/// hCaptcha configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CaptchaConfigHcaptcha {
	#[allow(missing_docs)] // documentation missing in model
	pub client_response: std::option::Option<std::string::String>,
}
impl CaptchaConfigHcaptcha {
	#[allow(missing_docs)] // documentation missing in model
	pub fn client_response(&self) -> std::option::Option<&str> {
		self.client_response.as_deref()
	}
}
impl std::fmt::Debug for CaptchaConfigHcaptcha {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CaptchaConfigHcaptcha");
		formatter.field("client_response", &self.client_response);
		formatter.finish()
	}
}
/// See [`CaptchaConfigHcaptcha`](crate::model::CaptchaConfigHcaptcha)
pub mod captcha_config_hcaptcha {
	/// A builder for [`CaptchaConfigHcaptcha`](crate::model::CaptchaConfigHcaptcha)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) client_response: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn client_response(mut self, input: impl Into<std::string::String>) -> Self {
			self.client_response = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_client_response(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.client_response = input;
			self
		}
		/// Consumes the builder and constructs a [`CaptchaConfigHcaptcha`](crate::model::CaptchaConfigHcaptcha)
		pub fn build(self) -> crate::model::CaptchaConfigHcaptcha {
			crate::model::CaptchaConfigHcaptcha {
				client_response: self.client_response,
			}
		}
	}
}
impl CaptchaConfigHcaptcha {
	/// Creates a new builder-style object to manufacture [`CaptchaConfigHcaptcha`](crate::model::CaptchaConfigHcaptcha)
	pub fn builder() -> crate::model::captcha_config_hcaptcha::Builder {
		crate::model::captcha_config_hcaptcha::Builder::default()
	}
}
