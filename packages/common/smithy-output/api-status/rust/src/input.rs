// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use std::fmt::Write;
/// See [`MatchmakerInput`](crate::input::MatchmakerInput)
pub mod matchmaker_input {
	/// A builder for [`MatchmakerInput`](crate::input::MatchmakerInput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) region: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
			self.region = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.region = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerInput`](crate::input::MatchmakerInput)
		pub fn build(
			self,
		) -> std::result::Result<
			crate::input::MatchmakerInput,
			aws_smithy_http::operation::BuildError,
		> {
			Ok(crate::input::MatchmakerInput {
				region: self.region,
			})
		}
	}
}
#[doc(hidden)]
pub type MatchmakerInputOperationOutputAlias = crate::operation::Matchmaker;
#[doc(hidden)]
pub type MatchmakerInputOperationRetryAlias = ();
impl MatchmakerInput {
	/// Consumes the builder and constructs an Operation<[`Matchmaker`](crate::operation::Matchmaker)>
	#[allow(unused_mut)]
	#[allow(clippy::let_and_return)]
	#[allow(clippy::needless_borrow)]
	pub async fn make_operation(
		&self,
		_config: &crate::config::Config,
	) -> std::result::Result<
		aws_smithy_http::operation::Operation<crate::operation::Matchmaker, ()>,
		aws_smithy_http::operation::BuildError,
	> {
		let mut request = {
			fn uri_base(
				_input: &crate::input::MatchmakerInput,
				output: &mut String,
			) -> Result<(), aws_smithy_http::operation::BuildError> {
				write!(output, "/matchmaker").expect("formatting should succeed");
				Ok(())
			}
			fn uri_query(
				_input: &crate::input::MatchmakerInput,
				mut output: &mut String,
			) -> Result<(), aws_smithy_http::operation::BuildError> {
				let mut query = aws_smithy_http::query::Writer::new(&mut output);
				if let Some(inner_1) = &_input.region {
					query.push_kv("region", &aws_smithy_http::query::fmt_string(&inner_1));
				}
				Ok(())
			}
			#[allow(clippy::unnecessary_wraps)]
			fn update_http_builder(
				input: &crate::input::MatchmakerInput,
				_config: &crate::config::Config,
				builder: http::request::Builder,
			) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError>
			{
				let mut _uri = String::new();
				_uri = format!("{}{}", _config.uri.clone(), _uri);
				uri_base(input, &mut _uri)?;
				uri_query(input, &mut _uri)?;
				Ok(builder.method("GET").uri(_uri))
			}
			let mut builder = update_http_builder(&self, _config, http::request::Builder::new())?;
			let mut builder = if let Some(auth) = &_config.auth {
				builder.header(http::header::AUTHORIZATION, auth.clone())
			} else {
				builder
			};
			builder
		};
		let mut properties = aws_smithy_http::property_bag::SharedPropertyBag::new();
		#[allow(clippy::useless_conversion)]
		let body = aws_smithy_http::body::SdkBody::from("");
		let request = request.body(body).expect("should be valid request");
		let mut request = aws_smithy_http::operation::Request::from_parts(request, properties);
		request
			.properties_mut()
			.insert(aws_smithy_http::http_versions::DEFAULT_HTTP_VERSION_LIST.clone());
		let op = aws_smithy_http::operation::Operation::new(
			request,
			crate::operation::Matchmaker::new(),
		)
		.with_metadata(aws_smithy_http::operation::Metadata::new(
			"Matchmaker",
			"StatusService",
		));
		Ok(op)
	}
	/// Creates a new builder-style object to manufacture [`MatchmakerInput`](crate::input::MatchmakerInput)
	pub fn builder() -> crate::input::matchmaker_input::Builder {
		crate::input::matchmaker_input::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerInput {
	#[allow(missing_docs)] // documentation missing in model
	pub region: std::option::Option<std::string::String>,
}
impl MatchmakerInput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn region(&self) -> std::option::Option<&str> {
		self.region.as_deref()
	}
}
impl std::fmt::Debug for MatchmakerInput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerInput");
		formatter.field("region", &self.region);
		formatter.finish()
	}
}
