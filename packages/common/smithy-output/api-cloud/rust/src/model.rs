// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UploadPresignedRequest {
	/// The name of the file to upload. This is the same as the one given in the upload prepare file.
	pub path: std::option::Option<std::string::String>,
	/// The URL of the presigned request for which to upload your file to.
	pub url: std::option::Option<std::string::String>,
}
impl UploadPresignedRequest {
	/// The name of the file to upload. This is the same as the one given in the upload prepare file.
	pub fn path(&self) -> std::option::Option<&str> {
		self.path.as_deref()
	}
	/// The URL of the presigned request for which to upload your file to.
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
}
impl std::fmt::Debug for UploadPresignedRequest {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UploadPresignedRequest");
		formatter.field("path", &self.path);
		formatter.field("url", &self.url);
		formatter.finish()
	}
}
/// See [`UploadPresignedRequest`](crate::model::UploadPresignedRequest)
pub mod upload_presigned_request {
	/// A builder for [`UploadPresignedRequest`](crate::model::UploadPresignedRequest)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) path: std::option::Option<std::string::String>,
		pub(crate) url: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// The name of the file to upload. This is the same as the one given in the upload prepare file.
		pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
			self.path = Some(input.into());
			self
		}
		/// The name of the file to upload. This is the same as the one given in the upload prepare file.
		pub fn set_path(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.path = input;
			self
		}
		/// The URL of the presigned request for which to upload your file to.
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		/// The URL of the presigned request for which to upload your file to.
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// Consumes the builder and constructs a [`UploadPresignedRequest`](crate::model::UploadPresignedRequest)
		pub fn build(self) -> crate::model::UploadPresignedRequest {
			crate::model::UploadPresignedRequest {
				path: self.path,
				url: self.url,
			}
		}
	}
}
impl UploadPresignedRequest {
	/// Creates a new builder-style object to manufacture [`UploadPresignedRequest`](crate::model::UploadPresignedRequest)
	pub fn builder() -> crate::model::upload_presigned_request::Builder {
		crate::model::upload_presigned_request::Builder::default()
	}
}

/// A custom avatar summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CustomAvatarSummary {
	/// A universally unique identifier.
	pub upload_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// The URL of this custom avatar image. Only present if upload is complete.
	pub url: std::option::Option<std::string::String>,
	/// Unsigned 64 bit integer.
	pub content_length: std::option::Option<i64>,
	/// Whether or not this custom avatar has completely been uploaded.
	pub complete: std::option::Option<bool>,
}
impl CustomAvatarSummary {
	/// A universally unique identifier.
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// The URL of this custom avatar image. Only present if upload is complete.
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
	/// Unsigned 64 bit integer.
	pub fn content_length(&self) -> std::option::Option<i64> {
		self.content_length
	}
	/// Whether or not this custom avatar has completely been uploaded.
	pub fn complete(&self) -> std::option::Option<bool> {
		self.complete
	}
}
impl std::fmt::Debug for CustomAvatarSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CustomAvatarSummary");
		formatter.field("upload_id", &self.upload_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("url", &self.url);
		formatter.field("content_length", &self.content_length);
		formatter.field("complete", &self.complete);
		formatter.finish()
	}
}
/// See [`CustomAvatarSummary`](crate::model::CustomAvatarSummary)
pub mod custom_avatar_summary {
	/// A builder for [`CustomAvatarSummary`](crate::model::CustomAvatarSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) url: std::option::Option<std::string::String>,
		pub(crate) content_length: std::option::Option<i64>,
		pub(crate) complete: std::option::Option<bool>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// The URL of this custom avatar image. Only present if upload is complete.
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		/// The URL of this custom avatar image. Only present if upload is complete.
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// Unsigned 64 bit integer.
		pub fn content_length(mut self, input: i64) -> Self {
			self.content_length = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_content_length(mut self, input: std::option::Option<i64>) -> Self {
			self.content_length = input;
			self
		}
		/// Whether or not this custom avatar has completely been uploaded.
		pub fn complete(mut self, input: bool) -> Self {
			self.complete = Some(input);
			self
		}
		/// Whether or not this custom avatar has completely been uploaded.
		pub fn set_complete(mut self, input: std::option::Option<bool>) -> Self {
			self.complete = input;
			self
		}
		/// Consumes the builder and constructs a [`CustomAvatarSummary`](crate::model::CustomAvatarSummary)
		pub fn build(self) -> crate::model::CustomAvatarSummary {
			crate::model::CustomAvatarSummary {
				upload_id: self.upload_id,
				display_name: self.display_name,
				create_ts: self.create_ts,
				url: self.url,
				content_length: self.content_length,
				complete: self.complete,
			}
		}
	}
}
impl CustomAvatarSummary {
	/// Creates a new builder-style object to manufacture [`CustomAvatarSummary`](crate::model::CustomAvatarSummary)
	pub fn builder() -> crate::model::custom_avatar_summary::Builder {
		crate::model::custom_avatar_summary::Builder::default()
	}
}

/// A service performance summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SvcPerf {
	/// The name of the service.
	pub svc_name: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Unsigned 64 bit integer.
	pub duration: std::option::Option<i64>,
	/// A universally unique identifier.
	pub req_id: std::option::Option<std::string::String>,
	/// A list of performance spans.
	pub spans: std::option::Option<std::vec::Vec<crate::model::LogsPerfSpan>>,
	/// A list of performance marks.
	pub marks: std::option::Option<std::vec::Vec<crate::model::LogsPerfMark>>,
}
impl SvcPerf {
	/// The name of the service.
	pub fn svc_name(&self) -> std::option::Option<&str> {
		self.svc_name.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.ts.as_ref()
	}
	/// Unsigned 64 bit integer.
	pub fn duration(&self) -> std::option::Option<i64> {
		self.duration
	}
	/// A universally unique identifier.
	pub fn req_id(&self) -> std::option::Option<&str> {
		self.req_id.as_deref()
	}
	/// A list of performance spans.
	pub fn spans(&self) -> std::option::Option<&[crate::model::LogsPerfSpan]> {
		self.spans.as_deref()
	}
	/// A list of performance marks.
	pub fn marks(&self) -> std::option::Option<&[crate::model::LogsPerfMark]> {
		self.marks.as_deref()
	}
}
impl std::fmt::Debug for SvcPerf {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SvcPerf");
		formatter.field("svc_name", &self.svc_name);
		formatter.field("ts", &self.ts);
		formatter.field("duration", &self.duration);
		formatter.field("req_id", &self.req_id);
		formatter.field("spans", &self.spans);
		formatter.field("marks", &self.marks);
		formatter.finish()
	}
}
/// See [`SvcPerf`](crate::model::SvcPerf)
pub mod svc_perf {
	/// A builder for [`SvcPerf`](crate::model::SvcPerf)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) svc_name: std::option::Option<std::string::String>,
		pub(crate) ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) duration: std::option::Option<i64>,
		pub(crate) req_id: std::option::Option<std::string::String>,
		pub(crate) spans: std::option::Option<std::vec::Vec<crate::model::LogsPerfSpan>>,
		pub(crate) marks: std::option::Option<std::vec::Vec<crate::model::LogsPerfMark>>,
	}
	impl Builder {
		/// The name of the service.
		pub fn svc_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.svc_name = Some(input.into());
			self
		}
		/// The name of the service.
		pub fn set_svc_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.svc_name = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_ts(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
			self.ts = input;
			self
		}
		/// Unsigned 64 bit integer.
		pub fn duration(mut self, input: i64) -> Self {
			self.duration = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_duration(mut self, input: std::option::Option<i64>) -> Self {
			self.duration = input;
			self
		}
		/// A universally unique identifier.
		pub fn req_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.req_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_req_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.req_id = input;
			self
		}
		/// Appends an item to `spans`.
		///
		/// To override the contents of this collection use [`set_spans`](Self::set_spans).
		///
		/// A list of performance spans.
		pub fn spans(mut self, input: crate::model::LogsPerfSpan) -> Self {
			let mut v = self.spans.unwrap_or_default();
			v.push(input);
			self.spans = Some(v);
			self
		}
		/// A list of performance spans.
		pub fn set_spans(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::LogsPerfSpan>>,
		) -> Self {
			self.spans = input;
			self
		}
		/// Appends an item to `marks`.
		///
		/// To override the contents of this collection use [`set_marks`](Self::set_marks).
		///
		/// A list of performance marks.
		pub fn marks(mut self, input: crate::model::LogsPerfMark) -> Self {
			let mut v = self.marks.unwrap_or_default();
			v.push(input);
			self.marks = Some(v);
			self
		}
		/// A list of performance marks.
		pub fn set_marks(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::LogsPerfMark>>,
		) -> Self {
			self.marks = input;
			self
		}
		/// Consumes the builder and constructs a [`SvcPerf`](crate::model::SvcPerf)
		pub fn build(self) -> crate::model::SvcPerf {
			crate::model::SvcPerf {
				svc_name: self.svc_name,
				ts: self.ts,
				duration: self.duration,
				req_id: self.req_id,
				spans: self.spans,
				marks: self.marks,
			}
		}
	}
}
impl SvcPerf {
	/// Creates a new builder-style object to manufacture [`SvcPerf`](crate::model::SvcPerf)
	pub fn builder() -> crate::model::svc_perf::Builder {
		crate::model::svc_perf::Builder::default()
	}
}

/// A performance mark.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LogsPerfMark {
	/// The label given to this performance mark.
	pub label: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub ts: std::option::Option<aws_smithy_types::DateTime>,
	/// A universally unique identifier.
	pub ray_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub req_id: std::option::Option<std::string::String>,
}
impl LogsPerfMark {
	/// The label given to this performance mark.
	pub fn label(&self) -> std::option::Option<&str> {
		self.label.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.ts.as_ref()
	}
	/// A universally unique identifier.
	pub fn ray_id(&self) -> std::option::Option<&str> {
		self.ray_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn req_id(&self) -> std::option::Option<&str> {
		self.req_id.as_deref()
	}
}
impl std::fmt::Debug for LogsPerfMark {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LogsPerfMark");
		formatter.field("label", &self.label);
		formatter.field("ts", &self.ts);
		formatter.field("ray_id", &self.ray_id);
		formatter.field("req_id", &self.req_id);
		formatter.finish()
	}
}
/// See [`LogsPerfMark`](crate::model::LogsPerfMark)
pub mod logs_perf_mark {
	/// A builder for [`LogsPerfMark`](crate::model::LogsPerfMark)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) label: std::option::Option<std::string::String>,
		pub(crate) ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) ray_id: std::option::Option<std::string::String>,
		pub(crate) req_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// The label given to this performance mark.
		pub fn label(mut self, input: impl Into<std::string::String>) -> Self {
			self.label = Some(input.into());
			self
		}
		/// The label given to this performance mark.
		pub fn set_label(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.label = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_ts(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
			self.ts = input;
			self
		}
		/// A universally unique identifier.
		pub fn ray_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.ray_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_ray_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.ray_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn req_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.req_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_req_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.req_id = input;
			self
		}
		/// Consumes the builder and constructs a [`LogsPerfMark`](crate::model::LogsPerfMark)
		pub fn build(self) -> crate::model::LogsPerfMark {
			crate::model::LogsPerfMark {
				label: self.label,
				ts: self.ts,
				ray_id: self.ray_id,
				req_id: self.req_id,
			}
		}
	}
}
impl LogsPerfMark {
	/// Creates a new builder-style object to manufacture [`LogsPerfMark`](crate::model::LogsPerfMark)
	pub fn builder() -> crate::model::logs_perf_mark::Builder {
		crate::model::logs_perf_mark::Builder::default()
	}
}

/// A performance span.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LogsPerfSpan {
	/// The label given to this performance span.
	pub label: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub start_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// RFC3339 timestamp.
	pub finish_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// A universally unique identifier.
	pub req_id: std::option::Option<std::string::String>,
}
impl LogsPerfSpan {
	/// The label given to this performance span.
	pub fn label(&self) -> std::option::Option<&str> {
		self.label.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn start_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.start_ts.as_ref()
	}
	/// RFC3339 timestamp.
	pub fn finish_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.finish_ts.as_ref()
	}
	/// A universally unique identifier.
	pub fn req_id(&self) -> std::option::Option<&str> {
		self.req_id.as_deref()
	}
}
impl std::fmt::Debug for LogsPerfSpan {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LogsPerfSpan");
		formatter.field("label", &self.label);
		formatter.field("start_ts", &self.start_ts);
		formatter.field("finish_ts", &self.finish_ts);
		formatter.field("req_id", &self.req_id);
		formatter.finish()
	}
}
/// See [`LogsPerfSpan`](crate::model::LogsPerfSpan)
pub mod logs_perf_span {
	/// A builder for [`LogsPerfSpan`](crate::model::LogsPerfSpan)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) label: std::option::Option<std::string::String>,
		pub(crate) start_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) finish_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) req_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// The label given to this performance span.
		pub fn label(mut self, input: impl Into<std::string::String>) -> Self {
			self.label = Some(input.into());
			self
		}
		/// The label given to this performance span.
		pub fn set_label(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.label = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn start_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.start_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_start_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.start_ts = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn finish_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.finish_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_finish_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.finish_ts = input;
			self
		}
		/// A universally unique identifier.
		pub fn req_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.req_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_req_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.req_id = input;
			self
		}
		/// Consumes the builder and constructs a [`LogsPerfSpan`](crate::model::LogsPerfSpan)
		pub fn build(self) -> crate::model::LogsPerfSpan {
			crate::model::LogsPerfSpan {
				label: self.label,
				start_ts: self.start_ts,
				finish_ts: self.finish_ts,
				req_id: self.req_id,
			}
		}
	}
}
impl LogsPerfSpan {
	/// Creates a new builder-style object to manufacture [`LogsPerfSpan`](crate::model::LogsPerfSpan)
	pub fn builder() -> crate::model::logs_perf_span::Builder {
		crate::model::logs_perf_span::Builder::default()
	}
}

/// An error given by failed content validation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidationError {
	/// A list of strings denoting the origin of a validation error.
	pub path: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ValidationError {
	/// A list of strings denoting the origin of a validation error.
	pub fn path(&self) -> std::option::Option<&[std::string::String]> {
		self.path.as_deref()
	}
}
impl std::fmt::Debug for ValidationError {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidationError");
		formatter.field("path", &self.path);
		formatter.finish()
	}
}
/// See [`ValidationError`](crate::model::ValidationError)
pub mod validation_error {
	/// A builder for [`ValidationError`](crate::model::ValidationError)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) path: std::option::Option<std::vec::Vec<std::string::String>>,
	}
	impl Builder {
		/// Appends an item to `path`.
		///
		/// To override the contents of this collection use [`set_path`](Self::set_path).
		///
		/// A list of strings denoting the origin of a validation error.
		pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.path.unwrap_or_default();
			v.push(input.into());
			self.path = Some(v);
			self
		}
		/// A list of strings denoting the origin of a validation error.
		pub fn set_path(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.path = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidationError`](crate::model::ValidationError)
		pub fn build(self) -> crate::model::ValidationError {
			crate::model::ValidationError { path: self.path }
		}
	}
}
impl ValidationError {
	/// Creates a new builder-style object to manufacture [`ValidationError`](crate::model::ValidationError)
	pub fn builder() -> crate::model::validation_error::Builder {
		crate::model::validation_error::Builder::default()
	}
}

/// A group's billing invoice.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GroupBillingInvoice {
	/// RFC3339 timestamp.
	pub issuing_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// A URL to this invoice's PDF document.
	pub file_url: std::option::Option<std::string::String>,
}
impl GroupBillingInvoice {
	/// RFC3339 timestamp.
	pub fn issuing_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.issuing_ts.as_ref()
	}
	/// A URL to this invoice's PDF document.
	pub fn file_url(&self) -> std::option::Option<&str> {
		self.file_url.as_deref()
	}
}
impl std::fmt::Debug for GroupBillingInvoice {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GroupBillingInvoice");
		formatter.field("issuing_ts", &self.issuing_ts);
		formatter.field("file_url", &self.file_url);
		formatter.finish()
	}
}
/// See [`GroupBillingInvoice`](crate::model::GroupBillingInvoice)
pub mod group_billing_invoice {
	/// A builder for [`GroupBillingInvoice`](crate::model::GroupBillingInvoice)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) issuing_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) file_url: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// RFC3339 timestamp.
		pub fn issuing_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.issuing_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_issuing_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.issuing_ts = input;
			self
		}
		/// A URL to this invoice's PDF document.
		pub fn file_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.file_url = Some(input.into());
			self
		}
		/// A URL to this invoice's PDF document.
		pub fn set_file_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.file_url = input;
			self
		}
		/// Consumes the builder and constructs a [`GroupBillingInvoice`](crate::model::GroupBillingInvoice)
		pub fn build(self) -> crate::model::GroupBillingInvoice {
			crate::model::GroupBillingInvoice {
				issuing_ts: self.issuing_ts,
				file_url: self.file_url,
			}
		}
	}
}
impl GroupBillingInvoice {
	/// Creates a new builder-style object to manufacture [`GroupBillingInvoice`](crate::model::GroupBillingInvoice)
	pub fn builder() -> crate::model::group_billing_invoice::Builder {
		crate::model::group_billing_invoice::Builder::default()
	}
}

/// The status of a developer group.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum GroupStatus {
	#[allow(missing_docs)] // documentation missing in model
	Active,
	#[allow(missing_docs)] // documentation missing in model
	PaymentFailed,
	#[allow(missing_docs)] // documentation missing in model
	SetupIncomplete,
	#[allow(missing_docs)] // documentation missing in model
	SpendingLimitReached,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for GroupStatus {
	fn from(s: &str) -> Self {
		match s {
			"active" => GroupStatus::Active,
			"payment_failed" => GroupStatus::PaymentFailed,
			"setup_incomplete" => GroupStatus::SetupIncomplete,
			"spending_limit_reached" => GroupStatus::SpendingLimitReached,
			other => GroupStatus::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for GroupStatus {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(GroupStatus::from(s))
	}
}
impl GroupStatus {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			GroupStatus::Active => "active",
			GroupStatus::PaymentFailed => "payment_failed",
			GroupStatus::SetupIncomplete => "setup_incomplete",
			GroupStatus::SpendingLimitReached => "spending_limit_reached",
			GroupStatus::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&[
			"active",
			"payment_failed",
			"setup_incomplete",
			"spending_limit_reached",
		]
	}
}
impl AsRef<str> for GroupStatus {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// A region server tier.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegionTier {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub tier_name_id: std::option::Option<std::string::String>,
	/// Together with the denominator, denotes the portion of the CPU a given server uses.
	pub rivet_cores_numerator: std::option::Option<i32>,
	/// Together with the numerator, denotes the portion of the CPU a given server uses.
	pub rivet_cores_denominator: std::option::Option<i32>,
	/// CPU frequency (MHz).
	pub cpu: std::option::Option<i64>,
	/// Allocated memory (MB).
	pub memory: std::option::Option<i64>,
	/// Allocated disk space (MB).
	pub disk: std::option::Option<i64>,
	/// Internet bandwidth (MB).
	pub bandwidth: std::option::Option<i64>,
}
impl RegionTier {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn tier_name_id(&self) -> std::option::Option<&str> {
		self.tier_name_id.as_deref()
	}
	/// Together with the denominator, denotes the portion of the CPU a given server uses.
	pub fn rivet_cores_numerator(&self) -> std::option::Option<i32> {
		self.rivet_cores_numerator
	}
	/// Together with the numerator, denotes the portion of the CPU a given server uses.
	pub fn rivet_cores_denominator(&self) -> std::option::Option<i32> {
		self.rivet_cores_denominator
	}
	/// CPU frequency (MHz).
	pub fn cpu(&self) -> std::option::Option<i64> {
		self.cpu
	}
	/// Allocated memory (MB).
	pub fn memory(&self) -> std::option::Option<i64> {
		self.memory
	}
	/// Allocated disk space (MB).
	pub fn disk(&self) -> std::option::Option<i64> {
		self.disk
	}
	/// Internet bandwidth (MB).
	pub fn bandwidth(&self) -> std::option::Option<i64> {
		self.bandwidth
	}
}
impl std::fmt::Debug for RegionTier {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RegionTier");
		formatter.field("tier_name_id", &self.tier_name_id);
		formatter.field("rivet_cores_numerator", &self.rivet_cores_numerator);
		formatter.field("rivet_cores_denominator", &self.rivet_cores_denominator);
		formatter.field("cpu", &self.cpu);
		formatter.field("memory", &self.memory);
		formatter.field("disk", &self.disk);
		formatter.field("bandwidth", &self.bandwidth);
		formatter.finish()
	}
}
/// See [`RegionTier`](crate::model::RegionTier)
pub mod region_tier {
	/// A builder for [`RegionTier`](crate::model::RegionTier)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) tier_name_id: std::option::Option<std::string::String>,
		pub(crate) rivet_cores_numerator: std::option::Option<i32>,
		pub(crate) rivet_cores_denominator: std::option::Option<i32>,
		pub(crate) cpu: std::option::Option<i64>,
		pub(crate) memory: std::option::Option<i64>,
		pub(crate) disk: std::option::Option<i64>,
		pub(crate) bandwidth: std::option::Option<i64>,
	}
	impl Builder {
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn tier_name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.tier_name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_tier_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.tier_name_id = input;
			self
		}
		/// Together with the denominator, denotes the portion of the CPU a given server uses.
		pub fn rivet_cores_numerator(mut self, input: i32) -> Self {
			self.rivet_cores_numerator = Some(input);
			self
		}
		/// Together with the denominator, denotes the portion of the CPU a given server uses.
		pub fn set_rivet_cores_numerator(mut self, input: std::option::Option<i32>) -> Self {
			self.rivet_cores_numerator = input;
			self
		}
		/// Together with the numerator, denotes the portion of the CPU a given server uses.
		pub fn rivet_cores_denominator(mut self, input: i32) -> Self {
			self.rivet_cores_denominator = Some(input);
			self
		}
		/// Together with the numerator, denotes the portion of the CPU a given server uses.
		pub fn set_rivet_cores_denominator(mut self, input: std::option::Option<i32>) -> Self {
			self.rivet_cores_denominator = input;
			self
		}
		/// CPU frequency (MHz).
		pub fn cpu(mut self, input: i64) -> Self {
			self.cpu = Some(input);
			self
		}
		/// CPU frequency (MHz).
		pub fn set_cpu(mut self, input: std::option::Option<i64>) -> Self {
			self.cpu = input;
			self
		}
		/// Allocated memory (MB).
		pub fn memory(mut self, input: i64) -> Self {
			self.memory = Some(input);
			self
		}
		/// Allocated memory (MB).
		pub fn set_memory(mut self, input: std::option::Option<i64>) -> Self {
			self.memory = input;
			self
		}
		/// Allocated disk space (MB).
		pub fn disk(mut self, input: i64) -> Self {
			self.disk = Some(input);
			self
		}
		/// Allocated disk space (MB).
		pub fn set_disk(mut self, input: std::option::Option<i64>) -> Self {
			self.disk = input;
			self
		}
		/// Internet bandwidth (MB).
		pub fn bandwidth(mut self, input: i64) -> Self {
			self.bandwidth = Some(input);
			self
		}
		/// Internet bandwidth (MB).
		pub fn set_bandwidth(mut self, input: std::option::Option<i64>) -> Self {
			self.bandwidth = input;
			self
		}
		/// Consumes the builder and constructs a [`RegionTier`](crate::model::RegionTier)
		pub fn build(self) -> crate::model::RegionTier {
			crate::model::RegionTier {
				tier_name_id: self.tier_name_id,
				rivet_cores_numerator: self.rivet_cores_numerator,
				rivet_cores_denominator: self.rivet_cores_denominator,
				cpu: self.cpu,
				memory: self.memory,
				disk: self.disk,
				bandwidth: self.bandwidth,
			}
		}
	}
}
impl RegionTier {
	/// Creates a new builder-style object to manufacture [`RegionTier`](crate::model::RegionTier)
	pub fn builder() -> crate::model::region_tier::Builder {
		crate::model::region_tier::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum LogStream {
	/// Stderrs tream from the given process.
	StdErr,
	/// Stdout stream from the given processs.
	StdOut,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for LogStream {
	fn from(s: &str) -> Self {
		match s {
			"std_err" => LogStream::StdErr,
			"std_out" => LogStream::StdOut,
			other => LogStream::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for LogStream {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(LogStream::from(s))
	}
}
impl LogStream {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			LogStream::StdErr => "std_err",
			LogStream::StdOut => "std_out",
			LogStream::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["std_err", "std_out"]
	}
}
impl AsRef<str> for LogStream {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// Provided by watchable endpoints used in blocking loops.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct WatchResponse {
	/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
	pub index: std::option::Option<std::string::String>,
}
impl WatchResponse {
	/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
	pub fn index(&self) -> std::option::Option<&str> {
		self.index.as_deref()
	}
}
impl std::fmt::Debug for WatchResponse {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("WatchResponse");
		formatter.field("index", &self.index);
		formatter.finish()
	}
}
/// See [`WatchResponse`](crate::model::WatchResponse)
pub mod watch_response {
	/// A builder for [`WatchResponse`](crate::model::WatchResponse)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) index: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
		pub fn index(mut self, input: impl Into<std::string::String>) -> Self {
			self.index = Some(input.into());
			self
		}
		/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
		pub fn set_index(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.index = input;
			self
		}
		/// Consumes the builder and constructs a [`WatchResponse`](crate::model::WatchResponse)
		pub fn build(self) -> crate::model::WatchResponse {
			crate::model::WatchResponse { index: self.index }
		}
	}
}
impl WatchResponse {
	/// Creates a new builder-style object to manufacture [`WatchResponse`](crate::model::WatchResponse)
	pub fn builder() -> crate::model::watch_response::Builder {
		crate::model::watch_response::Builder::default()
	}
}

/// A file being prepared to upload.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UploadPrepareFile {
	/// The path/filename of the file.
	pub path: std::option::Option<std::string::String>,
	/// The MIME type of the file.
	pub content_type: std::option::Option<std::string::String>,
	/// Unsigned 64 bit integer.
	pub content_length: std::option::Option<i64>,
}
impl UploadPrepareFile {
	/// The path/filename of the file.
	pub fn path(&self) -> std::option::Option<&str> {
		self.path.as_deref()
	}
	/// The MIME type of the file.
	pub fn content_type(&self) -> std::option::Option<&str> {
		self.content_type.as_deref()
	}
	/// Unsigned 64 bit integer.
	pub fn content_length(&self) -> std::option::Option<i64> {
		self.content_length
	}
}
impl std::fmt::Debug for UploadPrepareFile {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UploadPrepareFile");
		formatter.field("path", &self.path);
		formatter.field("content_type", &self.content_type);
		formatter.field("content_length", &self.content_length);
		formatter.finish()
	}
}
/// See [`UploadPrepareFile`](crate::model::UploadPrepareFile)
pub mod upload_prepare_file {
	/// A builder for [`UploadPrepareFile`](crate::model::UploadPrepareFile)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) path: std::option::Option<std::string::String>,
		pub(crate) content_type: std::option::Option<std::string::String>,
		pub(crate) content_length: std::option::Option<i64>,
	}
	impl Builder {
		/// The path/filename of the file.
		pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
			self.path = Some(input.into());
			self
		}
		/// The path/filename of the file.
		pub fn set_path(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.path = input;
			self
		}
		/// The MIME type of the file.
		pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
			self.content_type = Some(input.into());
			self
		}
		/// The MIME type of the file.
		pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.content_type = input;
			self
		}
		/// Unsigned 64 bit integer.
		pub fn content_length(mut self, input: i64) -> Self {
			self.content_length = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_content_length(mut self, input: std::option::Option<i64>) -> Self {
			self.content_length = input;
			self
		}
		/// Consumes the builder and constructs a [`UploadPrepareFile`](crate::model::UploadPrepareFile)
		pub fn build(self) -> crate::model::UploadPrepareFile {
			crate::model::UploadPrepareFile {
				path: self.path,
				content_type: self.content_type,
				content_length: self.content_length,
			}
		}
	}
}
impl UploadPrepareFile {
	/// Creates a new builder-style object to manufacture [`UploadPrepareFile`](crate::model::UploadPrepareFile)
	pub fn builder() -> crate::model::upload_prepare_file::Builder {
		crate::model::upload_prepare_file::Builder::default()
	}
}

/// A CDN site summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CdnSiteSummary {
	/// A universally unique identifier.
	pub site_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub upload_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Unsigned 64 bit integer.
	pub content_length: std::option::Option<i64>,
	/// Whether or not this site has completely been uploaded.
	pub complete: std::option::Option<bool>,
}
impl CdnSiteSummary {
	/// A universally unique identifier.
	pub fn site_id(&self) -> std::option::Option<&str> {
		self.site_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// Unsigned 64 bit integer.
	pub fn content_length(&self) -> std::option::Option<i64> {
		self.content_length
	}
	/// Whether or not this site has completely been uploaded.
	pub fn complete(&self) -> std::option::Option<bool> {
		self.complete
	}
}
impl std::fmt::Debug for CdnSiteSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CdnSiteSummary");
		formatter.field("site_id", &self.site_id);
		formatter.field("upload_id", &self.upload_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("content_length", &self.content_length);
		formatter.field("complete", &self.complete);
		formatter.finish()
	}
}
/// See [`CdnSiteSummary`](crate::model::CdnSiteSummary)
pub mod cdn_site_summary {
	/// A builder for [`CdnSiteSummary`](crate::model::CdnSiteSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) site_id: std::option::Option<std::string::String>,
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) content_length: std::option::Option<i64>,
		pub(crate) complete: std::option::Option<bool>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn site_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.site_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_site_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.site_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// Unsigned 64 bit integer.
		pub fn content_length(mut self, input: i64) -> Self {
			self.content_length = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_content_length(mut self, input: std::option::Option<i64>) -> Self {
			self.content_length = input;
			self
		}
		/// Whether or not this site has completely been uploaded.
		pub fn complete(mut self, input: bool) -> Self {
			self.complete = Some(input);
			self
		}
		/// Whether or not this site has completely been uploaded.
		pub fn set_complete(mut self, input: std::option::Option<bool>) -> Self {
			self.complete = input;
			self
		}
		/// Consumes the builder and constructs a [`CdnSiteSummary`](crate::model::CdnSiteSummary)
		pub fn build(self) -> crate::model::CdnSiteSummary {
			crate::model::CdnSiteSummary {
				site_id: self.site_id,
				upload_id: self.upload_id,
				display_name: self.display_name,
				create_ts: self.create_ts,
				content_length: self.content_length,
				complete: self.complete,
			}
		}
	}
}
impl CdnSiteSummary {
	/// Creates a new builder-style object to manufacture [`CdnSiteSummary`](crate::model::CdnSiteSummary)
	pub fn builder() -> crate::model::cdn_site_summary::Builder {
		crate::model::cdn_site_summary::Builder::default()
	}
}

/// A build summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BuildSummary {
	/// A universally unique identifier.
	pub build_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub upload_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Unsigned 64 bit integer.
	pub content_length: std::option::Option<i64>,
	/// Whether or not this build has completely been uploaded.
	pub complete: std::option::Option<bool>,
}
impl BuildSummary {
	/// A universally unique identifier.
	pub fn build_id(&self) -> std::option::Option<&str> {
		self.build_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// Unsigned 64 bit integer.
	pub fn content_length(&self) -> std::option::Option<i64> {
		self.content_length
	}
	/// Whether or not this build has completely been uploaded.
	pub fn complete(&self) -> std::option::Option<bool> {
		self.complete
	}
}
impl std::fmt::Debug for BuildSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("BuildSummary");
		formatter.field("build_id", &self.build_id);
		formatter.field("upload_id", &self.upload_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("content_length", &self.content_length);
		formatter.field("complete", &self.complete);
		formatter.finish()
	}
}
/// See [`BuildSummary`](crate::model::BuildSummary)
pub mod build_summary {
	/// A builder for [`BuildSummary`](crate::model::BuildSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) build_id: std::option::Option<std::string::String>,
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) content_length: std::option::Option<i64>,
		pub(crate) complete: std::option::Option<bool>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn build_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.build_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_build_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.build_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// Unsigned 64 bit integer.
		pub fn content_length(mut self, input: i64) -> Self {
			self.content_length = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_content_length(mut self, input: std::option::Option<i64>) -> Self {
			self.content_length = input;
			self
		}
		/// Whether or not this build has completely been uploaded.
		pub fn complete(mut self, input: bool) -> Self {
			self.complete = Some(input);
			self
		}
		/// Whether or not this build has completely been uploaded.
		pub fn set_complete(mut self, input: std::option::Option<bool>) -> Self {
			self.complete = input;
			self
		}
		/// Consumes the builder and constructs a [`BuildSummary`](crate::model::BuildSummary)
		pub fn build(self) -> crate::model::BuildSummary {
			crate::model::BuildSummary {
				build_id: self.build_id,
				upload_id: self.upload_id,
				display_name: self.display_name,
				create_ts: self.create_ts,
				content_length: self.content_length,
				complete: self.complete,
			}
		}
	}
}
impl BuildSummary {
	/// Creates a new builder-style object to manufacture [`BuildSummary`](crate::model::BuildSummary)
	pub fn builder() -> crate::model::build_summary::Builder {
		crate::model::build_summary::Builder::default()
	}
}

/// Metrics relating to a job service.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SvcMetrics {
	/// The job name.
	pub job: std::option::Option<std::string::String>,
	/// CPU metrics.
	pub cpu: std::option::Option<std::vec::Vec<f32>>,
	/// Memory metrics.
	pub memory: std::option::Option<std::vec::Vec<i64>>,
	/// Peak memory metrics.
	pub memory_max: std::option::Option<std::vec::Vec<i64>>,
	/// Total allocated memory (MB).
	pub allocated_memory: std::option::Option<i64>,
}
impl SvcMetrics {
	/// The job name.
	pub fn job(&self) -> std::option::Option<&str> {
		self.job.as_deref()
	}
	/// CPU metrics.
	pub fn cpu(&self) -> std::option::Option<&[f32]> {
		self.cpu.as_deref()
	}
	/// Memory metrics.
	pub fn memory(&self) -> std::option::Option<&[i64]> {
		self.memory.as_deref()
	}
	/// Peak memory metrics.
	pub fn memory_max(&self) -> std::option::Option<&[i64]> {
		self.memory_max.as_deref()
	}
	/// Total allocated memory (MB).
	pub fn allocated_memory(&self) -> std::option::Option<i64> {
		self.allocated_memory
	}
}
impl std::fmt::Debug for SvcMetrics {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SvcMetrics");
		formatter.field("job", &self.job);
		formatter.field("cpu", &self.cpu);
		formatter.field("memory", &self.memory);
		formatter.field("memory_max", &self.memory_max);
		formatter.field("allocated_memory", &self.allocated_memory);
		formatter.finish()
	}
}
/// See [`SvcMetrics`](crate::model::SvcMetrics)
pub mod svc_metrics {
	/// A builder for [`SvcMetrics`](crate::model::SvcMetrics)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) job: std::option::Option<std::string::String>,
		pub(crate) cpu: std::option::Option<std::vec::Vec<f32>>,
		pub(crate) memory: std::option::Option<std::vec::Vec<i64>>,
		pub(crate) memory_max: std::option::Option<std::vec::Vec<i64>>,
		pub(crate) allocated_memory: std::option::Option<i64>,
	}
	impl Builder {
		/// The job name.
		pub fn job(mut self, input: impl Into<std::string::String>) -> Self {
			self.job = Some(input.into());
			self
		}
		/// The job name.
		pub fn set_job(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.job = input;
			self
		}
		/// Appends an item to `cpu`.
		///
		/// To override the contents of this collection use [`set_cpu`](Self::set_cpu).
		///
		/// CPU metrics.
		pub fn cpu(mut self, input: f32) -> Self {
			let mut v = self.cpu.unwrap_or_default();
			v.push(input);
			self.cpu = Some(v);
			self
		}
		/// CPU metrics.
		pub fn set_cpu(mut self, input: std::option::Option<std::vec::Vec<f32>>) -> Self {
			self.cpu = input;
			self
		}
		/// Appends an item to `memory`.
		///
		/// To override the contents of this collection use [`set_memory`](Self::set_memory).
		///
		/// Memory metrics.
		pub fn memory(mut self, input: i64) -> Self {
			let mut v = self.memory.unwrap_or_default();
			v.push(input);
			self.memory = Some(v);
			self
		}
		/// Memory metrics.
		pub fn set_memory(mut self, input: std::option::Option<std::vec::Vec<i64>>) -> Self {
			self.memory = input;
			self
		}
		/// Appends an item to `memory_max`.
		///
		/// To override the contents of this collection use [`set_memory_max`](Self::set_memory_max).
		///
		/// Peak memory metrics.
		pub fn memory_max(mut self, input: i64) -> Self {
			let mut v = self.memory_max.unwrap_or_default();
			v.push(input);
			self.memory_max = Some(v);
			self
		}
		/// Peak memory metrics.
		pub fn set_memory_max(mut self, input: std::option::Option<std::vec::Vec<i64>>) -> Self {
			self.memory_max = input;
			self
		}
		/// Total allocated memory (MB).
		pub fn allocated_memory(mut self, input: i64) -> Self {
			self.allocated_memory = Some(input);
			self
		}
		/// Total allocated memory (MB).
		pub fn set_allocated_memory(mut self, input: std::option::Option<i64>) -> Self {
			self.allocated_memory = input;
			self
		}
		/// Consumes the builder and constructs a [`SvcMetrics`](crate::model::SvcMetrics)
		pub fn build(self) -> crate::model::SvcMetrics {
			crate::model::SvcMetrics {
				job: self.job,
				cpu: self.cpu,
				memory: self.memory,
				memory_max: self.memory_max,
				allocated_memory: self.allocated_memory,
			}
		}
	}
}
impl SvcMetrics {
	/// Creates a new builder-style object to manufacture [`SvcMetrics`](crate::model::SvcMetrics)
	pub fn builder() -> crate::model::svc_metrics::Builder {
		crate::model::svc_metrics::Builder::default()
	}
}

/// A logs summary for a lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LogsLobbySummary {
	/// A universally unique identifier.
	pub lobby_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub namespace_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub lobby_group_name_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub region_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// RFC3339 timestamp.
	pub start_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// RFC3339 timestamp.
	pub ready_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// A union representing the state of a lobby.
	pub status: std::option::Option<crate::model::LogsLobbyStatus>,
}
impl LogsLobbySummary {
	/// A universally unique identifier.
	pub fn lobby_id(&self) -> std::option::Option<&str> {
		self.lobby_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn namespace_id(&self) -> std::option::Option<&str> {
		self.namespace_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn lobby_group_name_id(&self) -> std::option::Option<&str> {
		self.lobby_group_name_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn region_id(&self) -> std::option::Option<&str> {
		self.region_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// RFC3339 timestamp.
	pub fn start_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.start_ts.as_ref()
	}
	/// RFC3339 timestamp.
	pub fn ready_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.ready_ts.as_ref()
	}
	/// A union representing the state of a lobby.
	pub fn status(&self) -> std::option::Option<&crate::model::LogsLobbyStatus> {
		self.status.as_ref()
	}
}
impl std::fmt::Debug for LogsLobbySummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LogsLobbySummary");
		formatter.field("lobby_id", &self.lobby_id);
		formatter.field("namespace_id", &self.namespace_id);
		formatter.field("lobby_group_name_id", &self.lobby_group_name_id);
		formatter.field("region_id", &self.region_id);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("start_ts", &self.start_ts);
		formatter.field("ready_ts", &self.ready_ts);
		formatter.field("status", &self.status);
		formatter.finish()
	}
}
/// See [`LogsLobbySummary`](crate::model::LogsLobbySummary)
pub mod logs_lobby_summary {
	/// A builder for [`LogsLobbySummary`](crate::model::LogsLobbySummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby_id: std::option::Option<std::string::String>,
		pub(crate) namespace_id: std::option::Option<std::string::String>,
		pub(crate) lobby_group_name_id: std::option::Option<std::string::String>,
		pub(crate) region_id: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) start_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) ready_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) status: std::option::Option<crate::model::LogsLobbyStatus>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn lobby_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.lobby_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_lobby_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.lobby_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn namespace_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.namespace_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_namespace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.namespace_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn lobby_group_name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.lobby_group_name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_lobby_group_name_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.lobby_group_name_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn region_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_region_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.region_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn start_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.start_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_start_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.start_ts = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn ready_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.ready_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_ready_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.ready_ts = input;
			self
		}
		/// A union representing the state of a lobby.
		pub fn status(mut self, input: crate::model::LogsLobbyStatus) -> Self {
			self.status = Some(input);
			self
		}
		/// A union representing the state of a lobby.
		pub fn set_status(
			mut self,
			input: std::option::Option<crate::model::LogsLobbyStatus>,
		) -> Self {
			self.status = input;
			self
		}
		/// Consumes the builder and constructs a [`LogsLobbySummary`](crate::model::LogsLobbySummary)
		pub fn build(self) -> crate::model::LogsLobbySummary {
			crate::model::LogsLobbySummary {
				lobby_id: self.lobby_id,
				namespace_id: self.namespace_id,
				lobby_group_name_id: self.lobby_group_name_id,
				region_id: self.region_id,
				create_ts: self.create_ts,
				start_ts: self.start_ts,
				ready_ts: self.ready_ts,
				status: self.status,
			}
		}
	}
}
impl LogsLobbySummary {
	/// Creates a new builder-style object to manufacture [`LogsLobbySummary`](crate::model::LogsLobbySummary)
	pub fn builder() -> crate::model::logs_lobby_summary::Builder {
		crate::model::logs_lobby_summary::Builder::default()
	}
}

/// A union representing the state of a lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum LogsLobbyStatus {
	/// A running lobby.
	Running(crate::model::Unit),
	/// The status of a stopped lobby.
	Stopped(crate::model::LogsLobbyStatusStopped),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl LogsLobbyStatus {
	/// Tries to convert the enum instance into [`Running`](crate::model::LogsLobbyStatus::Running), extracting the inner [`Unit`](crate::model::Unit).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_running(&self) -> std::result::Result<&crate::model::Unit, &Self> {
		if let LogsLobbyStatus::Running(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Running`](crate::model::LogsLobbyStatus::Running).
	pub fn is_running(&self) -> bool {
		self.as_running().is_ok()
	}
	/// Tries to convert the enum instance into [`Stopped`](crate::model::LogsLobbyStatus::Stopped), extracting the inner [`LogsLobbyStatusStopped`](crate::model::LogsLobbyStatusStopped).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_stopped(&self) -> std::result::Result<&crate::model::LogsLobbyStatusStopped, &Self> {
		if let LogsLobbyStatus::Stopped(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Stopped`](crate::model::LogsLobbyStatus::Stopped).
	pub fn is_stopped(&self) -> bool {
		self.as_stopped().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// The status of a stopped lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LogsLobbyStatusStopped {
	/// RFC3339 timestamp.
	pub stop_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Whether or not the lobby failed or stopped successfully.
	pub failed: std::option::Option<bool>,
	/// The exit code returned by the lobby's main process when stopped.
	pub exit_code: std::option::Option<i32>,
}
impl LogsLobbyStatusStopped {
	/// RFC3339 timestamp.
	pub fn stop_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.stop_ts.as_ref()
	}
	/// Whether or not the lobby failed or stopped successfully.
	pub fn failed(&self) -> std::option::Option<bool> {
		self.failed
	}
	/// The exit code returned by the lobby's main process when stopped.
	pub fn exit_code(&self) -> std::option::Option<i32> {
		self.exit_code
	}
}
impl std::fmt::Debug for LogsLobbyStatusStopped {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LogsLobbyStatusStopped");
		formatter.field("stop_ts", &self.stop_ts);
		formatter.field("failed", &self.failed);
		formatter.field("exit_code", &self.exit_code);
		formatter.finish()
	}
}
/// See [`LogsLobbyStatusStopped`](crate::model::LogsLobbyStatusStopped)
pub mod logs_lobby_status_stopped {
	/// A builder for [`LogsLobbyStatusStopped`](crate::model::LogsLobbyStatusStopped)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) stop_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) failed: std::option::Option<bool>,
		pub(crate) exit_code: std::option::Option<i32>,
	}
	impl Builder {
		/// RFC3339 timestamp.
		pub fn stop_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.stop_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_stop_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.stop_ts = input;
			self
		}
		/// Whether or not the lobby failed or stopped successfully.
		pub fn failed(mut self, input: bool) -> Self {
			self.failed = Some(input);
			self
		}
		/// Whether or not the lobby failed or stopped successfully.
		pub fn set_failed(mut self, input: std::option::Option<bool>) -> Self {
			self.failed = input;
			self
		}
		/// The exit code returned by the lobby's main process when stopped.
		pub fn exit_code(mut self, input: i32) -> Self {
			self.exit_code = Some(input);
			self
		}
		/// The exit code returned by the lobby's main process when stopped.
		pub fn set_exit_code(mut self, input: std::option::Option<i32>) -> Self {
			self.exit_code = input;
			self
		}
		/// Consumes the builder and constructs a [`LogsLobbyStatusStopped`](crate::model::LogsLobbyStatusStopped)
		pub fn build(self) -> crate::model::LogsLobbyStatusStopped {
			crate::model::LogsLobbyStatusStopped {
				stop_ts: self.stop_ts,
				failed: self.failed,
				exit_code: self.exit_code,
			}
		}
	}
}
impl LogsLobbyStatusStopped {
	/// Creates a new builder-style object to manufacture [`LogsLobbyStatusStopped`](crate::model::LogsLobbyStatusStopped)
	pub fn builder() -> crate::model::logs_lobby_status_stopped::Builder {
		crate::model::logs_lobby_status_stopped::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Unit {}
impl std::fmt::Debug for Unit {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("Unit");
		formatter.finish()
	}
}
/// See [`Unit`](crate::model::Unit)
pub mod unit {
	/// A builder for [`Unit`](crate::model::Unit)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`Unit`](crate::model::Unit)
		pub fn build(self) -> crate::model::Unit {
			crate::model::Unit {}
		}
	}
}
impl Unit {
	/// Creates a new builder-style object to manufacture [`Unit`](crate::model::Unit)
	pub fn builder() -> crate::model::unit::Builder {
		crate::model::unit::Builder::default()
	}
}

/// Analyical information about a lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AnalyticsLobbySummary {
	/// A universally unique identifier.
	pub lobby_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub lobby_group_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub lobby_group_name_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub region_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Whether or not this lobby is ready.
	pub is_ready: std::option::Option<bool>,
	/// Whether or not this lobby is idle.
	pub is_idle: std::option::Option<bool>,
	/// Whether or not this lobby is in a closed state.
	pub is_closed: std::option::Option<bool>,
	/// Whether or not this lobby is outdated.
	pub is_outdated: std::option::Option<bool>,
	/// Unsigned 32 bit integer.
	pub max_players_normal: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_players_direct: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_players_party: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub total_player_count: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub registered_player_count: std::option::Option<i32>,
}
impl AnalyticsLobbySummary {
	/// A universally unique identifier.
	pub fn lobby_id(&self) -> std::option::Option<&str> {
		self.lobby_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn lobby_group_id(&self) -> std::option::Option<&str> {
		self.lobby_group_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn lobby_group_name_id(&self) -> std::option::Option<&str> {
		self.lobby_group_name_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn region_id(&self) -> std::option::Option<&str> {
		self.region_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// Whether or not this lobby is ready.
	pub fn is_ready(&self) -> std::option::Option<bool> {
		self.is_ready
	}
	/// Whether or not this lobby is idle.
	pub fn is_idle(&self) -> std::option::Option<bool> {
		self.is_idle
	}
	/// Whether or not this lobby is in a closed state.
	pub fn is_closed(&self) -> std::option::Option<bool> {
		self.is_closed
	}
	/// Whether or not this lobby is outdated.
	pub fn is_outdated(&self) -> std::option::Option<bool> {
		self.is_outdated
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_normal(&self) -> std::option::Option<i32> {
		self.max_players_normal
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_direct(&self) -> std::option::Option<i32> {
		self.max_players_direct
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_party(&self) -> std::option::Option<i32> {
		self.max_players_party
	}
	/// Unsigned 32 bit integer.
	pub fn total_player_count(&self) -> std::option::Option<i32> {
		self.total_player_count
	}
	/// Unsigned 32 bit integer.
	pub fn registered_player_count(&self) -> std::option::Option<i32> {
		self.registered_player_count
	}
}
impl std::fmt::Debug for AnalyticsLobbySummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("AnalyticsLobbySummary");
		formatter.field("lobby_id", &self.lobby_id);
		formatter.field("lobby_group_id", &self.lobby_group_id);
		formatter.field("lobby_group_name_id", &self.lobby_group_name_id);
		formatter.field("region_id", &self.region_id);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("is_ready", &self.is_ready);
		formatter.field("is_idle", &self.is_idle);
		formatter.field("is_closed", &self.is_closed);
		formatter.field("is_outdated", &self.is_outdated);
		formatter.field("max_players_normal", &self.max_players_normal);
		formatter.field("max_players_direct", &self.max_players_direct);
		formatter.field("max_players_party", &self.max_players_party);
		formatter.field("total_player_count", &self.total_player_count);
		formatter.field("registered_player_count", &self.registered_player_count);
		formatter.finish()
	}
}
/// See [`AnalyticsLobbySummary`](crate::model::AnalyticsLobbySummary)
pub mod analytics_lobby_summary {
	/// A builder for [`AnalyticsLobbySummary`](crate::model::AnalyticsLobbySummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby_id: std::option::Option<std::string::String>,
		pub(crate) lobby_group_id: std::option::Option<std::string::String>,
		pub(crate) lobby_group_name_id: std::option::Option<std::string::String>,
		pub(crate) region_id: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) is_ready: std::option::Option<bool>,
		pub(crate) is_idle: std::option::Option<bool>,
		pub(crate) is_closed: std::option::Option<bool>,
		pub(crate) is_outdated: std::option::Option<bool>,
		pub(crate) max_players_normal: std::option::Option<i32>,
		pub(crate) max_players_direct: std::option::Option<i32>,
		pub(crate) max_players_party: std::option::Option<i32>,
		pub(crate) total_player_count: std::option::Option<i32>,
		pub(crate) registered_player_count: std::option::Option<i32>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn lobby_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.lobby_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_lobby_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.lobby_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn lobby_group_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.lobby_group_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_lobby_group_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.lobby_group_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn lobby_group_name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.lobby_group_name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_lobby_group_name_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.lobby_group_name_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn region_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_region_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.region_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// Whether or not this lobby is ready.
		pub fn is_ready(mut self, input: bool) -> Self {
			self.is_ready = Some(input);
			self
		}
		/// Whether or not this lobby is ready.
		pub fn set_is_ready(mut self, input: std::option::Option<bool>) -> Self {
			self.is_ready = input;
			self
		}
		/// Whether or not this lobby is idle.
		pub fn is_idle(mut self, input: bool) -> Self {
			self.is_idle = Some(input);
			self
		}
		/// Whether or not this lobby is idle.
		pub fn set_is_idle(mut self, input: std::option::Option<bool>) -> Self {
			self.is_idle = input;
			self
		}
		/// Whether or not this lobby is in a closed state.
		pub fn is_closed(mut self, input: bool) -> Self {
			self.is_closed = Some(input);
			self
		}
		/// Whether or not this lobby is in a closed state.
		pub fn set_is_closed(mut self, input: std::option::Option<bool>) -> Self {
			self.is_closed = input;
			self
		}
		/// Whether or not this lobby is outdated.
		pub fn is_outdated(mut self, input: bool) -> Self {
			self.is_outdated = Some(input);
			self
		}
		/// Whether or not this lobby is outdated.
		pub fn set_is_outdated(mut self, input: std::option::Option<bool>) -> Self {
			self.is_outdated = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_normal(mut self, input: i32) -> Self {
			self.max_players_normal = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_normal(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_normal = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_direct(mut self, input: i32) -> Self {
			self.max_players_direct = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_direct(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_direct = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_party(mut self, input: i32) -> Self {
			self.max_players_party = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_party(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_party = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn total_player_count(mut self, input: i32) -> Self {
			self.total_player_count = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_total_player_count(mut self, input: std::option::Option<i32>) -> Self {
			self.total_player_count = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn registered_player_count(mut self, input: i32) -> Self {
			self.registered_player_count = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_registered_player_count(mut self, input: std::option::Option<i32>) -> Self {
			self.registered_player_count = input;
			self
		}
		/// Consumes the builder and constructs a [`AnalyticsLobbySummary`](crate::model::AnalyticsLobbySummary)
		pub fn build(self) -> crate::model::AnalyticsLobbySummary {
			crate::model::AnalyticsLobbySummary {
				lobby_id: self.lobby_id,
				lobby_group_id: self.lobby_group_id,
				lobby_group_name_id: self.lobby_group_name_id,
				region_id: self.region_id,
				create_ts: self.create_ts,
				is_ready: self.is_ready,
				is_idle: self.is_idle,
				is_closed: self.is_closed,
				is_outdated: self.is_outdated,
				max_players_normal: self.max_players_normal,
				max_players_direct: self.max_players_direct,
				max_players_party: self.max_players_party,
				total_player_count: self.total_player_count,
				registered_player_count: self.registered_player_count,
			}
		}
	}
}
impl AnalyticsLobbySummary {
	/// Creates a new builder-style object to manufacture [`AnalyticsLobbySummary`](crate::model::AnalyticsLobbySummary)
	pub fn builder() -> crate::model::analytics_lobby_summary::Builder {
		crate::model::analytics_lobby_summary::Builder::default()
	}
}

/// A value denoting what type of authentication to use for a game namespace's CDN.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum CdnAuthType {
	#[allow(missing_docs)] // documentation missing in model
	Basic,
	#[allow(missing_docs)] // documentation missing in model
	None,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for CdnAuthType {
	fn from(s: &str) -> Self {
		match s {
			"basic" => CdnAuthType::Basic,
			"none" => CdnAuthType::None,
			other => CdnAuthType::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for CdnAuthType {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(CdnAuthType::from(s))
	}
}
impl CdnAuthType {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			CdnAuthType::Basic => "basic",
			CdnAuthType::None => "none",
			CdnAuthType::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["basic", "none"]
	}
}
impl AsRef<str> for CdnAuthType {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// A docker port.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LobbyGroupRuntimeDockerPort {
	/// The label of this docker port.
	pub label: std::option::Option<std::string::String>,
	/// The port number to connect to.
	pub target_port: std::option::Option<i32>,
	/// The port range to connect to for UDP.
	pub port_range: std::option::Option<crate::model::PortRange>,
	/// A proxy protocol.
	pub proxy_protocol: std::option::Option<crate::model::ProxyProtocol>,
}
impl LobbyGroupRuntimeDockerPort {
	/// The label of this docker port.
	pub fn label(&self) -> std::option::Option<&str> {
		self.label.as_deref()
	}
	/// The port number to connect to.
	pub fn target_port(&self) -> std::option::Option<i32> {
		self.target_port
	}
	/// The port range to connect to for UDP.
	pub fn port_range(&self) -> std::option::Option<&crate::model::PortRange> {
		self.port_range.as_ref()
	}
	/// A proxy protocol.
	pub fn proxy_protocol(&self) -> std::option::Option<&crate::model::ProxyProtocol> {
		self.proxy_protocol.as_ref()
	}
}
impl std::fmt::Debug for LobbyGroupRuntimeDockerPort {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LobbyGroupRuntimeDockerPort");
		formatter.field("label", &self.label);
		formatter.field("target_port", &self.target_port);
		formatter.field("port_range", &self.port_range);
		formatter.field("proxy_protocol", &self.proxy_protocol);
		formatter.finish()
	}
}
/// See [`LobbyGroupRuntimeDockerPort`](crate::model::LobbyGroupRuntimeDockerPort)
pub mod lobby_group_runtime_docker_port {
	/// A builder for [`LobbyGroupRuntimeDockerPort`](crate::model::LobbyGroupRuntimeDockerPort)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) label: std::option::Option<std::string::String>,
		pub(crate) target_port: std::option::Option<i32>,
		pub(crate) port_range: std::option::Option<crate::model::PortRange>,
		pub(crate) proxy_protocol: std::option::Option<crate::model::ProxyProtocol>,
	}
	impl Builder {
		/// The label of this docker port.
		pub fn label(mut self, input: impl Into<std::string::String>) -> Self {
			self.label = Some(input.into());
			self
		}
		/// The label of this docker port.
		pub fn set_label(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.label = input;
			self
		}
		/// The port number to connect to.
		pub fn target_port(mut self, input: i32) -> Self {
			self.target_port = Some(input);
			self
		}
		/// The port number to connect to.
		pub fn set_target_port(mut self, input: std::option::Option<i32>) -> Self {
			self.target_port = input;
			self
		}
		/// The port range to connect to for UDP.
		pub fn port_range(mut self, input: crate::model::PortRange) -> Self {
			self.port_range = Some(input);
			self
		}
		/// The port range to connect to for UDP.
		pub fn set_port_range(
			mut self,
			input: std::option::Option<crate::model::PortRange>,
		) -> Self {
			self.port_range = input;
			self
		}
		/// A proxy protocol.
		pub fn proxy_protocol(mut self, input: crate::model::ProxyProtocol) -> Self {
			self.proxy_protocol = Some(input);
			self
		}
		/// A proxy protocol.
		pub fn set_proxy_protocol(
			mut self,
			input: std::option::Option<crate::model::ProxyProtocol>,
		) -> Self {
			self.proxy_protocol = input;
			self
		}
		/// Consumes the builder and constructs a [`LobbyGroupRuntimeDockerPort`](crate::model::LobbyGroupRuntimeDockerPort)
		pub fn build(self) -> crate::model::LobbyGroupRuntimeDockerPort {
			crate::model::LobbyGroupRuntimeDockerPort {
				label: self.label,
				target_port: self.target_port,
				port_range: self.port_range,
				proxy_protocol: self.proxy_protocol,
			}
		}
	}
}
impl LobbyGroupRuntimeDockerPort {
	/// Creates a new builder-style object to manufacture [`LobbyGroupRuntimeDockerPort`](crate::model::LobbyGroupRuntimeDockerPort)
	pub fn builder() -> crate::model::lobby_group_runtime_docker_port::Builder {
		crate::model::lobby_group_runtime_docker_port::Builder::default()
	}
}

/// A proxy protocol.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum ProxyProtocol {
	#[allow(missing_docs)] // documentation missing in model
	Http,
	#[allow(missing_docs)] // documentation missing in model
	Https,
	#[allow(missing_docs)] // documentation missing in model
	Udp,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for ProxyProtocol {
	fn from(s: &str) -> Self {
		match s {
			"http" => ProxyProtocol::Http,
			"https" => ProxyProtocol::Https,
			"udp" => ProxyProtocol::Udp,
			other => ProxyProtocol::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for ProxyProtocol {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(ProxyProtocol::from(s))
	}
}
impl ProxyProtocol {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			ProxyProtocol::Http => "http",
			ProxyProtocol::Https => "https",
			ProxyProtocol::Udp => "udp",
			ProxyProtocol::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["http", "https", "udp"]
	}
}
impl AsRef<str> for ProxyProtocol {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// Range of ports that can be connected to.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PortRange {
	/// Unsigned 32 bit integer.
	pub min: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max: std::option::Option<i32>,
}
impl PortRange {
	/// Unsigned 32 bit integer.
	pub fn min(&self) -> std::option::Option<i32> {
		self.min
	}
	/// Unsigned 32 bit integer.
	pub fn max(&self) -> std::option::Option<i32> {
		self.max
	}
}
impl std::fmt::Debug for PortRange {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PortRange");
		formatter.field("min", &self.min);
		formatter.field("max", &self.max);
		formatter.finish()
	}
}
/// See [`PortRange`](crate::model::PortRange)
pub mod port_range {
	/// A builder for [`PortRange`](crate::model::PortRange)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) min: std::option::Option<i32>,
		pub(crate) max: std::option::Option<i32>,
	}
	impl Builder {
		/// Unsigned 32 bit integer.
		pub fn min(mut self, input: i32) -> Self {
			self.min = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_min(mut self, input: std::option::Option<i32>) -> Self {
			self.min = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max(mut self, input: i32) -> Self {
			self.max = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max(mut self, input: std::option::Option<i32>) -> Self {
			self.max = input;
			self
		}
		/// Consumes the builder and constructs a [`PortRange`](crate::model::PortRange)
		pub fn build(self) -> crate::model::PortRange {
			crate::model::PortRange {
				min: self.min,
				max: self.max,
			}
		}
	}
}
impl PortRange {
	/// Creates a new builder-style object to manufacture [`PortRange`](crate::model::PortRange)
	pub fn builder() -> crate::model::port_range::Builder {
		crate::model::port_range::Builder::default()
	}
}

/// A full namespace.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NamespaceFull {
	/// A universally unique identifier.
	pub namespace_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub version_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub name_id: std::option::Option<std::string::String>,
	/// Cloud configuration for a given namespace.
	pub config: std::option::Option<crate::model::CloudNamespaceConfig>,
}
impl NamespaceFull {
	/// A universally unique identifier.
	pub fn namespace_id(&self) -> std::option::Option<&str> {
		self.namespace_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// A universally unique identifier.
	pub fn version_id(&self) -> std::option::Option<&str> {
		self.version_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn name_id(&self) -> std::option::Option<&str> {
		self.name_id.as_deref()
	}
	/// Cloud configuration for a given namespace.
	pub fn config(&self) -> std::option::Option<&crate::model::CloudNamespaceConfig> {
		self.config.as_ref()
	}
}
impl std::fmt::Debug for NamespaceFull {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("NamespaceFull");
		formatter.field("namespace_id", &self.namespace_id);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("display_name", &self.display_name);
		formatter.field("version_id", &self.version_id);
		formatter.field("name_id", &self.name_id);
		formatter.field("config", &self.config);
		formatter.finish()
	}
}
/// See [`NamespaceFull`](crate::model::NamespaceFull)
pub mod namespace_full {
	/// A builder for [`NamespaceFull`](crate::model::NamespaceFull)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) namespace_id: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) version_id: std::option::Option<std::string::String>,
		pub(crate) name_id: std::option::Option<std::string::String>,
		pub(crate) config: std::option::Option<crate::model::CloudNamespaceConfig>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn namespace_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.namespace_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_namespace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.namespace_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// A universally unique identifier.
		pub fn version_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.version_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_version_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.version_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name_id = input;
			self
		}
		/// Cloud configuration for a given namespace.
		pub fn config(mut self, input: crate::model::CloudNamespaceConfig) -> Self {
			self.config = Some(input);
			self
		}
		/// Cloud configuration for a given namespace.
		pub fn set_config(
			mut self,
			input: std::option::Option<crate::model::CloudNamespaceConfig>,
		) -> Self {
			self.config = input;
			self
		}
		/// Consumes the builder and constructs a [`NamespaceFull`](crate::model::NamespaceFull)
		pub fn build(self) -> crate::model::NamespaceFull {
			crate::model::NamespaceFull {
				namespace_id: self.namespace_id,
				create_ts: self.create_ts,
				display_name: self.display_name,
				version_id: self.version_id,
				name_id: self.name_id,
				config: self.config,
			}
		}
	}
}
impl NamespaceFull {
	/// Creates a new builder-style object to manufacture [`NamespaceFull`](crate::model::NamespaceFull)
	pub fn builder() -> crate::model::namespace_full::Builder {
		crate::model::namespace_full::Builder::default()
	}
}

/// Cloud configuration for a given namespace.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CloudNamespaceConfig {
	/// CDN configuration for a given namespace.
	pub cdn: std::option::Option<crate::model::CdnNamespaceConfig>,
	/// Matchmaker configuration for a given namespace.
	pub matchmaker: std::option::Option<crate::model::MatchmakerNamespaceConfig>,
	/// KV configuration for a given namespace.
	pub kv: std::option::Option<crate::model::KvNamespaceConfig>,
	/// Identity configuration for a given namespace.
	pub identity: std::option::Option<crate::model::IdentityNamespaceConfig>,
}
impl CloudNamespaceConfig {
	/// CDN configuration for a given namespace.
	pub fn cdn(&self) -> std::option::Option<&crate::model::CdnNamespaceConfig> {
		self.cdn.as_ref()
	}
	/// Matchmaker configuration for a given namespace.
	pub fn matchmaker(&self) -> std::option::Option<&crate::model::MatchmakerNamespaceConfig> {
		self.matchmaker.as_ref()
	}
	/// KV configuration for a given namespace.
	pub fn kv(&self) -> std::option::Option<&crate::model::KvNamespaceConfig> {
		self.kv.as_ref()
	}
	/// Identity configuration for a given namespace.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityNamespaceConfig> {
		self.identity.as_ref()
	}
}
impl std::fmt::Debug for CloudNamespaceConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CloudNamespaceConfig");
		formatter.field("cdn", &self.cdn);
		formatter.field("matchmaker", &self.matchmaker);
		formatter.field("kv", &self.kv);
		formatter.field("identity", &self.identity);
		formatter.finish()
	}
}
/// See [`CloudNamespaceConfig`](crate::model::CloudNamespaceConfig)
pub mod cloud_namespace_config {
	/// A builder for [`CloudNamespaceConfig`](crate::model::CloudNamespaceConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) cdn: std::option::Option<crate::model::CdnNamespaceConfig>,
		pub(crate) matchmaker: std::option::Option<crate::model::MatchmakerNamespaceConfig>,
		pub(crate) kv: std::option::Option<crate::model::KvNamespaceConfig>,
		pub(crate) identity: std::option::Option<crate::model::IdentityNamespaceConfig>,
	}
	impl Builder {
		/// CDN configuration for a given namespace.
		pub fn cdn(mut self, input: crate::model::CdnNamespaceConfig) -> Self {
			self.cdn = Some(input);
			self
		}
		/// CDN configuration for a given namespace.
		pub fn set_cdn(
			mut self,
			input: std::option::Option<crate::model::CdnNamespaceConfig>,
		) -> Self {
			self.cdn = input;
			self
		}
		/// Matchmaker configuration for a given namespace.
		pub fn matchmaker(mut self, input: crate::model::MatchmakerNamespaceConfig) -> Self {
			self.matchmaker = Some(input);
			self
		}
		/// Matchmaker configuration for a given namespace.
		pub fn set_matchmaker(
			mut self,
			input: std::option::Option<crate::model::MatchmakerNamespaceConfig>,
		) -> Self {
			self.matchmaker = input;
			self
		}
		/// KV configuration for a given namespace.
		pub fn kv(mut self, input: crate::model::KvNamespaceConfig) -> Self {
			self.kv = Some(input);
			self
		}
		/// KV configuration for a given namespace.
		pub fn set_kv(
			mut self,
			input: std::option::Option<crate::model::KvNamespaceConfig>,
		) -> Self {
			self.kv = input;
			self
		}
		/// Identity configuration for a given namespace.
		pub fn identity(mut self, input: crate::model::IdentityNamespaceConfig) -> Self {
			self.identity = Some(input);
			self
		}
		/// Identity configuration for a given namespace.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityNamespaceConfig>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Consumes the builder and constructs a [`CloudNamespaceConfig`](crate::model::CloudNamespaceConfig)
		pub fn build(self) -> crate::model::CloudNamespaceConfig {
			crate::model::CloudNamespaceConfig {
				cdn: self.cdn,
				matchmaker: self.matchmaker,
				kv: self.kv,
				identity: self.identity,
			}
		}
	}
}
impl CloudNamespaceConfig {
	/// Creates a new builder-style object to manufacture [`CloudNamespaceConfig`](crate::model::CloudNamespaceConfig)
	pub fn builder() -> crate::model::cloud_namespace_config::Builder {
		crate::model::cloud_namespace_config::Builder::default()
	}
}

/// Identity configuration for a given namespace.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdentityNamespaceConfig {}
impl std::fmt::Debug for IdentityNamespaceConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("IdentityNamespaceConfig");
		formatter.finish()
	}
}
/// See [`IdentityNamespaceConfig`](crate::model::IdentityNamespaceConfig)
pub mod identity_namespace_config {
	/// A builder for [`IdentityNamespaceConfig`](crate::model::IdentityNamespaceConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`IdentityNamespaceConfig`](crate::model::IdentityNamespaceConfig)
		pub fn build(self) -> crate::model::IdentityNamespaceConfig {
			crate::model::IdentityNamespaceConfig {}
		}
	}
}
impl IdentityNamespaceConfig {
	/// Creates a new builder-style object to manufacture [`IdentityNamespaceConfig`](crate::model::IdentityNamespaceConfig)
	pub fn builder() -> crate::model::identity_namespace_config::Builder {
		crate::model::identity_namespace_config::Builder::default()
	}
}

/// KV configuration for a given namespace.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct KvNamespaceConfig {}
impl std::fmt::Debug for KvNamespaceConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("KvNamespaceConfig");
		formatter.finish()
	}
}
/// See [`KvNamespaceConfig`](crate::model::KvNamespaceConfig)
pub mod kv_namespace_config {
	/// A builder for [`KvNamespaceConfig`](crate::model::KvNamespaceConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`KvNamespaceConfig`](crate::model::KvNamespaceConfig)
		pub fn build(self) -> crate::model::KvNamespaceConfig {
			crate::model::KvNamespaceConfig {}
		}
	}
}
impl KvNamespaceConfig {
	/// Creates a new builder-style object to manufacture [`KvNamespaceConfig`](crate::model::KvNamespaceConfig)
	pub fn builder() -> crate::model::kv_namespace_config::Builder {
		crate::model::kv_namespace_config::Builder::default()
	}
}

/// Matchmaker configuration for a given namespace.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerNamespaceConfig {
	/// Unsigned 32 bit integer.
	pub lobby_count_max: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_players_per_client: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_players_per_client_vpn: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_players_per_client_proxy: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_players_per_client_tor: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_players_per_client_hosting: std::option::Option<i32>,
}
impl MatchmakerNamespaceConfig {
	/// Unsigned 32 bit integer.
	pub fn lobby_count_max(&self) -> std::option::Option<i32> {
		self.lobby_count_max
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_per_client(&self) -> std::option::Option<i32> {
		self.max_players_per_client
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_per_client_vpn(&self) -> std::option::Option<i32> {
		self.max_players_per_client_vpn
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_per_client_proxy(&self) -> std::option::Option<i32> {
		self.max_players_per_client_proxy
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_per_client_tor(&self) -> std::option::Option<i32> {
		self.max_players_per_client_tor
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_per_client_hosting(&self) -> std::option::Option<i32> {
		self.max_players_per_client_hosting
	}
}
impl std::fmt::Debug for MatchmakerNamespaceConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerNamespaceConfig");
		formatter.field("lobby_count_max", &self.lobby_count_max);
		formatter.field("max_players_per_client", &self.max_players_per_client);
		formatter.field(
			"max_players_per_client_vpn",
			&self.max_players_per_client_vpn,
		);
		formatter.field(
			"max_players_per_client_proxy",
			&self.max_players_per_client_proxy,
		);
		formatter.field(
			"max_players_per_client_tor",
			&self.max_players_per_client_tor,
		);
		formatter.field(
			"max_players_per_client_hosting",
			&self.max_players_per_client_hosting,
		);
		formatter.finish()
	}
}
/// See [`MatchmakerNamespaceConfig`](crate::model::MatchmakerNamespaceConfig)
pub mod matchmaker_namespace_config {
	/// A builder for [`MatchmakerNamespaceConfig`](crate::model::MatchmakerNamespaceConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby_count_max: std::option::Option<i32>,
		pub(crate) max_players_per_client: std::option::Option<i32>,
		pub(crate) max_players_per_client_vpn: std::option::Option<i32>,
		pub(crate) max_players_per_client_proxy: std::option::Option<i32>,
		pub(crate) max_players_per_client_tor: std::option::Option<i32>,
		pub(crate) max_players_per_client_hosting: std::option::Option<i32>,
	}
	impl Builder {
		/// Unsigned 32 bit integer.
		pub fn lobby_count_max(mut self, input: i32) -> Self {
			self.lobby_count_max = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_lobby_count_max(mut self, input: std::option::Option<i32>) -> Self {
			self.lobby_count_max = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_per_client(mut self, input: i32) -> Self {
			self.max_players_per_client = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_per_client(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_per_client = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_per_client_vpn(mut self, input: i32) -> Self {
			self.max_players_per_client_vpn = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_per_client_vpn(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_per_client_vpn = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_per_client_proxy(mut self, input: i32) -> Self {
			self.max_players_per_client_proxy = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_per_client_proxy(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_per_client_proxy = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_per_client_tor(mut self, input: i32) -> Self {
			self.max_players_per_client_tor = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_per_client_tor(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_per_client_tor = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_per_client_hosting(mut self, input: i32) -> Self {
			self.max_players_per_client_hosting = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_per_client_hosting(
			mut self,
			input: std::option::Option<i32>,
		) -> Self {
			self.max_players_per_client_hosting = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerNamespaceConfig`](crate::model::MatchmakerNamespaceConfig)
		pub fn build(self) -> crate::model::MatchmakerNamespaceConfig {
			crate::model::MatchmakerNamespaceConfig {
				lobby_count_max: self.lobby_count_max,
				max_players_per_client: self.max_players_per_client,
				max_players_per_client_vpn: self.max_players_per_client_vpn,
				max_players_per_client_proxy: self.max_players_per_client_proxy,
				max_players_per_client_tor: self.max_players_per_client_tor,
				max_players_per_client_hosting: self.max_players_per_client_hosting,
			}
		}
	}
}
impl MatchmakerNamespaceConfig {
	/// Creates a new builder-style object to manufacture [`MatchmakerNamespaceConfig`](crate::model::MatchmakerNamespaceConfig)
	pub fn builder() -> crate::model::matchmaker_namespace_config::Builder {
		crate::model::matchmaker_namespace_config::Builder::default()
	}
}

/// CDN configuration for a given namespace.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CdnNamespaceConfig {
	/// Whether or not to allow users to connect to the given namespace via domain name.
	pub enable_domain_public_auth: std::option::Option<bool>,
	/// A list of CDN domains for a given namespace.
	pub domains: std::option::Option<std::vec::Vec<crate::model::CdnNamespaceDomain>>,
	/// A value denoting what type of authentication to use for a game namespace's CDN.
	pub auth_type: std::option::Option<crate::model::CdnAuthType>,
	/// A list of CDN authenticated users for a given namespace.
	pub auth_user_list: std::option::Option<std::vec::Vec<crate::model::CdnNamespaceAuthUser>>,
}
impl CdnNamespaceConfig {
	/// Whether or not to allow users to connect to the given namespace via domain name.
	pub fn enable_domain_public_auth(&self) -> std::option::Option<bool> {
		self.enable_domain_public_auth
	}
	/// A list of CDN domains for a given namespace.
	pub fn domains(&self) -> std::option::Option<&[crate::model::CdnNamespaceDomain]> {
		self.domains.as_deref()
	}
	/// A value denoting what type of authentication to use for a game namespace's CDN.
	pub fn auth_type(&self) -> std::option::Option<&crate::model::CdnAuthType> {
		self.auth_type.as_ref()
	}
	/// A list of CDN authenticated users for a given namespace.
	pub fn auth_user_list(&self) -> std::option::Option<&[crate::model::CdnNamespaceAuthUser]> {
		self.auth_user_list.as_deref()
	}
}
impl std::fmt::Debug for CdnNamespaceConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CdnNamespaceConfig");
		formatter.field("enable_domain_public_auth", &self.enable_domain_public_auth);
		formatter.field("domains", &self.domains);
		formatter.field("auth_type", &self.auth_type);
		formatter.field("auth_user_list", &self.auth_user_list);
		formatter.finish()
	}
}
/// See [`CdnNamespaceConfig`](crate::model::CdnNamespaceConfig)
pub mod cdn_namespace_config {
	/// A builder for [`CdnNamespaceConfig`](crate::model::CdnNamespaceConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) enable_domain_public_auth: std::option::Option<bool>,
		pub(crate) domains: std::option::Option<std::vec::Vec<crate::model::CdnNamespaceDomain>>,
		pub(crate) auth_type: std::option::Option<crate::model::CdnAuthType>,
		pub(crate) auth_user_list:
			std::option::Option<std::vec::Vec<crate::model::CdnNamespaceAuthUser>>,
	}
	impl Builder {
		/// Whether or not to allow users to connect to the given namespace via domain name.
		pub fn enable_domain_public_auth(mut self, input: bool) -> Self {
			self.enable_domain_public_auth = Some(input);
			self
		}
		/// Whether or not to allow users to connect to the given namespace via domain name.
		pub fn set_enable_domain_public_auth(mut self, input: std::option::Option<bool>) -> Self {
			self.enable_domain_public_auth = input;
			self
		}
		/// Appends an item to `domains`.
		///
		/// To override the contents of this collection use [`set_domains`](Self::set_domains).
		///
		/// A list of CDN domains for a given namespace.
		pub fn domains(mut self, input: crate::model::CdnNamespaceDomain) -> Self {
			let mut v = self.domains.unwrap_or_default();
			v.push(input);
			self.domains = Some(v);
			self
		}
		/// A list of CDN domains for a given namespace.
		pub fn set_domains(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::CdnNamespaceDomain>>,
		) -> Self {
			self.domains = input;
			self
		}
		/// A value denoting what type of authentication to use for a game namespace's CDN.
		pub fn auth_type(mut self, input: crate::model::CdnAuthType) -> Self {
			self.auth_type = Some(input);
			self
		}
		/// A value denoting what type of authentication to use for a game namespace's CDN.
		pub fn set_auth_type(
			mut self,
			input: std::option::Option<crate::model::CdnAuthType>,
		) -> Self {
			self.auth_type = input;
			self
		}
		/// Appends an item to `auth_user_list`.
		///
		/// To override the contents of this collection use [`set_auth_user_list`](Self::set_auth_user_list).
		///
		/// A list of CDN authenticated users for a given namespace.
		pub fn auth_user_list(mut self, input: crate::model::CdnNamespaceAuthUser) -> Self {
			let mut v = self.auth_user_list.unwrap_or_default();
			v.push(input);
			self.auth_user_list = Some(v);
			self
		}
		/// A list of CDN authenticated users for a given namespace.
		pub fn set_auth_user_list(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::CdnNamespaceAuthUser>>,
		) -> Self {
			self.auth_user_list = input;
			self
		}
		/// Consumes the builder and constructs a [`CdnNamespaceConfig`](crate::model::CdnNamespaceConfig)
		pub fn build(self) -> crate::model::CdnNamespaceConfig {
			crate::model::CdnNamespaceConfig {
				enable_domain_public_auth: self.enable_domain_public_auth,
				domains: self.domains,
				auth_type: self.auth_type,
				auth_user_list: self.auth_user_list,
			}
		}
	}
}
impl CdnNamespaceConfig {
	/// Creates a new builder-style object to manufacture [`CdnNamespaceConfig`](crate::model::CdnNamespaceConfig)
	pub fn builder() -> crate::model::cdn_namespace_config::Builder {
		crate::model::cdn_namespace_config::Builder::default()
	}
}

/// An authenticated CDN user for a given namespace.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CdnNamespaceAuthUser {
	/// A user name.
	pub user: std::option::Option<std::string::String>,
}
impl CdnNamespaceAuthUser {
	/// A user name.
	pub fn user(&self) -> std::option::Option<&str> {
		self.user.as_deref()
	}
}
impl std::fmt::Debug for CdnNamespaceAuthUser {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CdnNamespaceAuthUser");
		formatter.field("user", &self.user);
		formatter.finish()
	}
}
/// See [`CdnNamespaceAuthUser`](crate::model::CdnNamespaceAuthUser)
pub mod cdn_namespace_auth_user {
	/// A builder for [`CdnNamespaceAuthUser`](crate::model::CdnNamespaceAuthUser)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) user: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A user name.
		pub fn user(mut self, input: impl Into<std::string::String>) -> Self {
			self.user = Some(input.into());
			self
		}
		/// A user name.
		pub fn set_user(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.user = input;
			self
		}
		/// Consumes the builder and constructs a [`CdnNamespaceAuthUser`](crate::model::CdnNamespaceAuthUser)
		pub fn build(self) -> crate::model::CdnNamespaceAuthUser {
			crate::model::CdnNamespaceAuthUser { user: self.user }
		}
	}
}
impl CdnNamespaceAuthUser {
	/// Creates a new builder-style object to manufacture [`CdnNamespaceAuthUser`](crate::model::CdnNamespaceAuthUser)
	pub fn builder() -> crate::model::cdn_namespace_auth_user::Builder {
		crate::model::cdn_namespace_auth_user::Builder::default()
	}
}

/// A CDN domain for a given namespace.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CdnNamespaceDomain {
	/// A valid domain name (no protocol).
	pub domain: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// A value denoting the status of a CDN domain's verification status.
	pub verification_status:
		std::option::Option<crate::model::CdnNamespaceDomainVerificationStatus>,
	/// A union representing the verification method used for this CDN domain.
	pub verification_method:
		std::option::Option<crate::model::CdnNamespaceDomainVerificationMethod>,
	#[allow(missing_docs)] // documentation missing in model
	pub verification_errors: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CdnNamespaceDomain {
	/// A valid domain name (no protocol).
	pub fn domain(&self) -> std::option::Option<&str> {
		self.domain.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// A value denoting the status of a CDN domain's verification status.
	pub fn verification_status(
		&self,
	) -> std::option::Option<&crate::model::CdnNamespaceDomainVerificationStatus> {
		self.verification_status.as_ref()
	}
	/// A union representing the verification method used for this CDN domain.
	pub fn verification_method(
		&self,
	) -> std::option::Option<&crate::model::CdnNamespaceDomainVerificationMethod> {
		self.verification_method.as_ref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn verification_errors(&self) -> std::option::Option<&[std::string::String]> {
		self.verification_errors.as_deref()
	}
}
impl std::fmt::Debug for CdnNamespaceDomain {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CdnNamespaceDomain");
		formatter.field("domain", &self.domain);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("verification_status", &self.verification_status);
		formatter.field("verification_method", &self.verification_method);
		formatter.field("verification_errors", &self.verification_errors);
		formatter.finish()
	}
}
/// See [`CdnNamespaceDomain`](crate::model::CdnNamespaceDomain)
pub mod cdn_namespace_domain {
	/// A builder for [`CdnNamespaceDomain`](crate::model::CdnNamespaceDomain)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) domain: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) verification_status:
			std::option::Option<crate::model::CdnNamespaceDomainVerificationStatus>,
		pub(crate) verification_method:
			std::option::Option<crate::model::CdnNamespaceDomainVerificationMethod>,
		pub(crate) verification_errors: std::option::Option<std::vec::Vec<std::string::String>>,
	}
	impl Builder {
		/// A valid domain name (no protocol).
		pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
			self.domain = Some(input.into());
			self
		}
		/// A valid domain name (no protocol).
		pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.domain = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// A value denoting the status of a CDN domain's verification status.
		pub fn verification_status(
			mut self,
			input: crate::model::CdnNamespaceDomainVerificationStatus,
		) -> Self {
			self.verification_status = Some(input);
			self
		}
		/// A value denoting the status of a CDN domain's verification status.
		pub fn set_verification_status(
			mut self,
			input: std::option::Option<crate::model::CdnNamespaceDomainVerificationStatus>,
		) -> Self {
			self.verification_status = input;
			self
		}
		/// A union representing the verification method used for this CDN domain.
		pub fn verification_method(
			mut self,
			input: crate::model::CdnNamespaceDomainVerificationMethod,
		) -> Self {
			self.verification_method = Some(input);
			self
		}
		/// A union representing the verification method used for this CDN domain.
		pub fn set_verification_method(
			mut self,
			input: std::option::Option<crate::model::CdnNamespaceDomainVerificationMethod>,
		) -> Self {
			self.verification_method = input;
			self
		}
		/// Appends an item to `verification_errors`.
		///
		/// To override the contents of this collection use [`set_verification_errors`](Self::set_verification_errors).
		///
		pub fn verification_errors(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.verification_errors.unwrap_or_default();
			v.push(input.into());
			self.verification_errors = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_verification_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.verification_errors = input;
			self
		}
		/// Consumes the builder and constructs a [`CdnNamespaceDomain`](crate::model::CdnNamespaceDomain)
		pub fn build(self) -> crate::model::CdnNamespaceDomain {
			crate::model::CdnNamespaceDomain {
				domain: self.domain,
				create_ts: self.create_ts,
				verification_status: self.verification_status,
				verification_method: self.verification_method,
				verification_errors: self.verification_errors,
			}
		}
	}
}
impl CdnNamespaceDomain {
	/// Creates a new builder-style object to manufacture [`CdnNamespaceDomain`](crate::model::CdnNamespaceDomain)
	pub fn builder() -> crate::model::cdn_namespace_domain::Builder {
		crate::model::cdn_namespace_domain::Builder::default()
	}
}

/// A union representing the verification method used for this CDN domain.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum CdnNamespaceDomainVerificationMethod {
	/// CDN Namespace domain verification method HTTP variant.
	Http(crate::model::CdnNamespaceDomainVerificationMethodHttp),
	/// CDN Namespace domain verification method variant denoting that this record is invalid.
	Invalid(crate::model::CdnNamespaceDomainVerificationMethodInvalid),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl CdnNamespaceDomainVerificationMethod {
	/// Tries to convert the enum instance into [`Http`](crate::model::CdnNamespaceDomainVerificationMethod::Http), extracting the inner [`CdnNamespaceDomainVerificationMethodHttp`](crate::model::CdnNamespaceDomainVerificationMethodHttp).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_http(
		&self,
	) -> std::result::Result<&crate::model::CdnNamespaceDomainVerificationMethodHttp, &Self> {
		if let CdnNamespaceDomainVerificationMethod::Http(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Http`](crate::model::CdnNamespaceDomainVerificationMethod::Http).
	pub fn is_http(&self) -> bool {
		self.as_http().is_ok()
	}
	/// Tries to convert the enum instance into [`Invalid`](crate::model::CdnNamespaceDomainVerificationMethod::Invalid), extracting the inner [`CdnNamespaceDomainVerificationMethodInvalid`](crate::model::CdnNamespaceDomainVerificationMethodInvalid).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_invalid(
		&self,
	) -> std::result::Result<&crate::model::CdnNamespaceDomainVerificationMethodInvalid, &Self> {
		if let CdnNamespaceDomainVerificationMethod::Invalid(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Invalid`](crate::model::CdnNamespaceDomainVerificationMethod::Invalid).
	pub fn is_invalid(&self) -> bool {
		self.as_invalid().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// CDN Namespace domain verification method HTTP variant.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CdnNamespaceDomainVerificationMethodHttp {
	/// The CNAME record this domain should point to.
	pub cname_record: std::option::Option<std::string::String>,
}
impl CdnNamespaceDomainVerificationMethodHttp {
	/// The CNAME record this domain should point to.
	pub fn cname_record(&self) -> std::option::Option<&str> {
		self.cname_record.as_deref()
	}
}
impl std::fmt::Debug for CdnNamespaceDomainVerificationMethodHttp {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CdnNamespaceDomainVerificationMethodHttp");
		formatter.field("cname_record", &self.cname_record);
		formatter.finish()
	}
}
/// See [`CdnNamespaceDomainVerificationMethodHttp`](crate::model::CdnNamespaceDomainVerificationMethodHttp)
pub mod cdn_namespace_domain_verification_method_http {
	/// A builder for [`CdnNamespaceDomainVerificationMethodHttp`](crate::model::CdnNamespaceDomainVerificationMethodHttp)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) cname_record: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// The CNAME record this domain should point to.
		pub fn cname_record(mut self, input: impl Into<std::string::String>) -> Self {
			self.cname_record = Some(input.into());
			self
		}
		/// The CNAME record this domain should point to.
		pub fn set_cname_record(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.cname_record = input;
			self
		}
		/// Consumes the builder and constructs a [`CdnNamespaceDomainVerificationMethodHttp`](crate::model::CdnNamespaceDomainVerificationMethodHttp)
		pub fn build(self) -> crate::model::CdnNamespaceDomainVerificationMethodHttp {
			crate::model::CdnNamespaceDomainVerificationMethodHttp {
				cname_record: self.cname_record,
			}
		}
	}
}
impl CdnNamespaceDomainVerificationMethodHttp {
	/// Creates a new builder-style object to manufacture [`CdnNamespaceDomainVerificationMethodHttp`](crate::model::CdnNamespaceDomainVerificationMethodHttp)
	pub fn builder() -> crate::model::cdn_namespace_domain_verification_method_http::Builder {
		crate::model::cdn_namespace_domain_verification_method_http::Builder::default()
	}
}

/// CDN Namespace domain verification method variant denoting that this record is invalid.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CdnNamespaceDomainVerificationMethodInvalid {}
impl std::fmt::Debug for CdnNamespaceDomainVerificationMethodInvalid {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CdnNamespaceDomainVerificationMethodInvalid");
		formatter.finish()
	}
}
/// See [`CdnNamespaceDomainVerificationMethodInvalid`](crate::model::CdnNamespaceDomainVerificationMethodInvalid)
pub mod cdn_namespace_domain_verification_method_invalid {
	/// A builder for [`CdnNamespaceDomainVerificationMethodInvalid`](crate::model::CdnNamespaceDomainVerificationMethodInvalid)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`CdnNamespaceDomainVerificationMethodInvalid`](crate::model::CdnNamespaceDomainVerificationMethodInvalid)
		pub fn build(self) -> crate::model::CdnNamespaceDomainVerificationMethodInvalid {
			crate::model::CdnNamespaceDomainVerificationMethodInvalid {}
		}
	}
}
impl CdnNamespaceDomainVerificationMethodInvalid {
	/// Creates a new builder-style object to manufacture [`CdnNamespaceDomainVerificationMethodInvalid`](crate::model::CdnNamespaceDomainVerificationMethodInvalid)
	pub fn builder() -> crate::model::cdn_namespace_domain_verification_method_invalid::Builder {
		crate::model::cdn_namespace_domain_verification_method_invalid::Builder::default()
	}
}

/// A value denoting the status of a CDN domain's verification status.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum CdnNamespaceDomainVerificationStatus {
	#[allow(missing_docs)] // documentation missing in model
	Active,
	#[allow(missing_docs)] // documentation missing in model
	Failed,
	#[allow(missing_docs)] // documentation missing in model
	Pending,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for CdnNamespaceDomainVerificationStatus {
	fn from(s: &str) -> Self {
		match s {
			"active" => CdnNamespaceDomainVerificationStatus::Active,
			"failed" => CdnNamespaceDomainVerificationStatus::Failed,
			"pending" => CdnNamespaceDomainVerificationStatus::Pending,
			other => CdnNamespaceDomainVerificationStatus::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for CdnNamespaceDomainVerificationStatus {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(CdnNamespaceDomainVerificationStatus::from(s))
	}
}
impl CdnNamespaceDomainVerificationStatus {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			CdnNamespaceDomainVerificationStatus::Active => "active",
			CdnNamespaceDomainVerificationStatus::Failed => "failed",
			CdnNamespaceDomainVerificationStatus::Pending => "pending",
			CdnNamespaceDomainVerificationStatus::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["active", "failed", "pending"]
	}
}
impl AsRef<str> for CdnNamespaceDomainVerificationStatus {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// Cloud configuration for a given version.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CloudVersionConfig {
	/// CDN configuration for a given version.
	pub cdn: std::option::Option<crate::model::CdnVersionConfig>,
	/// Matchmaker configuration for a given version.
	pub matchmaker: std::option::Option<crate::model::MatchmakerVersionConfig>,
	/// KV configuration for a given version.
	pub kv: std::option::Option<crate::model::KvVersionConfig>,
	/// Identity configuration for a given version.
	pub identity: std::option::Option<crate::model::IdentityVersionConfig>,
}
impl CloudVersionConfig {
	/// CDN configuration for a given version.
	pub fn cdn(&self) -> std::option::Option<&crate::model::CdnVersionConfig> {
		self.cdn.as_ref()
	}
	/// Matchmaker configuration for a given version.
	pub fn matchmaker(&self) -> std::option::Option<&crate::model::MatchmakerVersionConfig> {
		self.matchmaker.as_ref()
	}
	/// KV configuration for a given version.
	pub fn kv(&self) -> std::option::Option<&crate::model::KvVersionConfig> {
		self.kv.as_ref()
	}
	/// Identity configuration for a given version.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityVersionConfig> {
		self.identity.as_ref()
	}
}
impl std::fmt::Debug for CloudVersionConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CloudVersionConfig");
		formatter.field("cdn", &self.cdn);
		formatter.field("matchmaker", &self.matchmaker);
		formatter.field("kv", &self.kv);
		formatter.field("identity", &self.identity);
		formatter.finish()
	}
}
/// See [`CloudVersionConfig`](crate::model::CloudVersionConfig)
pub mod cloud_version_config {
	/// A builder for [`CloudVersionConfig`](crate::model::CloudVersionConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) cdn: std::option::Option<crate::model::CdnVersionConfig>,
		pub(crate) matchmaker: std::option::Option<crate::model::MatchmakerVersionConfig>,
		pub(crate) kv: std::option::Option<crate::model::KvVersionConfig>,
		pub(crate) identity: std::option::Option<crate::model::IdentityVersionConfig>,
	}
	impl Builder {
		/// CDN configuration for a given version.
		pub fn cdn(mut self, input: crate::model::CdnVersionConfig) -> Self {
			self.cdn = Some(input);
			self
		}
		/// CDN configuration for a given version.
		pub fn set_cdn(
			mut self,
			input: std::option::Option<crate::model::CdnVersionConfig>,
		) -> Self {
			self.cdn = input;
			self
		}
		/// Matchmaker configuration for a given version.
		pub fn matchmaker(mut self, input: crate::model::MatchmakerVersionConfig) -> Self {
			self.matchmaker = Some(input);
			self
		}
		/// Matchmaker configuration for a given version.
		pub fn set_matchmaker(
			mut self,
			input: std::option::Option<crate::model::MatchmakerVersionConfig>,
		) -> Self {
			self.matchmaker = input;
			self
		}
		/// KV configuration for a given version.
		pub fn kv(mut self, input: crate::model::KvVersionConfig) -> Self {
			self.kv = Some(input);
			self
		}
		/// KV configuration for a given version.
		pub fn set_kv(mut self, input: std::option::Option<crate::model::KvVersionConfig>) -> Self {
			self.kv = input;
			self
		}
		/// Identity configuration for a given version.
		pub fn identity(mut self, input: crate::model::IdentityVersionConfig) -> Self {
			self.identity = Some(input);
			self
		}
		/// Identity configuration for a given version.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityVersionConfig>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Consumes the builder and constructs a [`CloudVersionConfig`](crate::model::CloudVersionConfig)
		pub fn build(self) -> crate::model::CloudVersionConfig {
			crate::model::CloudVersionConfig {
				cdn: self.cdn,
				matchmaker: self.matchmaker,
				kv: self.kv,
				identity: self.identity,
			}
		}
	}
}
impl CloudVersionConfig {
	/// Creates a new builder-style object to manufacture [`CloudVersionConfig`](crate::model::CloudVersionConfig)
	pub fn builder() -> crate::model::cloud_version_config::Builder {
		crate::model::cloud_version_config::Builder::default()
	}
}

/// Identity configuration for a given version.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdentityVersionConfig {
	#[allow(missing_docs)] // documentation missing in model
	pub custom_display_names: std::option::Option<std::vec::Vec<crate::model::CustomDisplayName>>,
	#[allow(missing_docs)] // documentation missing in model
	pub custom_avatars: std::option::Option<std::vec::Vec<crate::model::CustomAvatar>>,
}
impl IdentityVersionConfig {
	#[allow(missing_docs)] // documentation missing in model
	pub fn custom_display_names(&self) -> std::option::Option<&[crate::model::CustomDisplayName]> {
		self.custom_display_names.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn custom_avatars(&self) -> std::option::Option<&[crate::model::CustomAvatar]> {
		self.custom_avatars.as_deref()
	}
}
impl std::fmt::Debug for IdentityVersionConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("IdentityVersionConfig");
		formatter.field("custom_display_names", &self.custom_display_names);
		formatter.field("custom_avatars", &self.custom_avatars);
		formatter.finish()
	}
}
/// See [`IdentityVersionConfig`](crate::model::IdentityVersionConfig)
pub mod identity_version_config {
	/// A builder for [`IdentityVersionConfig`](crate::model::IdentityVersionConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) custom_display_names:
			std::option::Option<std::vec::Vec<crate::model::CustomDisplayName>>,
		pub(crate) custom_avatars: std::option::Option<std::vec::Vec<crate::model::CustomAvatar>>,
	}
	impl Builder {
		/// Appends an item to `custom_display_names`.
		///
		/// To override the contents of this collection use [`set_custom_display_names`](Self::set_custom_display_names).
		///
		pub fn custom_display_names(mut self, input: crate::model::CustomDisplayName) -> Self {
			let mut v = self.custom_display_names.unwrap_or_default();
			v.push(input);
			self.custom_display_names = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_custom_display_names(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::CustomDisplayName>>,
		) -> Self {
			self.custom_display_names = input;
			self
		}
		/// Appends an item to `custom_avatars`.
		///
		/// To override the contents of this collection use [`set_custom_avatars`](Self::set_custom_avatars).
		///
		pub fn custom_avatars(mut self, input: crate::model::CustomAvatar) -> Self {
			let mut v = self.custom_avatars.unwrap_or_default();
			v.push(input);
			self.custom_avatars = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_custom_avatars(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::CustomAvatar>>,
		) -> Self {
			self.custom_avatars = input;
			self
		}
		/// Consumes the builder and constructs a [`IdentityVersionConfig`](crate::model::IdentityVersionConfig)
		pub fn build(self) -> crate::model::IdentityVersionConfig {
			crate::model::IdentityVersionConfig {
				custom_display_names: self.custom_display_names,
				custom_avatars: self.custom_avatars,
			}
		}
	}
}
impl IdentityVersionConfig {
	/// Creates a new builder-style object to manufacture [`IdentityVersionConfig`](crate::model::IdentityVersionConfig)
	pub fn builder() -> crate::model::identity_version_config::Builder {
		crate::model::identity_version_config::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CustomAvatar {
	/// A universally unique identifier.
	pub upload_id: std::option::Option<std::string::String>,
}
impl CustomAvatar {
	/// A universally unique identifier.
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
}
impl std::fmt::Debug for CustomAvatar {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CustomAvatar");
		formatter.field("upload_id", &self.upload_id);
		formatter.finish()
	}
}
/// See [`CustomAvatar`](crate::model::CustomAvatar)
pub mod custom_avatar {
	/// A builder for [`CustomAvatar`](crate::model::CustomAvatar)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) upload_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// Consumes the builder and constructs a [`CustomAvatar`](crate::model::CustomAvatar)
		pub fn build(self) -> crate::model::CustomAvatar {
			crate::model::CustomAvatar {
				upload_id: self.upload_id,
			}
		}
	}
}
impl CustomAvatar {
	/// Creates a new builder-style object to manufacture [`CustomAvatar`](crate::model::CustomAvatar)
	pub fn builder() -> crate::model::custom_avatar::Builder {
		crate::model::custom_avatar::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CustomDisplayName {
	#[allow(missing_docs)] // documentation missing in model
	pub display_name: std::option::Option<std::string::String>,
}
impl CustomDisplayName {
	#[allow(missing_docs)] // documentation missing in model
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
}
impl std::fmt::Debug for CustomDisplayName {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CustomDisplayName");
		formatter.field("display_name", &self.display_name);
		formatter.finish()
	}
}
/// See [`CustomDisplayName`](crate::model::CustomDisplayName)
pub mod custom_display_name {
	/// A builder for [`CustomDisplayName`](crate::model::CustomDisplayName)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) display_name: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// Consumes the builder and constructs a [`CustomDisplayName`](crate::model::CustomDisplayName)
		pub fn build(self) -> crate::model::CustomDisplayName {
			crate::model::CustomDisplayName {
				display_name: self.display_name,
			}
		}
	}
}
impl CustomDisplayName {
	/// Creates a new builder-style object to manufacture [`CustomDisplayName`](crate::model::CustomDisplayName)
	pub fn builder() -> crate::model::custom_display_name::Builder {
		crate::model::custom_display_name::Builder::default()
	}
}

/// KV configuration for a given version.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct KvVersionConfig {}
impl std::fmt::Debug for KvVersionConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("KvVersionConfig");
		formatter.finish()
	}
}
/// See [`KvVersionConfig`](crate::model::KvVersionConfig)
pub mod kv_version_config {
	/// A builder for [`KvVersionConfig`](crate::model::KvVersionConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`KvVersionConfig`](crate::model::KvVersionConfig)
		pub fn build(self) -> crate::model::KvVersionConfig {
			crate::model::KvVersionConfig {}
		}
	}
}
impl KvVersionConfig {
	/// Creates a new builder-style object to manufacture [`KvVersionConfig`](crate::model::KvVersionConfig)
	pub fn builder() -> crate::model::kv_version_config::Builder {
		crate::model::kv_version_config::Builder::default()
	}
}

/// Matchmaker configuration for a given version.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerVersionConfig {
	/// A list of game modes.
	pub lobby_groups: std::option::Option<std::vec::Vec<crate::model::LobbyGroup>>,
	/// Matchmaker captcha configuration.
	pub captcha: std::option::Option<crate::model::MatchmakerCaptcha>,
}
impl MatchmakerVersionConfig {
	/// A list of game modes.
	pub fn lobby_groups(&self) -> std::option::Option<&[crate::model::LobbyGroup]> {
		self.lobby_groups.as_deref()
	}
	/// Matchmaker captcha configuration.
	pub fn captcha(&self) -> std::option::Option<&crate::model::MatchmakerCaptcha> {
		self.captcha.as_ref()
	}
}
impl std::fmt::Debug for MatchmakerVersionConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerVersionConfig");
		formatter.field("lobby_groups", &self.lobby_groups);
		formatter.field("captcha", &self.captcha);
		formatter.finish()
	}
}
/// See [`MatchmakerVersionConfig`](crate::model::MatchmakerVersionConfig)
pub mod matchmaker_version_config {
	/// A builder for [`MatchmakerVersionConfig`](crate::model::MatchmakerVersionConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby_groups: std::option::Option<std::vec::Vec<crate::model::LobbyGroup>>,
		pub(crate) captcha: std::option::Option<crate::model::MatchmakerCaptcha>,
	}
	impl Builder {
		/// Appends an item to `lobby_groups`.
		///
		/// To override the contents of this collection use [`set_lobby_groups`](Self::set_lobby_groups).
		///
		/// A list of game modes.
		pub fn lobby_groups(mut self, input: crate::model::LobbyGroup) -> Self {
			let mut v = self.lobby_groups.unwrap_or_default();
			v.push(input);
			self.lobby_groups = Some(v);
			self
		}
		/// A list of game modes.
		pub fn set_lobby_groups(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::LobbyGroup>>,
		) -> Self {
			self.lobby_groups = input;
			self
		}
		/// Matchmaker captcha configuration.
		pub fn captcha(mut self, input: crate::model::MatchmakerCaptcha) -> Self {
			self.captcha = Some(input);
			self
		}
		/// Matchmaker captcha configuration.
		pub fn set_captcha(
			mut self,
			input: std::option::Option<crate::model::MatchmakerCaptcha>,
		) -> Self {
			self.captcha = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerVersionConfig`](crate::model::MatchmakerVersionConfig)
		pub fn build(self) -> crate::model::MatchmakerVersionConfig {
			crate::model::MatchmakerVersionConfig {
				lobby_groups: self.lobby_groups,
				captcha: self.captcha,
			}
		}
	}
}
impl MatchmakerVersionConfig {
	/// Creates a new builder-style object to manufacture [`MatchmakerVersionConfig`](crate::model::MatchmakerVersionConfig)
	pub fn builder() -> crate::model::matchmaker_version_config::Builder {
		crate::model::matchmaker_version_config::Builder::default()
	}
}

/// Matchmaker captcha configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerCaptcha {
	/// Denotes how many requests a connection can make before it is required to reverify a captcha.
	pub requests_before_reverify: std::option::Option<i32>,
	/// Denotes how long a connection can continue to reconnect without having to reverify a captcha (in milliseconds).
	pub verification_ttl: std::option::Option<i64>,
	/// hCpatcha configuration.
	pub hcaptcha: std::option::Option<crate::model::MatchmakerCaptchaHcaptcha>,
}
impl MatchmakerCaptcha {
	/// Denotes how many requests a connection can make before it is required to reverify a captcha.
	pub fn requests_before_reverify(&self) -> std::option::Option<i32> {
		self.requests_before_reverify
	}
	/// Denotes how long a connection can continue to reconnect without having to reverify a captcha (in milliseconds).
	pub fn verification_ttl(&self) -> std::option::Option<i64> {
		self.verification_ttl
	}
	/// hCpatcha configuration.
	pub fn hcaptcha(&self) -> std::option::Option<&crate::model::MatchmakerCaptchaHcaptcha> {
		self.hcaptcha.as_ref()
	}
}
impl std::fmt::Debug for MatchmakerCaptcha {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerCaptcha");
		formatter.field("requests_before_reverify", &self.requests_before_reverify);
		formatter.field("verification_ttl", &self.verification_ttl);
		formatter.field("hcaptcha", &self.hcaptcha);
		formatter.finish()
	}
}
/// See [`MatchmakerCaptcha`](crate::model::MatchmakerCaptcha)
pub mod matchmaker_captcha {
	/// A builder for [`MatchmakerCaptcha`](crate::model::MatchmakerCaptcha)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) requests_before_reverify: std::option::Option<i32>,
		pub(crate) verification_ttl: std::option::Option<i64>,
		pub(crate) hcaptcha: std::option::Option<crate::model::MatchmakerCaptchaHcaptcha>,
	}
	impl Builder {
		/// Denotes how many requests a connection can make before it is required to reverify a captcha.
		pub fn requests_before_reverify(mut self, input: i32) -> Self {
			self.requests_before_reverify = Some(input);
			self
		}
		/// Denotes how many requests a connection can make before it is required to reverify a captcha.
		pub fn set_requests_before_reverify(mut self, input: std::option::Option<i32>) -> Self {
			self.requests_before_reverify = input;
			self
		}
		/// Denotes how long a connection can continue to reconnect without having to reverify a captcha (in milliseconds).
		pub fn verification_ttl(mut self, input: i64) -> Self {
			self.verification_ttl = Some(input);
			self
		}
		/// Denotes how long a connection can continue to reconnect without having to reverify a captcha (in milliseconds).
		pub fn set_verification_ttl(mut self, input: std::option::Option<i64>) -> Self {
			self.verification_ttl = input;
			self
		}
		/// hCpatcha configuration.
		pub fn hcaptcha(mut self, input: crate::model::MatchmakerCaptchaHcaptcha) -> Self {
			self.hcaptcha = Some(input);
			self
		}
		/// hCpatcha configuration.
		pub fn set_hcaptcha(
			mut self,
			input: std::option::Option<crate::model::MatchmakerCaptchaHcaptcha>,
		) -> Self {
			self.hcaptcha = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerCaptcha`](crate::model::MatchmakerCaptcha)
		pub fn build(self) -> crate::model::MatchmakerCaptcha {
			crate::model::MatchmakerCaptcha {
				requests_before_reverify: self.requests_before_reverify,
				verification_ttl: self.verification_ttl,
				hcaptcha: self.hcaptcha,
			}
		}
	}
}
impl MatchmakerCaptcha {
	/// Creates a new builder-style object to manufacture [`MatchmakerCaptcha`](crate::model::MatchmakerCaptcha)
	pub fn builder() -> crate::model::matchmaker_captcha::Builder {
		crate::model::matchmaker_captcha::Builder::default()
	}
}

/// hCpatcha configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerCaptchaHcaptcha {
	/// How hard a captcha should be.
	pub level: std::option::Option<crate::model::CaptchaLevel>,
}
impl MatchmakerCaptchaHcaptcha {
	/// How hard a captcha should be.
	pub fn level(&self) -> std::option::Option<&crate::model::CaptchaLevel> {
		self.level.as_ref()
	}
}
impl std::fmt::Debug for MatchmakerCaptchaHcaptcha {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerCaptchaHcaptcha");
		formatter.field("level", &self.level);
		formatter.finish()
	}
}
/// See [`MatchmakerCaptchaHcaptcha`](crate::model::MatchmakerCaptchaHcaptcha)
pub mod matchmaker_captcha_hcaptcha {
	/// A builder for [`MatchmakerCaptchaHcaptcha`](crate::model::MatchmakerCaptchaHcaptcha)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) level: std::option::Option<crate::model::CaptchaLevel>,
	}
	impl Builder {
		/// How hard a captcha should be.
		pub fn level(mut self, input: crate::model::CaptchaLevel) -> Self {
			self.level = Some(input);
			self
		}
		/// How hard a captcha should be.
		pub fn set_level(mut self, input: std::option::Option<crate::model::CaptchaLevel>) -> Self {
			self.level = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerCaptchaHcaptcha`](crate::model::MatchmakerCaptchaHcaptcha)
		pub fn build(self) -> crate::model::MatchmakerCaptchaHcaptcha {
			crate::model::MatchmakerCaptchaHcaptcha { level: self.level }
		}
	}
}
impl MatchmakerCaptchaHcaptcha {
	/// Creates a new builder-style object to manufacture [`MatchmakerCaptchaHcaptcha`](crate::model::MatchmakerCaptchaHcaptcha)
	pub fn builder() -> crate::model::matchmaker_captcha_hcaptcha::Builder {
		crate::model::matchmaker_captcha_hcaptcha::Builder::default()
	}
}

/// How hard a captcha should be.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum CaptchaLevel {
	#[allow(missing_docs)] // documentation missing in model
	AlwaysOn,
	#[allow(missing_docs)] // documentation missing in model
	Difficult,
	#[allow(missing_docs)] // documentation missing in model
	Easy,
	#[allow(missing_docs)] // documentation missing in model
	Moderate,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for CaptchaLevel {
	fn from(s: &str) -> Self {
		match s {
			"always_on" => CaptchaLevel::AlwaysOn,
			"difficult" => CaptchaLevel::Difficult,
			"easy" => CaptchaLevel::Easy,
			"moderate" => CaptchaLevel::Moderate,
			other => CaptchaLevel::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for CaptchaLevel {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(CaptchaLevel::from(s))
	}
}
impl CaptchaLevel {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			CaptchaLevel::AlwaysOn => "always_on",
			CaptchaLevel::Difficult => "difficult",
			CaptchaLevel::Easy => "easy",
			CaptchaLevel::Moderate => "moderate",
			CaptchaLevel::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["always_on", "difficult", "easy", "moderate"]
	}
}
impl AsRef<str> for CaptchaLevel {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// A game mode.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LobbyGroup {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub name_id: std::option::Option<std::string::String>,
	/// A list of game mode regions.
	pub regions: std::option::Option<std::vec::Vec<crate::model::LobbyGroupRegion>>,
	/// Unsigned 32 bit integer.
	pub max_players_normal: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_players_direct: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_players_party: std::option::Option<i32>,
	/// A union representing the runtime a game mode runs on.
	pub runtime: std::option::Option<crate::model::LobbyGroupRuntime>,
}
impl LobbyGroup {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn name_id(&self) -> std::option::Option<&str> {
		self.name_id.as_deref()
	}
	/// A list of game mode regions.
	pub fn regions(&self) -> std::option::Option<&[crate::model::LobbyGroupRegion]> {
		self.regions.as_deref()
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_normal(&self) -> std::option::Option<i32> {
		self.max_players_normal
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_direct(&self) -> std::option::Option<i32> {
		self.max_players_direct
	}
	/// Unsigned 32 bit integer.
	pub fn max_players_party(&self) -> std::option::Option<i32> {
		self.max_players_party
	}
	/// A union representing the runtime a game mode runs on.
	pub fn runtime(&self) -> std::option::Option<&crate::model::LobbyGroupRuntime> {
		self.runtime.as_ref()
	}
}
impl std::fmt::Debug for LobbyGroup {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LobbyGroup");
		formatter.field("name_id", &self.name_id);
		formatter.field("regions", &self.regions);
		formatter.field("max_players_normal", &self.max_players_normal);
		formatter.field("max_players_direct", &self.max_players_direct);
		formatter.field("max_players_party", &self.max_players_party);
		formatter.field("runtime", &self.runtime);
		formatter.finish()
	}
}
/// See [`LobbyGroup`](crate::model::LobbyGroup)
pub mod lobby_group {
	/// A builder for [`LobbyGroup`](crate::model::LobbyGroup)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) name_id: std::option::Option<std::string::String>,
		pub(crate) regions: std::option::Option<std::vec::Vec<crate::model::LobbyGroupRegion>>,
		pub(crate) max_players_normal: std::option::Option<i32>,
		pub(crate) max_players_direct: std::option::Option<i32>,
		pub(crate) max_players_party: std::option::Option<i32>,
		pub(crate) runtime: std::option::Option<crate::model::LobbyGroupRuntime>,
	}
	impl Builder {
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name_id = input;
			self
		}
		/// Appends an item to `regions`.
		///
		/// To override the contents of this collection use [`set_regions`](Self::set_regions).
		///
		/// A list of game mode regions.
		pub fn regions(mut self, input: crate::model::LobbyGroupRegion) -> Self {
			let mut v = self.regions.unwrap_or_default();
			v.push(input);
			self.regions = Some(v);
			self
		}
		/// A list of game mode regions.
		pub fn set_regions(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::LobbyGroupRegion>>,
		) -> Self {
			self.regions = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_normal(mut self, input: i32) -> Self {
			self.max_players_normal = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_normal(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_normal = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_direct(mut self, input: i32) -> Self {
			self.max_players_direct = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_direct(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_direct = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_players_party(mut self, input: i32) -> Self {
			self.max_players_party = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_players_party(mut self, input: std::option::Option<i32>) -> Self {
			self.max_players_party = input;
			self
		}
		/// A union representing the runtime a game mode runs on.
		pub fn runtime(mut self, input: crate::model::LobbyGroupRuntime) -> Self {
			self.runtime = Some(input);
			self
		}
		/// A union representing the runtime a game mode runs on.
		pub fn set_runtime(
			mut self,
			input: std::option::Option<crate::model::LobbyGroupRuntime>,
		) -> Self {
			self.runtime = input;
			self
		}
		/// Consumes the builder and constructs a [`LobbyGroup`](crate::model::LobbyGroup)
		pub fn build(self) -> crate::model::LobbyGroup {
			crate::model::LobbyGroup {
				name_id: self.name_id,
				regions: self.regions,
				max_players_normal: self.max_players_normal,
				max_players_direct: self.max_players_direct,
				max_players_party: self.max_players_party,
				runtime: self.runtime,
			}
		}
	}
}
impl LobbyGroup {
	/// Creates a new builder-style object to manufacture [`LobbyGroup`](crate::model::LobbyGroup)
	pub fn builder() -> crate::model::lobby_group::Builder {
		crate::model::lobby_group::Builder::default()
	}
}

/// A union representing the runtime a game mode runs on.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum LobbyGroupRuntime {
	/// A game mode runtime running through Docker.
	Docker(crate::model::LobbyGroupRuntimeDocker),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl LobbyGroupRuntime {
	#[allow(irrefutable_let_patterns)]
	/// Tries to convert the enum instance into [`Docker`](crate::model::LobbyGroupRuntime::Docker), extracting the inner [`LobbyGroupRuntimeDocker`](crate::model::LobbyGroupRuntimeDocker).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_docker(&self) -> std::result::Result<&crate::model::LobbyGroupRuntimeDocker, &Self> {
		if let LobbyGroupRuntime::Docker(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Docker`](crate::model::LobbyGroupRuntime::Docker).
	pub fn is_docker(&self) -> bool {
		self.as_docker().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// A game mode runtime running through Docker.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LobbyGroupRuntimeDocker {
	/// A universally unique identifier.
	pub build_id: std::option::Option<std::string::String>,
	/// A list of docker arguments.
	pub args: std::option::Option<std::vec::Vec<std::string::String>>,
	/// A list of docker environment variables.
	pub env_vars: std::option::Option<std::vec::Vec<crate::model::LobbyGroupRuntimeDockerEnvVar>>,
	/// The network mode the job should run on.
	pub network_mode: std::option::Option<crate::model::NetworkMode>,
	/// A list of docker ports.
	pub ports: std::option::Option<std::vec::Vec<crate::model::LobbyGroupRuntimeDockerPort>>,
}
impl LobbyGroupRuntimeDocker {
	/// A universally unique identifier.
	pub fn build_id(&self) -> std::option::Option<&str> {
		self.build_id.as_deref()
	}
	/// A list of docker arguments.
	pub fn args(&self) -> std::option::Option<&[std::string::String]> {
		self.args.as_deref()
	}
	/// A list of docker environment variables.
	pub fn env_vars(&self) -> std::option::Option<&[crate::model::LobbyGroupRuntimeDockerEnvVar]> {
		self.env_vars.as_deref()
	}
	/// The network mode the job should run on.
	pub fn network_mode(&self) -> std::option::Option<&crate::model::NetworkMode> {
		self.network_mode.as_ref()
	}
	/// A list of docker ports.
	pub fn ports(&self) -> std::option::Option<&[crate::model::LobbyGroupRuntimeDockerPort]> {
		self.ports.as_deref()
	}
}
impl std::fmt::Debug for LobbyGroupRuntimeDocker {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LobbyGroupRuntimeDocker");
		formatter.field("build_id", &self.build_id);
		formatter.field("args", &self.args);
		formatter.field("env_vars", &self.env_vars);
		formatter.field("network_mode", &self.network_mode);
		formatter.field("ports", &self.ports);
		formatter.finish()
	}
}
/// See [`LobbyGroupRuntimeDocker`](crate::model::LobbyGroupRuntimeDocker)
pub mod lobby_group_runtime_docker {
	/// A builder for [`LobbyGroupRuntimeDocker`](crate::model::LobbyGroupRuntimeDocker)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) build_id: std::option::Option<std::string::String>,
		pub(crate) args: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) env_vars:
			std::option::Option<std::vec::Vec<crate::model::LobbyGroupRuntimeDockerEnvVar>>,
		pub(crate) network_mode: std::option::Option<crate::model::NetworkMode>,
		pub(crate) ports:
			std::option::Option<std::vec::Vec<crate::model::LobbyGroupRuntimeDockerPort>>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn build_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.build_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_build_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.build_id = input;
			self
		}
		/// Appends an item to `args`.
		///
		/// To override the contents of this collection use [`set_args`](Self::set_args).
		///
		/// A list of docker arguments.
		pub fn args(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.args.unwrap_or_default();
			v.push(input.into());
			self.args = Some(v);
			self
		}
		/// A list of docker arguments.
		pub fn set_args(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.args = input;
			self
		}
		/// Appends an item to `env_vars`.
		///
		/// To override the contents of this collection use [`set_env_vars`](Self::set_env_vars).
		///
		/// A list of docker environment variables.
		pub fn env_vars(mut self, input: crate::model::LobbyGroupRuntimeDockerEnvVar) -> Self {
			let mut v = self.env_vars.unwrap_or_default();
			v.push(input);
			self.env_vars = Some(v);
			self
		}
		/// A list of docker environment variables.
		pub fn set_env_vars(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::LobbyGroupRuntimeDockerEnvVar>>,
		) -> Self {
			self.env_vars = input;
			self
		}
		/// The network mode the job should run on.
		pub fn network_mode(mut self, input: crate::model::NetworkMode) -> Self {
			self.network_mode = Some(input);
			self
		}
		/// The network mode the job should run on.
		pub fn set_network_mode(
			mut self,
			input: std::option::Option<crate::model::NetworkMode>,
		) -> Self {
			self.network_mode = input;
			self
		}
		/// Appends an item to `ports`.
		///
		/// To override the contents of this collection use [`set_ports`](Self::set_ports).
		///
		/// A list of docker ports.
		pub fn ports(mut self, input: crate::model::LobbyGroupRuntimeDockerPort) -> Self {
			let mut v = self.ports.unwrap_or_default();
			v.push(input);
			self.ports = Some(v);
			self
		}
		/// A list of docker ports.
		pub fn set_ports(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::LobbyGroupRuntimeDockerPort>>,
		) -> Self {
			self.ports = input;
			self
		}
		/// Consumes the builder and constructs a [`LobbyGroupRuntimeDocker`](crate::model::LobbyGroupRuntimeDocker)
		pub fn build(self) -> crate::model::LobbyGroupRuntimeDocker {
			crate::model::LobbyGroupRuntimeDocker {
				build_id: self.build_id,
				args: self.args,
				env_vars: self.env_vars,
				network_mode: self.network_mode,
				ports: self.ports,
			}
		}
	}
}
impl LobbyGroupRuntimeDocker {
	/// Creates a new builder-style object to manufacture [`LobbyGroupRuntimeDocker`](crate::model::LobbyGroupRuntimeDocker)
	pub fn builder() -> crate::model::lobby_group_runtime_docker::Builder {
		crate::model::lobby_group_runtime_docker::Builder::default()
	}
}

/// The network mode the job should run on.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum NetworkMode {
	#[allow(missing_docs)] // documentation missing in model
	Bridge,
	#[allow(missing_docs)] // documentation missing in model
	Host,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for NetworkMode {
	fn from(s: &str) -> Self {
		match s {
			"bridge" => NetworkMode::Bridge,
			"host" => NetworkMode::Host,
			other => NetworkMode::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for NetworkMode {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(NetworkMode::from(s))
	}
}
impl NetworkMode {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			NetworkMode::Bridge => "bridge",
			NetworkMode::Host => "host",
			NetworkMode::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["bridge", "host"]
	}
}
impl AsRef<str> for NetworkMode {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// A docker environment variable.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LobbyGroupRuntimeDockerEnvVar {
	/// The key of this environment variable.
	pub key: std::option::Option<std::string::String>,
	/// The value of this environment variable.
	pub value: std::option::Option<std::string::String>,
}
impl LobbyGroupRuntimeDockerEnvVar {
	/// The key of this environment variable.
	pub fn key(&self) -> std::option::Option<&str> {
		self.key.as_deref()
	}
	/// The value of this environment variable.
	pub fn value(&self) -> std::option::Option<&str> {
		self.value.as_deref()
	}
}
impl std::fmt::Debug for LobbyGroupRuntimeDockerEnvVar {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LobbyGroupRuntimeDockerEnvVar");
		formatter.field("key", &self.key);
		formatter.field("value", &self.value);
		formatter.finish()
	}
}
/// See [`LobbyGroupRuntimeDockerEnvVar`](crate::model::LobbyGroupRuntimeDockerEnvVar)
pub mod lobby_group_runtime_docker_env_var {
	/// A builder for [`LobbyGroupRuntimeDockerEnvVar`](crate::model::LobbyGroupRuntimeDockerEnvVar)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) key: std::option::Option<std::string::String>,
		pub(crate) value: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// The key of this environment variable.
		pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
			self.key = Some(input.into());
			self
		}
		/// The key of this environment variable.
		pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.key = input;
			self
		}
		/// The value of this environment variable.
		pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
			self.value = Some(input.into());
			self
		}
		/// The value of this environment variable.
		pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.value = input;
			self
		}
		/// Consumes the builder and constructs a [`LobbyGroupRuntimeDockerEnvVar`](crate::model::LobbyGroupRuntimeDockerEnvVar)
		pub fn build(self) -> crate::model::LobbyGroupRuntimeDockerEnvVar {
			crate::model::LobbyGroupRuntimeDockerEnvVar {
				key: self.key,
				value: self.value,
			}
		}
	}
}
impl LobbyGroupRuntimeDockerEnvVar {
	/// Creates a new builder-style object to manufacture [`LobbyGroupRuntimeDockerEnvVar`](crate::model::LobbyGroupRuntimeDockerEnvVar)
	pub fn builder() -> crate::model::lobby_group_runtime_docker_env_var::Builder {
		crate::model::lobby_group_runtime_docker_env_var::Builder::default()
	}
}

/// A game mode region.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LobbyGroupRegion {
	/// A universally unique identifier.
	pub region_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub tier_name_id: std::option::Option<std::string::String>,
	/// Configuration for how many idle lobbies a game version should have.
	pub idle_lobbies: std::option::Option<crate::model::IdleLobbiesConfig>,
}
impl LobbyGroupRegion {
	/// A universally unique identifier.
	pub fn region_id(&self) -> std::option::Option<&str> {
		self.region_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn tier_name_id(&self) -> std::option::Option<&str> {
		self.tier_name_id.as_deref()
	}
	/// Configuration for how many idle lobbies a game version should have.
	pub fn idle_lobbies(&self) -> std::option::Option<&crate::model::IdleLobbiesConfig> {
		self.idle_lobbies.as_ref()
	}
}
impl std::fmt::Debug for LobbyGroupRegion {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LobbyGroupRegion");
		formatter.field("region_id", &self.region_id);
		formatter.field("tier_name_id", &self.tier_name_id);
		formatter.field("idle_lobbies", &self.idle_lobbies);
		formatter.finish()
	}
}
/// See [`LobbyGroupRegion`](crate::model::LobbyGroupRegion)
pub mod lobby_group_region {
	/// A builder for [`LobbyGroupRegion`](crate::model::LobbyGroupRegion)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) region_id: std::option::Option<std::string::String>,
		pub(crate) tier_name_id: std::option::Option<std::string::String>,
		pub(crate) idle_lobbies: std::option::Option<crate::model::IdleLobbiesConfig>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn region_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_region_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.region_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn tier_name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.tier_name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_tier_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.tier_name_id = input;
			self
		}
		/// Configuration for how many idle lobbies a game version should have.
		pub fn idle_lobbies(mut self, input: crate::model::IdleLobbiesConfig) -> Self {
			self.idle_lobbies = Some(input);
			self
		}
		/// Configuration for how many idle lobbies a game version should have.
		pub fn set_idle_lobbies(
			mut self,
			input: std::option::Option<crate::model::IdleLobbiesConfig>,
		) -> Self {
			self.idle_lobbies = input;
			self
		}
		/// Consumes the builder and constructs a [`LobbyGroupRegion`](crate::model::LobbyGroupRegion)
		pub fn build(self) -> crate::model::LobbyGroupRegion {
			crate::model::LobbyGroupRegion {
				region_id: self.region_id,
				tier_name_id: self.tier_name_id,
				idle_lobbies: self.idle_lobbies,
			}
		}
	}
}
impl LobbyGroupRegion {
	/// Creates a new builder-style object to manufacture [`LobbyGroupRegion`](crate::model::LobbyGroupRegion)
	pub fn builder() -> crate::model::lobby_group_region::Builder {
		crate::model::lobby_group_region::Builder::default()
	}
}

/// Configuration for how many idle lobbies a game version should have.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdleLobbiesConfig {
	/// Unsigned 32 bit integer.
	pub min_idle_lobbies: std::option::Option<i32>,
	/// Unsigned 32 bit integer.
	pub max_idle_lobbies: std::option::Option<i32>,
}
impl IdleLobbiesConfig {
	/// Unsigned 32 bit integer.
	pub fn min_idle_lobbies(&self) -> std::option::Option<i32> {
		self.min_idle_lobbies
	}
	/// Unsigned 32 bit integer.
	pub fn max_idle_lobbies(&self) -> std::option::Option<i32> {
		self.max_idle_lobbies
	}
}
impl std::fmt::Debug for IdleLobbiesConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("IdleLobbiesConfig");
		formatter.field("min_idle_lobbies", &self.min_idle_lobbies);
		formatter.field("max_idle_lobbies", &self.max_idle_lobbies);
		formatter.finish()
	}
}
/// See [`IdleLobbiesConfig`](crate::model::IdleLobbiesConfig)
pub mod idle_lobbies_config {
	/// A builder for [`IdleLobbiesConfig`](crate::model::IdleLobbiesConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) min_idle_lobbies: std::option::Option<i32>,
		pub(crate) max_idle_lobbies: std::option::Option<i32>,
	}
	impl Builder {
		/// Unsigned 32 bit integer.
		pub fn min_idle_lobbies(mut self, input: i32) -> Self {
			self.min_idle_lobbies = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_min_idle_lobbies(mut self, input: std::option::Option<i32>) -> Self {
			self.min_idle_lobbies = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn max_idle_lobbies(mut self, input: i32) -> Self {
			self.max_idle_lobbies = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_max_idle_lobbies(mut self, input: std::option::Option<i32>) -> Self {
			self.max_idle_lobbies = input;
			self
		}
		/// Consumes the builder and constructs a [`IdleLobbiesConfig`](crate::model::IdleLobbiesConfig)
		pub fn build(self) -> crate::model::IdleLobbiesConfig {
			crate::model::IdleLobbiesConfig {
				min_idle_lobbies: self.min_idle_lobbies,
				max_idle_lobbies: self.max_idle_lobbies,
			}
		}
	}
}
impl IdleLobbiesConfig {
	/// Creates a new builder-style object to manufacture [`IdleLobbiesConfig`](crate::model::IdleLobbiesConfig)
	pub fn builder() -> crate::model::idle_lobbies_config::Builder {
		crate::model::idle_lobbies_config::Builder::default()
	}
}

/// CDN configuration for a given version.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CdnVersionConfig {
	/// A universally unique identifier.
	pub site_id: std::option::Option<std::string::String>,
	/// Client-side configuration
	pub build_command: std::option::Option<std::string::String>,
	/// Client-side configuration
	pub build_output: std::option::Option<std::string::String>,
	/// Multiple CDN version routes.
	pub routes: std::option::Option<std::vec::Vec<crate::model::CdnVersionRoute>>,
}
impl CdnVersionConfig {
	/// A universally unique identifier.
	pub fn site_id(&self) -> std::option::Option<&str> {
		self.site_id.as_deref()
	}
	/// Client-side configuration
	pub fn build_command(&self) -> std::option::Option<&str> {
		self.build_command.as_deref()
	}
	/// Client-side configuration
	pub fn build_output(&self) -> std::option::Option<&str> {
		self.build_output.as_deref()
	}
	/// Multiple CDN version routes.
	pub fn routes(&self) -> std::option::Option<&[crate::model::CdnVersionRoute]> {
		self.routes.as_deref()
	}
}
impl std::fmt::Debug for CdnVersionConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CdnVersionConfig");
		formatter.field("site_id", &self.site_id);
		formatter.field("build_command", &self.build_command);
		formatter.field("build_output", &self.build_output);
		formatter.field("routes", &self.routes);
		formatter.finish()
	}
}
/// See [`CdnVersionConfig`](crate::model::CdnVersionConfig)
pub mod cdn_version_config {
	/// A builder for [`CdnVersionConfig`](crate::model::CdnVersionConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) site_id: std::option::Option<std::string::String>,
		pub(crate) build_command: std::option::Option<std::string::String>,
		pub(crate) build_output: std::option::Option<std::string::String>,
		pub(crate) routes: std::option::Option<std::vec::Vec<crate::model::CdnVersionRoute>>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn site_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.site_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_site_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.site_id = input;
			self
		}
		/// Client-side configuration
		pub fn build_command(mut self, input: impl Into<std::string::String>) -> Self {
			self.build_command = Some(input.into());
			self
		}
		/// Client-side configuration
		pub fn set_build_command(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.build_command = input;
			self
		}
		/// Client-side configuration
		pub fn build_output(mut self, input: impl Into<std::string::String>) -> Self {
			self.build_output = Some(input.into());
			self
		}
		/// Client-side configuration
		pub fn set_build_output(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.build_output = input;
			self
		}
		/// Appends an item to `routes`.
		///
		/// To override the contents of this collection use [`set_routes`](Self::set_routes).
		///
		/// Multiple CDN version routes.
		pub fn routes(mut self, input: crate::model::CdnVersionRoute) -> Self {
			let mut v = self.routes.unwrap_or_default();
			v.push(input);
			self.routes = Some(v);
			self
		}
		/// Multiple CDN version routes.
		pub fn set_routes(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::CdnVersionRoute>>,
		) -> Self {
			self.routes = input;
			self
		}
		/// Consumes the builder and constructs a [`CdnVersionConfig`](crate::model::CdnVersionConfig)
		pub fn build(self) -> crate::model::CdnVersionConfig {
			crate::model::CdnVersionConfig {
				site_id: self.site_id,
				build_command: self.build_command,
				build_output: self.build_output,
				routes: self.routes,
			}
		}
	}
}
impl CdnVersionConfig {
	/// Creates a new builder-style object to manufacture [`CdnVersionConfig`](crate::model::CdnVersionConfig)
	pub fn builder() -> crate::model::cdn_version_config::Builder {
		crate::model::cdn_version_config::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CdnVersionRoute {
	#[allow(missing_docs)] // documentation missing in model
	pub glob: std::option::Option<std::string::String>,
	/// Unsigned 32 bit integer.
	pub priority: std::option::Option<i32>,
	/// Multiple CDN version middleware.
	pub middlewares: std::option::Option<std::vec::Vec<crate::model::CdnVersionMiddleware>>,
}
impl CdnVersionRoute {
	#[allow(missing_docs)] // documentation missing in model
	pub fn glob(&self) -> std::option::Option<&str> {
		self.glob.as_deref()
	}
	/// Unsigned 32 bit integer.
	pub fn priority(&self) -> std::option::Option<i32> {
		self.priority
	}
	/// Multiple CDN version middleware.
	pub fn middlewares(&self) -> std::option::Option<&[crate::model::CdnVersionMiddleware]> {
		self.middlewares.as_deref()
	}
}
impl std::fmt::Debug for CdnVersionRoute {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CdnVersionRoute");
		formatter.field("glob", &self.glob);
		formatter.field("priority", &self.priority);
		formatter.field("middlewares", &self.middlewares);
		formatter.finish()
	}
}
/// See [`CdnVersionRoute`](crate::model::CdnVersionRoute)
pub mod cdn_version_route {
	/// A builder for [`CdnVersionRoute`](crate::model::CdnVersionRoute)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) glob: std::option::Option<std::string::String>,
		pub(crate) priority: std::option::Option<i32>,
		pub(crate) middlewares:
			std::option::Option<std::vec::Vec<crate::model::CdnVersionMiddleware>>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn glob(mut self, input: impl Into<std::string::String>) -> Self {
			self.glob = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_glob(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.glob = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn priority(mut self, input: i32) -> Self {
			self.priority = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
			self.priority = input;
			self
		}
		/// Appends an item to `middlewares`.
		///
		/// To override the contents of this collection use [`set_middlewares`](Self::set_middlewares).
		///
		/// Multiple CDN version middleware.
		pub fn middlewares(mut self, input: crate::model::CdnVersionMiddleware) -> Self {
			let mut v = self.middlewares.unwrap_or_default();
			v.push(input);
			self.middlewares = Some(v);
			self
		}
		/// Multiple CDN version middleware.
		pub fn set_middlewares(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::CdnVersionMiddleware>>,
		) -> Self {
			self.middlewares = input;
			self
		}
		/// Consumes the builder and constructs a [`CdnVersionRoute`](crate::model::CdnVersionRoute)
		pub fn build(self) -> crate::model::CdnVersionRoute {
			crate::model::CdnVersionRoute {
				glob: self.glob,
				priority: self.priority,
				middlewares: self.middlewares,
			}
		}
	}
}
impl CdnVersionRoute {
	/// Creates a new builder-style object to manufacture [`CdnVersionRoute`](crate::model::CdnVersionRoute)
	pub fn builder() -> crate::model::cdn_version_route::Builder {
		crate::model::cdn_version_route::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CdnVersionMiddleware {
	#[allow(missing_docs)] // documentation missing in model
	pub kind: std::option::Option<crate::model::CdnVersionMiddlewareKind>,
}
impl CdnVersionMiddleware {
	#[allow(missing_docs)] // documentation missing in model
	pub fn kind(&self) -> std::option::Option<&crate::model::CdnVersionMiddlewareKind> {
		self.kind.as_ref()
	}
}
impl std::fmt::Debug for CdnVersionMiddleware {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CdnVersionMiddleware");
		formatter.field("kind", &self.kind);
		formatter.finish()
	}
}
/// See [`CdnVersionMiddleware`](crate::model::CdnVersionMiddleware)
pub mod cdn_version_middleware {
	/// A builder for [`CdnVersionMiddleware`](crate::model::CdnVersionMiddleware)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) kind: std::option::Option<crate::model::CdnVersionMiddlewareKind>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn kind(mut self, input: crate::model::CdnVersionMiddlewareKind) -> Self {
			self.kind = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_kind(
			mut self,
			input: std::option::Option<crate::model::CdnVersionMiddlewareKind>,
		) -> Self {
			self.kind = input;
			self
		}
		/// Consumes the builder and constructs a [`CdnVersionMiddleware`](crate::model::CdnVersionMiddleware)
		pub fn build(self) -> crate::model::CdnVersionMiddleware {
			crate::model::CdnVersionMiddleware { kind: self.kind }
		}
	}
}
impl CdnVersionMiddleware {
	/// Creates a new builder-style object to manufacture [`CdnVersionMiddleware`](crate::model::CdnVersionMiddleware)
	pub fn builder() -> crate::model::cdn_version_middleware::Builder {
		crate::model::cdn_version_middleware::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum CdnVersionMiddlewareKind {
	#[allow(missing_docs)] // documentation missing in model
	CustomHeaders(crate::model::CdnVersionCustomHeadersMiddleware),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl CdnVersionMiddlewareKind {
	#[allow(irrefutable_let_patterns)]
	/// Tries to convert the enum instance into [`CustomHeaders`](crate::model::CdnVersionMiddlewareKind::CustomHeaders), extracting the inner [`CdnVersionCustomHeadersMiddleware`](crate::model::CdnVersionCustomHeadersMiddleware).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_custom_headers(
		&self,
	) -> std::result::Result<&crate::model::CdnVersionCustomHeadersMiddleware, &Self> {
		if let CdnVersionMiddlewareKind::CustomHeaders(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`CustomHeaders`](crate::model::CdnVersionMiddlewareKind::CustomHeaders).
	pub fn is_custom_headers(&self) -> bool {
		self.as_custom_headers().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CdnVersionCustomHeadersMiddleware {
	#[allow(missing_docs)] // documentation missing in model
	pub headers: std::option::Option<std::vec::Vec<crate::model::CdnVersionHeader>>,
}
impl CdnVersionCustomHeadersMiddleware {
	#[allow(missing_docs)] // documentation missing in model
	pub fn headers(&self) -> std::option::Option<&[crate::model::CdnVersionHeader]> {
		self.headers.as_deref()
	}
}
impl std::fmt::Debug for CdnVersionCustomHeadersMiddleware {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CdnVersionCustomHeadersMiddleware");
		formatter.field("headers", &self.headers);
		formatter.finish()
	}
}
/// See [`CdnVersionCustomHeadersMiddleware`](crate::model::CdnVersionCustomHeadersMiddleware)
pub mod cdn_version_custom_headers_middleware {
	/// A builder for [`CdnVersionCustomHeadersMiddleware`](crate::model::CdnVersionCustomHeadersMiddleware)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) headers: std::option::Option<std::vec::Vec<crate::model::CdnVersionHeader>>,
	}
	impl Builder {
		/// Appends an item to `headers`.
		///
		/// To override the contents of this collection use [`set_headers`](Self::set_headers).
		///
		pub fn headers(mut self, input: crate::model::CdnVersionHeader) -> Self {
			let mut v = self.headers.unwrap_or_default();
			v.push(input);
			self.headers = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_headers(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::CdnVersionHeader>>,
		) -> Self {
			self.headers = input;
			self
		}
		/// Consumes the builder and constructs a [`CdnVersionCustomHeadersMiddleware`](crate::model::CdnVersionCustomHeadersMiddleware)
		pub fn build(self) -> crate::model::CdnVersionCustomHeadersMiddleware {
			crate::model::CdnVersionCustomHeadersMiddleware {
				headers: self.headers,
			}
		}
	}
}
impl CdnVersionCustomHeadersMiddleware {
	/// Creates a new builder-style object to manufacture [`CdnVersionCustomHeadersMiddleware`](crate::model::CdnVersionCustomHeadersMiddleware)
	pub fn builder() -> crate::model::cdn_version_custom_headers_middleware::Builder {
		crate::model::cdn_version_custom_headers_middleware::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CdnVersionHeader {
	#[allow(missing_docs)] // documentation missing in model
	pub name: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub value: std::option::Option<std::string::String>,
}
impl CdnVersionHeader {
	#[allow(missing_docs)] // documentation missing in model
	pub fn name(&self) -> std::option::Option<&str> {
		self.name.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn value(&self) -> std::option::Option<&str> {
		self.value.as_deref()
	}
}
impl std::fmt::Debug for CdnVersionHeader {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CdnVersionHeader");
		formatter.field("name", &self.name);
		formatter.field("value", &self.value);
		formatter.finish()
	}
}
/// See [`CdnVersionHeader`](crate::model::CdnVersionHeader)
pub mod cdn_version_header {
	/// A builder for [`CdnVersionHeader`](crate::model::CdnVersionHeader)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) name: std::option::Option<std::string::String>,
		pub(crate) value: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
			self.name = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
			self.value = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.value = input;
			self
		}
		/// Consumes the builder and constructs a [`CdnVersionHeader`](crate::model::CdnVersionHeader)
		pub fn build(self) -> crate::model::CdnVersionHeader {
			crate::model::CdnVersionHeader {
				name: self.name,
				value: self.value,
			}
		}
	}
}
impl CdnVersionHeader {
	/// Creates a new builder-style object to manufacture [`CdnVersionHeader`](crate::model::CdnVersionHeader)
	pub fn builder() -> crate::model::cdn_version_header::Builder {
		crate::model::cdn_version_header::Builder::default()
	}
}

/// A full version.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct VersionFull {
	/// A universally unique identifier.
	pub version_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// Cloud configuration for a given version.
	pub config: std::option::Option<crate::model::CloudVersionConfig>,
}
impl VersionFull {
	/// A universally unique identifier.
	pub fn version_id(&self) -> std::option::Option<&str> {
		self.version_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// Cloud configuration for a given version.
	pub fn config(&self) -> std::option::Option<&crate::model::CloudVersionConfig> {
		self.config.as_ref()
	}
}
impl std::fmt::Debug for VersionFull {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("VersionFull");
		formatter.field("version_id", &self.version_id);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("display_name", &self.display_name);
		formatter.field("config", &self.config);
		formatter.finish()
	}
}
/// See [`VersionFull`](crate::model::VersionFull)
pub mod version_full {
	/// A builder for [`VersionFull`](crate::model::VersionFull)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) version_id: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) config: std::option::Option<crate::model::CloudVersionConfig>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn version_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.version_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_version_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.version_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// Cloud configuration for a given version.
		pub fn config(mut self, input: crate::model::CloudVersionConfig) -> Self {
			self.config = Some(input);
			self
		}
		/// Cloud configuration for a given version.
		pub fn set_config(
			mut self,
			input: std::option::Option<crate::model::CloudVersionConfig>,
		) -> Self {
			self.config = input;
			self
		}
		/// Consumes the builder and constructs a [`VersionFull`](crate::model::VersionFull)
		pub fn build(self) -> crate::model::VersionFull {
			crate::model::VersionFull {
				version_id: self.version_id,
				create_ts: self.create_ts,
				display_name: self.display_name,
				config: self.config,
			}
		}
	}
}
impl VersionFull {
	/// Creates a new builder-style object to manufacture [`VersionFull`](crate::model::VersionFull)
	pub fn builder() -> crate::model::version_full::Builder {
		crate::model::version_full::Builder::default()
	}
}

/// A billing plan.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameBillingPlan {
	/// A value denoting a game's billing plan.
	pub code: std::option::Option<crate::model::GameBillingPlanCode>,
	#[allow(missing_docs)] // documentation missing in model
	pub name: std::option::Option<std::string::String>,
	/// The interval a billing plan acts on.
	pub interval: std::option::Option<crate::model::BillingInterval>,
	/// Signed 64 bit integer.
	pub amount: std::option::Option<i64>,
	#[allow(missing_docs)] // documentation missing in model
	pub currency: std::option::Option<std::string::String>,
}
impl GameBillingPlan {
	/// A value denoting a game's billing plan.
	pub fn code(&self) -> std::option::Option<&crate::model::GameBillingPlanCode> {
		self.code.as_ref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn name(&self) -> std::option::Option<&str> {
		self.name.as_deref()
	}
	/// The interval a billing plan acts on.
	pub fn interval(&self) -> std::option::Option<&crate::model::BillingInterval> {
		self.interval.as_ref()
	}
	/// Signed 64 bit integer.
	pub fn amount(&self) -> std::option::Option<i64> {
		self.amount
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn currency(&self) -> std::option::Option<&str> {
		self.currency.as_deref()
	}
}
impl std::fmt::Debug for GameBillingPlan {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameBillingPlan");
		formatter.field("code", &self.code);
		formatter.field("name", &self.name);
		formatter.field("interval", &self.interval);
		formatter.field("amount", &self.amount);
		formatter.field("currency", &self.currency);
		formatter.finish()
	}
}
/// See [`GameBillingPlan`](crate::model::GameBillingPlan)
pub mod game_billing_plan {
	/// A builder for [`GameBillingPlan`](crate::model::GameBillingPlan)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) code: std::option::Option<crate::model::GameBillingPlanCode>,
		pub(crate) name: std::option::Option<std::string::String>,
		pub(crate) interval: std::option::Option<crate::model::BillingInterval>,
		pub(crate) amount: std::option::Option<i64>,
		pub(crate) currency: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A value denoting a game's billing plan.
		pub fn code(mut self, input: crate::model::GameBillingPlanCode) -> Self {
			self.code = Some(input);
			self
		}
		/// A value denoting a game's billing plan.
		pub fn set_code(
			mut self,
			input: std::option::Option<crate::model::GameBillingPlanCode>,
		) -> Self {
			self.code = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
			self.name = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name = input;
			self
		}
		/// The interval a billing plan acts on.
		pub fn interval(mut self, input: crate::model::BillingInterval) -> Self {
			self.interval = Some(input);
			self
		}
		/// The interval a billing plan acts on.
		pub fn set_interval(
			mut self,
			input: std::option::Option<crate::model::BillingInterval>,
		) -> Self {
			self.interval = input;
			self
		}
		/// Signed 64 bit integer.
		pub fn amount(mut self, input: i64) -> Self {
			self.amount = Some(input);
			self
		}
		/// Signed 64 bit integer.
		pub fn set_amount(mut self, input: std::option::Option<i64>) -> Self {
			self.amount = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn currency(mut self, input: impl Into<std::string::String>) -> Self {
			self.currency = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_currency(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.currency = input;
			self
		}
		/// Consumes the builder and constructs a [`GameBillingPlan`](crate::model::GameBillingPlan)
		pub fn build(self) -> crate::model::GameBillingPlan {
			crate::model::GameBillingPlan {
				code: self.code,
				name: self.name,
				interval: self.interval,
				amount: self.amount,
				currency: self.currency,
			}
		}
	}
}
impl GameBillingPlan {
	/// Creates a new builder-style object to manufacture [`GameBillingPlan`](crate::model::GameBillingPlan)
	pub fn builder() -> crate::model::game_billing_plan::Builder {
		crate::model::game_billing_plan::Builder::default()
	}
}

/// The interval a billing plan acts on.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum BillingInterval {
	#[allow(missing_docs)] // documentation missing in model
	Monthly,
	#[allow(missing_docs)] // documentation missing in model
	Yearly,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for BillingInterval {
	fn from(s: &str) -> Self {
		match s {
			"monthly" => BillingInterval::Monthly,
			"yearly" => BillingInterval::Yearly,
			other => BillingInterval::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for BillingInterval {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(BillingInterval::from(s))
	}
}
impl BillingInterval {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			BillingInterval::Monthly => "monthly",
			BillingInterval::Yearly => "yearly",
			BillingInterval::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["monthly", "yearly"]
	}
}
impl AsRef<str> for BillingInterval {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// A value denoting a game's billing plan.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum GameBillingPlanCode {
	#[allow(missing_docs)] // documentation missing in model
	Enterprise,
	#[allow(missing_docs)] // documentation missing in model
	Free,
	#[allow(missing_docs)] // documentation missing in model
	GameHobbyMonthly,
	#[allow(missing_docs)] // documentation missing in model
	GameHobbyYearly,
	#[allow(missing_docs)] // documentation missing in model
	GameStudioMonthly,
	#[allow(missing_docs)] // documentation missing in model
	GameStudioYearly,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for GameBillingPlanCode {
	fn from(s: &str) -> Self {
		match s {
			"enterprise" => GameBillingPlanCode::Enterprise,
			"free" => GameBillingPlanCode::Free,
			"game_hobby_monthly" => GameBillingPlanCode::GameHobbyMonthly,
			"game_hobby_yearly" => GameBillingPlanCode::GameHobbyYearly,
			"game_studio_monthly" => GameBillingPlanCode::GameStudioMonthly,
			"game_studio_yearly" => GameBillingPlanCode::GameStudioYearly,
			other => GameBillingPlanCode::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for GameBillingPlanCode {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(GameBillingPlanCode::from(s))
	}
}
impl GameBillingPlanCode {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			GameBillingPlanCode::Enterprise => "enterprise",
			GameBillingPlanCode::Free => "free",
			GameBillingPlanCode::GameHobbyMonthly => "game_hobby_monthly",
			GameBillingPlanCode::GameHobbyYearly => "game_hobby_yearly",
			GameBillingPlanCode::GameStudioMonthly => "game_studio_monthly",
			GameBillingPlanCode::GameStudioYearly => "game_studio_yearly",
			GameBillingPlanCode::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&[
			"enterprise",
			"free",
			"game_hobby_monthly",
			"game_hobby_yearly",
			"game_studio_monthly",
			"game_studio_yearly",
		]
	}
}
impl AsRef<str> for GameBillingPlanCode {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// A region summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegionSummary {
	/// A universally unique identifier.
	pub region_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub region_name_id: std::option::Option<std::string::String>,
	/// The server provider of this region.
	pub provider: std::option::Option<std::string::String>,
	/// A universal number given to this region.
	pub universal_region: std::option::Option<i16>,
	/// Represent a resource's readable display name.
	pub provider_display_name: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub region_display_name: std::option::Option<std::string::String>,
}
impl RegionSummary {
	/// A universally unique identifier.
	pub fn region_id(&self) -> std::option::Option<&str> {
		self.region_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn region_name_id(&self) -> std::option::Option<&str> {
		self.region_name_id.as_deref()
	}
	/// The server provider of this region.
	pub fn provider(&self) -> std::option::Option<&str> {
		self.provider.as_deref()
	}
	/// A universal number given to this region.
	pub fn universal_region(&self) -> std::option::Option<i16> {
		self.universal_region
	}
	/// Represent a resource's readable display name.
	pub fn provider_display_name(&self) -> std::option::Option<&str> {
		self.provider_display_name.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn region_display_name(&self) -> std::option::Option<&str> {
		self.region_display_name.as_deref()
	}
}
impl std::fmt::Debug for RegionSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RegionSummary");
		formatter.field("region_id", &self.region_id);
		formatter.field("region_name_id", &self.region_name_id);
		formatter.field("provider", &self.provider);
		formatter.field("universal_region", &self.universal_region);
		formatter.field("provider_display_name", &self.provider_display_name);
		formatter.field("region_display_name", &self.region_display_name);
		formatter.finish()
	}
}
/// See [`RegionSummary`](crate::model::RegionSummary)
pub mod region_summary {
	/// A builder for [`RegionSummary`](crate::model::RegionSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) region_id: std::option::Option<std::string::String>,
		pub(crate) region_name_id: std::option::Option<std::string::String>,
		pub(crate) provider: std::option::Option<std::string::String>,
		pub(crate) universal_region: std::option::Option<i16>,
		pub(crate) provider_display_name: std::option::Option<std::string::String>,
		pub(crate) region_display_name: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn region_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_region_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.region_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn region_name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_region_name_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.region_name_id = input;
			self
		}
		/// The server provider of this region.
		pub fn provider(mut self, input: impl Into<std::string::String>) -> Self {
			self.provider = Some(input.into());
			self
		}
		/// The server provider of this region.
		pub fn set_provider(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.provider = input;
			self
		}
		/// A universal number given to this region.
		pub fn universal_region(mut self, input: i16) -> Self {
			self.universal_region = Some(input);
			self
		}
		/// A universal number given to this region.
		pub fn set_universal_region(mut self, input: std::option::Option<i16>) -> Self {
			self.universal_region = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn provider_display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.provider_display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_provider_display_name(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.provider_display_name = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn region_display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_region_display_name(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.region_display_name = input;
			self
		}
		/// Consumes the builder and constructs a [`RegionSummary`](crate::model::RegionSummary)
		pub fn build(self) -> crate::model::RegionSummary {
			crate::model::RegionSummary {
				region_id: self.region_id,
				region_name_id: self.region_name_id,
				provider: self.provider,
				universal_region: self.universal_region,
				provider_display_name: self.provider_display_name,
				region_display_name: self.region_display_name,
			}
		}
	}
}
impl RegionSummary {
	/// Creates a new builder-style object to manufacture [`RegionSummary`](crate::model::RegionSummary)
	pub fn builder() -> crate::model::region_summary::Builder {
		crate::model::region_summary::Builder::default()
	}
}

/// Region tier metrics.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegionTierMetrics {
	/// A universally unique identifier.
	pub namespace_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub region_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub tier_name_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub lobby_group_name_id: std::option::Option<std::string::String>,
	/// How long a region tier has been active (in seconds).
	pub uptime: std::option::Option<i64>,
}
impl RegionTierMetrics {
	/// A universally unique identifier.
	pub fn namespace_id(&self) -> std::option::Option<&str> {
		self.namespace_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn region_id(&self) -> std::option::Option<&str> {
		self.region_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn tier_name_id(&self) -> std::option::Option<&str> {
		self.tier_name_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn lobby_group_name_id(&self) -> std::option::Option<&str> {
		self.lobby_group_name_id.as_deref()
	}
	/// How long a region tier has been active (in seconds).
	pub fn uptime(&self) -> std::option::Option<i64> {
		self.uptime
	}
}
impl std::fmt::Debug for RegionTierMetrics {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RegionTierMetrics");
		formatter.field("namespace_id", &self.namespace_id);
		formatter.field("region_id", &self.region_id);
		formatter.field("tier_name_id", &self.tier_name_id);
		formatter.field("lobby_group_name_id", &self.lobby_group_name_id);
		formatter.field("uptime", &self.uptime);
		formatter.finish()
	}
}
/// See [`RegionTierMetrics`](crate::model::RegionTierMetrics)
pub mod region_tier_metrics {
	/// A builder for [`RegionTierMetrics`](crate::model::RegionTierMetrics)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) namespace_id: std::option::Option<std::string::String>,
		pub(crate) region_id: std::option::Option<std::string::String>,
		pub(crate) tier_name_id: std::option::Option<std::string::String>,
		pub(crate) lobby_group_name_id: std::option::Option<std::string::String>,
		pub(crate) uptime: std::option::Option<i64>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn namespace_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.namespace_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_namespace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.namespace_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn region_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_region_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.region_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn tier_name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.tier_name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_tier_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.tier_name_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn lobby_group_name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.lobby_group_name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_lobby_group_name_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.lobby_group_name_id = input;
			self
		}
		/// How long a region tier has been active (in seconds).
		pub fn uptime(mut self, input: i64) -> Self {
			self.uptime = Some(input);
			self
		}
		/// How long a region tier has been active (in seconds).
		pub fn set_uptime(mut self, input: std::option::Option<i64>) -> Self {
			self.uptime = input;
			self
		}
		/// Consumes the builder and constructs a [`RegionTierMetrics`](crate::model::RegionTierMetrics)
		pub fn build(self) -> crate::model::RegionTierMetrics {
			crate::model::RegionTierMetrics {
				namespace_id: self.namespace_id,
				region_id: self.region_id,
				tier_name_id: self.tier_name_id,
				lobby_group_name_id: self.lobby_group_name_id,
				uptime: self.uptime,
			}
		}
	}
}
impl RegionTierMetrics {
	/// Creates a new builder-style object to manufacture [`RegionTierMetrics`](crate::model::RegionTierMetrics)
	pub fn builder() -> crate::model::region_tier_metrics::Builder {
		crate::model::region_tier_metrics::Builder::default()
	}
}

/// A namespace summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NamespaceSummary {
	/// A universally unique identifier.
	pub namespace_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub version_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub name_id: std::option::Option<std::string::String>,
}
impl NamespaceSummary {
	/// A universally unique identifier.
	pub fn namespace_id(&self) -> std::option::Option<&str> {
		self.namespace_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// A universally unique identifier.
	pub fn version_id(&self) -> std::option::Option<&str> {
		self.version_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn name_id(&self) -> std::option::Option<&str> {
		self.name_id.as_deref()
	}
}
impl std::fmt::Debug for NamespaceSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("NamespaceSummary");
		formatter.field("namespace_id", &self.namespace_id);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("display_name", &self.display_name);
		formatter.field("version_id", &self.version_id);
		formatter.field("name_id", &self.name_id);
		formatter.finish()
	}
}
/// See [`NamespaceSummary`](crate::model::NamespaceSummary)
pub mod namespace_summary {
	/// A builder for [`NamespaceSummary`](crate::model::NamespaceSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) namespace_id: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) version_id: std::option::Option<std::string::String>,
		pub(crate) name_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn namespace_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.namespace_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_namespace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.namespace_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// A universally unique identifier.
		pub fn version_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.version_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_version_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.version_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name_id = input;
			self
		}
		/// Consumes the builder and constructs a [`NamespaceSummary`](crate::model::NamespaceSummary)
		pub fn build(self) -> crate::model::NamespaceSummary {
			crate::model::NamespaceSummary {
				namespace_id: self.namespace_id,
				create_ts: self.create_ts,
				display_name: self.display_name,
				version_id: self.version_id,
				name_id: self.name_id,
			}
		}
	}
}
impl NamespaceSummary {
	/// Creates a new builder-style object to manufacture [`NamespaceSummary`](crate::model::NamespaceSummary)
	pub fn builder() -> crate::model::namespace_summary::Builder {
		crate::model::namespace_summary::Builder::default()
	}
}

/// A game handle.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameHandle {
	/// A universally unique identifier.
	pub game_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub name_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// The URL of this game's logo image.
	pub logo_url: std::option::Option<std::string::String>,
	/// The URL of this game's banner image.
	pub banner_url: std::option::Option<std::string::String>,
}
impl GameHandle {
	/// A universally unique identifier.
	pub fn game_id(&self) -> std::option::Option<&str> {
		self.game_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn name_id(&self) -> std::option::Option<&str> {
		self.name_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// The URL of this game's logo image.
	pub fn logo_url(&self) -> std::option::Option<&str> {
		self.logo_url.as_deref()
	}
	/// The URL of this game's banner image.
	pub fn banner_url(&self) -> std::option::Option<&str> {
		self.banner_url.as_deref()
	}
}
impl std::fmt::Debug for GameHandle {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameHandle");
		formatter.field("game_id", &self.game_id);
		formatter.field("name_id", &self.name_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("logo_url", &self.logo_url);
		formatter.field("banner_url", &self.banner_url);
		formatter.finish()
	}
}
/// See [`GameHandle`](crate::model::GameHandle)
pub mod game_handle {
	/// A builder for [`GameHandle`](crate::model::GameHandle)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_id: std::option::Option<std::string::String>,
		pub(crate) name_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) logo_url: std::option::Option<std::string::String>,
		pub(crate) banner_url: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn game_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_game_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// The URL of this game's logo image.
		pub fn logo_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.logo_url = Some(input.into());
			self
		}
		/// The URL of this game's logo image.
		pub fn set_logo_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.logo_url = input;
			self
		}
		/// The URL of this game's banner image.
		pub fn banner_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.banner_url = Some(input.into());
			self
		}
		/// The URL of this game's banner image.
		pub fn set_banner_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.banner_url = input;
			self
		}
		/// Consumes the builder and constructs a [`GameHandle`](crate::model::GameHandle)
		pub fn build(self) -> crate::model::GameHandle {
			crate::model::GameHandle {
				game_id: self.game_id,
				name_id: self.name_id,
				display_name: self.display_name,
				logo_url: self.logo_url,
				banner_url: self.banner_url,
			}
		}
	}
}
impl GameHandle {
	/// Creates a new builder-style object to manufacture [`GameHandle`](crate::model::GameHandle)
	pub fn builder() -> crate::model::game_handle::Builder {
		crate::model::game_handle::Builder::default()
	}
}

/// A full game.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameFull {
	/// A universally unique identifier.
	pub game_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub name_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub developer_group_id: std::option::Option<std::string::String>,
	/// Unsigned 32 bit integer.
	pub total_player_count: std::option::Option<i32>,
	/// The URL of this game's logo image.
	pub logo_url: std::option::Option<std::string::String>,
	/// The URL of this game's banner image.
	pub banner_url: std::option::Option<std::string::String>,
	/// A list of namespace summaries.
	pub namespaces: std::option::Option<std::vec::Vec<crate::model::NamespaceSummary>>,
	/// A list of version summaries.
	pub versions: std::option::Option<std::vec::Vec<crate::model::VersionSummary>>,
	/// A list of region summaries.
	pub available_regions: std::option::Option<std::vec::Vec<crate::model::RegionSummary>>,
}
impl GameFull {
	/// A universally unique identifier.
	pub fn game_id(&self) -> std::option::Option<&str> {
		self.game_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn name_id(&self) -> std::option::Option<&str> {
		self.name_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// A universally unique identifier.
	pub fn developer_group_id(&self) -> std::option::Option<&str> {
		self.developer_group_id.as_deref()
	}
	/// Unsigned 32 bit integer.
	pub fn total_player_count(&self) -> std::option::Option<i32> {
		self.total_player_count
	}
	/// The URL of this game's logo image.
	pub fn logo_url(&self) -> std::option::Option<&str> {
		self.logo_url.as_deref()
	}
	/// The URL of this game's banner image.
	pub fn banner_url(&self) -> std::option::Option<&str> {
		self.banner_url.as_deref()
	}
	/// A list of namespace summaries.
	pub fn namespaces(&self) -> std::option::Option<&[crate::model::NamespaceSummary]> {
		self.namespaces.as_deref()
	}
	/// A list of version summaries.
	pub fn versions(&self) -> std::option::Option<&[crate::model::VersionSummary]> {
		self.versions.as_deref()
	}
	/// A list of region summaries.
	pub fn available_regions(&self) -> std::option::Option<&[crate::model::RegionSummary]> {
		self.available_regions.as_deref()
	}
}
impl std::fmt::Debug for GameFull {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameFull");
		formatter.field("game_id", &self.game_id);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("name_id", &self.name_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("developer_group_id", &self.developer_group_id);
		formatter.field("total_player_count", &self.total_player_count);
		formatter.field("logo_url", &self.logo_url);
		formatter.field("banner_url", &self.banner_url);
		formatter.field("namespaces", &self.namespaces);
		formatter.field("versions", &self.versions);
		formatter.field("available_regions", &self.available_regions);
		formatter.finish()
	}
}
/// See [`GameFull`](crate::model::GameFull)
pub mod game_full {
	/// A builder for [`GameFull`](crate::model::GameFull)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_id: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) name_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) developer_group_id: std::option::Option<std::string::String>,
		pub(crate) total_player_count: std::option::Option<i32>,
		pub(crate) logo_url: std::option::Option<std::string::String>,
		pub(crate) banner_url: std::option::Option<std::string::String>,
		pub(crate) namespaces: std::option::Option<std::vec::Vec<crate::model::NamespaceSummary>>,
		pub(crate) versions: std::option::Option<std::vec::Vec<crate::model::VersionSummary>>,
		pub(crate) available_regions:
			std::option::Option<std::vec::Vec<crate::model::RegionSummary>>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn game_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_game_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// A universally unique identifier.
		pub fn developer_group_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.developer_group_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_developer_group_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.developer_group_id = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn total_player_count(mut self, input: i32) -> Self {
			self.total_player_count = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_total_player_count(mut self, input: std::option::Option<i32>) -> Self {
			self.total_player_count = input;
			self
		}
		/// The URL of this game's logo image.
		pub fn logo_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.logo_url = Some(input.into());
			self
		}
		/// The URL of this game's logo image.
		pub fn set_logo_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.logo_url = input;
			self
		}
		/// The URL of this game's banner image.
		pub fn banner_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.banner_url = Some(input.into());
			self
		}
		/// The URL of this game's banner image.
		pub fn set_banner_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.banner_url = input;
			self
		}
		/// Appends an item to `namespaces`.
		///
		/// To override the contents of this collection use [`set_namespaces`](Self::set_namespaces).
		///
		/// A list of namespace summaries.
		pub fn namespaces(mut self, input: crate::model::NamespaceSummary) -> Self {
			let mut v = self.namespaces.unwrap_or_default();
			v.push(input);
			self.namespaces = Some(v);
			self
		}
		/// A list of namespace summaries.
		pub fn set_namespaces(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::NamespaceSummary>>,
		) -> Self {
			self.namespaces = input;
			self
		}
		/// Appends an item to `versions`.
		///
		/// To override the contents of this collection use [`set_versions`](Self::set_versions).
		///
		/// A list of version summaries.
		pub fn versions(mut self, input: crate::model::VersionSummary) -> Self {
			let mut v = self.versions.unwrap_or_default();
			v.push(input);
			self.versions = Some(v);
			self
		}
		/// A list of version summaries.
		pub fn set_versions(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::VersionSummary>>,
		) -> Self {
			self.versions = input;
			self
		}
		/// Appends an item to `available_regions`.
		///
		/// To override the contents of this collection use [`set_available_regions`](Self::set_available_regions).
		///
		/// A list of region summaries.
		pub fn available_regions(mut self, input: crate::model::RegionSummary) -> Self {
			let mut v = self.available_regions.unwrap_or_default();
			v.push(input);
			self.available_regions = Some(v);
			self
		}
		/// A list of region summaries.
		pub fn set_available_regions(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::RegionSummary>>,
		) -> Self {
			self.available_regions = input;
			self
		}
		/// Consumes the builder and constructs a [`GameFull`](crate::model::GameFull)
		pub fn build(self) -> crate::model::GameFull {
			crate::model::GameFull {
				game_id: self.game_id,
				create_ts: self.create_ts,
				name_id: self.name_id,
				display_name: self.display_name,
				developer_group_id: self.developer_group_id,
				total_player_count: self.total_player_count,
				logo_url: self.logo_url,
				banner_url: self.banner_url,
				namespaces: self.namespaces,
				versions: self.versions,
				available_regions: self.available_regions,
			}
		}
	}
}
impl GameFull {
	/// Creates a new builder-style object to manufacture [`GameFull`](crate::model::GameFull)
	pub fn builder() -> crate::model::game_full::Builder {
		crate::model::game_full::Builder::default()
	}
}

/// A version summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct VersionSummary {
	/// A universally unique identifier.
	pub version_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
}
impl VersionSummary {
	/// A universally unique identifier.
	pub fn version_id(&self) -> std::option::Option<&str> {
		self.version_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
}
impl std::fmt::Debug for VersionSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("VersionSummary");
		formatter.field("version_id", &self.version_id);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("display_name", &self.display_name);
		formatter.finish()
	}
}
/// See [`VersionSummary`](crate::model::VersionSummary)
pub mod version_summary {
	/// A builder for [`VersionSummary`](crate::model::VersionSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) version_id: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) display_name: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn version_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.version_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_version_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.version_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// Consumes the builder and constructs a [`VersionSummary`](crate::model::VersionSummary)
		pub fn build(self) -> crate::model::VersionSummary {
			crate::model::VersionSummary {
				version_id: self.version_id,
				create_ts: self.create_ts,
				display_name: self.display_name,
			}
		}
	}
}
impl VersionSummary {
	/// Creates a new builder-style object to manufacture [`VersionSummary`](crate::model::VersionSummary)
	pub fn builder() -> crate::model::version_summary::Builder {
		crate::model::version_summary::Builder::default()
	}
}

/// A group summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GroupSummary {
	/// A universally unique identifier.
	pub group_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// The URL of this group's avatar image.
	pub avatar_url: std::option::Option<std::string::String>,
	/// External links for this group.
	pub external: std::option::Option<crate::model::GroupExternalLinks>,
	/// Whether or not this group is a developer.
	pub is_developer: std::option::Option<bool>,
	/// Detailed information about a profile.
	pub bio: std::option::Option<std::string::String>,
	/// Whether or not the current identity is a member of this group.
	pub is_current_identity_member: std::option::Option<bool>,
	/// The current publicity value for the given group.
	pub publicity: std::option::Option<crate::model::GroupPublicity>,
	/// Unsigned 32 bit integer.
	pub member_count: std::option::Option<i32>,
	/// A universally unique identifier.
	pub owner_identity_id: std::option::Option<std::string::String>,
}
impl GroupSummary {
	/// A universally unique identifier.
	pub fn group_id(&self) -> std::option::Option<&str> {
		self.group_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// The URL of this group's avatar image.
	pub fn avatar_url(&self) -> std::option::Option<&str> {
		self.avatar_url.as_deref()
	}
	/// External links for this group.
	pub fn external(&self) -> std::option::Option<&crate::model::GroupExternalLinks> {
		self.external.as_ref()
	}
	/// Whether or not this group is a developer.
	pub fn is_developer(&self) -> std::option::Option<bool> {
		self.is_developer
	}
	/// Detailed information about a profile.
	pub fn bio(&self) -> std::option::Option<&str> {
		self.bio.as_deref()
	}
	/// Whether or not the current identity is a member of this group.
	pub fn is_current_identity_member(&self) -> std::option::Option<bool> {
		self.is_current_identity_member
	}
	/// The current publicity value for the given group.
	pub fn publicity(&self) -> std::option::Option<&crate::model::GroupPublicity> {
		self.publicity.as_ref()
	}
	/// Unsigned 32 bit integer.
	pub fn member_count(&self) -> std::option::Option<i32> {
		self.member_count
	}
	/// A universally unique identifier.
	pub fn owner_identity_id(&self) -> std::option::Option<&str> {
		self.owner_identity_id.as_deref()
	}
}
impl std::fmt::Debug for GroupSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GroupSummary");
		formatter.field("group_id", &self.group_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("avatar_url", &self.avatar_url);
		formatter.field("external", &self.external);
		formatter.field("is_developer", &self.is_developer);
		formatter.field("bio", &self.bio);
		formatter.field(
			"is_current_identity_member",
			&self.is_current_identity_member,
		);
		formatter.field("publicity", &self.publicity);
		formatter.field("member_count", &self.member_count);
		formatter.field("owner_identity_id", &self.owner_identity_id);
		formatter.finish()
	}
}
/// See [`GroupSummary`](crate::model::GroupSummary)
pub mod group_summary {
	/// A builder for [`GroupSummary`](crate::model::GroupSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) avatar_url: std::option::Option<std::string::String>,
		pub(crate) external: std::option::Option<crate::model::GroupExternalLinks>,
		pub(crate) is_developer: std::option::Option<bool>,
		pub(crate) bio: std::option::Option<std::string::String>,
		pub(crate) is_current_identity_member: std::option::Option<bool>,
		pub(crate) publicity: std::option::Option<crate::model::GroupPublicity>,
		pub(crate) member_count: std::option::Option<i32>,
		pub(crate) owner_identity_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.group_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.group_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// The URL of this group's avatar image.
		pub fn avatar_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.avatar_url = Some(input.into());
			self
		}
		/// The URL of this group's avatar image.
		pub fn set_avatar_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.avatar_url = input;
			self
		}
		/// External links for this group.
		pub fn external(mut self, input: crate::model::GroupExternalLinks) -> Self {
			self.external = Some(input);
			self
		}
		/// External links for this group.
		pub fn set_external(
			mut self,
			input: std::option::Option<crate::model::GroupExternalLinks>,
		) -> Self {
			self.external = input;
			self
		}
		/// Whether or not this group is a developer.
		pub fn is_developer(mut self, input: bool) -> Self {
			self.is_developer = Some(input);
			self
		}
		/// Whether or not this group is a developer.
		pub fn set_is_developer(mut self, input: std::option::Option<bool>) -> Self {
			self.is_developer = input;
			self
		}
		/// Detailed information about a profile.
		pub fn bio(mut self, input: impl Into<std::string::String>) -> Self {
			self.bio = Some(input.into());
			self
		}
		/// Detailed information about a profile.
		pub fn set_bio(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.bio = input;
			self
		}
		/// Whether or not the current identity is a member of this group.
		pub fn is_current_identity_member(mut self, input: bool) -> Self {
			self.is_current_identity_member = Some(input);
			self
		}
		/// Whether or not the current identity is a member of this group.
		pub fn set_is_current_identity_member(mut self, input: std::option::Option<bool>) -> Self {
			self.is_current_identity_member = input;
			self
		}
		/// The current publicity value for the given group.
		pub fn publicity(mut self, input: crate::model::GroupPublicity) -> Self {
			self.publicity = Some(input);
			self
		}
		/// The current publicity value for the given group.
		pub fn set_publicity(
			mut self,
			input: std::option::Option<crate::model::GroupPublicity>,
		) -> Self {
			self.publicity = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn member_count(mut self, input: i32) -> Self {
			self.member_count = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_member_count(mut self, input: std::option::Option<i32>) -> Self {
			self.member_count = input;
			self
		}
		/// A universally unique identifier.
		pub fn owner_identity_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.owner_identity_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_owner_identity_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.owner_identity_id = input;
			self
		}
		/// Consumes the builder and constructs a [`GroupSummary`](crate::model::GroupSummary)
		pub fn build(self) -> crate::model::GroupSummary {
			crate::model::GroupSummary {
				group_id: self.group_id,
				display_name: self.display_name,
				avatar_url: self.avatar_url,
				external: self.external,
				is_developer: self.is_developer,
				bio: self.bio,
				is_current_identity_member: self.is_current_identity_member,
				publicity: self.publicity,
				member_count: self.member_count,
				owner_identity_id: self.owner_identity_id,
			}
		}
	}
}
impl GroupSummary {
	/// Creates a new builder-style object to manufacture [`GroupSummary`](crate::model::GroupSummary)
	pub fn builder() -> crate::model::group_summary::Builder {
		crate::model::group_summary::Builder::default()
	}
}

/// The current publicity value for the given group.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum GroupPublicity {
	#[allow(missing_docs)] // documentation missing in model
	Closed,
	#[allow(missing_docs)] // documentation missing in model
	Open,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for GroupPublicity {
	fn from(s: &str) -> Self {
		match s {
			"closed" => GroupPublicity::Closed,
			"open" => GroupPublicity::Open,
			other => GroupPublicity::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for GroupPublicity {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(GroupPublicity::from(s))
	}
}
impl GroupPublicity {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			GroupPublicity::Closed => "closed",
			GroupPublicity::Open => "open",
			GroupPublicity::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["closed", "open"]
	}
}
impl AsRef<str> for GroupPublicity {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// External links for this group.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GroupExternalLinks {
	/// A link to this group's profile page.
	pub profile: std::option::Option<std::string::String>,
	/// A link to this group's chat page.
	pub chat: std::option::Option<std::string::String>,
}
impl GroupExternalLinks {
	/// A link to this group's profile page.
	pub fn profile(&self) -> std::option::Option<&str> {
		self.profile.as_deref()
	}
	/// A link to this group's chat page.
	pub fn chat(&self) -> std::option::Option<&str> {
		self.chat.as_deref()
	}
}
impl std::fmt::Debug for GroupExternalLinks {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GroupExternalLinks");
		formatter.field("profile", &self.profile);
		formatter.field("chat", &self.chat);
		formatter.finish()
	}
}
/// See [`GroupExternalLinks`](crate::model::GroupExternalLinks)
pub mod group_external_links {
	/// A builder for [`GroupExternalLinks`](crate::model::GroupExternalLinks)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) profile: std::option::Option<std::string::String>,
		pub(crate) chat: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A link to this group's profile page.
		pub fn profile(mut self, input: impl Into<std::string::String>) -> Self {
			self.profile = Some(input.into());
			self
		}
		/// A link to this group's profile page.
		pub fn set_profile(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.profile = input;
			self
		}
		/// A link to this group's chat page.
		pub fn chat(mut self, input: impl Into<std::string::String>) -> Self {
			self.chat = Some(input.into());
			self
		}
		/// A link to this group's chat page.
		pub fn set_chat(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.chat = input;
			self
		}
		/// Consumes the builder and constructs a [`GroupExternalLinks`](crate::model::GroupExternalLinks)
		pub fn build(self) -> crate::model::GroupExternalLinks {
			crate::model::GroupExternalLinks {
				profile: self.profile,
				chat: self.chat,
			}
		}
	}
}
impl GroupExternalLinks {
	/// Creates a new builder-style object to manufacture [`GroupExternalLinks`](crate::model::GroupExternalLinks)
	pub fn builder() -> crate::model::group_external_links::Builder {
		crate::model::group_external_links::Builder::default()
	}
}

/// A game summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameSummary {
	/// A universally unique identifier.
	pub game_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub name_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub developer_group_id: std::option::Option<std::string::String>,
	/// Unsigned 32 bit integer.
	pub total_player_count: std::option::Option<i32>,
	/// The URL of this game's logo image.
	pub logo_url: std::option::Option<std::string::String>,
	/// The URL of this game's banner image.
	pub banner_url: std::option::Option<std::string::String>,
}
impl GameSummary {
	/// A universally unique identifier.
	pub fn game_id(&self) -> std::option::Option<&str> {
		self.game_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn name_id(&self) -> std::option::Option<&str> {
		self.name_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// A universally unique identifier.
	pub fn developer_group_id(&self) -> std::option::Option<&str> {
		self.developer_group_id.as_deref()
	}
	/// Unsigned 32 bit integer.
	pub fn total_player_count(&self) -> std::option::Option<i32> {
		self.total_player_count
	}
	/// The URL of this game's logo image.
	pub fn logo_url(&self) -> std::option::Option<&str> {
		self.logo_url.as_deref()
	}
	/// The URL of this game's banner image.
	pub fn banner_url(&self) -> std::option::Option<&str> {
		self.banner_url.as_deref()
	}
}
impl std::fmt::Debug for GameSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameSummary");
		formatter.field("game_id", &self.game_id);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("name_id", &self.name_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("developer_group_id", &self.developer_group_id);
		formatter.field("total_player_count", &self.total_player_count);
		formatter.field("logo_url", &self.logo_url);
		formatter.field("banner_url", &self.banner_url);
		formatter.finish()
	}
}
/// See [`GameSummary`](crate::model::GameSummary)
pub mod game_summary {
	/// A builder for [`GameSummary`](crate::model::GameSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_id: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) name_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) developer_group_id: std::option::Option<std::string::String>,
		pub(crate) total_player_count: std::option::Option<i32>,
		pub(crate) logo_url: std::option::Option<std::string::String>,
		pub(crate) banner_url: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn game_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_game_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// A universally unique identifier.
		pub fn developer_group_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.developer_group_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_developer_group_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.developer_group_id = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn total_player_count(mut self, input: i32) -> Self {
			self.total_player_count = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_total_player_count(mut self, input: std::option::Option<i32>) -> Self {
			self.total_player_count = input;
			self
		}
		/// The URL of this game's logo image.
		pub fn logo_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.logo_url = Some(input.into());
			self
		}
		/// The URL of this game's logo image.
		pub fn set_logo_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.logo_url = input;
			self
		}
		/// The URL of this game's banner image.
		pub fn banner_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.banner_url = Some(input.into());
			self
		}
		/// The URL of this game's banner image.
		pub fn set_banner_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.banner_url = input;
			self
		}
		/// Consumes the builder and constructs a [`GameSummary`](crate::model::GameSummary)
		pub fn build(self) -> crate::model::GameSummary {
			crate::model::GameSummary {
				game_id: self.game_id,
				create_ts: self.create_ts,
				name_id: self.name_id,
				display_name: self.display_name,
				developer_group_id: self.developer_group_id,
				total_player_count: self.total_player_count,
				logo_url: self.logo_url,
				banner_url: self.banner_url,
			}
		}
	}
}
impl GameSummary {
	/// Creates a new builder-style object to manufacture [`GameSummary`](crate::model::GameSummary)
	pub fn builder() -> crate::model::game_summary::Builder {
		crate::model::game_summary::Builder::default()
	}
}

/// The current authenticated agent.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum AuthAgent {
	/// The current authenticated game cloud.
	GameCloud(crate::model::AuthAgentGameCloud),
	/// The current authenticated identity.
	Identity(crate::model::AuthAgentIdentity),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl AuthAgent {
	/// Tries to convert the enum instance into [`GameCloud`](crate::model::AuthAgent::GameCloud), extracting the inner [`AuthAgentGameCloud`](crate::model::AuthAgentGameCloud).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_game_cloud(&self) -> std::result::Result<&crate::model::AuthAgentGameCloud, &Self> {
		if let AuthAgent::GameCloud(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`GameCloud`](crate::model::AuthAgent::GameCloud).
	pub fn is_game_cloud(&self) -> bool {
		self.as_game_cloud().is_ok()
	}
	/// Tries to convert the enum instance into [`Identity`](crate::model::AuthAgent::Identity), extracting the inner [`AuthAgentIdentity`](crate::model::AuthAgentIdentity).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_identity(&self) -> std::result::Result<&crate::model::AuthAgentIdentity, &Self> {
		if let AuthAgent::Identity(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Identity`](crate::model::AuthAgent::Identity).
	pub fn is_identity(&self) -> bool {
		self.as_identity().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// The current authenticated game cloud.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AuthAgentGameCloud {
	/// A universally unique identifier.
	pub game_id: std::option::Option<std::string::String>,
}
impl AuthAgentGameCloud {
	/// A universally unique identifier.
	pub fn game_id(&self) -> std::option::Option<&str> {
		self.game_id.as_deref()
	}
}
impl std::fmt::Debug for AuthAgentGameCloud {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("AuthAgentGameCloud");
		formatter.field("game_id", &self.game_id);
		formatter.finish()
	}
}
/// See [`AuthAgentGameCloud`](crate::model::AuthAgentGameCloud)
pub mod auth_agent_game_cloud {
	/// A builder for [`AuthAgentGameCloud`](crate::model::AuthAgentGameCloud)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn game_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_game_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_id = input;
			self
		}
		/// Consumes the builder and constructs a [`AuthAgentGameCloud`](crate::model::AuthAgentGameCloud)
		pub fn build(self) -> crate::model::AuthAgentGameCloud {
			crate::model::AuthAgentGameCloud {
				game_id: self.game_id,
			}
		}
	}
}
impl AuthAgentGameCloud {
	/// Creates a new builder-style object to manufacture [`AuthAgentGameCloud`](crate::model::AuthAgentGameCloud)
	pub fn builder() -> crate::model::auth_agent_game_cloud::Builder {
		crate::model::auth_agent_game_cloud::Builder::default()
	}
}

/// The current authenticated identity.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AuthAgentIdentity {
	/// A universally unique identifier.
	pub identity_id: std::option::Option<std::string::String>,
}
impl AuthAgentIdentity {
	/// A universally unique identifier.
	pub fn identity_id(&self) -> std::option::Option<&str> {
		self.identity_id.as_deref()
	}
}
impl std::fmt::Debug for AuthAgentIdentity {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("AuthAgentIdentity");
		formatter.field("identity_id", &self.identity_id);
		formatter.finish()
	}
}
/// See [`AuthAgentIdentity`](crate::model::AuthAgentIdentity)
pub mod auth_agent_identity {
	/// A builder for [`AuthAgentIdentity`](crate::model::AuthAgentIdentity)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.identity_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.identity_id = input;
			self
		}
		/// Consumes the builder and constructs a [`AuthAgentIdentity`](crate::model::AuthAgentIdentity)
		pub fn build(self) -> crate::model::AuthAgentIdentity {
			crate::model::AuthAgentIdentity {
				identity_id: self.identity_id,
			}
		}
	}
}
impl AuthAgentIdentity {
	/// Creates a new builder-style object to manufacture [`AuthAgentIdentity`](crate::model::AuthAgentIdentity)
	pub fn builder() -> crate::model::auth_agent_identity::Builder {
		crate::model::auth_agent_identity::Builder::default()
	}
}
