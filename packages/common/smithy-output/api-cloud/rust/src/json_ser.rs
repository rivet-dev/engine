// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_namespace_domain_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::AddNamespaceDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_1) = &input.domain {
		object.key("domain").string(var_1.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_2) = &input.developer_group_id {
		object.key("developer_group_id").string(var_2.as_str());
	}
	if let Some(var_3) = &input.display_name {
		object.key("display_name").string(var_3.as_str());
	}
	if let Some(var_4) = &input.name_id {
		object.key("name_id").string(var_4.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_build_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameBuildInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_5) = &input.display_name {
		object.key("display_name").string(var_5.as_str());
	}
	if let Some(var_6) = &input.image_file {
		let mut object_7 = object.key("image_file").start_object();
		crate::json_ser::serialize_structure_crate_model_upload_prepare_file(&mut object_7, var_6)?;
		object_7.finish();
	}
	if let Some(var_8) = &input.image_tag {
		object.key("image_tag").string(var_8.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_cdn_site_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameCdnSiteInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_9) = &input.display_name {
		object.key("display_name").string(var_9.as_str());
	}
	if let Some(var_10) = &input.files {
		let mut array_11 = object.key("files").start_array();
		for item_12 in var_10 {
			{
				let mut object_13 = array_11.value().start_object();
				crate::json_ser::serialize_structure_crate_model_upload_prepare_file(
					&mut object_13,
					item_12,
				)?;
				object_13.finish();
			}
		}
		array_11.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_namespace_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameNamespaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_14) = &input.display_name {
		object.key("display_name").string(var_14.as_str());
	}
	if let Some(var_15) = &input.name_id {
		object.key("name_id").string(var_15.as_str());
	}
	if let Some(var_16) = &input.version_id {
		object.key("version_id").string(var_16.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_namespace_token_development_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameNamespaceTokenDevelopmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_17) = &input.hostname {
		object.key("hostname").string(var_17.as_str());
	}
	if let Some(var_18) = &input.lobby_ports {
		let mut array_19 = object.key("lobby_ports").start_array();
		for item_20 in var_18 {
			{
				let mut object_21 = array_19.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_port(
					&mut object_21,
					item_20,
				)?;
				object_21.finish();
			}
		}
		array_19.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_version_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_22) = &input.config {
		let mut object_23 = object.key("config").start_object();
		crate::json_ser::serialize_structure_crate_model_cloud_version_config(
			&mut object_23,
			var_22,
		)?;
		object_23.finish();
	}
	if let Some(var_24) = &input.display_name {
		object.key("display_name").string(var_24.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_export_lobby_logs_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ExportLobbyLogsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_25) = &input.stream {
		object.key("stream").string(var_25.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_export_matchmaker_lobby_history_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ExportMatchmakerLobbyHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_26) = &input.query_end {
		object.key("query_end").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_26).into()),
		);
	}
	if let Some(var_27) = &input.query_start {
		object.key("query_start").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_27).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_game_banner_upload_prepare_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::GameBannerUploadPrepareInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_28) = &input.content_length {
		object.key("content_length").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_28).into()),
		);
	}
	if let Some(var_29) = &input.mime {
		object.key("mime").string(var_29.as_str());
	}
	if let Some(var_30) = &input.path {
		object.key("path").string(var_30.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_game_logo_upload_prepare_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::GameLogoUploadPrepareInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_31) = &input.content_length {
		object.key("content_length").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_31).into()),
		);
	}
	if let Some(var_32) = &input.mime {
		object.key("mime").string(var_32.as_str());
	}
	if let Some(var_33) = &input.path {
		object.key("path").string(var_33.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_prepare_custom_avatar_upload_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::PrepareCustomAvatarUploadInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_34) = &input.content_length {
		object.key("content_length").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_34).into()),
		);
	}
	if let Some(var_35) = &input.mime {
		object.key("mime").string(var_35.as_str());
	}
	if let Some(var_36) = &input.path {
		object.key("path").string(var_36.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_set_game_billing_plan_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::SetGameBillingPlanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_37) = &input.plan {
		object.key("plan").string(var_37.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_set_namespace_cdn_auth_type_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::SetNamespaceCdnAuthTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_38) = &input.auth_type {
		object.key("auth_type").string(var_38.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_toggle_namespace_domain_public_auth_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ToggleNamespaceDomainPublicAuthInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_39) = &input.enabled {
		object.key("enabled").boolean(*var_39);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_update_game_namespace_matchmaker_config_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::UpdateGameNamespaceMatchmakerConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_40) = &input.lobby_count_max {
		object.key("lobby_count_max").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_40).into()),
		);
	}
	if let Some(var_41) = &input.max_players {
		object.key("max_players").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_41).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_update_game_namespace_version_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::UpdateGameNamespaceVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_42) = &input.version_id {
		object.key("version_id").string(var_42.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_update_namespace_cdn_auth_user_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::UpdateNamespaceCdnAuthUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_43) = &input.password {
		object.key("password").string(var_43.as_str());
	}
	if let Some(var_44) = &input.user {
		object.key("user").string(var_44.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_45) = &input.display_name {
		object.key("display_name").string(var_45.as_str());
	}
	if let Some(var_46) = &input.name_id {
		object.key("name_id").string(var_46.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_namespace_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameNamespaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_47) = &input.display_name {
		object.key("display_name").string(var_47.as_str());
	}
	if let Some(var_48) = &input.name_id {
		object.key("name_id").string(var_48.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_namespace_matchmaker_config_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameNamespaceMatchmakerConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_49) = &input.lobby_count_max {
		object.key("lobby_count_max").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_49).into()),
		);
	}
	if let Some(var_50) = &input.max_players {
		object.key("max_players").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_50).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_namespace_token_development_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameNamespaceTokenDevelopmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_51) = &input.hostname {
		object.key("hostname").string(var_51.as_str());
	}
	if let Some(var_52) = &input.lobby_ports {
		let mut array_53 = object.key("lobby_ports").start_array();
		for item_54 in var_52 {
			{
				let mut object_55 = array_53.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_port(
					&mut object_55,
					item_54,
				)?;
				object_55.finish();
			}
		}
		array_53.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_version_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_56) = &input.config {
		let mut object_57 = object.key("config").start_object();
		crate::json_ser::serialize_structure_crate_model_cloud_version_config(
			&mut object_57,
			var_56,
		)?;
		object_57.finish();
	}
	if let Some(var_58) = &input.display_name {
		object.key("display_name").string(var_58.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_group_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_59) = &input.display_name {
		object.key("display_name").string(var_59.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_upload_prepare_file(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::UploadPrepareFile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_60) = &input.path {
		object.key("path").string(var_60.as_str());
	}
	if let Some(var_61) = &input.content_type {
		object.key("content_type").string(var_61.as_str());
	}
	if let Some(var_62) = &input.content_length {
		object.key("content_length").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_62).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_runtime_docker_port(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntimeDockerPort,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_63) = &input.label {
		object.key("label").string(var_63.as_str());
	}
	if let Some(var_64) = &input.target_port {
		object.key("target_port").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_64).into()),
		);
	}
	if let Some(var_65) = &input.port_range {
		let mut object_66 = object.key("port_range").start_object();
		crate::json_ser::serialize_structure_crate_model_port_range(&mut object_66, var_65)?;
		object_66.finish();
	}
	if let Some(var_67) = &input.proxy_protocol {
		object.key("proxy_protocol").string(var_67.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_cloud_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CloudVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_68) = &input.cdn {
		let mut object_69 = object.key("cdn").start_object();
		crate::json_ser::serialize_structure_crate_model_cdn_version_config(
			&mut object_69,
			var_68,
		)?;
		object_69.finish();
	}
	if let Some(var_70) = &input.matchmaker {
		let mut object_71 = object.key("matchmaker").start_object();
		crate::json_ser::serialize_structure_crate_model_matchmaker_version_config(
			&mut object_71,
			var_70,
		)?;
		object_71.finish();
	}
	if let Some(var_72) = &input.kv {
		let mut object_73 = object.key("kv").start_object();
		crate::json_ser::serialize_structure_crate_model_kv_version_config(&mut object_73, var_72)?;
		object_73.finish();
	}
	if let Some(var_74) = &input.identity {
		let mut object_75 = object.key("identity").start_object();
		crate::json_ser::serialize_structure_crate_model_identity_version_config(
			&mut object_75,
			var_74,
		)?;
		object_75.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_port_range(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_76) = &input.min {
		object.key("min").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_76).into()),
		);
	}
	if let Some(var_77) = &input.max {
		object.key("max").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_77).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_model_cdn_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CdnVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_78) = &input.site_id {
		object.key("site_id").string(var_78.as_str());
	}
	if let Some(var_79) = &input.build_command {
		object.key("build_command").string(var_79.as_str());
	}
	if let Some(var_80) = &input.build_output {
		object.key("build_output").string(var_80.as_str());
	}
	if let Some(var_81) = &input.routes {
		let mut array_82 = object.key("routes").start_array();
		for item_83 in var_81 {
			{
				let mut object_84 = array_82.value().start_object();
				crate::json_ser::serialize_structure_crate_model_cdn_version_route(
					&mut object_84,
					item_83,
				)?;
				object_84.finish();
			}
		}
		array_82.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_matchmaker_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::MatchmakerVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_85) = &input.lobby_groups {
		let mut array_86 = object.key("lobby_groups").start_array();
		for item_87 in var_85 {
			{
				let mut object_88 = array_86.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group(
					&mut object_88,
					item_87,
				)?;
				object_88.finish();
			}
		}
		array_86.finish();
	}
	if let Some(var_89) = &input.captcha {
		let mut object_90 = object.key("captcha").start_object();
		crate::json_ser::serialize_structure_crate_model_matchmaker_captcha(
			&mut object_90,
			var_89,
		)?;
		object_90.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_kv_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::KvVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	let (_, _) = (object, input);
	Ok(())
}

pub fn serialize_structure_crate_model_identity_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::IdentityVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_91) = &input.custom_display_names {
		let mut array_92 = object.key("custom_display_names").start_array();
		for item_93 in var_91 {
			{
				let mut object_94 = array_92.value().start_object();
				crate::json_ser::serialize_structure_crate_model_custom_display_name(
					&mut object_94,
					item_93,
				)?;
				object_94.finish();
			}
		}
		array_92.finish();
	}
	if let Some(var_95) = &input.custom_avatars {
		let mut array_96 = object.key("custom_avatars").start_array();
		for item_97 in var_95 {
			{
				let mut object_98 = array_96.value().start_object();
				crate::json_ser::serialize_structure_crate_model_custom_avatar(
					&mut object_98,
					item_97,
				)?;
				object_98.finish();
			}
		}
		array_96.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_cdn_version_route(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CdnVersionRoute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_99) = &input.glob {
		object.key("glob").string(var_99.as_str());
	}
	if let Some(var_100) = &input.priority {
		object.key("priority").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_100).into()),
		);
	}
	if let Some(var_101) = &input.middlewares {
		let mut array_102 = object.key("middlewares").start_array();
		for item_103 in var_101 {
			{
				let mut object_104 = array_102.value().start_object();
				crate::json_ser::serialize_structure_crate_model_cdn_version_middleware(
					&mut object_104,
					item_103,
				)?;
				object_104.finish();
			}
		}
		array_102.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_105) = &input.name_id {
		object.key("name_id").string(var_105.as_str());
	}
	if let Some(var_106) = &input.regions {
		let mut array_107 = object.key("regions").start_array();
		for item_108 in var_106 {
			{
				let mut object_109 = array_107.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_region(
					&mut object_109,
					item_108,
				)?;
				object_109.finish();
			}
		}
		array_107.finish();
	}
	if let Some(var_110) = &input.max_players_normal {
		object.key("max_players_normal").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_110).into()),
		);
	}
	if let Some(var_111) = &input.max_players_direct {
		object.key("max_players_direct").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_111).into()),
		);
	}
	if let Some(var_112) = &input.max_players_party {
		object.key("max_players_party").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_112).into()),
		);
	}
	if let Some(var_113) = &input.runtime {
		let mut object_114 = object.key("runtime").start_object();
		crate::json_ser::serialize_union_crate_model_lobby_group_runtime(&mut object_114, var_113)?;
		object_114.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_matchmaker_captcha(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::MatchmakerCaptcha,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_115) = &input.requests_before_reverify {
		object.key("requests_before_reverify").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_115).into()),
		);
	}
	if let Some(var_116) = &input.verification_ttl {
		object.key("verification_ttl").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_116).into()),
		);
	}
	if let Some(var_117) = &input.hcaptcha {
		let mut object_118 = object.key("hcaptcha").start_object();
		crate::json_ser::serialize_structure_crate_model_matchmaker_captcha_hcaptcha(
			&mut object_118,
			var_117,
		)?;
		object_118.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_custom_display_name(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CustomDisplayName,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_119) = &input.display_name {
		object.key("display_name").string(var_119.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_custom_avatar(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CustomAvatar,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_120) = &input.upload_id {
		object.key("upload_id").string(var_120.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_cdn_version_middleware(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CdnVersionMiddleware,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_121) = &input.kind {
		let mut object_122 = object.key("kind").start_object();
		crate::json_ser::serialize_union_crate_model_cdn_version_middleware_kind(
			&mut object_122,
			var_121,
		)?;
		object_122.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_region(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_123) = &input.region_id {
		object.key("region_id").string(var_123.as_str());
	}
	if let Some(var_124) = &input.tier_name_id {
		object.key("tier_name_id").string(var_124.as_str());
	}
	if let Some(var_125) = &input.idle_lobbies {
		let mut object_126 = object.key("idle_lobbies").start_object();
		crate::json_ser::serialize_structure_crate_model_idle_lobbies_config(
			&mut object_126,
			var_125,
		)?;
		object_126.finish();
	}
	Ok(())
}

pub fn serialize_union_crate_model_lobby_group_runtime(
	object_114: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntime,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	match input {
		crate::model::LobbyGroupRuntime::Docker(inner) => {
			let mut object_127 = object_114.key("docker").start_object();
			crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker(
				&mut object_127,
				inner,
			)?;
			object_127.finish();
		}
		crate::model::LobbyGroupRuntime::Unknown => {
			return Err(
				aws_smithy_http::operation::SerializationError::unknown_variant(
					"LobbyGroupRuntime",
				),
			)
		}
	}
	Ok(())
}

pub fn serialize_structure_crate_model_matchmaker_captcha_hcaptcha(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::MatchmakerCaptchaHcaptcha,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_128) = &input.level {
		object.key("level").string(var_128.as_str());
	}
	Ok(())
}

pub fn serialize_union_crate_model_cdn_version_middleware_kind(
	object_122: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CdnVersionMiddlewareKind,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	match input {
		crate::model::CdnVersionMiddlewareKind::CustomHeaders(inner) => {
			let mut object_129 = object_122.key("custom_headers").start_object();
			crate::json_ser::serialize_structure_crate_model_cdn_version_custom_headers_middleware(
				&mut object_129,
				inner,
			)?;
			object_129.finish();
		}
		crate::model::CdnVersionMiddlewareKind::Unknown => {
			return Err(
				aws_smithy_http::operation::SerializationError::unknown_variant(
					"CdnVersionMiddlewareKind",
				),
			)
		}
	}
	Ok(())
}

pub fn serialize_structure_crate_model_idle_lobbies_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::IdleLobbiesConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_130) = &input.min_idle_lobbies {
		object.key("min_idle_lobbies").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_130).into()),
		);
	}
	if let Some(var_131) = &input.max_idle_lobbies {
		object.key("max_idle_lobbies").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_131).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_runtime_docker(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntimeDocker,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_132) = &input.build_id {
		object.key("build_id").string(var_132.as_str());
	}
	if let Some(var_133) = &input.args {
		let mut array_134 = object.key("args").start_array();
		for item_135 in var_133 {
			{
				array_134.value().string(item_135.as_str());
			}
		}
		array_134.finish();
	}
	if let Some(var_136) = &input.env_vars {
		let mut array_137 = object.key("env_vars").start_array();
		for item_138 in var_136 {
			{
				let mut object_139 = array_137.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_env_var(&mut object_139, item_138)?;
				object_139.finish();
			}
		}
		array_137.finish();
	}
	if let Some(var_140) = &input.network_mode {
		object.key("network_mode").string(var_140.as_str());
	}
	if let Some(var_141) = &input.ports {
		let mut array_142 = object.key("ports").start_array();
		for item_143 in var_141 {
			{
				let mut object_144 = array_142.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_port(
					&mut object_144,
					item_143,
				)?;
				object_144.finish();
			}
		}
		array_142.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_cdn_version_custom_headers_middleware(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CdnVersionCustomHeadersMiddleware,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_145) = &input.headers {
		let mut array_146 = object.key("headers").start_array();
		for item_147 in var_145 {
			{
				let mut object_148 = array_146.value().start_object();
				crate::json_ser::serialize_structure_crate_model_cdn_version_header(
					&mut object_148,
					item_147,
				)?;
				object_148.finish();
			}
		}
		array_146.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_runtime_docker_env_var(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntimeDockerEnvVar,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_149) = &input.key {
		object.key("key").string(var_149.as_str());
	}
	if let Some(var_150) = &input.value {
		object.key("value").string(var_150.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_cdn_version_header(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CdnVersionHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_151) = &input.name {
		object.key("name").string(var_151.as_str());
	}
	if let Some(var_152) = &input.value {
		object.key("value").string(var_152.as_str());
	}
	Ok(())
}
