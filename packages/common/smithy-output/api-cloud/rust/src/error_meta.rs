// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
	/// An error thrown when the requestee has sent an invalid or malformed request.
	BadRequestError(crate::error::BadRequestError),
	/// An error thrown when the requestee requests a resource they do not have access to.
	ForbiddenError(crate::error::ForbiddenError),
	/// An error caused by internal server problems.
	InternalError(crate::error::InternalError),
	/// An error thrown when the requestee requests a non existent resource.
	NotFoundError(crate::error::NotFoundError),
	/// An error thrown when the requestee has hit a rate limit. You are sending too many requests too quickly.
	RateLimitError(crate::error::RateLimitError),
	/// An error thrown when the requestee is not authenticated.
	UnauthorizedError(crate::error::UnauthorizedError),
	/// An unhandled error occurred.
	Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		match self {
			Error::BadRequestError(inner) => inner.fmt(f),
			Error::ForbiddenError(inner) => inner.fmt(f),
			Error::InternalError(inner) => inner.fmt(f),
			Error::NotFoundError(inner) => inner.fmt(f),
			Error::RateLimitError(inner) => inner.fmt(f),
			Error::UnauthorizedError(inner) => inner.fmt(f),
			Error::Unhandled(inner) => inner.fmt(f),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddNamespaceDomainError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::AddNamespaceDomainError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::AddNamespaceDomainErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::AddNamespaceDomainErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::AddNamespaceDomainErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::AddNamespaceDomainErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::AddNamespaceDomainErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::AddNamespaceDomainErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::AddNamespaceDomainErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CompleteCustomAvatarUploadError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::CompleteCustomAvatarUploadError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::CompleteCustomAvatarUploadErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::CompleteCustomAvatarUploadErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::CompleteCustomAvatarUploadErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::CompleteCustomAvatarUploadErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::CompleteCustomAvatarUploadErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::CompleteCustomAvatarUploadErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::CompleteCustomAvatarUploadErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CompleteUploadError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::CompleteUploadError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::CompleteUploadErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::CompleteUploadErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::CompleteUploadErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::CompleteUploadErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::CompleteUploadErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::CompleteUploadErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::CompleteUploadErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ConvertGroupError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::ConvertGroupError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ConvertGroupErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ConvertGroupErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ConvertGroupErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ConvertGroupErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::ConvertGroupErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ConvertGroupErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ConvertGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCloudTokenError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::CreateCloudTokenError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::CreateCloudTokenErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::CreateCloudTokenErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::CreateCloudTokenErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::CreateCloudTokenErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::CreateCloudTokenErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::CreateCloudTokenErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::CreateCloudTokenErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGameError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateGameError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::CreateGameErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::CreateGameErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::CreateGameErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::CreateGameErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::CreateGameErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::CreateGameErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::CreateGameErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGameBuildError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateGameBuildError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::CreateGameBuildErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::CreateGameBuildErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::CreateGameBuildErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::CreateGameBuildErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::CreateGameBuildErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::CreateGameBuildErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::CreateGameBuildErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGameCdnSiteError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::CreateGameCdnSiteError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::CreateGameCdnSiteErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::CreateGameCdnSiteErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::CreateGameCdnSiteErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::CreateGameCdnSiteErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::CreateGameCdnSiteErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::CreateGameCdnSiteErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::CreateGameCdnSiteErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGameNamespaceError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::CreateGameNamespaceError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::CreateGameNamespaceErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::CreateGameNamespaceErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::CreateGameNamespaceErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::CreateGameNamespaceErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::CreateGameNamespaceErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::CreateGameNamespaceErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::CreateGameNamespaceErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R>
	From<
		aws_smithy_http::result::SdkError<
			crate::error::CreateGameNamespaceTokenDevelopmentError,
			R,
		>,
	> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<
			crate::error::CreateGameNamespaceTokenDevelopmentError,
			R,
		>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::CreateGameNamespaceTokenDevelopmentErrorKind::InternalError(
					inner,
				) => Error::InternalError(inner),
				crate::error::CreateGameNamespaceTokenDevelopmentErrorKind::RateLimitError(
					inner,
				) => Error::RateLimitError(inner),
				crate::error::CreateGameNamespaceTokenDevelopmentErrorKind::ForbiddenError(
					inner,
				) => Error::ForbiddenError(inner),
				crate::error::CreateGameNamespaceTokenDevelopmentErrorKind::UnauthorizedError(
					inner,
				) => Error::UnauthorizedError(inner),
				crate::error::CreateGameNamespaceTokenDevelopmentErrorKind::NotFoundError(
					inner,
				) => Error::NotFoundError(inner),
				crate::error::CreateGameNamespaceTokenDevelopmentErrorKind::BadRequestError(
					inner,
				) => Error::BadRequestError(inner),
				crate::error::CreateGameNamespaceTokenDevelopmentErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R>
	From<aws_smithy_http::result::SdkError<crate::error::CreateGameNamespaceTokenPublicError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<
			crate::error::CreateGameNamespaceTokenPublicError,
			R,
		>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::CreateGameNamespaceTokenPublicErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::CreateGameNamespaceTokenPublicErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::CreateGameNamespaceTokenPublicErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::CreateGameNamespaceTokenPublicErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::CreateGameNamespaceTokenPublicErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::CreateGameNamespaceTokenPublicErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::CreateGameNamespaceTokenPublicErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGameVersionError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::CreateGameVersionError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::CreateGameVersionErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::CreateGameVersionErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::CreateGameVersionErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::CreateGameVersionErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::CreateGameVersionErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::CreateGameVersionErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::CreateGameVersionErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMatchmakerLobbyError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::DeleteMatchmakerLobbyError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::DeleteMatchmakerLobbyErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::DeleteMatchmakerLobbyErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::DeleteMatchmakerLobbyErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::DeleteMatchmakerLobbyErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::DeleteMatchmakerLobbyErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::DeleteMatchmakerLobbyErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::DeleteMatchmakerLobbyErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExportLobbyLogsError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::ExportLobbyLogsError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ExportLobbyLogsErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ExportLobbyLogsErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ExportLobbyLogsErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ExportLobbyLogsErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::ExportLobbyLogsErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ExportLobbyLogsErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ExportLobbyLogsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExportMatchmakerLobbyHistoryError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::ExportMatchmakerLobbyHistoryError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ExportMatchmakerLobbyHistoryErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ExportMatchmakerLobbyHistoryErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ExportMatchmakerLobbyHistoryErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ExportMatchmakerLobbyHistoryErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::ExportMatchmakerLobbyHistoryErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ExportMatchmakerLobbyHistoryErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ExportMatchmakerLobbyHistoryErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GameBannerUploadCompleteError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::GameBannerUploadCompleteError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GameBannerUploadCompleteErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GameBannerUploadCompleteErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GameBannerUploadCompleteErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GameBannerUploadCompleteErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GameBannerUploadCompleteErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GameBannerUploadCompleteErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GameBannerUploadCompleteErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GameBannerUploadPrepareError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::GameBannerUploadPrepareError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GameBannerUploadPrepareErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GameBannerUploadPrepareErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GameBannerUploadPrepareErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GameBannerUploadPrepareErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GameBannerUploadPrepareErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GameBannerUploadPrepareErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GameBannerUploadPrepareErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GameLogoUploadCompleteError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::GameLogoUploadCompleteError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GameLogoUploadCompleteErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GameLogoUploadCompleteErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GameLogoUploadCompleteErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GameLogoUploadCompleteErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GameLogoUploadCompleteErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GameLogoUploadCompleteErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GameLogoUploadCompleteErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GameLogoUploadPrepareError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::GameLogoUploadPrepareError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GameLogoUploadPrepareErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GameLogoUploadPrepareErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GameLogoUploadPrepareErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GameLogoUploadPrepareErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GameLogoUploadPrepareErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GameLogoUploadPrepareErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GameLogoUploadPrepareErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGameBillingError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGameBillingError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetGameBillingErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetGameBillingErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetGameBillingErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetGameBillingErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetGameBillingErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetGameBillingErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetGameBillingErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGameBillingPlansError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::GetGameBillingPlansError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetGameBillingPlansErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetGameBillingPlansErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetGameBillingPlansErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetGameBillingPlansErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetGameBillingPlansErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetGameBillingPlansErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetGameBillingPlansErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGameByIdError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGameByIdError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetGameByIdErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetGameByIdErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetGameByIdErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetGameByIdErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetGameByIdErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetGameByIdErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetGameByIdErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGameNamespaceByIdError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::GetGameNamespaceByIdError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetGameNamespaceByIdErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetGameNamespaceByIdErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetGameNamespaceByIdErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetGameNamespaceByIdErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetGameNamespaceByIdErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetGameNamespaceByIdErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetGameNamespaceByIdErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGamesError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGamesError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetGamesErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetGamesErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetGamesErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetGamesErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetGamesErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetGamesErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetGamesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGameVersionByIdError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::GetGameVersionByIdError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetGameVersionByIdErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetGameVersionByIdErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetGameVersionByIdErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetGameVersionByIdErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetGameVersionByIdErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetGameVersionByIdErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetGameVersionByIdErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGroupBillingError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGroupBillingError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetGroupBillingErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetGroupBillingErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetGroupBillingErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetGroupBillingErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetGroupBillingErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetGroupBillingErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetGroupBillingErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGroupInvoicesListError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::GetGroupInvoicesListError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetGroupInvoicesListErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetGroupInvoicesListErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetGroupInvoicesListErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetGroupInvoicesListErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetGroupInvoicesListErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetGroupInvoicesListErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetGroupInvoicesListErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLobbyLogsError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::GetLobbyLogsError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetLobbyLogsErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetLobbyLogsErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetLobbyLogsErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetLobbyLogsErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetLobbyLogsErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetLobbyLogsErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetLobbyLogsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R>
	From<
		aws_smithy_http::result::SdkError<
			crate::error::GetNamespaceAnalyticsMatchmakerLiveError,
			R,
		>,
	> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<
			crate::error::GetNamespaceAnalyticsMatchmakerLiveError,
			R,
		>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetNamespaceAnalyticsMatchmakerLiveErrorKind::InternalError(
					inner,
				) => Error::InternalError(inner),
				crate::error::GetNamespaceAnalyticsMatchmakerLiveErrorKind::RateLimitError(
					inner,
				) => Error::RateLimitError(inner),
				crate::error::GetNamespaceAnalyticsMatchmakerLiveErrorKind::ForbiddenError(
					inner,
				) => Error::ForbiddenError(inner),
				crate::error::GetNamespaceAnalyticsMatchmakerLiveErrorKind::UnauthorizedError(
					inner,
				) => Error::UnauthorizedError(inner),
				crate::error::GetNamespaceAnalyticsMatchmakerLiveErrorKind::NotFoundError(
					inner,
				) => Error::NotFoundError(inner),
				crate::error::GetNamespaceAnalyticsMatchmakerLiveErrorKind::BadRequestError(
					inner,
				) => Error::BadRequestError(inner),
				crate::error::GetNamespaceAnalyticsMatchmakerLiveErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetNamespaceLobbyError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::GetNamespaceLobbyError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetNamespaceLobbyErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetNamespaceLobbyErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetNamespaceLobbyErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetNamespaceLobbyErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetNamespaceLobbyErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetNamespaceLobbyErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetNamespaceLobbyErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRayPerfLogsError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRayPerfLogsError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetRayPerfLogsErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetRayPerfLogsErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetRayPerfLogsErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetRayPerfLogsErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetRayPerfLogsErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetRayPerfLogsErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetRayPerfLogsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRegionTiersError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRegionTiersError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GetRegionTiersErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GetRegionTiersErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GetRegionTiersErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GetRegionTiersErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GetRegionTiersErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GetRegionTiersErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GetRegionTiersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GroupBillingCheckoutError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::GroupBillingCheckoutError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::GroupBillingCheckoutErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::GroupBillingCheckoutErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::GroupBillingCheckoutErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::GroupBillingCheckoutErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::GroupBillingCheckoutErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::GroupBillingCheckoutErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::GroupBillingCheckoutErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InspectError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::InspectError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::InspectErrorKind::InternalError(inner) => Error::InternalError(inner),
				crate::error::InspectErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::InspectErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::InspectErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::InspectErrorKind::NotFoundError(inner) => Error::NotFoundError(inner),
				crate::error::InspectErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::InspectErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGameBuildsError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGameBuildsError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ListGameBuildsErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ListGameBuildsErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ListGameBuildsErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ListGameBuildsErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::ListGameBuildsErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ListGameBuildsErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ListGameBuildsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGameCdnSitesError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::ListGameCdnSitesError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ListGameCdnSitesErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ListGameCdnSitesErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ListGameCdnSitesErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ListGameCdnSitesErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::ListGameCdnSitesErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ListGameCdnSitesErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ListGameCdnSitesErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGameCustomAvatarsError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::ListGameCustomAvatarsError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ListGameCustomAvatarsErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ListGameCustomAvatarsErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ListGameCustomAvatarsErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ListGameCustomAvatarsErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::ListGameCustomAvatarsErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ListGameCustomAvatarsErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ListGameCustomAvatarsErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNamespaceLobbiesError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::ListNamespaceLobbiesError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ListNamespaceLobbiesErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ListNamespaceLobbiesErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ListNamespaceLobbiesErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ListNamespaceLobbiesErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::ListNamespaceLobbiesErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ListNamespaceLobbiesErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ListNamespaceLobbiesErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PrepareCustomAvatarUploadError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::PrepareCustomAvatarUploadError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::PrepareCustomAvatarUploadErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::PrepareCustomAvatarUploadErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::PrepareCustomAvatarUploadErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::PrepareCustomAvatarUploadErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::PrepareCustomAvatarUploadErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::PrepareCustomAvatarUploadErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::PrepareCustomAvatarUploadErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveNamespaceCdnAuthUserError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::RemoveNamespaceCdnAuthUserError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::RemoveNamespaceCdnAuthUserErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::RemoveNamespaceCdnAuthUserErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::RemoveNamespaceCdnAuthUserErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::RemoveNamespaceCdnAuthUserErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::RemoveNamespaceCdnAuthUserErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::RemoveNamespaceCdnAuthUserErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::RemoveNamespaceCdnAuthUserErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveNamespaceDomainError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::RemoveNamespaceDomainError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::RemoveNamespaceDomainErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::RemoveNamespaceDomainErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::RemoveNamespaceDomainErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::RemoveNamespaceDomainErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::RemoveNamespaceDomainErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::RemoveNamespaceDomainErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::RemoveNamespaceDomainErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetGameBillingPlanError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::SetGameBillingPlanError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::SetGameBillingPlanErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::SetGameBillingPlanErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::SetGameBillingPlanErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::SetGameBillingPlanErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::SetGameBillingPlanErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::SetGameBillingPlanErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::SetGameBillingPlanErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetNamespaceCdnAuthTypeError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::SetNamespaceCdnAuthTypeError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::SetNamespaceCdnAuthTypeErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::SetNamespaceCdnAuthTypeErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::SetNamespaceCdnAuthTypeErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::SetNamespaceCdnAuthTypeErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::SetNamespaceCdnAuthTypeErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::SetNamespaceCdnAuthTypeErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::SetNamespaceCdnAuthTypeErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R>
	From<aws_smithy_http::result::SdkError<crate::error::ToggleNamespaceDomainPublicAuthError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<
			crate::error::ToggleNamespaceDomainPublicAuthError,
			R,
		>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ToggleNamespaceDomainPublicAuthErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ToggleNamespaceDomainPublicAuthErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ToggleNamespaceDomainPublicAuthErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ToggleNamespaceDomainPublicAuthErrorKind::UnauthorizedError(
					inner,
				) => Error::UnauthorizedError(inner),
				crate::error::ToggleNamespaceDomainPublicAuthErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ToggleNamespaceDomainPublicAuthErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ToggleNamespaceDomainPublicAuthErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R>
	From<
		aws_smithy_http::result::SdkError<
			crate::error::UpdateGameNamespaceMatchmakerConfigError,
			R,
		>,
	> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<
			crate::error::UpdateGameNamespaceMatchmakerConfigError,
			R,
		>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::UpdateGameNamespaceMatchmakerConfigErrorKind::InternalError(
					inner,
				) => Error::InternalError(inner),
				crate::error::UpdateGameNamespaceMatchmakerConfigErrorKind::RateLimitError(
					inner,
				) => Error::RateLimitError(inner),
				crate::error::UpdateGameNamespaceMatchmakerConfigErrorKind::ForbiddenError(
					inner,
				) => Error::ForbiddenError(inner),
				crate::error::UpdateGameNamespaceMatchmakerConfigErrorKind::UnauthorizedError(
					inner,
				) => Error::UnauthorizedError(inner),
				crate::error::UpdateGameNamespaceMatchmakerConfigErrorKind::NotFoundError(
					inner,
				) => Error::NotFoundError(inner),
				crate::error::UpdateGameNamespaceMatchmakerConfigErrorKind::BadRequestError(
					inner,
				) => Error::BadRequestError(inner),
				crate::error::UpdateGameNamespaceMatchmakerConfigErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGameNamespaceVersionError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::UpdateGameNamespaceVersionError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::UpdateGameNamespaceVersionErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::UpdateGameNamespaceVersionErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::UpdateGameNamespaceVersionErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::UpdateGameNamespaceVersionErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::UpdateGameNamespaceVersionErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::UpdateGameNamespaceVersionErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::UpdateGameNamespaceVersionErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateNamespaceCdnAuthUserError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::UpdateNamespaceCdnAuthUserError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::UpdateNamespaceCdnAuthUserErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::UpdateNamespaceCdnAuthUserErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::UpdateNamespaceCdnAuthUserErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::UpdateNamespaceCdnAuthUserErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::UpdateNamespaceCdnAuthUserErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::UpdateNamespaceCdnAuthUserErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::UpdateNamespaceCdnAuthUserErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ValidateGameError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::ValidateGameError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ValidateGameErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ValidateGameErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ValidateGameErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ValidateGameErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::ValidateGameErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ValidateGameErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ValidateGameErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ValidateGameNamespaceError, R>>
	for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::ValidateGameNamespaceError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ValidateGameNamespaceErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ValidateGameNamespaceErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ValidateGameNamespaceErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ValidateGameNamespaceErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::ValidateGameNamespaceErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ValidateGameNamespaceErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ValidateGameNamespaceErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R>
	From<
		aws_smithy_http::result::SdkError<
			crate::error::ValidateGameNamespaceMatchmakerConfigError,
			R,
		>,
	> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<
			crate::error::ValidateGameNamespaceMatchmakerConfigError,
			R,
		>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ValidateGameNamespaceMatchmakerConfigErrorKind::InternalError(
					inner,
				) => Error::InternalError(inner),
				crate::error::ValidateGameNamespaceMatchmakerConfigErrorKind::RateLimitError(
					inner,
				) => Error::RateLimitError(inner),
				crate::error::ValidateGameNamespaceMatchmakerConfigErrorKind::ForbiddenError(
					inner,
				) => Error::ForbiddenError(inner),
				crate::error::ValidateGameNamespaceMatchmakerConfigErrorKind::UnauthorizedError(
					inner,
				) => Error::UnauthorizedError(inner),
				crate::error::ValidateGameNamespaceMatchmakerConfigErrorKind::NotFoundError(
					inner,
				) => Error::NotFoundError(inner),
				crate::error::ValidateGameNamespaceMatchmakerConfigErrorKind::BadRequestError(
					inner,
				) => Error::BadRequestError(inner),
				crate::error::ValidateGameNamespaceMatchmakerConfigErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R>
	From<
		aws_smithy_http::result::SdkError<
			crate::error::ValidateGameNamespaceTokenDevelopmentError,
			R,
		>,
	> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<
			crate::error::ValidateGameNamespaceTokenDevelopmentError,
			R,
		>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ValidateGameNamespaceTokenDevelopmentErrorKind::InternalError(
					inner,
				) => Error::InternalError(inner),
				crate::error::ValidateGameNamespaceTokenDevelopmentErrorKind::RateLimitError(
					inner,
				) => Error::RateLimitError(inner),
				crate::error::ValidateGameNamespaceTokenDevelopmentErrorKind::ForbiddenError(
					inner,
				) => Error::ForbiddenError(inner),
				crate::error::ValidateGameNamespaceTokenDevelopmentErrorKind::UnauthorizedError(
					inner,
				) => Error::UnauthorizedError(inner),
				crate::error::ValidateGameNamespaceTokenDevelopmentErrorKind::NotFoundError(
					inner,
				) => Error::NotFoundError(inner),
				crate::error::ValidateGameNamespaceTokenDevelopmentErrorKind::BadRequestError(
					inner,
				) => Error::BadRequestError(inner),
				crate::error::ValidateGameNamespaceTokenDevelopmentErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ValidateGameVersionError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(
		err: aws_smithy_http::result::SdkError<crate::error::ValidateGameVersionError, R>,
	) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ValidateGameVersionErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ValidateGameVersionErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ValidateGameVersionErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ValidateGameVersionErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::ValidateGameVersionErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ValidateGameVersionErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ValidateGameVersionErrorKind::Unhandled(inner) => {
					Error::Unhandled(inner)
				}
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ValidateGroupError, R>> for Error
where
	R: Send + Sync + std::fmt::Debug + 'static,
{
	fn from(err: aws_smithy_http::result::SdkError<crate::error::ValidateGroupError, R>) -> Self {
		match err {
			aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
				crate::error::ValidateGroupErrorKind::InternalError(inner) => {
					Error::InternalError(inner)
				}
				crate::error::ValidateGroupErrorKind::RateLimitError(inner) => {
					Error::RateLimitError(inner)
				}
				crate::error::ValidateGroupErrorKind::ForbiddenError(inner) => {
					Error::ForbiddenError(inner)
				}
				crate::error::ValidateGroupErrorKind::UnauthorizedError(inner) => {
					Error::UnauthorizedError(inner)
				}
				crate::error::ValidateGroupErrorKind::NotFoundError(inner) => {
					Error::NotFoundError(inner)
				}
				crate::error::ValidateGroupErrorKind::BadRequestError(inner) => {
					Error::BadRequestError(inner)
				}
				crate::error::ValidateGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
			},
			_ => Error::Unhandled(err.into()),
		}
	}
}
impl std::error::Error for Error {}
