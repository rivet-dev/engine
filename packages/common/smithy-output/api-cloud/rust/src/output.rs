// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CompleteCustomAvatarUploadOutput {}
impl std::fmt::Debug for CompleteCustomAvatarUploadOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CompleteCustomAvatarUploadOutput");
		formatter.finish()
	}
}
/// See [`CompleteCustomAvatarUploadOutput`](crate::output::CompleteCustomAvatarUploadOutput)
pub mod complete_custom_avatar_upload_output {
	/// A builder for [`CompleteCustomAvatarUploadOutput`](crate::output::CompleteCustomAvatarUploadOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`CompleteCustomAvatarUploadOutput`](crate::output::CompleteCustomAvatarUploadOutput)
		pub fn build(self) -> crate::output::CompleteCustomAvatarUploadOutput {
			crate::output::CompleteCustomAvatarUploadOutput {}
		}
	}
}
impl CompleteCustomAvatarUploadOutput {
	/// Creates a new builder-style object to manufacture [`CompleteCustomAvatarUploadOutput`](crate::output::CompleteCustomAvatarUploadOutput)
	pub fn builder() -> crate::output::complete_custom_avatar_upload_output::Builder {
		crate::output::complete_custom_avatar_upload_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PrepareCustomAvatarUploadOutput {
	/// A universally unique identifier.
	pub upload_id: std::option::Option<std::string::String>,
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
}
impl PrepareCustomAvatarUploadOutput {
	/// A universally unique identifier.
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub fn presigned_request(&self) -> std::option::Option<&crate::model::UploadPresignedRequest> {
		self.presigned_request.as_ref()
	}
}
impl std::fmt::Debug for PrepareCustomAvatarUploadOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PrepareCustomAvatarUploadOutput");
		formatter.field("upload_id", &self.upload_id);
		formatter.field("presigned_request", &self.presigned_request);
		formatter.finish()
	}
}
/// See [`PrepareCustomAvatarUploadOutput`](crate::output::PrepareCustomAvatarUploadOutput)
pub mod prepare_custom_avatar_upload_output {
	/// A builder for [`PrepareCustomAvatarUploadOutput`](crate::output::PrepareCustomAvatarUploadOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn presigned_request(mut self, input: crate::model::UploadPresignedRequest) -> Self {
			self.presigned_request = Some(input);
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn set_presigned_request(
			mut self,
			input: std::option::Option<crate::model::UploadPresignedRequest>,
		) -> Self {
			self.presigned_request = input;
			self
		}
		/// Consumes the builder and constructs a [`PrepareCustomAvatarUploadOutput`](crate::output::PrepareCustomAvatarUploadOutput)
		pub fn build(self) -> crate::output::PrepareCustomAvatarUploadOutput {
			crate::output::PrepareCustomAvatarUploadOutput {
				upload_id: self.upload_id,
				presigned_request: self.presigned_request,
			}
		}
	}
}
impl PrepareCustomAvatarUploadOutput {
	/// Creates a new builder-style object to manufacture [`PrepareCustomAvatarUploadOutput`](crate::output::PrepareCustomAvatarUploadOutput)
	pub fn builder() -> crate::output::prepare_custom_avatar_upload_output::Builder {
		crate::output::prepare_custom_avatar_upload_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListGameCustomAvatarsOutput {
	/// A list of custom avatar summaries.
	pub custom_avatars: std::option::Option<std::vec::Vec<crate::model::CustomAvatarSummary>>,
}
impl ListGameCustomAvatarsOutput {
	/// A list of custom avatar summaries.
	pub fn custom_avatars(&self) -> std::option::Option<&[crate::model::CustomAvatarSummary]> {
		self.custom_avatars.as_deref()
	}
}
impl std::fmt::Debug for ListGameCustomAvatarsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListGameCustomAvatarsOutput");
		formatter.field("custom_avatars", &self.custom_avatars);
		formatter.finish()
	}
}
/// See [`ListGameCustomAvatarsOutput`](crate::output::ListGameCustomAvatarsOutput)
pub mod list_game_custom_avatars_output {
	/// A builder for [`ListGameCustomAvatarsOutput`](crate::output::ListGameCustomAvatarsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) custom_avatars:
			std::option::Option<std::vec::Vec<crate::model::CustomAvatarSummary>>,
	}
	impl Builder {
		/// Appends an item to `custom_avatars`.
		///
		/// To override the contents of this collection use [`set_custom_avatars`](Self::set_custom_avatars).
		///
		/// A list of custom avatar summaries.
		pub fn custom_avatars(mut self, input: crate::model::CustomAvatarSummary) -> Self {
			let mut v = self.custom_avatars.unwrap_or_default();
			v.push(input);
			self.custom_avatars = Some(v);
			self
		}
		/// A list of custom avatar summaries.
		pub fn set_custom_avatars(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::CustomAvatarSummary>>,
		) -> Self {
			self.custom_avatars = input;
			self
		}
		/// Consumes the builder and constructs a [`ListGameCustomAvatarsOutput`](crate::output::ListGameCustomAvatarsOutput)
		pub fn build(self) -> crate::output::ListGameCustomAvatarsOutput {
			crate::output::ListGameCustomAvatarsOutput {
				custom_avatars: self.custom_avatars,
			}
		}
	}
}
impl ListGameCustomAvatarsOutput {
	/// Creates a new builder-style object to manufacture [`ListGameCustomAvatarsOutput`](crate::output::ListGameCustomAvatarsOutput)
	pub fn builder() -> crate::output::list_game_custom_avatars_output::Builder {
		crate::output::list_game_custom_avatars_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetRayPerfLogsOutput {
	/// A list of service performance summaries.
	pub perf_lists: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
}
impl GetRayPerfLogsOutput {
	/// A list of service performance summaries.
	pub fn perf_lists(&self) -> std::option::Option<&[crate::model::SvcPerf]> {
		self.perf_lists.as_deref()
	}
}
impl std::fmt::Debug for GetRayPerfLogsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetRayPerfLogsOutput");
		formatter.field("perf_lists", &self.perf_lists);
		formatter.finish()
	}
}
/// See [`GetRayPerfLogsOutput`](crate::output::GetRayPerfLogsOutput)
pub mod get_ray_perf_logs_output {
	/// A builder for [`GetRayPerfLogsOutput`](crate::output::GetRayPerfLogsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) perf_lists: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
	}
	impl Builder {
		/// Appends an item to `perf_lists`.
		///
		/// To override the contents of this collection use [`set_perf_lists`](Self::set_perf_lists).
		///
		/// A list of service performance summaries.
		pub fn perf_lists(mut self, input: crate::model::SvcPerf) -> Self {
			let mut v = self.perf_lists.unwrap_or_default();
			v.push(input);
			self.perf_lists = Some(v);
			self
		}
		/// A list of service performance summaries.
		pub fn set_perf_lists(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
		) -> Self {
			self.perf_lists = input;
			self
		}
		/// Consumes the builder and constructs a [`GetRayPerfLogsOutput`](crate::output::GetRayPerfLogsOutput)
		pub fn build(self) -> crate::output::GetRayPerfLogsOutput {
			crate::output::GetRayPerfLogsOutput {
				perf_lists: self.perf_lists,
			}
		}
	}
}
impl GetRayPerfLogsOutput {
	/// Creates a new builder-style object to manufacture [`GetRayPerfLogsOutput`](crate::output::GetRayPerfLogsOutput)
	pub fn builder() -> crate::output::get_ray_perf_logs_output::Builder {
		crate::output::get_ray_perf_logs_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGroupOutput {
	/// A list of validation errors.
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGroupOutput {
	/// A list of validation errors.
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGroupOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGroupOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGroupOutput`](crate::output::ValidateGroupOutput)
pub mod validate_group_output {
	/// A builder for [`ValidateGroupOutput`](crate::output::ValidateGroupOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		/// A list of validation errors.
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		/// A list of validation errors.
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGroupOutput`](crate::output::ValidateGroupOutput)
		pub fn build(self) -> crate::output::ValidateGroupOutput {
			crate::output::ValidateGroupOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGroupOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGroupOutput`](crate::output::ValidateGroupOutput)
	pub fn builder() -> crate::output::validate_group_output::Builder {
		crate::output::validate_group_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GroupBillingCheckoutOutput {
	/// The URL of the checkout session.
	pub url: std::option::Option<std::string::String>,
}
impl GroupBillingCheckoutOutput {
	/// The URL of the checkout session.
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
}
impl std::fmt::Debug for GroupBillingCheckoutOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GroupBillingCheckoutOutput");
		formatter.field("url", &self.url);
		formatter.finish()
	}
}
/// See [`GroupBillingCheckoutOutput`](crate::output::GroupBillingCheckoutOutput)
pub mod group_billing_checkout_output {
	/// A builder for [`GroupBillingCheckoutOutput`](crate::output::GroupBillingCheckoutOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) url: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// The URL of the checkout session.
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		/// The URL of the checkout session.
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// Consumes the builder and constructs a [`GroupBillingCheckoutOutput`](crate::output::GroupBillingCheckoutOutput)
		pub fn build(self) -> crate::output::GroupBillingCheckoutOutput {
			crate::output::GroupBillingCheckoutOutput { url: self.url }
		}
	}
}
impl GroupBillingCheckoutOutput {
	/// Creates a new builder-style object to manufacture [`GroupBillingCheckoutOutput`](crate::output::GroupBillingCheckoutOutput)
	pub fn builder() -> crate::output::group_billing_checkout_output::Builder {
		crate::output::group_billing_checkout_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConvertGroupOutput {}
impl std::fmt::Debug for ConvertGroupOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ConvertGroupOutput");
		formatter.finish()
	}
}
/// See [`ConvertGroupOutput`](crate::output::ConvertGroupOutput)
pub mod convert_group_output {
	/// A builder for [`ConvertGroupOutput`](crate::output::ConvertGroupOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`ConvertGroupOutput`](crate::output::ConvertGroupOutput)
		pub fn build(self) -> crate::output::ConvertGroupOutput {
			crate::output::ConvertGroupOutput {}
		}
	}
}
impl ConvertGroupOutput {
	/// Creates a new builder-style object to manufacture [`ConvertGroupOutput`](crate::output::ConvertGroupOutput)
	pub fn builder() -> crate::output::convert_group_output::Builder {
		crate::output::convert_group_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGroupInvoicesListOutput {
	/// A list of a group's billing invoices.
	pub invoices: std::option::Option<std::vec::Vec<crate::model::GroupBillingInvoice>>,
}
impl GetGroupInvoicesListOutput {
	/// A list of a group's billing invoices.
	pub fn invoices(&self) -> std::option::Option<&[crate::model::GroupBillingInvoice]> {
		self.invoices.as_deref()
	}
}
impl std::fmt::Debug for GetGroupInvoicesListOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGroupInvoicesListOutput");
		formatter.field("invoices", &self.invoices);
		formatter.finish()
	}
}
/// See [`GetGroupInvoicesListOutput`](crate::output::GetGroupInvoicesListOutput)
pub mod get_group_invoices_list_output {
	/// A builder for [`GetGroupInvoicesListOutput`](crate::output::GetGroupInvoicesListOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) invoices: std::option::Option<std::vec::Vec<crate::model::GroupBillingInvoice>>,
	}
	impl Builder {
		/// Appends an item to `invoices`.
		///
		/// To override the contents of this collection use [`set_invoices`](Self::set_invoices).
		///
		/// A list of a group's billing invoices.
		pub fn invoices(mut self, input: crate::model::GroupBillingInvoice) -> Self {
			let mut v = self.invoices.unwrap_or_default();
			v.push(input);
			self.invoices = Some(v);
			self
		}
		/// A list of a group's billing invoices.
		pub fn set_invoices(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GroupBillingInvoice>>,
		) -> Self {
			self.invoices = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGroupInvoicesListOutput`](crate::output::GetGroupInvoicesListOutput)
		pub fn build(self) -> crate::output::GetGroupInvoicesListOutput {
			crate::output::GetGroupInvoicesListOutput {
				invoices: self.invoices,
			}
		}
	}
}
impl GetGroupInvoicesListOutput {
	/// Creates a new builder-style object to manufacture [`GetGroupInvoicesListOutput`](crate::output::GetGroupInvoicesListOutput)
	pub fn builder() -> crate::output::get_group_invoices_list_output::Builder {
		crate::output::get_group_invoices_list_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGroupBillingOutput {
	/// Signed 64 bit integer.
	pub usage: std::option::Option<i64>,
	/// The status of a developer group.
	pub status: std::option::Option<crate::model::GroupStatus>,
	/// Whether or not the given group can actively host games.
	pub active: std::option::Option<bool>,
}
impl GetGroupBillingOutput {
	/// Signed 64 bit integer.
	pub fn usage(&self) -> std::option::Option<i64> {
		self.usage
	}
	/// The status of a developer group.
	pub fn status(&self) -> std::option::Option<&crate::model::GroupStatus> {
		self.status.as_ref()
	}
	/// Whether or not the given group can actively host games.
	pub fn active(&self) -> std::option::Option<bool> {
		self.active
	}
}
impl std::fmt::Debug for GetGroupBillingOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGroupBillingOutput");
		formatter.field("usage", &self.usage);
		formatter.field("status", &self.status);
		formatter.field("active", &self.active);
		formatter.finish()
	}
}
/// See [`GetGroupBillingOutput`](crate::output::GetGroupBillingOutput)
pub mod get_group_billing_output {
	/// A builder for [`GetGroupBillingOutput`](crate::output::GetGroupBillingOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) usage: std::option::Option<i64>,
		pub(crate) status: std::option::Option<crate::model::GroupStatus>,
		pub(crate) active: std::option::Option<bool>,
	}
	impl Builder {
		/// Signed 64 bit integer.
		pub fn usage(mut self, input: i64) -> Self {
			self.usage = Some(input);
			self
		}
		/// Signed 64 bit integer.
		pub fn set_usage(mut self, input: std::option::Option<i64>) -> Self {
			self.usage = input;
			self
		}
		/// The status of a developer group.
		pub fn status(mut self, input: crate::model::GroupStatus) -> Self {
			self.status = Some(input);
			self
		}
		/// The status of a developer group.
		pub fn set_status(mut self, input: std::option::Option<crate::model::GroupStatus>) -> Self {
			self.status = input;
			self
		}
		/// Whether or not the given group can actively host games.
		pub fn active(mut self, input: bool) -> Self {
			self.active = Some(input);
			self
		}
		/// Whether or not the given group can actively host games.
		pub fn set_active(mut self, input: std::option::Option<bool>) -> Self {
			self.active = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGroupBillingOutput`](crate::output::GetGroupBillingOutput)
		pub fn build(self) -> crate::output::GetGroupBillingOutput {
			crate::output::GetGroupBillingOutput {
				usage: self.usage,
				status: self.status,
				active: self.active,
			}
		}
	}
}
impl GetGroupBillingOutput {
	/// Creates a new builder-style object to manufacture [`GetGroupBillingOutput`](crate::output::GetGroupBillingOutput)
	pub fn builder() -> crate::output::get_group_billing_output::Builder {
		crate::output::get_group_billing_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetRegionTiersOutput {
	/// A list of region server tiers.
	pub tiers: std::option::Option<std::vec::Vec<crate::model::RegionTier>>,
}
impl GetRegionTiersOutput {
	/// A list of region server tiers.
	pub fn tiers(&self) -> std::option::Option<&[crate::model::RegionTier]> {
		self.tiers.as_deref()
	}
}
impl std::fmt::Debug for GetRegionTiersOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetRegionTiersOutput");
		formatter.field("tiers", &self.tiers);
		formatter.finish()
	}
}
/// See [`GetRegionTiersOutput`](crate::output::GetRegionTiersOutput)
pub mod get_region_tiers_output {
	/// A builder for [`GetRegionTiersOutput`](crate::output::GetRegionTiersOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) tiers: std::option::Option<std::vec::Vec<crate::model::RegionTier>>,
	}
	impl Builder {
		/// Appends an item to `tiers`.
		///
		/// To override the contents of this collection use [`set_tiers`](Self::set_tiers).
		///
		/// A list of region server tiers.
		pub fn tiers(mut self, input: crate::model::RegionTier) -> Self {
			let mut v = self.tiers.unwrap_or_default();
			v.push(input);
			self.tiers = Some(v);
			self
		}
		/// A list of region server tiers.
		pub fn set_tiers(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::RegionTier>>,
		) -> Self {
			self.tiers = input;
			self
		}
		/// Consumes the builder and constructs a [`GetRegionTiersOutput`](crate::output::GetRegionTiersOutput)
		pub fn build(self) -> crate::output::GetRegionTiersOutput {
			crate::output::GetRegionTiersOutput { tiers: self.tiers }
		}
	}
}
impl GetRegionTiersOutput {
	/// Creates a new builder-style object to manufacture [`GetRegionTiersOutput`](crate::output::GetRegionTiersOutput)
	pub fn builder() -> crate::output::get_region_tiers_output::Builder {
		crate::output::get_region_tiers_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExportLobbyLogsOutput {
	/// The URL to a CSV file for the given lobby history.
	pub url: std::option::Option<std::string::String>,
}
impl ExportLobbyLogsOutput {
	/// The URL to a CSV file for the given lobby history.
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
}
impl std::fmt::Debug for ExportLobbyLogsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ExportLobbyLogsOutput");
		formatter.field("url", &self.url);
		formatter.finish()
	}
}
/// See [`ExportLobbyLogsOutput`](crate::output::ExportLobbyLogsOutput)
pub mod export_lobby_logs_output {
	/// A builder for [`ExportLobbyLogsOutput`](crate::output::ExportLobbyLogsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) url: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// The URL to a CSV file for the given lobby history.
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		/// The URL to a CSV file for the given lobby history.
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// Consumes the builder and constructs a [`ExportLobbyLogsOutput`](crate::output::ExportLobbyLogsOutput)
		pub fn build(self) -> crate::output::ExportLobbyLogsOutput {
			crate::output::ExportLobbyLogsOutput { url: self.url }
		}
	}
}
impl ExportLobbyLogsOutput {
	/// Creates a new builder-style object to manufacture [`ExportLobbyLogsOutput`](crate::output::ExportLobbyLogsOutput)
	pub fn builder() -> crate::output::export_lobby_logs_output::Builder {
		crate::output::export_lobby_logs_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetLobbyLogsOutput {
	/// Sorted old to new.
	pub lines: std::option::Option<std::vec::Vec<std::string::String>>,
	/// Sorted old to new.
	pub timestamps: std::option::Option<std::vec::Vec<aws_smithy_types::DateTime>>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetLobbyLogsOutput {
	/// Sorted old to new.
	pub fn lines(&self) -> std::option::Option<&[std::string::String]> {
		self.lines.as_deref()
	}
	/// Sorted old to new.
	pub fn timestamps(&self) -> std::option::Option<&[aws_smithy_types::DateTime]> {
		self.timestamps.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetLobbyLogsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetLobbyLogsOutput");
		formatter.field("lines", &self.lines);
		formatter.field("timestamps", &self.timestamps);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetLobbyLogsOutput`](crate::output::GetLobbyLogsOutput)
pub mod get_lobby_logs_output {
	/// A builder for [`GetLobbyLogsOutput`](crate::output::GetLobbyLogsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lines: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) timestamps: std::option::Option<std::vec::Vec<aws_smithy_types::DateTime>>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `lines`.
		///
		/// To override the contents of this collection use [`set_lines`](Self::set_lines).
		///
		/// Sorted old to new.
		pub fn lines(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.lines.unwrap_or_default();
			v.push(input.into());
			self.lines = Some(v);
			self
		}
		/// Sorted old to new.
		pub fn set_lines(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.lines = input;
			self
		}
		/// Appends an item to `timestamps`.
		///
		/// To override the contents of this collection use [`set_timestamps`](Self::set_timestamps).
		///
		/// Sorted old to new.
		pub fn timestamps(mut self, input: aws_smithy_types::DateTime) -> Self {
			let mut v = self.timestamps.unwrap_or_default();
			v.push(input);
			self.timestamps = Some(v);
			self
		}
		/// Sorted old to new.
		pub fn set_timestamps(
			mut self,
			input: std::option::Option<std::vec::Vec<aws_smithy_types::DateTime>>,
		) -> Self {
			self.timestamps = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetLobbyLogsOutput`](crate::output::GetLobbyLogsOutput)
		pub fn build(self) -> crate::output::GetLobbyLogsOutput {
			crate::output::GetLobbyLogsOutput {
				lines: self.lines,
				timestamps: self.timestamps,
				watch: self.watch,
			}
		}
	}
}
impl GetLobbyLogsOutput {
	/// Creates a new builder-style object to manufacture [`GetLobbyLogsOutput`](crate::output::GetLobbyLogsOutput)
	pub fn builder() -> crate::output::get_lobby_logs_output::Builder {
		crate::output::get_lobby_logs_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExportMatchmakerLobbyHistoryOutput {
	/// The URL to a CSV file for the given lobby history.
	pub url: std::option::Option<std::string::String>,
}
impl ExportMatchmakerLobbyHistoryOutput {
	/// The URL to a CSV file for the given lobby history.
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
}
impl std::fmt::Debug for ExportMatchmakerLobbyHistoryOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ExportMatchmakerLobbyHistoryOutput");
		formatter.field("url", &self.url);
		formatter.finish()
	}
}
/// See [`ExportMatchmakerLobbyHistoryOutput`](crate::output::ExportMatchmakerLobbyHistoryOutput)
pub mod export_matchmaker_lobby_history_output {
	/// A builder for [`ExportMatchmakerLobbyHistoryOutput`](crate::output::ExportMatchmakerLobbyHistoryOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) url: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// The URL to a CSV file for the given lobby history.
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		/// The URL to a CSV file for the given lobby history.
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// Consumes the builder and constructs a [`ExportMatchmakerLobbyHistoryOutput`](crate::output::ExportMatchmakerLobbyHistoryOutput)
		pub fn build(self) -> crate::output::ExportMatchmakerLobbyHistoryOutput {
			crate::output::ExportMatchmakerLobbyHistoryOutput { url: self.url }
		}
	}
}
impl ExportMatchmakerLobbyHistoryOutput {
	/// Creates a new builder-style object to manufacture [`ExportMatchmakerLobbyHistoryOutput`](crate::output::ExportMatchmakerLobbyHistoryOutput)
	pub fn builder() -> crate::output::export_matchmaker_lobby_history_output::Builder {
		crate::output::export_matchmaker_lobby_history_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteMatchmakerLobbyOutput {
	/// Whether or not the lobby was successfully stopped.
	pub did_remove: std::option::Option<bool>,
}
impl DeleteMatchmakerLobbyOutput {
	/// Whether or not the lobby was successfully stopped.
	pub fn did_remove(&self) -> std::option::Option<bool> {
		self.did_remove
	}
}
impl std::fmt::Debug for DeleteMatchmakerLobbyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("DeleteMatchmakerLobbyOutput");
		formatter.field("did_remove", &self.did_remove);
		formatter.finish()
	}
}
/// See [`DeleteMatchmakerLobbyOutput`](crate::output::DeleteMatchmakerLobbyOutput)
pub mod delete_matchmaker_lobby_output {
	/// A builder for [`DeleteMatchmakerLobbyOutput`](crate::output::DeleteMatchmakerLobbyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) did_remove: std::option::Option<bool>,
	}
	impl Builder {
		/// Whether or not the lobby was successfully stopped.
		pub fn did_remove(mut self, input: bool) -> Self {
			self.did_remove = Some(input);
			self
		}
		/// Whether or not the lobby was successfully stopped.
		pub fn set_did_remove(mut self, input: std::option::Option<bool>) -> Self {
			self.did_remove = input;
			self
		}
		/// Consumes the builder and constructs a [`DeleteMatchmakerLobbyOutput`](crate::output::DeleteMatchmakerLobbyOutput)
		pub fn build(self) -> crate::output::DeleteMatchmakerLobbyOutput {
			crate::output::DeleteMatchmakerLobbyOutput {
				did_remove: self.did_remove,
			}
		}
	}
}
impl DeleteMatchmakerLobbyOutput {
	/// Creates a new builder-style object to manufacture [`DeleteMatchmakerLobbyOutput`](crate::output::DeleteMatchmakerLobbyOutput)
	pub fn builder() -> crate::output::delete_matchmaker_lobby_output::Builder {
		crate::output::delete_matchmaker_lobby_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameCdnSiteOutput {
	/// A universally unique identifier.
	pub site_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub upload_id: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub presigned_requests:
		std::option::Option<std::vec::Vec<crate::model::UploadPresignedRequest>>,
}
impl CreateGameCdnSiteOutput {
	/// A universally unique identifier.
	pub fn site_id(&self) -> std::option::Option<&str> {
		self.site_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn presigned_requests(
		&self,
	) -> std::option::Option<&[crate::model::UploadPresignedRequest]> {
		self.presigned_requests.as_deref()
	}
}
impl std::fmt::Debug for CreateGameCdnSiteOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameCdnSiteOutput");
		formatter.field("site_id", &self.site_id);
		formatter.field("upload_id", &self.upload_id);
		formatter.field("presigned_requests", &self.presigned_requests);
		formatter.finish()
	}
}
/// See [`CreateGameCdnSiteOutput`](crate::output::CreateGameCdnSiteOutput)
pub mod create_game_cdn_site_output {
	/// A builder for [`CreateGameCdnSiteOutput`](crate::output::CreateGameCdnSiteOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) site_id: std::option::Option<std::string::String>,
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) presigned_requests:
			std::option::Option<std::vec::Vec<crate::model::UploadPresignedRequest>>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn site_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.site_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_site_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.site_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// Appends an item to `presigned_requests`.
		///
		/// To override the contents of this collection use [`set_presigned_requests`](Self::set_presigned_requests).
		///
		pub fn presigned_requests(mut self, input: crate::model::UploadPresignedRequest) -> Self {
			let mut v = self.presigned_requests.unwrap_or_default();
			v.push(input);
			self.presigned_requests = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_presigned_requests(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::UploadPresignedRequest>>,
		) -> Self {
			self.presigned_requests = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameCdnSiteOutput`](crate::output::CreateGameCdnSiteOutput)
		pub fn build(self) -> crate::output::CreateGameCdnSiteOutput {
			crate::output::CreateGameCdnSiteOutput {
				site_id: self.site_id,
				upload_id: self.upload_id,
				presigned_requests: self.presigned_requests,
			}
		}
	}
}
impl CreateGameCdnSiteOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameCdnSiteOutput`](crate::output::CreateGameCdnSiteOutput)
	pub fn builder() -> crate::output::create_game_cdn_site_output::Builder {
		crate::output::create_game_cdn_site_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListGameCdnSitesOutput {
	/// A list of CDN site summaries.
	pub sites: std::option::Option<std::vec::Vec<crate::model::CdnSiteSummary>>,
}
impl ListGameCdnSitesOutput {
	/// A list of CDN site summaries.
	pub fn sites(&self) -> std::option::Option<&[crate::model::CdnSiteSummary]> {
		self.sites.as_deref()
	}
}
impl std::fmt::Debug for ListGameCdnSitesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListGameCdnSitesOutput");
		formatter.field("sites", &self.sites);
		formatter.finish()
	}
}
/// See [`ListGameCdnSitesOutput`](crate::output::ListGameCdnSitesOutput)
pub mod list_game_cdn_sites_output {
	/// A builder for [`ListGameCdnSitesOutput`](crate::output::ListGameCdnSitesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) sites: std::option::Option<std::vec::Vec<crate::model::CdnSiteSummary>>,
	}
	impl Builder {
		/// Appends an item to `sites`.
		///
		/// To override the contents of this collection use [`set_sites`](Self::set_sites).
		///
		/// A list of CDN site summaries.
		pub fn sites(mut self, input: crate::model::CdnSiteSummary) -> Self {
			let mut v = self.sites.unwrap_or_default();
			v.push(input);
			self.sites = Some(v);
			self
		}
		/// A list of CDN site summaries.
		pub fn set_sites(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::CdnSiteSummary>>,
		) -> Self {
			self.sites = input;
			self
		}
		/// Consumes the builder and constructs a [`ListGameCdnSitesOutput`](crate::output::ListGameCdnSitesOutput)
		pub fn build(self) -> crate::output::ListGameCdnSitesOutput {
			crate::output::ListGameCdnSitesOutput { sites: self.sites }
		}
	}
}
impl ListGameCdnSitesOutput {
	/// Creates a new builder-style object to manufacture [`ListGameCdnSitesOutput`](crate::output::ListGameCdnSitesOutput)
	pub fn builder() -> crate::output::list_game_cdn_sites_output::Builder {
		crate::output::list_game_cdn_sites_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameBuildOutput {
	/// A universally unique identifier.
	pub build_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub upload_id: std::option::Option<std::string::String>,
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub image_presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
}
impl CreateGameBuildOutput {
	/// A universally unique identifier.
	pub fn build_id(&self) -> std::option::Option<&str> {
		self.build_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub fn image_presigned_request(
		&self,
	) -> std::option::Option<&crate::model::UploadPresignedRequest> {
		self.image_presigned_request.as_ref()
	}
}
impl std::fmt::Debug for CreateGameBuildOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameBuildOutput");
		formatter.field("build_id", &self.build_id);
		formatter.field("upload_id", &self.upload_id);
		formatter.field("image_presigned_request", &self.image_presigned_request);
		formatter.finish()
	}
}
/// See [`CreateGameBuildOutput`](crate::output::CreateGameBuildOutput)
pub mod create_game_build_output {
	/// A builder for [`CreateGameBuildOutput`](crate::output::CreateGameBuildOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) build_id: std::option::Option<std::string::String>,
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) image_presigned_request:
			std::option::Option<crate::model::UploadPresignedRequest>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn build_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.build_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_build_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.build_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn image_presigned_request(
			mut self,
			input: crate::model::UploadPresignedRequest,
		) -> Self {
			self.image_presigned_request = Some(input);
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn set_image_presigned_request(
			mut self,
			input: std::option::Option<crate::model::UploadPresignedRequest>,
		) -> Self {
			self.image_presigned_request = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameBuildOutput`](crate::output::CreateGameBuildOutput)
		pub fn build(self) -> crate::output::CreateGameBuildOutput {
			crate::output::CreateGameBuildOutput {
				build_id: self.build_id,
				upload_id: self.upload_id,
				image_presigned_request: self.image_presigned_request,
			}
		}
	}
}
impl CreateGameBuildOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameBuildOutput`](crate::output::CreateGameBuildOutput)
	pub fn builder() -> crate::output::create_game_build_output::Builder {
		crate::output::create_game_build_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListGameBuildsOutput {
	/// A list of build summaries.
	pub builds: std::option::Option<std::vec::Vec<crate::model::BuildSummary>>,
}
impl ListGameBuildsOutput {
	/// A list of build summaries.
	pub fn builds(&self) -> std::option::Option<&[crate::model::BuildSummary]> {
		self.builds.as_deref()
	}
}
impl std::fmt::Debug for ListGameBuildsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListGameBuildsOutput");
		formatter.field("builds", &self.builds);
		formatter.finish()
	}
}
/// See [`ListGameBuildsOutput`](crate::output::ListGameBuildsOutput)
pub mod list_game_builds_output {
	/// A builder for [`ListGameBuildsOutput`](crate::output::ListGameBuildsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) builds: std::option::Option<std::vec::Vec<crate::model::BuildSummary>>,
	}
	impl Builder {
		/// Appends an item to `builds`.
		///
		/// To override the contents of this collection use [`set_builds`](Self::set_builds).
		///
		/// A list of build summaries.
		pub fn builds(mut self, input: crate::model::BuildSummary) -> Self {
			let mut v = self.builds.unwrap_or_default();
			v.push(input);
			self.builds = Some(v);
			self
		}
		/// A list of build summaries.
		pub fn set_builds(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::BuildSummary>>,
		) -> Self {
			self.builds = input;
			self
		}
		/// Consumes the builder and constructs a [`ListGameBuildsOutput`](crate::output::ListGameBuildsOutput)
		pub fn build(self) -> crate::output::ListGameBuildsOutput {
			crate::output::ListGameBuildsOutput {
				builds: self.builds,
			}
		}
	}
}
impl ListGameBuildsOutput {
	/// Creates a new builder-style object to manufacture [`ListGameBuildsOutput`](crate::output::ListGameBuildsOutput)
	pub fn builder() -> crate::output::list_game_builds_output::Builder {
		crate::output::list_game_builds_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCloudTokenOutput {
	/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
	pub token: std::option::Option<std::string::String>,
}
impl CreateCloudTokenOutput {
	/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
	pub fn token(&self) -> std::option::Option<&str> {
		self.token.as_deref()
	}
}
impl std::fmt::Debug for CreateCloudTokenOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateCloudTokenOutput");
		formatter.field("token", &"*** Sensitive Data Redacted ***");
		formatter.finish()
	}
}
/// See [`CreateCloudTokenOutput`](crate::output::CreateCloudTokenOutput)
pub mod create_cloud_token_output {
	/// A builder for [`CreateCloudTokenOutput`](crate::output::CreateCloudTokenOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) token: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
		pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
			self.token = Some(input.into());
			self
		}
		/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
		pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.token = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateCloudTokenOutput`](crate::output::CreateCloudTokenOutput)
		pub fn build(self) -> crate::output::CreateCloudTokenOutput {
			crate::output::CreateCloudTokenOutput { token: self.token }
		}
	}
}
impl CreateCloudTokenOutput {
	/// Creates a new builder-style object to manufacture [`CreateCloudTokenOutput`](crate::output::CreateCloudTokenOutput)
	pub fn builder() -> crate::output::create_cloud_token_output::Builder {
		crate::output::create_cloud_token_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetNamespaceLobbyOutput {
	/// A logs summary for a lobby.
	pub lobby: std::option::Option<crate::model::LogsLobbySummary>,
	/// Metrics relating to a job service.
	pub metrics: std::option::Option<crate::model::SvcMetrics>,
	/// A list of URLs.
	pub stdout_presigned_urls: std::option::Option<std::vec::Vec<std::string::String>>,
	/// A list of URLs.
	pub stderr_presigned_urls: std::option::Option<std::vec::Vec<std::string::String>>,
	/// A list of service performance summaries.
	pub perf_lists: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
}
impl GetNamespaceLobbyOutput {
	/// A logs summary for a lobby.
	pub fn lobby(&self) -> std::option::Option<&crate::model::LogsLobbySummary> {
		self.lobby.as_ref()
	}
	/// Metrics relating to a job service.
	pub fn metrics(&self) -> std::option::Option<&crate::model::SvcMetrics> {
		self.metrics.as_ref()
	}
	/// A list of URLs.
	pub fn stdout_presigned_urls(&self) -> std::option::Option<&[std::string::String]> {
		self.stdout_presigned_urls.as_deref()
	}
	/// A list of URLs.
	pub fn stderr_presigned_urls(&self) -> std::option::Option<&[std::string::String]> {
		self.stderr_presigned_urls.as_deref()
	}
	/// A list of service performance summaries.
	pub fn perf_lists(&self) -> std::option::Option<&[crate::model::SvcPerf]> {
		self.perf_lists.as_deref()
	}
}
impl std::fmt::Debug for GetNamespaceLobbyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetNamespaceLobbyOutput");
		formatter.field("lobby", &self.lobby);
		formatter.field("metrics", &self.metrics);
		formatter.field("stdout_presigned_urls", &self.stdout_presigned_urls);
		formatter.field("stderr_presigned_urls", &self.stderr_presigned_urls);
		formatter.field("perf_lists", &self.perf_lists);
		formatter.finish()
	}
}
/// See [`GetNamespaceLobbyOutput`](crate::output::GetNamespaceLobbyOutput)
pub mod get_namespace_lobby_output {
	/// A builder for [`GetNamespaceLobbyOutput`](crate::output::GetNamespaceLobbyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby: std::option::Option<crate::model::LogsLobbySummary>,
		pub(crate) metrics: std::option::Option<crate::model::SvcMetrics>,
		pub(crate) stdout_presigned_urls: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) stderr_presigned_urls: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) perf_lists: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
	}
	impl Builder {
		/// A logs summary for a lobby.
		pub fn lobby(mut self, input: crate::model::LogsLobbySummary) -> Self {
			self.lobby = Some(input);
			self
		}
		/// A logs summary for a lobby.
		pub fn set_lobby(
			mut self,
			input: std::option::Option<crate::model::LogsLobbySummary>,
		) -> Self {
			self.lobby = input;
			self
		}
		/// Metrics relating to a job service.
		pub fn metrics(mut self, input: crate::model::SvcMetrics) -> Self {
			self.metrics = Some(input);
			self
		}
		/// Metrics relating to a job service.
		pub fn set_metrics(mut self, input: std::option::Option<crate::model::SvcMetrics>) -> Self {
			self.metrics = input;
			self
		}
		/// Appends an item to `stdout_presigned_urls`.
		///
		/// To override the contents of this collection use [`set_stdout_presigned_urls`](Self::set_stdout_presigned_urls).
		///
		/// A list of URLs.
		pub fn stdout_presigned_urls(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.stdout_presigned_urls.unwrap_or_default();
			v.push(input.into());
			self.stdout_presigned_urls = Some(v);
			self
		}
		/// A list of URLs.
		pub fn set_stdout_presigned_urls(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.stdout_presigned_urls = input;
			self
		}
		/// Appends an item to `stderr_presigned_urls`.
		///
		/// To override the contents of this collection use [`set_stderr_presigned_urls`](Self::set_stderr_presigned_urls).
		///
		/// A list of URLs.
		pub fn stderr_presigned_urls(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.stderr_presigned_urls.unwrap_or_default();
			v.push(input.into());
			self.stderr_presigned_urls = Some(v);
			self
		}
		/// A list of URLs.
		pub fn set_stderr_presigned_urls(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.stderr_presigned_urls = input;
			self
		}
		/// Appends an item to `perf_lists`.
		///
		/// To override the contents of this collection use [`set_perf_lists`](Self::set_perf_lists).
		///
		/// A list of service performance summaries.
		pub fn perf_lists(mut self, input: crate::model::SvcPerf) -> Self {
			let mut v = self.perf_lists.unwrap_or_default();
			v.push(input);
			self.perf_lists = Some(v);
			self
		}
		/// A list of service performance summaries.
		pub fn set_perf_lists(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
		) -> Self {
			self.perf_lists = input;
			self
		}
		/// Consumes the builder and constructs a [`GetNamespaceLobbyOutput`](crate::output::GetNamespaceLobbyOutput)
		pub fn build(self) -> crate::output::GetNamespaceLobbyOutput {
			crate::output::GetNamespaceLobbyOutput {
				lobby: self.lobby,
				metrics: self.metrics,
				stdout_presigned_urls: self.stdout_presigned_urls,
				stderr_presigned_urls: self.stderr_presigned_urls,
				perf_lists: self.perf_lists,
			}
		}
	}
}
impl GetNamespaceLobbyOutput {
	/// Creates a new builder-style object to manufacture [`GetNamespaceLobbyOutput`](crate::output::GetNamespaceLobbyOutput)
	pub fn builder() -> crate::output::get_namespace_lobby_output::Builder {
		crate::output::get_namespace_lobby_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListNamespaceLobbiesOutput {
	/// A list of lobby log summaries.
	pub lobbies: std::option::Option<std::vec::Vec<crate::model::LogsLobbySummary>>,
}
impl ListNamespaceLobbiesOutput {
	/// A list of lobby log summaries.
	pub fn lobbies(&self) -> std::option::Option<&[crate::model::LogsLobbySummary]> {
		self.lobbies.as_deref()
	}
}
impl std::fmt::Debug for ListNamespaceLobbiesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListNamespaceLobbiesOutput");
		formatter.field("lobbies", &self.lobbies);
		formatter.finish()
	}
}
/// See [`ListNamespaceLobbiesOutput`](crate::output::ListNamespaceLobbiesOutput)
pub mod list_namespace_lobbies_output {
	/// A builder for [`ListNamespaceLobbiesOutput`](crate::output::ListNamespaceLobbiesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobbies: std::option::Option<std::vec::Vec<crate::model::LogsLobbySummary>>,
	}
	impl Builder {
		/// Appends an item to `lobbies`.
		///
		/// To override the contents of this collection use [`set_lobbies`](Self::set_lobbies).
		///
		/// A list of lobby log summaries.
		pub fn lobbies(mut self, input: crate::model::LogsLobbySummary) -> Self {
			let mut v = self.lobbies.unwrap_or_default();
			v.push(input);
			self.lobbies = Some(v);
			self
		}
		/// A list of lobby log summaries.
		pub fn set_lobbies(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::LogsLobbySummary>>,
		) -> Self {
			self.lobbies = input;
			self
		}
		/// Consumes the builder and constructs a [`ListNamespaceLobbiesOutput`](crate::output::ListNamespaceLobbiesOutput)
		pub fn build(self) -> crate::output::ListNamespaceLobbiesOutput {
			crate::output::ListNamespaceLobbiesOutput {
				lobbies: self.lobbies,
			}
		}
	}
}
impl ListNamespaceLobbiesOutput {
	/// Creates a new builder-style object to manufacture [`ListNamespaceLobbiesOutput`](crate::output::ListNamespaceLobbiesOutput)
	pub fn builder() -> crate::output::list_namespace_lobbies_output::Builder {
		crate::output::list_namespace_lobbies_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetNamespaceAnalyticsMatchmakerLiveOutput {
	/// A list of analytics lobby summaries.
	pub lobbies: std::option::Option<std::vec::Vec<crate::model::AnalyticsLobbySummary>>,
}
impl GetNamespaceAnalyticsMatchmakerLiveOutput {
	/// A list of analytics lobby summaries.
	pub fn lobbies(&self) -> std::option::Option<&[crate::model::AnalyticsLobbySummary]> {
		self.lobbies.as_deref()
	}
}
impl std::fmt::Debug for GetNamespaceAnalyticsMatchmakerLiveOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetNamespaceAnalyticsMatchmakerLiveOutput");
		formatter.field("lobbies", &self.lobbies);
		formatter.finish()
	}
}
/// See [`GetNamespaceAnalyticsMatchmakerLiveOutput`](crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput)
pub mod get_namespace_analytics_matchmaker_live_output {
	/// A builder for [`GetNamespaceAnalyticsMatchmakerLiveOutput`](crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobbies: std::option::Option<std::vec::Vec<crate::model::AnalyticsLobbySummary>>,
	}
	impl Builder {
		/// Appends an item to `lobbies`.
		///
		/// To override the contents of this collection use [`set_lobbies`](Self::set_lobbies).
		///
		/// A list of analytics lobby summaries.
		pub fn lobbies(mut self, input: crate::model::AnalyticsLobbySummary) -> Self {
			let mut v = self.lobbies.unwrap_or_default();
			v.push(input);
			self.lobbies = Some(v);
			self
		}
		/// A list of analytics lobby summaries.
		pub fn set_lobbies(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::AnalyticsLobbySummary>>,
		) -> Self {
			self.lobbies = input;
			self
		}
		/// Consumes the builder and constructs a [`GetNamespaceAnalyticsMatchmakerLiveOutput`](crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput)
		pub fn build(self) -> crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput {
			crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput {
				lobbies: self.lobbies,
			}
		}
	}
}
impl GetNamespaceAnalyticsMatchmakerLiveOutput {
	/// Creates a new builder-style object to manufacture [`GetNamespaceAnalyticsMatchmakerLiveOutput`](crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput)
	pub fn builder() -> crate::output::get_namespace_analytics_matchmaker_live_output::Builder {
		crate::output::get_namespace_analytics_matchmaker_live_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetNamespaceCdnAuthTypeOutput {}
impl std::fmt::Debug for SetNamespaceCdnAuthTypeOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SetNamespaceCdnAuthTypeOutput");
		formatter.finish()
	}
}
/// See [`SetNamespaceCdnAuthTypeOutput`](crate::output::SetNamespaceCdnAuthTypeOutput)
pub mod set_namespace_cdn_auth_type_output {
	/// A builder for [`SetNamespaceCdnAuthTypeOutput`](crate::output::SetNamespaceCdnAuthTypeOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`SetNamespaceCdnAuthTypeOutput`](crate::output::SetNamespaceCdnAuthTypeOutput)
		pub fn build(self) -> crate::output::SetNamespaceCdnAuthTypeOutput {
			crate::output::SetNamespaceCdnAuthTypeOutput {}
		}
	}
}
impl SetNamespaceCdnAuthTypeOutput {
	/// Creates a new builder-style object to manufacture [`SetNamespaceCdnAuthTypeOutput`](crate::output::SetNamespaceCdnAuthTypeOutput)
	pub fn builder() -> crate::output::set_namespace_cdn_auth_type_output::Builder {
		crate::output::set_namespace_cdn_auth_type_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveNamespaceCdnAuthUserOutput {}
impl std::fmt::Debug for RemoveNamespaceCdnAuthUserOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RemoveNamespaceCdnAuthUserOutput");
		formatter.finish()
	}
}
/// See [`RemoveNamespaceCdnAuthUserOutput`](crate::output::RemoveNamespaceCdnAuthUserOutput)
pub mod remove_namespace_cdn_auth_user_output {
	/// A builder for [`RemoveNamespaceCdnAuthUserOutput`](crate::output::RemoveNamespaceCdnAuthUserOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`RemoveNamespaceCdnAuthUserOutput`](crate::output::RemoveNamespaceCdnAuthUserOutput)
		pub fn build(self) -> crate::output::RemoveNamespaceCdnAuthUserOutput {
			crate::output::RemoveNamespaceCdnAuthUserOutput {}
		}
	}
}
impl RemoveNamespaceCdnAuthUserOutput {
	/// Creates a new builder-style object to manufacture [`RemoveNamespaceCdnAuthUserOutput`](crate::output::RemoveNamespaceCdnAuthUserOutput)
	pub fn builder() -> crate::output::remove_namespace_cdn_auth_user_output::Builder {
		crate::output::remove_namespace_cdn_auth_user_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateNamespaceCdnAuthUserOutput {}
impl std::fmt::Debug for UpdateNamespaceCdnAuthUserOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UpdateNamespaceCdnAuthUserOutput");
		formatter.finish()
	}
}
/// See [`UpdateNamespaceCdnAuthUserOutput`](crate::output::UpdateNamespaceCdnAuthUserOutput)
pub mod update_namespace_cdn_auth_user_output {
	/// A builder for [`UpdateNamespaceCdnAuthUserOutput`](crate::output::UpdateNamespaceCdnAuthUserOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UpdateNamespaceCdnAuthUserOutput`](crate::output::UpdateNamespaceCdnAuthUserOutput)
		pub fn build(self) -> crate::output::UpdateNamespaceCdnAuthUserOutput {
			crate::output::UpdateNamespaceCdnAuthUserOutput {}
		}
	}
}
impl UpdateNamespaceCdnAuthUserOutput {
	/// Creates a new builder-style object to manufacture [`UpdateNamespaceCdnAuthUserOutput`](crate::output::UpdateNamespaceCdnAuthUserOutput)
	pub fn builder() -> crate::output::update_namespace_cdn_auth_user_output::Builder {
		crate::output::update_namespace_cdn_auth_user_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGameNamespaceMatchmakerConfigOutput {
	/// A list of validation errors.
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGameNamespaceMatchmakerConfigOutput {
	/// A list of validation errors.
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGameNamespaceMatchmakerConfigOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGameNamespaceMatchmakerConfigOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGameNamespaceMatchmakerConfigOutput`](crate::output::ValidateGameNamespaceMatchmakerConfigOutput)
pub mod validate_game_namespace_matchmaker_config_output {
	/// A builder for [`ValidateGameNamespaceMatchmakerConfigOutput`](crate::output::ValidateGameNamespaceMatchmakerConfigOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		/// A list of validation errors.
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		/// A list of validation errors.
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGameNamespaceMatchmakerConfigOutput`](crate::output::ValidateGameNamespaceMatchmakerConfigOutput)
		pub fn build(self) -> crate::output::ValidateGameNamespaceMatchmakerConfigOutput {
			crate::output::ValidateGameNamespaceMatchmakerConfigOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGameNamespaceMatchmakerConfigOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGameNamespaceMatchmakerConfigOutput`](crate::output::ValidateGameNamespaceMatchmakerConfigOutput)
	pub fn builder() -> crate::output::validate_game_namespace_matchmaker_config_output::Builder {
		crate::output::validate_game_namespace_matchmaker_config_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGameNamespaceTokenDevelopmentOutput {
	/// A list of validation errors.
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGameNamespaceTokenDevelopmentOutput {
	/// A list of validation errors.
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGameNamespaceTokenDevelopmentOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGameNamespaceTokenDevelopmentOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGameNamespaceTokenDevelopmentOutput`](crate::output::ValidateGameNamespaceTokenDevelopmentOutput)
pub mod validate_game_namespace_token_development_output {
	/// A builder for [`ValidateGameNamespaceTokenDevelopmentOutput`](crate::output::ValidateGameNamespaceTokenDevelopmentOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		/// A list of validation errors.
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		/// A list of validation errors.
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGameNamespaceTokenDevelopmentOutput`](crate::output::ValidateGameNamespaceTokenDevelopmentOutput)
		pub fn build(self) -> crate::output::ValidateGameNamespaceTokenDevelopmentOutput {
			crate::output::ValidateGameNamespaceTokenDevelopmentOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGameNamespaceTokenDevelopmentOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGameNamespaceTokenDevelopmentOutput`](crate::output::ValidateGameNamespaceTokenDevelopmentOutput)
	pub fn builder() -> crate::output::validate_game_namespace_token_development_output::Builder {
		crate::output::validate_game_namespace_token_development_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGameNamespaceOutput {
	/// A list of validation errors.
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGameNamespaceOutput {
	/// A list of validation errors.
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGameNamespaceOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGameNamespaceOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGameNamespaceOutput`](crate::output::ValidateGameNamespaceOutput)
pub mod validate_game_namespace_output {
	/// A builder for [`ValidateGameNamespaceOutput`](crate::output::ValidateGameNamespaceOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		/// A list of validation errors.
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		/// A list of validation errors.
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGameNamespaceOutput`](crate::output::ValidateGameNamespaceOutput)
		pub fn build(self) -> crate::output::ValidateGameNamespaceOutput {
			crate::output::ValidateGameNamespaceOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGameNamespaceOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGameNamespaceOutput`](crate::output::ValidateGameNamespaceOutput)
	pub fn builder() -> crate::output::validate_game_namespace_output::Builder {
		crate::output::validate_game_namespace_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateGameNamespaceMatchmakerConfigOutput {}
impl std::fmt::Debug for UpdateGameNamespaceMatchmakerConfigOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UpdateGameNamespaceMatchmakerConfigOutput");
		formatter.finish()
	}
}
/// See [`UpdateGameNamespaceMatchmakerConfigOutput`](crate::output::UpdateGameNamespaceMatchmakerConfigOutput)
pub mod update_game_namespace_matchmaker_config_output {
	/// A builder for [`UpdateGameNamespaceMatchmakerConfigOutput`](crate::output::UpdateGameNamespaceMatchmakerConfigOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UpdateGameNamespaceMatchmakerConfigOutput`](crate::output::UpdateGameNamespaceMatchmakerConfigOutput)
		pub fn build(self) -> crate::output::UpdateGameNamespaceMatchmakerConfigOutput {
			crate::output::UpdateGameNamespaceMatchmakerConfigOutput {}
		}
	}
}
impl UpdateGameNamespaceMatchmakerConfigOutput {
	/// Creates a new builder-style object to manufacture [`UpdateGameNamespaceMatchmakerConfigOutput`](crate::output::UpdateGameNamespaceMatchmakerConfigOutput)
	pub fn builder() -> crate::output::update_game_namespace_matchmaker_config_output::Builder {
		crate::output::update_game_namespace_matchmaker_config_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ToggleNamespaceDomainPublicAuthOutput {}
impl std::fmt::Debug for ToggleNamespaceDomainPublicAuthOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ToggleNamespaceDomainPublicAuthOutput");
		formatter.finish()
	}
}
/// See [`ToggleNamespaceDomainPublicAuthOutput`](crate::output::ToggleNamespaceDomainPublicAuthOutput)
pub mod toggle_namespace_domain_public_auth_output {
	/// A builder for [`ToggleNamespaceDomainPublicAuthOutput`](crate::output::ToggleNamespaceDomainPublicAuthOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`ToggleNamespaceDomainPublicAuthOutput`](crate::output::ToggleNamespaceDomainPublicAuthOutput)
		pub fn build(self) -> crate::output::ToggleNamespaceDomainPublicAuthOutput {
			crate::output::ToggleNamespaceDomainPublicAuthOutput {}
		}
	}
}
impl ToggleNamespaceDomainPublicAuthOutput {
	/// Creates a new builder-style object to manufacture [`ToggleNamespaceDomainPublicAuthOutput`](crate::output::ToggleNamespaceDomainPublicAuthOutput)
	pub fn builder() -> crate::output::toggle_namespace_domain_public_auth_output::Builder {
		crate::output::toggle_namespace_domain_public_auth_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveNamespaceDomainOutput {}
impl std::fmt::Debug for RemoveNamespaceDomainOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RemoveNamespaceDomainOutput");
		formatter.finish()
	}
}
/// See [`RemoveNamespaceDomainOutput`](crate::output::RemoveNamespaceDomainOutput)
pub mod remove_namespace_domain_output {
	/// A builder for [`RemoveNamespaceDomainOutput`](crate::output::RemoveNamespaceDomainOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`RemoveNamespaceDomainOutput`](crate::output::RemoveNamespaceDomainOutput)
		pub fn build(self) -> crate::output::RemoveNamespaceDomainOutput {
			crate::output::RemoveNamespaceDomainOutput {}
		}
	}
}
impl RemoveNamespaceDomainOutput {
	/// Creates a new builder-style object to manufacture [`RemoveNamespaceDomainOutput`](crate::output::RemoveNamespaceDomainOutput)
	pub fn builder() -> crate::output::remove_namespace_domain_output::Builder {
		crate::output::remove_namespace_domain_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddNamespaceDomainOutput {}
impl std::fmt::Debug for AddNamespaceDomainOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("AddNamespaceDomainOutput");
		formatter.finish()
	}
}
/// See [`AddNamespaceDomainOutput`](crate::output::AddNamespaceDomainOutput)
pub mod add_namespace_domain_output {
	/// A builder for [`AddNamespaceDomainOutput`](crate::output::AddNamespaceDomainOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`AddNamespaceDomainOutput`](crate::output::AddNamespaceDomainOutput)
		pub fn build(self) -> crate::output::AddNamespaceDomainOutput {
			crate::output::AddNamespaceDomainOutput {}
		}
	}
}
impl AddNamespaceDomainOutput {
	/// Creates a new builder-style object to manufacture [`AddNamespaceDomainOutput`](crate::output::AddNamespaceDomainOutput)
	pub fn builder() -> crate::output::add_namespace_domain_output::Builder {
		crate::output::add_namespace_domain_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameNamespaceTokenDevelopmentOutput {
	/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
	pub token: std::option::Option<std::string::String>,
}
impl CreateGameNamespaceTokenDevelopmentOutput {
	/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
	pub fn token(&self) -> std::option::Option<&str> {
		self.token.as_deref()
	}
}
impl std::fmt::Debug for CreateGameNamespaceTokenDevelopmentOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameNamespaceTokenDevelopmentOutput");
		formatter.field("token", &"*** Sensitive Data Redacted ***");
		formatter.finish()
	}
}
/// See [`CreateGameNamespaceTokenDevelopmentOutput`](crate::output::CreateGameNamespaceTokenDevelopmentOutput)
pub mod create_game_namespace_token_development_output {
	/// A builder for [`CreateGameNamespaceTokenDevelopmentOutput`](crate::output::CreateGameNamespaceTokenDevelopmentOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) token: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
		pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
			self.token = Some(input.into());
			self
		}
		/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
		pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.token = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameNamespaceTokenDevelopmentOutput`](crate::output::CreateGameNamespaceTokenDevelopmentOutput)
		pub fn build(self) -> crate::output::CreateGameNamespaceTokenDevelopmentOutput {
			crate::output::CreateGameNamespaceTokenDevelopmentOutput { token: self.token }
		}
	}
}
impl CreateGameNamespaceTokenDevelopmentOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameNamespaceTokenDevelopmentOutput`](crate::output::CreateGameNamespaceTokenDevelopmentOutput)
	pub fn builder() -> crate::output::create_game_namespace_token_development_output::Builder {
		crate::output::create_game_namespace_token_development_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameNamespaceTokenPublicOutput {
	/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
	pub token: std::option::Option<std::string::String>,
}
impl CreateGameNamespaceTokenPublicOutput {
	/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
	pub fn token(&self) -> std::option::Option<&str> {
		self.token.as_deref()
	}
}
impl std::fmt::Debug for CreateGameNamespaceTokenPublicOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameNamespaceTokenPublicOutput");
		formatter.field("token", &"*** Sensitive Data Redacted ***");
		formatter.finish()
	}
}
/// See [`CreateGameNamespaceTokenPublicOutput`](crate::output::CreateGameNamespaceTokenPublicOutput)
pub mod create_game_namespace_token_public_output {
	/// A builder for [`CreateGameNamespaceTokenPublicOutput`](crate::output::CreateGameNamespaceTokenPublicOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) token: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
		pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
			self.token = Some(input.into());
			self
		}
		/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
		pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.token = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameNamespaceTokenPublicOutput`](crate::output::CreateGameNamespaceTokenPublicOutput)
		pub fn build(self) -> crate::output::CreateGameNamespaceTokenPublicOutput {
			crate::output::CreateGameNamespaceTokenPublicOutput { token: self.token }
		}
	}
}
impl CreateGameNamespaceTokenPublicOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameNamespaceTokenPublicOutput`](crate::output::CreateGameNamespaceTokenPublicOutput)
	pub fn builder() -> crate::output::create_game_namespace_token_public_output::Builder {
		crate::output::create_game_namespace_token_public_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateGameNamespaceVersionOutput {}
impl std::fmt::Debug for UpdateGameNamespaceVersionOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UpdateGameNamespaceVersionOutput");
		formatter.finish()
	}
}
/// See [`UpdateGameNamespaceVersionOutput`](crate::output::UpdateGameNamespaceVersionOutput)
pub mod update_game_namespace_version_output {
	/// A builder for [`UpdateGameNamespaceVersionOutput`](crate::output::UpdateGameNamespaceVersionOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UpdateGameNamespaceVersionOutput`](crate::output::UpdateGameNamespaceVersionOutput)
		pub fn build(self) -> crate::output::UpdateGameNamespaceVersionOutput {
			crate::output::UpdateGameNamespaceVersionOutput {}
		}
	}
}
impl UpdateGameNamespaceVersionOutput {
	/// Creates a new builder-style object to manufacture [`UpdateGameNamespaceVersionOutput`](crate::output::UpdateGameNamespaceVersionOutput)
	pub fn builder() -> crate::output::update_game_namespace_version_output::Builder {
		crate::output::update_game_namespace_version_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameNamespaceByIdOutput {
	/// A full namespace.
	pub namespace: std::option::Option<crate::model::NamespaceFull>,
}
impl GetGameNamespaceByIdOutput {
	/// A full namespace.
	pub fn namespace(&self) -> std::option::Option<&crate::model::NamespaceFull> {
		self.namespace.as_ref()
	}
}
impl std::fmt::Debug for GetGameNamespaceByIdOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameNamespaceByIdOutput");
		formatter.field("namespace", &self.namespace);
		formatter.finish()
	}
}
/// See [`GetGameNamespaceByIdOutput`](crate::output::GetGameNamespaceByIdOutput)
pub mod get_game_namespace_by_id_output {
	/// A builder for [`GetGameNamespaceByIdOutput`](crate::output::GetGameNamespaceByIdOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) namespace: std::option::Option<crate::model::NamespaceFull>,
	}
	impl Builder {
		/// A full namespace.
		pub fn namespace(mut self, input: crate::model::NamespaceFull) -> Self {
			self.namespace = Some(input);
			self
		}
		/// A full namespace.
		pub fn set_namespace(
			mut self,
			input: std::option::Option<crate::model::NamespaceFull>,
		) -> Self {
			self.namespace = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameNamespaceByIdOutput`](crate::output::GetGameNamespaceByIdOutput)
		pub fn build(self) -> crate::output::GetGameNamespaceByIdOutput {
			crate::output::GetGameNamespaceByIdOutput {
				namespace: self.namespace,
			}
		}
	}
}
impl GetGameNamespaceByIdOutput {
	/// Creates a new builder-style object to manufacture [`GetGameNamespaceByIdOutput`](crate::output::GetGameNamespaceByIdOutput)
	pub fn builder() -> crate::output::get_game_namespace_by_id_output::Builder {
		crate::output::get_game_namespace_by_id_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameNamespaceOutput {
	/// A universally unique identifier.
	pub namespace_id: std::option::Option<std::string::String>,
}
impl CreateGameNamespaceOutput {
	/// A universally unique identifier.
	pub fn namespace_id(&self) -> std::option::Option<&str> {
		self.namespace_id.as_deref()
	}
}
impl std::fmt::Debug for CreateGameNamespaceOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameNamespaceOutput");
		formatter.field("namespace_id", &self.namespace_id);
		formatter.finish()
	}
}
/// See [`CreateGameNamespaceOutput`](crate::output::CreateGameNamespaceOutput)
pub mod create_game_namespace_output {
	/// A builder for [`CreateGameNamespaceOutput`](crate::output::CreateGameNamespaceOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) namespace_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn namespace_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.namespace_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_namespace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.namespace_id = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameNamespaceOutput`](crate::output::CreateGameNamespaceOutput)
		pub fn build(self) -> crate::output::CreateGameNamespaceOutput {
			crate::output::CreateGameNamespaceOutput {
				namespace_id: self.namespace_id,
			}
		}
	}
}
impl CreateGameNamespaceOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameNamespaceOutput`](crate::output::CreateGameNamespaceOutput)
	pub fn builder() -> crate::output::create_game_namespace_output::Builder {
		crate::output::create_game_namespace_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGameVersionOutput {
	/// A list of validation errors.
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGameVersionOutput {
	/// A list of validation errors.
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGameVersionOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGameVersionOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGameVersionOutput`](crate::output::ValidateGameVersionOutput)
pub mod validate_game_version_output {
	/// A builder for [`ValidateGameVersionOutput`](crate::output::ValidateGameVersionOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		/// A list of validation errors.
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		/// A list of validation errors.
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGameVersionOutput`](crate::output::ValidateGameVersionOutput)
		pub fn build(self) -> crate::output::ValidateGameVersionOutput {
			crate::output::ValidateGameVersionOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGameVersionOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGameVersionOutput`](crate::output::ValidateGameVersionOutput)
	pub fn builder() -> crate::output::validate_game_version_output::Builder {
		crate::output::validate_game_version_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameVersionByIdOutput {
	/// A full version.
	pub version: std::option::Option<crate::model::VersionFull>,
}
impl GetGameVersionByIdOutput {
	/// A full version.
	pub fn version(&self) -> std::option::Option<&crate::model::VersionFull> {
		self.version.as_ref()
	}
}
impl std::fmt::Debug for GetGameVersionByIdOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameVersionByIdOutput");
		formatter.field("version", &self.version);
		formatter.finish()
	}
}
/// See [`GetGameVersionByIdOutput`](crate::output::GetGameVersionByIdOutput)
pub mod get_game_version_by_id_output {
	/// A builder for [`GetGameVersionByIdOutput`](crate::output::GetGameVersionByIdOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) version: std::option::Option<crate::model::VersionFull>,
	}
	impl Builder {
		/// A full version.
		pub fn version(mut self, input: crate::model::VersionFull) -> Self {
			self.version = Some(input);
			self
		}
		/// A full version.
		pub fn set_version(
			mut self,
			input: std::option::Option<crate::model::VersionFull>,
		) -> Self {
			self.version = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameVersionByIdOutput`](crate::output::GetGameVersionByIdOutput)
		pub fn build(self) -> crate::output::GetGameVersionByIdOutput {
			crate::output::GetGameVersionByIdOutput {
				version: self.version,
			}
		}
	}
}
impl GetGameVersionByIdOutput {
	/// Creates a new builder-style object to manufacture [`GetGameVersionByIdOutput`](crate::output::GetGameVersionByIdOutput)
	pub fn builder() -> crate::output::get_game_version_by_id_output::Builder {
		crate::output::get_game_version_by_id_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameVersionOutput {
	/// A universally unique identifier.
	pub version_id: std::option::Option<std::string::String>,
}
impl CreateGameVersionOutput {
	/// A universally unique identifier.
	pub fn version_id(&self) -> std::option::Option<&str> {
		self.version_id.as_deref()
	}
}
impl std::fmt::Debug for CreateGameVersionOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameVersionOutput");
		formatter.field("version_id", &self.version_id);
		formatter.finish()
	}
}
/// See [`CreateGameVersionOutput`](crate::output::CreateGameVersionOutput)
pub mod create_game_version_output {
	/// A builder for [`CreateGameVersionOutput`](crate::output::CreateGameVersionOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) version_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn version_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.version_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_version_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.version_id = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameVersionOutput`](crate::output::CreateGameVersionOutput)
		pub fn build(self) -> crate::output::CreateGameVersionOutput {
			crate::output::CreateGameVersionOutput {
				version_id: self.version_id,
			}
		}
	}
}
impl CreateGameVersionOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameVersionOutput`](crate::output::CreateGameVersionOutput)
	pub fn builder() -> crate::output::create_game_version_output::Builder {
		crate::output::create_game_version_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameBillingPlansOutput {
	/// A list of billing plans.
	pub plans: std::option::Option<std::vec::Vec<crate::model::GameBillingPlan>>,
}
impl GetGameBillingPlansOutput {
	/// A list of billing plans.
	pub fn plans(&self) -> std::option::Option<&[crate::model::GameBillingPlan]> {
		self.plans.as_deref()
	}
}
impl std::fmt::Debug for GetGameBillingPlansOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameBillingPlansOutput");
		formatter.field("plans", &self.plans);
		formatter.finish()
	}
}
/// See [`GetGameBillingPlansOutput`](crate::output::GetGameBillingPlansOutput)
pub mod get_game_billing_plans_output {
	/// A builder for [`GetGameBillingPlansOutput`](crate::output::GetGameBillingPlansOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) plans: std::option::Option<std::vec::Vec<crate::model::GameBillingPlan>>,
	}
	impl Builder {
		/// Appends an item to `plans`.
		///
		/// To override the contents of this collection use [`set_plans`](Self::set_plans).
		///
		/// A list of billing plans.
		pub fn plans(mut self, input: crate::model::GameBillingPlan) -> Self {
			let mut v = self.plans.unwrap_or_default();
			v.push(input);
			self.plans = Some(v);
			self
		}
		/// A list of billing plans.
		pub fn set_plans(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GameBillingPlan>>,
		) -> Self {
			self.plans = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameBillingPlansOutput`](crate::output::GetGameBillingPlansOutput)
		pub fn build(self) -> crate::output::GetGameBillingPlansOutput {
			crate::output::GetGameBillingPlansOutput { plans: self.plans }
		}
	}
}
impl GetGameBillingPlansOutput {
	/// Creates a new builder-style object to manufacture [`GetGameBillingPlansOutput`](crate::output::GetGameBillingPlansOutput)
	pub fn builder() -> crate::output::get_game_billing_plans_output::Builder {
		crate::output::get_game_billing_plans_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetGameBillingPlanOutput {}
impl std::fmt::Debug for SetGameBillingPlanOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SetGameBillingPlanOutput");
		formatter.finish()
	}
}
/// See [`SetGameBillingPlanOutput`](crate::output::SetGameBillingPlanOutput)
pub mod set_game_billing_plan_output {
	/// A builder for [`SetGameBillingPlanOutput`](crate::output::SetGameBillingPlanOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`SetGameBillingPlanOutput`](crate::output::SetGameBillingPlanOutput)
		pub fn build(self) -> crate::output::SetGameBillingPlanOutput {
			crate::output::SetGameBillingPlanOutput {}
		}
	}
}
impl SetGameBillingPlanOutput {
	/// Creates a new builder-style object to manufacture [`SetGameBillingPlanOutput`](crate::output::SetGameBillingPlanOutput)
	pub fn builder() -> crate::output::set_game_billing_plan_output::Builder {
		crate::output::set_game_billing_plan_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameBillingOutput {
	/// A game handle.
	pub game: std::option::Option<crate::model::GameHandle>,
	/// A list of namespace summaries.
	pub namespaces: std::option::Option<std::vec::Vec<crate::model::NamespaceSummary>>,
	/// A list of multiple region tier metrics.
	pub metrics: std::option::Option<std::vec::Vec<crate::model::RegionTierMetrics>>,
	/// The status of a developer group.
	pub group_status: std::option::Option<crate::model::GroupStatus>,
	/// Whether or not the given game can actively host games.
	pub group_active: std::option::Option<bool>,
	/// A value denoting a game's billing plan.
	pub plan: std::option::Option<crate::model::GameBillingPlanCode>,
	/// A list of region summaries.
	pub available_regions: std::option::Option<std::vec::Vec<crate::model::RegionSummary>>,
}
impl GetGameBillingOutput {
	/// A game handle.
	pub fn game(&self) -> std::option::Option<&crate::model::GameHandle> {
		self.game.as_ref()
	}
	/// A list of namespace summaries.
	pub fn namespaces(&self) -> std::option::Option<&[crate::model::NamespaceSummary]> {
		self.namespaces.as_deref()
	}
	/// A list of multiple region tier metrics.
	pub fn metrics(&self) -> std::option::Option<&[crate::model::RegionTierMetrics]> {
		self.metrics.as_deref()
	}
	/// The status of a developer group.
	pub fn group_status(&self) -> std::option::Option<&crate::model::GroupStatus> {
		self.group_status.as_ref()
	}
	/// Whether or not the given game can actively host games.
	pub fn group_active(&self) -> std::option::Option<bool> {
		self.group_active
	}
	/// A value denoting a game's billing plan.
	pub fn plan(&self) -> std::option::Option<&crate::model::GameBillingPlanCode> {
		self.plan.as_ref()
	}
	/// A list of region summaries.
	pub fn available_regions(&self) -> std::option::Option<&[crate::model::RegionSummary]> {
		self.available_regions.as_deref()
	}
}
impl std::fmt::Debug for GetGameBillingOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameBillingOutput");
		formatter.field("game", &self.game);
		formatter.field("namespaces", &self.namespaces);
		formatter.field("metrics", &self.metrics);
		formatter.field("group_status", &self.group_status);
		formatter.field("group_active", &self.group_active);
		formatter.field("plan", &self.plan);
		formatter.field("available_regions", &self.available_regions);
		formatter.finish()
	}
}
/// See [`GetGameBillingOutput`](crate::output::GetGameBillingOutput)
pub mod get_game_billing_output {
	/// A builder for [`GetGameBillingOutput`](crate::output::GetGameBillingOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game: std::option::Option<crate::model::GameHandle>,
		pub(crate) namespaces: std::option::Option<std::vec::Vec<crate::model::NamespaceSummary>>,
		pub(crate) metrics: std::option::Option<std::vec::Vec<crate::model::RegionTierMetrics>>,
		pub(crate) group_status: std::option::Option<crate::model::GroupStatus>,
		pub(crate) group_active: std::option::Option<bool>,
		pub(crate) plan: std::option::Option<crate::model::GameBillingPlanCode>,
		pub(crate) available_regions:
			std::option::Option<std::vec::Vec<crate::model::RegionSummary>>,
	}
	impl Builder {
		/// A game handle.
		pub fn game(mut self, input: crate::model::GameHandle) -> Self {
			self.game = Some(input);
			self
		}
		/// A game handle.
		pub fn set_game(mut self, input: std::option::Option<crate::model::GameHandle>) -> Self {
			self.game = input;
			self
		}
		/// Appends an item to `namespaces`.
		///
		/// To override the contents of this collection use [`set_namespaces`](Self::set_namespaces).
		///
		/// A list of namespace summaries.
		pub fn namespaces(mut self, input: crate::model::NamespaceSummary) -> Self {
			let mut v = self.namespaces.unwrap_or_default();
			v.push(input);
			self.namespaces = Some(v);
			self
		}
		/// A list of namespace summaries.
		pub fn set_namespaces(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::NamespaceSummary>>,
		) -> Self {
			self.namespaces = input;
			self
		}
		/// Appends an item to `metrics`.
		///
		/// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
		///
		/// A list of multiple region tier metrics.
		pub fn metrics(mut self, input: crate::model::RegionTierMetrics) -> Self {
			let mut v = self.metrics.unwrap_or_default();
			v.push(input);
			self.metrics = Some(v);
			self
		}
		/// A list of multiple region tier metrics.
		pub fn set_metrics(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::RegionTierMetrics>>,
		) -> Self {
			self.metrics = input;
			self
		}
		/// The status of a developer group.
		pub fn group_status(mut self, input: crate::model::GroupStatus) -> Self {
			self.group_status = Some(input);
			self
		}
		/// The status of a developer group.
		pub fn set_group_status(
			mut self,
			input: std::option::Option<crate::model::GroupStatus>,
		) -> Self {
			self.group_status = input;
			self
		}
		/// Whether or not the given game can actively host games.
		pub fn group_active(mut self, input: bool) -> Self {
			self.group_active = Some(input);
			self
		}
		/// Whether or not the given game can actively host games.
		pub fn set_group_active(mut self, input: std::option::Option<bool>) -> Self {
			self.group_active = input;
			self
		}
		/// A value denoting a game's billing plan.
		pub fn plan(mut self, input: crate::model::GameBillingPlanCode) -> Self {
			self.plan = Some(input);
			self
		}
		/// A value denoting a game's billing plan.
		pub fn set_plan(
			mut self,
			input: std::option::Option<crate::model::GameBillingPlanCode>,
		) -> Self {
			self.plan = input;
			self
		}
		/// Appends an item to `available_regions`.
		///
		/// To override the contents of this collection use [`set_available_regions`](Self::set_available_regions).
		///
		/// A list of region summaries.
		pub fn available_regions(mut self, input: crate::model::RegionSummary) -> Self {
			let mut v = self.available_regions.unwrap_or_default();
			v.push(input);
			self.available_regions = Some(v);
			self
		}
		/// A list of region summaries.
		pub fn set_available_regions(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::RegionSummary>>,
		) -> Self {
			self.available_regions = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameBillingOutput`](crate::output::GetGameBillingOutput)
		pub fn build(self) -> crate::output::GetGameBillingOutput {
			crate::output::GetGameBillingOutput {
				game: self.game,
				namespaces: self.namespaces,
				metrics: self.metrics,
				group_status: self.group_status,
				group_active: self.group_active,
				plan: self.plan,
				available_regions: self.available_regions,
			}
		}
	}
}
impl GetGameBillingOutput {
	/// Creates a new builder-style object to manufacture [`GetGameBillingOutput`](crate::output::GetGameBillingOutput)
	pub fn builder() -> crate::output::get_game_billing_output::Builder {
		crate::output::get_game_billing_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameBannerUploadCompleteOutput {}
impl std::fmt::Debug for GameBannerUploadCompleteOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameBannerUploadCompleteOutput");
		formatter.finish()
	}
}
/// See [`GameBannerUploadCompleteOutput`](crate::output::GameBannerUploadCompleteOutput)
pub mod game_banner_upload_complete_output {
	/// A builder for [`GameBannerUploadCompleteOutput`](crate::output::GameBannerUploadCompleteOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`GameBannerUploadCompleteOutput`](crate::output::GameBannerUploadCompleteOutput)
		pub fn build(self) -> crate::output::GameBannerUploadCompleteOutput {
			crate::output::GameBannerUploadCompleteOutput {}
		}
	}
}
impl GameBannerUploadCompleteOutput {
	/// Creates a new builder-style object to manufacture [`GameBannerUploadCompleteOutput`](crate::output::GameBannerUploadCompleteOutput)
	pub fn builder() -> crate::output::game_banner_upload_complete_output::Builder {
		crate::output::game_banner_upload_complete_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameBannerUploadPrepareOutput {
	/// A universally unique identifier.
	pub upload_id: std::option::Option<std::string::String>,
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
}
impl GameBannerUploadPrepareOutput {
	/// A universally unique identifier.
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub fn presigned_request(&self) -> std::option::Option<&crate::model::UploadPresignedRequest> {
		self.presigned_request.as_ref()
	}
}
impl std::fmt::Debug for GameBannerUploadPrepareOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameBannerUploadPrepareOutput");
		formatter.field("upload_id", &self.upload_id);
		formatter.field("presigned_request", &self.presigned_request);
		formatter.finish()
	}
}
/// See [`GameBannerUploadPrepareOutput`](crate::output::GameBannerUploadPrepareOutput)
pub mod game_banner_upload_prepare_output {
	/// A builder for [`GameBannerUploadPrepareOutput`](crate::output::GameBannerUploadPrepareOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn presigned_request(mut self, input: crate::model::UploadPresignedRequest) -> Self {
			self.presigned_request = Some(input);
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn set_presigned_request(
			mut self,
			input: std::option::Option<crate::model::UploadPresignedRequest>,
		) -> Self {
			self.presigned_request = input;
			self
		}
		/// Consumes the builder and constructs a [`GameBannerUploadPrepareOutput`](crate::output::GameBannerUploadPrepareOutput)
		pub fn build(self) -> crate::output::GameBannerUploadPrepareOutput {
			crate::output::GameBannerUploadPrepareOutput {
				upload_id: self.upload_id,
				presigned_request: self.presigned_request,
			}
		}
	}
}
impl GameBannerUploadPrepareOutput {
	/// Creates a new builder-style object to manufacture [`GameBannerUploadPrepareOutput`](crate::output::GameBannerUploadPrepareOutput)
	pub fn builder() -> crate::output::game_banner_upload_prepare_output::Builder {
		crate::output::game_banner_upload_prepare_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameLogoUploadCompleteOutput {}
impl std::fmt::Debug for GameLogoUploadCompleteOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameLogoUploadCompleteOutput");
		formatter.finish()
	}
}
/// See [`GameLogoUploadCompleteOutput`](crate::output::GameLogoUploadCompleteOutput)
pub mod game_logo_upload_complete_output {
	/// A builder for [`GameLogoUploadCompleteOutput`](crate::output::GameLogoUploadCompleteOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`GameLogoUploadCompleteOutput`](crate::output::GameLogoUploadCompleteOutput)
		pub fn build(self) -> crate::output::GameLogoUploadCompleteOutput {
			crate::output::GameLogoUploadCompleteOutput {}
		}
	}
}
impl GameLogoUploadCompleteOutput {
	/// Creates a new builder-style object to manufacture [`GameLogoUploadCompleteOutput`](crate::output::GameLogoUploadCompleteOutput)
	pub fn builder() -> crate::output::game_logo_upload_complete_output::Builder {
		crate::output::game_logo_upload_complete_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameLogoUploadPrepareOutput {
	/// A universally unique identifier.
	pub upload_id: std::option::Option<std::string::String>,
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
}
impl GameLogoUploadPrepareOutput {
	/// A universally unique identifier.
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub fn presigned_request(&self) -> std::option::Option<&crate::model::UploadPresignedRequest> {
		self.presigned_request.as_ref()
	}
}
impl std::fmt::Debug for GameLogoUploadPrepareOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameLogoUploadPrepareOutput");
		formatter.field("upload_id", &self.upload_id);
		formatter.field("presigned_request", &self.presigned_request);
		formatter.finish()
	}
}
/// See [`GameLogoUploadPrepareOutput`](crate::output::GameLogoUploadPrepareOutput)
pub mod game_logo_upload_prepare_output {
	/// A builder for [`GameLogoUploadPrepareOutput`](crate::output::GameLogoUploadPrepareOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn presigned_request(mut self, input: crate::model::UploadPresignedRequest) -> Self {
			self.presigned_request = Some(input);
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn set_presigned_request(
			mut self,
			input: std::option::Option<crate::model::UploadPresignedRequest>,
		) -> Self {
			self.presigned_request = input;
			self
		}
		/// Consumes the builder and constructs a [`GameLogoUploadPrepareOutput`](crate::output::GameLogoUploadPrepareOutput)
		pub fn build(self) -> crate::output::GameLogoUploadPrepareOutput {
			crate::output::GameLogoUploadPrepareOutput {
				upload_id: self.upload_id,
				presigned_request: self.presigned_request,
			}
		}
	}
}
impl GameLogoUploadPrepareOutput {
	/// Creates a new builder-style object to manufacture [`GameLogoUploadPrepareOutput`](crate::output::GameLogoUploadPrepareOutput)
	pub fn builder() -> crate::output::game_logo_upload_prepare_output::Builder {
		crate::output::game_logo_upload_prepare_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGameOutput {
	/// A list of validation errors.
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGameOutput {
	/// A list of validation errors.
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGameOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGameOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGameOutput`](crate::output::ValidateGameOutput)
pub mod validate_game_output {
	/// A builder for [`ValidateGameOutput`](crate::output::ValidateGameOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		/// A list of validation errors.
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		/// A list of validation errors.
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGameOutput`](crate::output::ValidateGameOutput)
		pub fn build(self) -> crate::output::ValidateGameOutput {
			crate::output::ValidateGameOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGameOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGameOutput`](crate::output::ValidateGameOutput)
	pub fn builder() -> crate::output::validate_game_output::Builder {
		crate::output::validate_game_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameByIdOutput {
	/// A full game.
	pub game: std::option::Option<crate::model::GameFull>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetGameByIdOutput {
	/// A full game.
	pub fn game(&self) -> std::option::Option<&crate::model::GameFull> {
		self.game.as_ref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetGameByIdOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameByIdOutput");
		formatter.field("game", &self.game);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetGameByIdOutput`](crate::output::GetGameByIdOutput)
pub mod get_game_by_id_output {
	/// A builder for [`GetGameByIdOutput`](crate::output::GetGameByIdOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game: std::option::Option<crate::model::GameFull>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// A full game.
		pub fn game(mut self, input: crate::model::GameFull) -> Self {
			self.game = Some(input);
			self
		}
		/// A full game.
		pub fn set_game(mut self, input: std::option::Option<crate::model::GameFull>) -> Self {
			self.game = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameByIdOutput`](crate::output::GetGameByIdOutput)
		pub fn build(self) -> crate::output::GetGameByIdOutput {
			crate::output::GetGameByIdOutput {
				game: self.game,
				watch: self.watch,
			}
		}
	}
}
impl GetGameByIdOutput {
	/// Creates a new builder-style object to manufacture [`GetGameByIdOutput`](crate::output::GetGameByIdOutput)
	pub fn builder() -> crate::output::get_game_by_id_output::Builder {
		crate::output::get_game_by_id_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameOutput {
	/// A universally unique identifier.
	pub game_id: std::option::Option<std::string::String>,
}
impl CreateGameOutput {
	/// A universally unique identifier.
	pub fn game_id(&self) -> std::option::Option<&str> {
		self.game_id.as_deref()
	}
}
impl std::fmt::Debug for CreateGameOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameOutput");
		formatter.field("game_id", &self.game_id);
		formatter.finish()
	}
}
/// See [`CreateGameOutput`](crate::output::CreateGameOutput)
pub mod create_game_output {
	/// A builder for [`CreateGameOutput`](crate::output::CreateGameOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn game_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_game_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_id = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameOutput`](crate::output::CreateGameOutput)
		pub fn build(self) -> crate::output::CreateGameOutput {
			crate::output::CreateGameOutput {
				game_id: self.game_id,
			}
		}
	}
}
impl CreateGameOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameOutput`](crate::output::CreateGameOutput)
	pub fn builder() -> crate::output::create_game_output::Builder {
		crate::output::create_game_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGamesOutput {
	/// A list of game summaries.
	pub games: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
	/// A list of group summaries.
	pub groups: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetGamesOutput {
	/// A list of game summaries.
	pub fn games(&self) -> std::option::Option<&[crate::model::GameSummary]> {
		self.games.as_deref()
	}
	/// A list of group summaries.
	pub fn groups(&self) -> std::option::Option<&[crate::model::GroupSummary]> {
		self.groups.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetGamesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGamesOutput");
		formatter.field("games", &self.games);
		formatter.field("groups", &self.groups);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetGamesOutput`](crate::output::GetGamesOutput)
pub mod get_games_output {
	/// A builder for [`GetGamesOutput`](crate::output::GetGamesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) games: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
		pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `games`.
		///
		/// To override the contents of this collection use [`set_games`](Self::set_games).
		///
		/// A list of game summaries.
		pub fn games(mut self, input: crate::model::GameSummary) -> Self {
			let mut v = self.games.unwrap_or_default();
			v.push(input);
			self.games = Some(v);
			self
		}
		/// A list of game summaries.
		pub fn set_games(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
		) -> Self {
			self.games = input;
			self
		}
		/// Appends an item to `groups`.
		///
		/// To override the contents of this collection use [`set_groups`](Self::set_groups).
		///
		/// A list of group summaries.
		pub fn groups(mut self, input: crate::model::GroupSummary) -> Self {
			let mut v = self.groups.unwrap_or_default();
			v.push(input);
			self.groups = Some(v);
			self
		}
		/// A list of group summaries.
		pub fn set_groups(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
		) -> Self {
			self.groups = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGamesOutput`](crate::output::GetGamesOutput)
		pub fn build(self) -> crate::output::GetGamesOutput {
			crate::output::GetGamesOutput {
				games: self.games,
				groups: self.groups,
				watch: self.watch,
			}
		}
	}
}
impl GetGamesOutput {
	/// Creates a new builder-style object to manufacture [`GetGamesOutput`](crate::output::GetGamesOutput)
	pub fn builder() -> crate::output::get_games_output::Builder {
		crate::output::get_games_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CompleteUploadOutput {}
impl std::fmt::Debug for CompleteUploadOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CompleteUploadOutput");
		formatter.finish()
	}
}
/// See [`CompleteUploadOutput`](crate::output::CompleteUploadOutput)
pub mod complete_upload_output {
	/// A builder for [`CompleteUploadOutput`](crate::output::CompleteUploadOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`CompleteUploadOutput`](crate::output::CompleteUploadOutput)
		pub fn build(self) -> crate::output::CompleteUploadOutput {
			crate::output::CompleteUploadOutput {}
		}
	}
}
impl CompleteUploadOutput {
	/// Creates a new builder-style object to manufacture [`CompleteUploadOutput`](crate::output::CompleteUploadOutput)
	pub fn builder() -> crate::output::complete_upload_output::Builder {
		crate::output::complete_upload_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InspectOutput {
	/// The current authenticated agent.
	pub agent: std::option::Option<crate::model::AuthAgent>,
}
impl InspectOutput {
	/// The current authenticated agent.
	pub fn agent(&self) -> std::option::Option<&crate::model::AuthAgent> {
		self.agent.as_ref()
	}
}
impl std::fmt::Debug for InspectOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("InspectOutput");
		formatter.field("agent", &self.agent);
		formatter.finish()
	}
}
/// See [`InspectOutput`](crate::output::InspectOutput)
pub mod inspect_output {
	/// A builder for [`InspectOutput`](crate::output::InspectOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) agent: std::option::Option<crate::model::AuthAgent>,
	}
	impl Builder {
		/// The current authenticated agent.
		pub fn agent(mut self, input: crate::model::AuthAgent) -> Self {
			self.agent = Some(input);
			self
		}
		/// The current authenticated agent.
		pub fn set_agent(mut self, input: std::option::Option<crate::model::AuthAgent>) -> Self {
			self.agent = input;
			self
		}
		/// Consumes the builder and constructs a [`InspectOutput`](crate::output::InspectOutput)
		pub fn build(self) -> crate::output::InspectOutput {
			crate::output::InspectOutput { agent: self.agent }
		}
	}
}
impl InspectOutput {
	/// Creates a new builder-style object to manufacture [`InspectOutput`](crate::output::InspectOutput)
	pub fn builder() -> crate::output::inspect_output::Builder {
		crate::output::inspect_output::Builder::default()
	}
}
