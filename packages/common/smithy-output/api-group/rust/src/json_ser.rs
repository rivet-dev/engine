// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_group_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_1) = &input.display_name {
		object.key("display_name").string(var_1.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_group_invite_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGroupInviteInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_2) = &input.ttl {
		object.key("ttl").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_2).into()),
		);
	}
	if let Some(var_3) = &input.use_count {
		object.key("use_count").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_3).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_prepare_group_avatar_upload_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::PrepareGroupAvatarUploadInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_4) = &input.content_length {
		object.key("content_length").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_4).into()),
		);
	}
	if let Some(var_5) = &input.mime {
		object.key("mime").string(var_5.as_str());
	}
	if let Some(var_6) = &input.path {
		object.key("path").string(var_6.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_resolve_group_join_request_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ResolveGroupJoinRequestInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_7) = &input.resolution {
		object.key("resolution").boolean(*var_7);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_transfer_group_ownership_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::TransferGroupOwnershipInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_8) = &input.new_owner_identity_id {
		object.key("new_owner_identity_id").string(var_8.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_update_group_profile_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::UpdateGroupProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_9) = &input.bio {
		object.key("bio").string(var_9.as_str());
	}
	if let Some(var_10) = &input.display_name {
		object.key("display_name").string(var_10.as_str());
	}
	if let Some(var_11) = &input.publicity {
		object.key("publicity").string(var_11.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_group_profile_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGroupProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_12) = &input.bio {
		object.key("bio").string(var_12.as_str());
	}
	if let Some(var_13) = &input.display_name {
		object.key("display_name").string(var_13.as_str());
	}
	if let Some(var_14) = &input.publicity {
		object.key("publicity").string(var_14.as_str());
	}
	Ok(())
}
