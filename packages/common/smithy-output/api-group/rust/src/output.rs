// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResolveGroupJoinRequestOutput {}
impl std::fmt::Debug for ResolveGroupJoinRequestOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ResolveGroupJoinRequestOutput");
		formatter.finish()
	}
}
/// See [`ResolveGroupJoinRequestOutput`](crate::output::ResolveGroupJoinRequestOutput)
pub mod resolve_group_join_request_output {
	/// A builder for [`ResolveGroupJoinRequestOutput`](crate::output::ResolveGroupJoinRequestOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`ResolveGroupJoinRequestOutput`](crate::output::ResolveGroupJoinRequestOutput)
		pub fn build(self) -> crate::output::ResolveGroupJoinRequestOutput {
			crate::output::ResolveGroupJoinRequestOutput {}
		}
	}
}
impl ResolveGroupJoinRequestOutput {
	/// Creates a new builder-style object to manufacture [`ResolveGroupJoinRequestOutput`](crate::output::ResolveGroupJoinRequestOutput)
	pub fn builder() -> crate::output::resolve_group_join_request_output::Builder {
		crate::output::resolve_group_join_request_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGroupJoinRequestOutput {}
impl std::fmt::Debug for CreateGroupJoinRequestOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGroupJoinRequestOutput");
		formatter.finish()
	}
}
/// See [`CreateGroupJoinRequestOutput`](crate::output::CreateGroupJoinRequestOutput)
pub mod create_group_join_request_output {
	/// A builder for [`CreateGroupJoinRequestOutput`](crate::output::CreateGroupJoinRequestOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`CreateGroupJoinRequestOutput`](crate::output::CreateGroupJoinRequestOutput)
		pub fn build(self) -> crate::output::CreateGroupJoinRequestOutput {
			crate::output::CreateGroupJoinRequestOutput {}
		}
	}
}
impl CreateGroupJoinRequestOutput {
	/// Creates a new builder-style object to manufacture [`CreateGroupJoinRequestOutput`](crate::output::CreateGroupJoinRequestOutput)
	pub fn builder() -> crate::output::create_group_join_request_output::Builder {
		crate::output::create_group_join_request_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGroupInviteOutput {
	/// A group handle.
	pub group: std::option::Option<crate::model::GroupHandle>,
}
impl GetGroupInviteOutput {
	/// A group handle.
	pub fn group(&self) -> std::option::Option<&crate::model::GroupHandle> {
		self.group.as_ref()
	}
}
impl std::fmt::Debug for GetGroupInviteOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGroupInviteOutput");
		formatter.field("group", &self.group);
		formatter.finish()
	}
}
/// See [`GetGroupInviteOutput`](crate::output::GetGroupInviteOutput)
pub mod get_group_invite_output {
	/// A builder for [`GetGroupInviteOutput`](crate::output::GetGroupInviteOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group: std::option::Option<crate::model::GroupHandle>,
	}
	impl Builder {
		/// A group handle.
		pub fn group(mut self, input: crate::model::GroupHandle) -> Self {
			self.group = Some(input);
			self
		}
		/// A group handle.
		pub fn set_group(mut self, input: std::option::Option<crate::model::GroupHandle>) -> Self {
			self.group = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGroupInviteOutput`](crate::output::GetGroupInviteOutput)
		pub fn build(self) -> crate::output::GetGroupInviteOutput {
			crate::output::GetGroupInviteOutput { group: self.group }
		}
	}
}
impl GetGroupInviteOutput {
	/// Creates a new builder-style object to manufacture [`GetGroupInviteOutput`](crate::output::GetGroupInviteOutput)
	pub fn builder() -> crate::output::get_group_invite_output::Builder {
		crate::output::get_group_invite_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConsumeGroupInviteOutput {
	/// A universally unique identifier.
	pub group_id: std::option::Option<std::string::String>,
}
impl ConsumeGroupInviteOutput {
	/// A universally unique identifier.
	pub fn group_id(&self) -> std::option::Option<&str> {
		self.group_id.as_deref()
	}
}
impl std::fmt::Debug for ConsumeGroupInviteOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ConsumeGroupInviteOutput");
		formatter.field("group_id", &self.group_id);
		formatter.finish()
	}
}
/// See [`ConsumeGroupInviteOutput`](crate::output::ConsumeGroupInviteOutput)
pub mod consume_group_invite_output {
	/// A builder for [`ConsumeGroupInviteOutput`](crate::output::ConsumeGroupInviteOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.group_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.group_id = input;
			self
		}
		/// Consumes the builder and constructs a [`ConsumeGroupInviteOutput`](crate::output::ConsumeGroupInviteOutput)
		pub fn build(self) -> crate::output::ConsumeGroupInviteOutput {
			crate::output::ConsumeGroupInviteOutput {
				group_id: self.group_id,
			}
		}
	}
}
impl ConsumeGroupInviteOutput {
	/// Creates a new builder-style object to manufacture [`ConsumeGroupInviteOutput`](crate::output::ConsumeGroupInviteOutput)
	pub fn builder() -> crate::output::consume_group_invite_output::Builder {
		crate::output::consume_group_invite_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGroupInviteOutput {
	/// The code that will be passed to `rivet.api.group#ConsumeGroupInvite` to join a group.
	pub code: std::option::Option<std::string::String>,
}
impl CreateGroupInviteOutput {
	/// The code that will be passed to `rivet.api.group#ConsumeGroupInvite` to join a group.
	pub fn code(&self) -> std::option::Option<&str> {
		self.code.as_deref()
	}
}
impl std::fmt::Debug for CreateGroupInviteOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGroupInviteOutput");
		formatter.field("code", &self.code);
		formatter.finish()
	}
}
/// See [`CreateGroupInviteOutput`](crate::output::CreateGroupInviteOutput)
pub mod create_group_invite_output {
	/// A builder for [`CreateGroupInviteOutput`](crate::output::CreateGroupInviteOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) code: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// The code that will be passed to `rivet.api.group#ConsumeGroupInvite` to join a group.
		pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
			self.code = Some(input.into());
			self
		}
		/// The code that will be passed to `rivet.api.group#ConsumeGroupInvite` to join a group.
		pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.code = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGroupInviteOutput`](crate::output::CreateGroupInviteOutput)
		pub fn build(self) -> crate::output::CreateGroupInviteOutput {
			crate::output::CreateGroupInviteOutput { code: self.code }
		}
	}
}
impl CreateGroupInviteOutput {
	/// Creates a new builder-style object to manufacture [`CreateGroupInviteOutput`](crate::output::CreateGroupInviteOutput)
	pub fn builder() -> crate::output::create_group_invite_output::Builder {
		crate::output::create_group_invite_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGroupBansOutput {
	/// A list of banned group members.
	pub banned_identities: std::option::Option<std::vec::Vec<crate::model::GroupBannedIdentity>>,
	/// The pagination anchor.
	pub anchor: std::option::Option<std::string::String>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetGroupBansOutput {
	/// A list of banned group members.
	pub fn banned_identities(&self) -> std::option::Option<&[crate::model::GroupBannedIdentity]> {
		self.banned_identities.as_deref()
	}
	/// The pagination anchor.
	pub fn anchor(&self) -> std::option::Option<&str> {
		self.anchor.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetGroupBansOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGroupBansOutput");
		formatter.field("banned_identities", &self.banned_identities);
		formatter.field("anchor", &self.anchor);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetGroupBansOutput`](crate::output::GetGroupBansOutput)
pub mod get_group_bans_output {
	/// A builder for [`GetGroupBansOutput`](crate::output::GetGroupBansOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) banned_identities:
			std::option::Option<std::vec::Vec<crate::model::GroupBannedIdentity>>,
		pub(crate) anchor: std::option::Option<std::string::String>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `banned_identities`.
		///
		/// To override the contents of this collection use [`set_banned_identities`](Self::set_banned_identities).
		///
		/// A list of banned group members.
		pub fn banned_identities(mut self, input: crate::model::GroupBannedIdentity) -> Self {
			let mut v = self.banned_identities.unwrap_or_default();
			v.push(input);
			self.banned_identities = Some(v);
			self
		}
		/// A list of banned group members.
		pub fn set_banned_identities(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GroupBannedIdentity>>,
		) -> Self {
			self.banned_identities = input;
			self
		}
		/// The pagination anchor.
		pub fn anchor(mut self, input: impl Into<std::string::String>) -> Self {
			self.anchor = Some(input.into());
			self
		}
		/// The pagination anchor.
		pub fn set_anchor(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.anchor = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGroupBansOutput`](crate::output::GetGroupBansOutput)
		pub fn build(self) -> crate::output::GetGroupBansOutput {
			crate::output::GetGroupBansOutput {
				banned_identities: self.banned_identities,
				anchor: self.anchor,
				watch: self.watch,
			}
		}
	}
}
impl GetGroupBansOutput {
	/// Creates a new builder-style object to manufacture [`GetGroupBansOutput`](crate::output::GetGroupBansOutput)
	pub fn builder() -> crate::output::get_group_bans_output::Builder {
		crate::output::get_group_bans_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnbanGroupIdentityOutput {}
impl std::fmt::Debug for UnbanGroupIdentityOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UnbanGroupIdentityOutput");
		formatter.finish()
	}
}
/// See [`UnbanGroupIdentityOutput`](crate::output::UnbanGroupIdentityOutput)
pub mod unban_group_identity_output {
	/// A builder for [`UnbanGroupIdentityOutput`](crate::output::UnbanGroupIdentityOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UnbanGroupIdentityOutput`](crate::output::UnbanGroupIdentityOutput)
		pub fn build(self) -> crate::output::UnbanGroupIdentityOutput {
			crate::output::UnbanGroupIdentityOutput {}
		}
	}
}
impl UnbanGroupIdentityOutput {
	/// Creates a new builder-style object to manufacture [`UnbanGroupIdentityOutput`](crate::output::UnbanGroupIdentityOutput)
	pub fn builder() -> crate::output::unban_group_identity_output::Builder {
		crate::output::unban_group_identity_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BanGroupIdentityOutput {}
impl std::fmt::Debug for BanGroupIdentityOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("BanGroupIdentityOutput");
		formatter.finish()
	}
}
/// See [`BanGroupIdentityOutput`](crate::output::BanGroupIdentityOutput)
pub mod ban_group_identity_output {
	/// A builder for [`BanGroupIdentityOutput`](crate::output::BanGroupIdentityOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`BanGroupIdentityOutput`](crate::output::BanGroupIdentityOutput)
		pub fn build(self) -> crate::output::BanGroupIdentityOutput {
			crate::output::BanGroupIdentityOutput {}
		}
	}
}
impl BanGroupIdentityOutput {
	/// Creates a new builder-style object to manufacture [`BanGroupIdentityOutput`](crate::output::BanGroupIdentityOutput)
	pub fn builder() -> crate::output::ban_group_identity_output::Builder {
		crate::output::ban_group_identity_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct KickGroupMemberOutput {}
impl std::fmt::Debug for KickGroupMemberOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("KickGroupMemberOutput");
		formatter.finish()
	}
}
/// See [`KickGroupMemberOutput`](crate::output::KickGroupMemberOutput)
pub mod kick_group_member_output {
	/// A builder for [`KickGroupMemberOutput`](crate::output::KickGroupMemberOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`KickGroupMemberOutput`](crate::output::KickGroupMemberOutput)
		pub fn build(self) -> crate::output::KickGroupMemberOutput {
			crate::output::KickGroupMemberOutput {}
		}
	}
}
impl KickGroupMemberOutput {
	/// Creates a new builder-style object to manufacture [`KickGroupMemberOutput`](crate::output::KickGroupMemberOutput)
	pub fn builder() -> crate::output::kick_group_member_output::Builder {
		crate::output::kick_group_member_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LeaveGroupOutput {}
impl std::fmt::Debug for LeaveGroupOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LeaveGroupOutput");
		formatter.finish()
	}
}
/// See [`LeaveGroupOutput`](crate::output::LeaveGroupOutput)
pub mod leave_group_output {
	/// A builder for [`LeaveGroupOutput`](crate::output::LeaveGroupOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`LeaveGroupOutput`](crate::output::LeaveGroupOutput)
		pub fn build(self) -> crate::output::LeaveGroupOutput {
			crate::output::LeaveGroupOutput {}
		}
	}
}
impl LeaveGroupOutput {
	/// Creates a new builder-style object to manufacture [`LeaveGroupOutput`](crate::output::LeaveGroupOutput)
	pub fn builder() -> crate::output::leave_group_output::Builder {
		crate::output::leave_group_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CompleteGroupAvatarUploadOutput {}
impl std::fmt::Debug for CompleteGroupAvatarUploadOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CompleteGroupAvatarUploadOutput");
		formatter.finish()
	}
}
/// See [`CompleteGroupAvatarUploadOutput`](crate::output::CompleteGroupAvatarUploadOutput)
pub mod complete_group_avatar_upload_output {
	/// A builder for [`CompleteGroupAvatarUploadOutput`](crate::output::CompleteGroupAvatarUploadOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`CompleteGroupAvatarUploadOutput`](crate::output::CompleteGroupAvatarUploadOutput)
		pub fn build(self) -> crate::output::CompleteGroupAvatarUploadOutput {
			crate::output::CompleteGroupAvatarUploadOutput {}
		}
	}
}
impl CompleteGroupAvatarUploadOutput {
	/// Creates a new builder-style object to manufacture [`CompleteGroupAvatarUploadOutput`](crate::output::CompleteGroupAvatarUploadOutput)
	pub fn builder() -> crate::output::complete_group_avatar_upload_output::Builder {
		crate::output::complete_group_avatar_upload_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PrepareGroupAvatarUploadOutput {
	/// A universally unique identifier.
	pub upload_id: std::option::Option<std::string::String>,
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
}
impl PrepareGroupAvatarUploadOutput {
	/// A universally unique identifier.
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub fn presigned_request(&self) -> std::option::Option<&crate::model::UploadPresignedRequest> {
		self.presigned_request.as_ref()
	}
}
impl std::fmt::Debug for PrepareGroupAvatarUploadOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PrepareGroupAvatarUploadOutput");
		formatter.field("upload_id", &self.upload_id);
		formatter.field("presigned_request", &self.presigned_request);
		formatter.finish()
	}
}
/// See [`PrepareGroupAvatarUploadOutput`](crate::output::PrepareGroupAvatarUploadOutput)
pub mod prepare_group_avatar_upload_output {
	/// A builder for [`PrepareGroupAvatarUploadOutput`](crate::output::PrepareGroupAvatarUploadOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn presigned_request(mut self, input: crate::model::UploadPresignedRequest) -> Self {
			self.presigned_request = Some(input);
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn set_presigned_request(
			mut self,
			input: std::option::Option<crate::model::UploadPresignedRequest>,
		) -> Self {
			self.presigned_request = input;
			self
		}
		/// Consumes the builder and constructs a [`PrepareGroupAvatarUploadOutput`](crate::output::PrepareGroupAvatarUploadOutput)
		pub fn build(self) -> crate::output::PrepareGroupAvatarUploadOutput {
			crate::output::PrepareGroupAvatarUploadOutput {
				upload_id: self.upload_id,
				presigned_request: self.presigned_request,
			}
		}
	}
}
impl PrepareGroupAvatarUploadOutput {
	/// Creates a new builder-style object to manufacture [`PrepareGroupAvatarUploadOutput`](crate::output::PrepareGroupAvatarUploadOutput)
	pub fn builder() -> crate::output::prepare_group_avatar_upload_output::Builder {
		crate::output::prepare_group_avatar_upload_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SearchGroupsOutput {
	/// A list of group handles.
	pub groups: std::option::Option<std::vec::Vec<crate::model::GroupHandle>>,
	#[allow(missing_docs)] // documentation missing in model
	pub anchor: std::option::Option<std::string::String>,
}
impl SearchGroupsOutput {
	/// A list of group handles.
	pub fn groups(&self) -> std::option::Option<&[crate::model::GroupHandle]> {
		self.groups.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn anchor(&self) -> std::option::Option<&str> {
		self.anchor.as_deref()
	}
}
impl std::fmt::Debug for SearchGroupsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SearchGroupsOutput");
		formatter.field("groups", &self.groups);
		formatter.field("anchor", &self.anchor);
		formatter.finish()
	}
}
/// See [`SearchGroupsOutput`](crate::output::SearchGroupsOutput)
pub mod search_groups_output {
	/// A builder for [`SearchGroupsOutput`](crate::output::SearchGroupsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::GroupHandle>>,
		pub(crate) anchor: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Appends an item to `groups`.
		///
		/// To override the contents of this collection use [`set_groups`](Self::set_groups).
		///
		/// A list of group handles.
		pub fn groups(mut self, input: crate::model::GroupHandle) -> Self {
			let mut v = self.groups.unwrap_or_default();
			v.push(input);
			self.groups = Some(v);
			self
		}
		/// A list of group handles.
		pub fn set_groups(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GroupHandle>>,
		) -> Self {
			self.groups = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn anchor(mut self, input: impl Into<std::string::String>) -> Self {
			self.anchor = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_anchor(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.anchor = input;
			self
		}
		/// Consumes the builder and constructs a [`SearchGroupsOutput`](crate::output::SearchGroupsOutput)
		pub fn build(self) -> crate::output::SearchGroupsOutput {
			crate::output::SearchGroupsOutput {
				groups: self.groups,
				anchor: self.anchor,
			}
		}
	}
}
impl SearchGroupsOutput {
	/// Creates a new builder-style object to manufacture [`SearchGroupsOutput`](crate::output::SearchGroupsOutput)
	pub fn builder() -> crate::output::search_groups_output::Builder {
		crate::output::search_groups_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TransferGroupOwnershipOutput {}
impl std::fmt::Debug for TransferGroupOwnershipOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TransferGroupOwnershipOutput");
		formatter.finish()
	}
}
/// See [`TransferGroupOwnershipOutput`](crate::output::TransferGroupOwnershipOutput)
pub mod transfer_group_ownership_output {
	/// A builder for [`TransferGroupOwnershipOutput`](crate::output::TransferGroupOwnershipOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`TransferGroupOwnershipOutput`](crate::output::TransferGroupOwnershipOutput)
		pub fn build(self) -> crate::output::TransferGroupOwnershipOutput {
			crate::output::TransferGroupOwnershipOutput {}
		}
	}
}
impl TransferGroupOwnershipOutput {
	/// Creates a new builder-style object to manufacture [`TransferGroupOwnershipOutput`](crate::output::TransferGroupOwnershipOutput)
	pub fn builder() -> crate::output::transfer_group_ownership_output::Builder {
		crate::output::transfer_group_ownership_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGroupProfileOutput {
	/// A list of validation errors.
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGroupProfileOutput {
	/// A list of validation errors.
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGroupProfileOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGroupProfileOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGroupProfileOutput`](crate::output::ValidateGroupProfileOutput)
pub mod validate_group_profile_output {
	/// A builder for [`ValidateGroupProfileOutput`](crate::output::ValidateGroupProfileOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		/// A list of validation errors.
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		/// A list of validation errors.
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGroupProfileOutput`](crate::output::ValidateGroupProfileOutput)
		pub fn build(self) -> crate::output::ValidateGroupProfileOutput {
			crate::output::ValidateGroupProfileOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGroupProfileOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGroupProfileOutput`](crate::output::ValidateGroupProfileOutput)
	pub fn builder() -> crate::output::validate_group_profile_output::Builder {
		crate::output::validate_group_profile_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGroupSummaryOutput {
	/// A group summary.
	pub group: std::option::Option<crate::model::GroupSummary>,
}
impl GetGroupSummaryOutput {
	/// A group summary.
	pub fn group(&self) -> std::option::Option<&crate::model::GroupSummary> {
		self.group.as_ref()
	}
}
impl std::fmt::Debug for GetGroupSummaryOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGroupSummaryOutput");
		formatter.field("group", &self.group);
		formatter.finish()
	}
}
/// See [`GetGroupSummaryOutput`](crate::output::GetGroupSummaryOutput)
pub mod get_group_summary_output {
	/// A builder for [`GetGroupSummaryOutput`](crate::output::GetGroupSummaryOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group: std::option::Option<crate::model::GroupSummary>,
	}
	impl Builder {
		/// A group summary.
		pub fn group(mut self, input: crate::model::GroupSummary) -> Self {
			self.group = Some(input);
			self
		}
		/// A group summary.
		pub fn set_group(mut self, input: std::option::Option<crate::model::GroupSummary>) -> Self {
			self.group = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGroupSummaryOutput`](crate::output::GetGroupSummaryOutput)
		pub fn build(self) -> crate::output::GetGroupSummaryOutput {
			crate::output::GetGroupSummaryOutput { group: self.group }
		}
	}
}
impl GetGroupSummaryOutput {
	/// Creates a new builder-style object to manufacture [`GetGroupSummaryOutput`](crate::output::GetGroupSummaryOutput)
	pub fn builder() -> crate::output::get_group_summary_output::Builder {
		crate::output::get_group_summary_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateGroupProfileOutput {}
impl std::fmt::Debug for UpdateGroupProfileOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UpdateGroupProfileOutput");
		formatter.finish()
	}
}
/// See [`UpdateGroupProfileOutput`](crate::output::UpdateGroupProfileOutput)
pub mod update_group_profile_output {
	/// A builder for [`UpdateGroupProfileOutput`](crate::output::UpdateGroupProfileOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UpdateGroupProfileOutput`](crate::output::UpdateGroupProfileOutput)
		pub fn build(self) -> crate::output::UpdateGroupProfileOutput {
			crate::output::UpdateGroupProfileOutput {}
		}
	}
}
impl UpdateGroupProfileOutput {
	/// Creates a new builder-style object to manufacture [`UpdateGroupProfileOutput`](crate::output::UpdateGroupProfileOutput)
	pub fn builder() -> crate::output::update_group_profile_output::Builder {
		crate::output::update_group_profile_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGroupJoinRequestsOutput {
	/// A list of group join requests.
	pub join_requests: std::option::Option<std::vec::Vec<crate::model::GroupJoinRequest>>,
	/// The pagination anchor.
	pub anchor: std::option::Option<std::string::String>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetGroupJoinRequestsOutput {
	/// A list of group join requests.
	pub fn join_requests(&self) -> std::option::Option<&[crate::model::GroupJoinRequest]> {
		self.join_requests.as_deref()
	}
	/// The pagination anchor.
	pub fn anchor(&self) -> std::option::Option<&str> {
		self.anchor.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetGroupJoinRequestsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGroupJoinRequestsOutput");
		formatter.field("join_requests", &self.join_requests);
		formatter.field("anchor", &self.anchor);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetGroupJoinRequestsOutput`](crate::output::GetGroupJoinRequestsOutput)
pub mod get_group_join_requests_output {
	/// A builder for [`GetGroupJoinRequestsOutput`](crate::output::GetGroupJoinRequestsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) join_requests:
			std::option::Option<std::vec::Vec<crate::model::GroupJoinRequest>>,
		pub(crate) anchor: std::option::Option<std::string::String>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `join_requests`.
		///
		/// To override the contents of this collection use [`set_join_requests`](Self::set_join_requests).
		///
		/// A list of group join requests.
		pub fn join_requests(mut self, input: crate::model::GroupJoinRequest) -> Self {
			let mut v = self.join_requests.unwrap_or_default();
			v.push(input);
			self.join_requests = Some(v);
			self
		}
		/// A list of group join requests.
		pub fn set_join_requests(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GroupJoinRequest>>,
		) -> Self {
			self.join_requests = input;
			self
		}
		/// The pagination anchor.
		pub fn anchor(mut self, input: impl Into<std::string::String>) -> Self {
			self.anchor = Some(input.into());
			self
		}
		/// The pagination anchor.
		pub fn set_anchor(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.anchor = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGroupJoinRequestsOutput`](crate::output::GetGroupJoinRequestsOutput)
		pub fn build(self) -> crate::output::GetGroupJoinRequestsOutput {
			crate::output::GetGroupJoinRequestsOutput {
				join_requests: self.join_requests,
				anchor: self.anchor,
				watch: self.watch,
			}
		}
	}
}
impl GetGroupJoinRequestsOutput {
	/// Creates a new builder-style object to manufacture [`GetGroupJoinRequestsOutput`](crate::output::GetGroupJoinRequestsOutput)
	pub fn builder() -> crate::output::get_group_join_requests_output::Builder {
		crate::output::get_group_join_requests_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGroupMembersOutput {
	/// A list of group members.
	pub members: std::option::Option<std::vec::Vec<crate::model::GroupMember>>,
	/// The pagination anchor.
	pub anchor: std::option::Option<std::string::String>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetGroupMembersOutput {
	/// A list of group members.
	pub fn members(&self) -> std::option::Option<&[crate::model::GroupMember]> {
		self.members.as_deref()
	}
	/// The pagination anchor.
	pub fn anchor(&self) -> std::option::Option<&str> {
		self.anchor.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetGroupMembersOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGroupMembersOutput");
		formatter.field("members", &self.members);
		formatter.field("anchor", &self.anchor);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetGroupMembersOutput`](crate::output::GetGroupMembersOutput)
pub mod get_group_members_output {
	/// A builder for [`GetGroupMembersOutput`](crate::output::GetGroupMembersOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) members: std::option::Option<std::vec::Vec<crate::model::GroupMember>>,
		pub(crate) anchor: std::option::Option<std::string::String>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `members`.
		///
		/// To override the contents of this collection use [`set_members`](Self::set_members).
		///
		/// A list of group members.
		pub fn members(mut self, input: crate::model::GroupMember) -> Self {
			let mut v = self.members.unwrap_or_default();
			v.push(input);
			self.members = Some(v);
			self
		}
		/// A list of group members.
		pub fn set_members(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GroupMember>>,
		) -> Self {
			self.members = input;
			self
		}
		/// The pagination anchor.
		pub fn anchor(mut self, input: impl Into<std::string::String>) -> Self {
			self.anchor = Some(input.into());
			self
		}
		/// The pagination anchor.
		pub fn set_anchor(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.anchor = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGroupMembersOutput`](crate::output::GetGroupMembersOutput)
		pub fn build(self) -> crate::output::GetGroupMembersOutput {
			crate::output::GetGroupMembersOutput {
				members: self.members,
				anchor: self.anchor,
				watch: self.watch,
			}
		}
	}
}
impl GetGroupMembersOutput {
	/// Creates a new builder-style object to manufacture [`GetGroupMembersOutput`](crate::output::GetGroupMembersOutput)
	pub fn builder() -> crate::output::get_group_members_output::Builder {
		crate::output::get_group_members_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGroupProfileOutput {
	/// A list of group profiles.
	pub group: std::option::Option<crate::model::GroupProfile>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetGroupProfileOutput {
	/// A list of group profiles.
	pub fn group(&self) -> std::option::Option<&crate::model::GroupProfile> {
		self.group.as_ref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetGroupProfileOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGroupProfileOutput");
		formatter.field("group", &self.group);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetGroupProfileOutput`](crate::output::GetGroupProfileOutput)
pub mod get_group_profile_output {
	/// A builder for [`GetGroupProfileOutput`](crate::output::GetGroupProfileOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group: std::option::Option<crate::model::GroupProfile>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// A list of group profiles.
		pub fn group(mut self, input: crate::model::GroupProfile) -> Self {
			self.group = Some(input);
			self
		}
		/// A list of group profiles.
		pub fn set_group(mut self, input: std::option::Option<crate::model::GroupProfile>) -> Self {
			self.group = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGroupProfileOutput`](crate::output::GetGroupProfileOutput)
		pub fn build(self) -> crate::output::GetGroupProfileOutput {
			crate::output::GetGroupProfileOutput {
				group: self.group,
				watch: self.watch,
			}
		}
	}
}
impl GetGroupProfileOutput {
	/// Creates a new builder-style object to manufacture [`GetGroupProfileOutput`](crate::output::GetGroupProfileOutput)
	pub fn builder() -> crate::output::get_group_profile_output::Builder {
		crate::output::get_group_profile_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGroupOutput {
	/// A universally unique identifier.
	pub group_id: std::option::Option<std::string::String>,
}
impl CreateGroupOutput {
	/// A universally unique identifier.
	pub fn group_id(&self) -> std::option::Option<&str> {
		self.group_id.as_deref()
	}
}
impl std::fmt::Debug for CreateGroupOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGroupOutput");
		formatter.field("group_id", &self.group_id);
		formatter.finish()
	}
}
/// See [`CreateGroupOutput`](crate::output::CreateGroupOutput)
pub mod create_group_output {
	/// A builder for [`CreateGroupOutput`](crate::output::CreateGroupOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.group_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.group_id = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGroupOutput`](crate::output::CreateGroupOutput)
		pub fn build(self) -> crate::output::CreateGroupOutput {
			crate::output::CreateGroupOutput {
				group_id: self.group_id,
			}
		}
	}
}
impl CreateGroupOutput {
	/// Creates a new builder-style object to manufacture [`CreateGroupOutput`](crate::output::CreateGroupOutput)
	pub fn builder() -> crate::output::create_group_output::Builder {
		crate::output::create_group_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListSuggestedGroupsOutput {
	/// A list of group summaries.
	pub groups: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl ListSuggestedGroupsOutput {
	/// A list of group summaries.
	pub fn groups(&self) -> std::option::Option<&[crate::model::GroupSummary]> {
		self.groups.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for ListSuggestedGroupsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListSuggestedGroupsOutput");
		formatter.field("groups", &self.groups);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`ListSuggestedGroupsOutput`](crate::output::ListSuggestedGroupsOutput)
pub mod list_suggested_groups_output {
	/// A builder for [`ListSuggestedGroupsOutput`](crate::output::ListSuggestedGroupsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `groups`.
		///
		/// To override the contents of this collection use [`set_groups`](Self::set_groups).
		///
		/// A list of group summaries.
		pub fn groups(mut self, input: crate::model::GroupSummary) -> Self {
			let mut v = self.groups.unwrap_or_default();
			v.push(input);
			self.groups = Some(v);
			self
		}
		/// A list of group summaries.
		pub fn set_groups(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
		) -> Self {
			self.groups = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`ListSuggestedGroupsOutput`](crate::output::ListSuggestedGroupsOutput)
		pub fn build(self) -> crate::output::ListSuggestedGroupsOutput {
			crate::output::ListSuggestedGroupsOutput {
				groups: self.groups,
				watch: self.watch,
			}
		}
	}
}
impl ListSuggestedGroupsOutput {
	/// Creates a new builder-style object to manufacture [`ListSuggestedGroupsOutput`](crate::output::ListSuggestedGroupsOutput)
	pub fn builder() -> crate::output::list_suggested_groups_output::Builder {
		crate::output::list_suggested_groups_output::Builder::default()
	}
}
