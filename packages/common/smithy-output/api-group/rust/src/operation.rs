// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `BanGroupIdentity`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`ban_group_identity`](crate::client::Client::ban_group_identity).
///
/// See [`crate::client::fluent_builders::BanGroupIdentity`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BanGroupIdentity {
	_private: (),
}
impl BanGroupIdentity {
	/// Creates a new builder-style object to manufacture [`BanGroupIdentityInput`](crate::input::BanGroupIdentityInput)
	pub fn builder() -> crate::input::ban_group_identity_input::Builder {
		crate::input::ban_group_identity_input::Builder::default()
	}
	/// Creates a new `BanGroupIdentity` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for BanGroupIdentity {
	type Output = std::result::Result<
		crate::output::BanGroupIdentityOutput,
		crate::error::BanGroupIdentityError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_ban_group_identity_error(response)
		} else {
			crate::operation_deser::parse_ban_group_identity_response(response)
		}
	}
}

/// Operation shape for `CompleteGroupAvatarUpload`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`complete_group_avatar_upload`](crate::client::Client::complete_group_avatar_upload).
///
/// See [`crate::client::fluent_builders::CompleteGroupAvatarUpload`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CompleteGroupAvatarUpload {
	_private: (),
}
impl CompleteGroupAvatarUpload {
	/// Creates a new builder-style object to manufacture [`CompleteGroupAvatarUploadInput`](crate::input::CompleteGroupAvatarUploadInput)
	pub fn builder() -> crate::input::complete_group_avatar_upload_input::Builder {
		crate::input::complete_group_avatar_upload_input::Builder::default()
	}
	/// Creates a new `CompleteGroupAvatarUpload` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CompleteGroupAvatarUpload {
	type Output = std::result::Result<
		crate::output::CompleteGroupAvatarUploadOutput,
		crate::error::CompleteGroupAvatarUploadError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_complete_group_avatar_upload_error(response)
		} else {
			crate::operation_deser::parse_complete_group_avatar_upload_response(response)
		}
	}
}

/// Operation shape for `ConsumeGroupInvite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`consume_group_invite`](crate::client::Client::consume_group_invite).
///
/// See [`crate::client::fluent_builders::ConsumeGroupInvite`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConsumeGroupInvite {
	_private: (),
}
impl ConsumeGroupInvite {
	/// Creates a new builder-style object to manufacture [`ConsumeGroupInviteInput`](crate::input::ConsumeGroupInviteInput)
	pub fn builder() -> crate::input::consume_group_invite_input::Builder {
		crate::input::consume_group_invite_input::Builder::default()
	}
	/// Creates a new `ConsumeGroupInvite` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ConsumeGroupInvite {
	type Output = std::result::Result<
		crate::output::ConsumeGroupInviteOutput,
		crate::error::ConsumeGroupInviteError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_consume_group_invite_error(response)
		} else {
			crate::operation_deser::parse_consume_group_invite_response(response)
		}
	}
}

/// Operation shape for `CreateGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_group`](crate::client::Client::create_group).
///
/// See [`crate::client::fluent_builders::CreateGroup`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGroup {
	_private: (),
}
impl CreateGroup {
	/// Creates a new builder-style object to manufacture [`CreateGroupInput`](crate::input::CreateGroupInput)
	pub fn builder() -> crate::input::create_group_input::Builder {
		crate::input::create_group_input::Builder::default()
	}
	/// Creates a new `CreateGroup` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGroup {
	type Output =
		std::result::Result<crate::output::CreateGroupOutput, crate::error::CreateGroupError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_group_error(response)
		} else {
			crate::operation_deser::parse_create_group_response(response)
		}
	}
}

/// Operation shape for `CreateGroupInvite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_group_invite`](crate::client::Client::create_group_invite).
///
/// See [`crate::client::fluent_builders::CreateGroupInvite`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGroupInvite {
	_private: (),
}
impl CreateGroupInvite {
	/// Creates a new builder-style object to manufacture [`CreateGroupInviteInput`](crate::input::CreateGroupInviteInput)
	pub fn builder() -> crate::input::create_group_invite_input::Builder {
		crate::input::create_group_invite_input::Builder::default()
	}
	/// Creates a new `CreateGroupInvite` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGroupInvite {
	type Output = std::result::Result<
		crate::output::CreateGroupInviteOutput,
		crate::error::CreateGroupInviteError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_group_invite_error(response)
		} else {
			crate::operation_deser::parse_create_group_invite_response(response)
		}
	}
}

/// Operation shape for `CreateGroupJoinRequest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_group_join_request`](crate::client::Client::create_group_join_request).
///
/// See [`crate::client::fluent_builders::CreateGroupJoinRequest`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGroupJoinRequest {
	_private: (),
}
impl CreateGroupJoinRequest {
	/// Creates a new builder-style object to manufacture [`CreateGroupJoinRequestInput`](crate::input::CreateGroupJoinRequestInput)
	pub fn builder() -> crate::input::create_group_join_request_input::Builder {
		crate::input::create_group_join_request_input::Builder::default()
	}
	/// Creates a new `CreateGroupJoinRequest` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGroupJoinRequest {
	type Output = std::result::Result<
		crate::output::CreateGroupJoinRequestOutput,
		crate::error::CreateGroupJoinRequestError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_group_join_request_error(response)
		} else {
			crate::operation_deser::parse_create_group_join_request_response(response)
		}
	}
}

/// Operation shape for `GetGroupBans`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_group_bans`](crate::client::Client::get_group_bans).
///
/// See [`crate::client::fluent_builders::GetGroupBans`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupBans {
	_private: (),
}
impl GetGroupBans {
	/// Creates a new builder-style object to manufacture [`GetGroupBansInput`](crate::input::GetGroupBansInput)
	pub fn builder() -> crate::input::get_group_bans_input::Builder {
		crate::input::get_group_bans_input::Builder::default()
	}
	/// Creates a new `GetGroupBans` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGroupBans {
	type Output =
		std::result::Result<crate::output::GetGroupBansOutput, crate::error::GetGroupBansError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_group_bans_error(response)
		} else {
			crate::operation_deser::parse_get_group_bans_response(response)
		}
	}
}

/// Operation shape for `GetGroupInvite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_group_invite`](crate::client::Client::get_group_invite).
///
/// See [`crate::client::fluent_builders::GetGroupInvite`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupInvite {
	_private: (),
}
impl GetGroupInvite {
	/// Creates a new builder-style object to manufacture [`GetGroupInviteInput`](crate::input::GetGroupInviteInput)
	pub fn builder() -> crate::input::get_group_invite_input::Builder {
		crate::input::get_group_invite_input::Builder::default()
	}
	/// Creates a new `GetGroupInvite` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGroupInvite {
	type Output =
		std::result::Result<crate::output::GetGroupInviteOutput, crate::error::GetGroupInviteError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_group_invite_error(response)
		} else {
			crate::operation_deser::parse_get_group_invite_response(response)
		}
	}
}

/// Operation shape for `GetGroupJoinRequests`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_group_join_requests`](crate::client::Client::get_group_join_requests).
///
/// See [`crate::client::fluent_builders::GetGroupJoinRequests`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupJoinRequests {
	_private: (),
}
impl GetGroupJoinRequests {
	/// Creates a new builder-style object to manufacture [`GetGroupJoinRequestsInput`](crate::input::GetGroupJoinRequestsInput)
	pub fn builder() -> crate::input::get_group_join_requests_input::Builder {
		crate::input::get_group_join_requests_input::Builder::default()
	}
	/// Creates a new `GetGroupJoinRequests` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGroupJoinRequests {
	type Output = std::result::Result<
		crate::output::GetGroupJoinRequestsOutput,
		crate::error::GetGroupJoinRequestsError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_group_join_requests_error(response)
		} else {
			crate::operation_deser::parse_get_group_join_requests_response(response)
		}
	}
}

/// Operation shape for `GetGroupMembers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_group_members`](crate::client::Client::get_group_members).
///
/// See [`crate::client::fluent_builders::GetGroupMembers`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupMembers {
	_private: (),
}
impl GetGroupMembers {
	/// Creates a new builder-style object to manufacture [`GetGroupMembersInput`](crate::input::GetGroupMembersInput)
	pub fn builder() -> crate::input::get_group_members_input::Builder {
		crate::input::get_group_members_input::Builder::default()
	}
	/// Creates a new `GetGroupMembers` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGroupMembers {
	type Output = std::result::Result<
		crate::output::GetGroupMembersOutput,
		crate::error::GetGroupMembersError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_group_members_error(response)
		} else {
			crate::operation_deser::parse_get_group_members_response(response)
		}
	}
}

/// Operation shape for `GetGroupProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_group_profile`](crate::client::Client::get_group_profile).
///
/// See [`crate::client::fluent_builders::GetGroupProfile`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupProfile {
	_private: (),
}
impl GetGroupProfile {
	/// Creates a new builder-style object to manufacture [`GetGroupProfileInput`](crate::input::GetGroupProfileInput)
	pub fn builder() -> crate::input::get_group_profile_input::Builder {
		crate::input::get_group_profile_input::Builder::default()
	}
	/// Creates a new `GetGroupProfile` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGroupProfile {
	type Output = std::result::Result<
		crate::output::GetGroupProfileOutput,
		crate::error::GetGroupProfileError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_group_profile_error(response)
		} else {
			crate::operation_deser::parse_get_group_profile_response(response)
		}
	}
}

/// Operation shape for `GetGroupSummary`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_group_summary`](crate::client::Client::get_group_summary).
///
/// See [`crate::client::fluent_builders::GetGroupSummary`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGroupSummary {
	_private: (),
}
impl GetGroupSummary {
	/// Creates a new builder-style object to manufacture [`GetGroupSummaryInput`](crate::input::GetGroupSummaryInput)
	pub fn builder() -> crate::input::get_group_summary_input::Builder {
		crate::input::get_group_summary_input::Builder::default()
	}
	/// Creates a new `GetGroupSummary` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGroupSummary {
	type Output = std::result::Result<
		crate::output::GetGroupSummaryOutput,
		crate::error::GetGroupSummaryError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_group_summary_error(response)
		} else {
			crate::operation_deser::parse_get_group_summary_response(response)
		}
	}
}

/// Operation shape for `KickGroupMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`kick_group_member`](crate::client::Client::kick_group_member).
///
/// See [`crate::client::fluent_builders::KickGroupMember`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct KickGroupMember {
	_private: (),
}
impl KickGroupMember {
	/// Creates a new builder-style object to manufacture [`KickGroupMemberInput`](crate::input::KickGroupMemberInput)
	pub fn builder() -> crate::input::kick_group_member_input::Builder {
		crate::input::kick_group_member_input::Builder::default()
	}
	/// Creates a new `KickGroupMember` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for KickGroupMember {
	type Output = std::result::Result<
		crate::output::KickGroupMemberOutput,
		crate::error::KickGroupMemberError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_kick_group_member_error(response)
		} else {
			crate::operation_deser::parse_kick_group_member_response(response)
		}
	}
}

/// Operation shape for `LeaveGroup`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`leave_group`](crate::client::Client::leave_group).
///
/// See [`crate::client::fluent_builders::LeaveGroup`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct LeaveGroup {
	_private: (),
}
impl LeaveGroup {
	/// Creates a new builder-style object to manufacture [`LeaveGroupInput`](crate::input::LeaveGroupInput)
	pub fn builder() -> crate::input::leave_group_input::Builder {
		crate::input::leave_group_input::Builder::default()
	}
	/// Creates a new `LeaveGroup` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for LeaveGroup {
	type Output =
		std::result::Result<crate::output::LeaveGroupOutput, crate::error::LeaveGroupError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_leave_group_error(response)
		} else {
			crate::operation_deser::parse_leave_group_response(response)
		}
	}
}

/// Operation shape for `ListSuggestedGroups`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_suggested_groups`](crate::client::Client::list_suggested_groups).
///
/// See [`crate::client::fluent_builders::ListSuggestedGroups`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSuggestedGroups {
	_private: (),
}
impl ListSuggestedGroups {
	/// Creates a new builder-style object to manufacture [`ListSuggestedGroupsInput`](crate::input::ListSuggestedGroupsInput)
	pub fn builder() -> crate::input::list_suggested_groups_input::Builder {
		crate::input::list_suggested_groups_input::Builder::default()
	}
	/// Creates a new `ListSuggestedGroups` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ListSuggestedGroups {
	type Output = std::result::Result<
		crate::output::ListSuggestedGroupsOutput,
		crate::error::ListSuggestedGroupsError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_list_suggested_groups_error(response)
		} else {
			crate::operation_deser::parse_list_suggested_groups_response(response)
		}
	}
}

/// Operation shape for `PrepareGroupAvatarUpload`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`prepare_group_avatar_upload`](crate::client::Client::prepare_group_avatar_upload).
///
/// See [`crate::client::fluent_builders::PrepareGroupAvatarUpload`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PrepareGroupAvatarUpload {
	_private: (),
}
impl PrepareGroupAvatarUpload {
	/// Creates a new builder-style object to manufacture [`PrepareGroupAvatarUploadInput`](crate::input::PrepareGroupAvatarUploadInput)
	pub fn builder() -> crate::input::prepare_group_avatar_upload_input::Builder {
		crate::input::prepare_group_avatar_upload_input::Builder::default()
	}
	/// Creates a new `PrepareGroupAvatarUpload` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for PrepareGroupAvatarUpload {
	type Output = std::result::Result<
		crate::output::PrepareGroupAvatarUploadOutput,
		crate::error::PrepareGroupAvatarUploadError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_prepare_group_avatar_upload_error(response)
		} else {
			crate::operation_deser::parse_prepare_group_avatar_upload_response(response)
		}
	}
}

/// Operation shape for `ResolveGroupJoinRequest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`resolve_group_join_request`](crate::client::Client::resolve_group_join_request).
///
/// See [`crate::client::fluent_builders::ResolveGroupJoinRequest`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResolveGroupJoinRequest {
	_private: (),
}
impl ResolveGroupJoinRequest {
	/// Creates a new builder-style object to manufacture [`ResolveGroupJoinRequestInput`](crate::input::ResolveGroupJoinRequestInput)
	pub fn builder() -> crate::input::resolve_group_join_request_input::Builder {
		crate::input::resolve_group_join_request_input::Builder::default()
	}
	/// Creates a new `ResolveGroupJoinRequest` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ResolveGroupJoinRequest {
	type Output = std::result::Result<
		crate::output::ResolveGroupJoinRequestOutput,
		crate::error::ResolveGroupJoinRequestError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_resolve_group_join_request_error(response)
		} else {
			crate::operation_deser::parse_resolve_group_join_request_response(response)
		}
	}
}

/// Operation shape for `SearchGroups`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`search_groups`](crate::client::Client::search_groups).
///
/// See [`crate::client::fluent_builders::SearchGroups`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchGroups {
	_private: (),
}
impl SearchGroups {
	/// Creates a new builder-style object to manufacture [`SearchGroupsInput`](crate::input::SearchGroupsInput)
	pub fn builder() -> crate::input::search_groups_input::Builder {
		crate::input::search_groups_input::Builder::default()
	}
	/// Creates a new `SearchGroups` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for SearchGroups {
	type Output =
		std::result::Result<crate::output::SearchGroupsOutput, crate::error::SearchGroupsError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_search_groups_error(response)
		} else {
			crate::operation_deser::parse_search_groups_response(response)
		}
	}
}

/// Operation shape for `TransferGroupOwnership`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`transfer_group_ownership`](crate::client::Client::transfer_group_ownership).
///
/// See [`crate::client::fluent_builders::TransferGroupOwnership`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TransferGroupOwnership {
	_private: (),
}
impl TransferGroupOwnership {
	/// Creates a new builder-style object to manufacture [`TransferGroupOwnershipInput`](crate::input::TransferGroupOwnershipInput)
	pub fn builder() -> crate::input::transfer_group_ownership_input::Builder {
		crate::input::transfer_group_ownership_input::Builder::default()
	}
	/// Creates a new `TransferGroupOwnership` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for TransferGroupOwnership {
	type Output = std::result::Result<
		crate::output::TransferGroupOwnershipOutput,
		crate::error::TransferGroupOwnershipError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_transfer_group_ownership_error(response)
		} else {
			crate::operation_deser::parse_transfer_group_ownership_response(response)
		}
	}
}

/// Operation shape for `UnbanGroupIdentity`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`unban_group_identity`](crate::client::Client::unban_group_identity).
///
/// See [`crate::client::fluent_builders::UnbanGroupIdentity`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnbanGroupIdentity {
	_private: (),
}
impl UnbanGroupIdentity {
	/// Creates a new builder-style object to manufacture [`UnbanGroupIdentityInput`](crate::input::UnbanGroupIdentityInput)
	pub fn builder() -> crate::input::unban_group_identity_input::Builder {
		crate::input::unban_group_identity_input::Builder::default()
	}
	/// Creates a new `UnbanGroupIdentity` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for UnbanGroupIdentity {
	type Output = std::result::Result<
		crate::output::UnbanGroupIdentityOutput,
		crate::error::UnbanGroupIdentityError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_unban_group_identity_error(response)
		} else {
			crate::operation_deser::parse_unban_group_identity_response(response)
		}
	}
}

/// Operation shape for `UpdateGroupProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_group_profile`](crate::client::Client::update_group_profile).
///
/// See [`crate::client::fluent_builders::UpdateGroupProfile`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGroupProfile {
	_private: (),
}
impl UpdateGroupProfile {
	/// Creates a new builder-style object to manufacture [`UpdateGroupProfileInput`](crate::input::UpdateGroupProfileInput)
	pub fn builder() -> crate::input::update_group_profile_input::Builder {
		crate::input::update_group_profile_input::Builder::default()
	}
	/// Creates a new `UpdateGroupProfile` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateGroupProfile {
	type Output = std::result::Result<
		crate::output::UpdateGroupProfileOutput,
		crate::error::UpdateGroupProfileError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_update_group_profile_error(response)
		} else {
			crate::operation_deser::parse_update_group_profile_response(response)
		}
	}
}

/// Operation shape for `ValidateGroupProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`validate_group_profile`](crate::client::Client::validate_group_profile).
///
/// See [`crate::client::fluent_builders::ValidateGroupProfile`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ValidateGroupProfile {
	_private: (),
}
impl ValidateGroupProfile {
	/// Creates a new builder-style object to manufacture [`ValidateGroupProfileInput`](crate::input::ValidateGroupProfileInput)
	pub fn builder() -> crate::input::validate_group_profile_input::Builder {
		crate::input::validate_group_profile_input::Builder::default()
	}
	/// Creates a new `ValidateGroupProfile` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ValidateGroupProfile {
	type Output = std::result::Result<
		crate::output::ValidateGroupProfileOutput,
		crate::error::ValidateGroupProfileError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_validate_group_profile_error(response)
		} else {
			crate::operation_deser::parse_validate_group_profile_response(response)
		}
	}
}
