// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikHttpNullified {
	#[allow(missing_docs)] // documentation missing in model
	pub services: std::option::Option<
		std::collections::HashMap<std::string::String, crate::model::TraefikService>,
	>,
	#[allow(missing_docs)] // documentation missing in model
	pub routers: std::option::Option<
		std::collections::HashMap<std::string::String, crate::model::TraefikRouter>,
	>,
	#[allow(missing_docs)] // documentation missing in model
	pub middlewares: std::option::Option<
		std::collections::HashMap<std::string::String, crate::model::TraefikMiddleware>,
	>,
}
impl TraefikHttpNullified {
	#[allow(missing_docs)] // documentation missing in model
	pub fn services(
		&self,
	) -> std::option::Option<
		&std::collections::HashMap<std::string::String, crate::model::TraefikService>,
	> {
		self.services.as_ref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn routers(
		&self,
	) -> std::option::Option<
		&std::collections::HashMap<std::string::String, crate::model::TraefikRouter>,
	> {
		self.routers.as_ref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn middlewares(
		&self,
	) -> std::option::Option<
		&std::collections::HashMap<std::string::String, crate::model::TraefikMiddleware>,
	> {
		self.middlewares.as_ref()
	}
}
impl std::fmt::Debug for TraefikHttpNullified {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikHttpNullified");
		formatter.field("services", &self.services);
		formatter.field("routers", &self.routers);
		formatter.field("middlewares", &self.middlewares);
		formatter.finish()
	}
}
/// See [`TraefikHttpNullified`](crate::model::TraefikHttpNullified)
pub mod traefik_http_nullified {
	/// A builder for [`TraefikHttpNullified`](crate::model::TraefikHttpNullified)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) services: std::option::Option<
			std::collections::HashMap<std::string::String, crate::model::TraefikService>,
		>,
		pub(crate) routers: std::option::Option<
			std::collections::HashMap<std::string::String, crate::model::TraefikRouter>,
		>,
		pub(crate) middlewares: std::option::Option<
			std::collections::HashMap<std::string::String, crate::model::TraefikMiddleware>,
		>,
	}
	impl Builder {
		/// Adds a key-value pair to `services`.
		///
		/// To override the contents of this collection use [`set_services`](Self::set_services).
		///
		pub fn services(
			mut self,
			k: impl Into<std::string::String>,
			v: crate::model::TraefikService,
		) -> Self {
			let mut hash_map = self.services.unwrap_or_default();
			hash_map.insert(k.into(), v);
			self.services = Some(hash_map);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_services(
			mut self,
			input: std::option::Option<
				std::collections::HashMap<std::string::String, crate::model::TraefikService>,
			>,
		) -> Self {
			self.services = input;
			self
		}
		/// Adds a key-value pair to `routers`.
		///
		/// To override the contents of this collection use [`set_routers`](Self::set_routers).
		///
		pub fn routers(
			mut self,
			k: impl Into<std::string::String>,
			v: crate::model::TraefikRouter,
		) -> Self {
			let mut hash_map = self.routers.unwrap_or_default();
			hash_map.insert(k.into(), v);
			self.routers = Some(hash_map);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_routers(
			mut self,
			input: std::option::Option<
				std::collections::HashMap<std::string::String, crate::model::TraefikRouter>,
			>,
		) -> Self {
			self.routers = input;
			self
		}
		/// Adds a key-value pair to `middlewares`.
		///
		/// To override the contents of this collection use [`set_middlewares`](Self::set_middlewares).
		///
		pub fn middlewares(
			mut self,
			k: impl Into<std::string::String>,
			v: crate::model::TraefikMiddleware,
		) -> Self {
			let mut hash_map = self.middlewares.unwrap_or_default();
			hash_map.insert(k.into(), v);
			self.middlewares = Some(hash_map);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_middlewares(
			mut self,
			input: std::option::Option<
				std::collections::HashMap<std::string::String, crate::model::TraefikMiddleware>,
			>,
		) -> Self {
			self.middlewares = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikHttpNullified`](crate::model::TraefikHttpNullified)
		pub fn build(self) -> crate::model::TraefikHttpNullified {
			crate::model::TraefikHttpNullified {
				services: self.services,
				routers: self.routers,
				middlewares: self.middlewares,
			}
		}
	}
}
impl TraefikHttpNullified {
	/// Creates a new builder-style object to manufacture [`TraefikHttpNullified`](crate::model::TraefikHttpNullified)
	pub fn builder() -> crate::model::traefik_http_nullified::Builder {
		crate::model::traefik_http_nullified::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum TraefikMiddleware {
	#[allow(missing_docs)] // documentation missing in model
	AddPrefix(crate::model::TraefikMiddlewareAddPrefix),
	#[allow(missing_docs)] // documentation missing in model
	BasicAuth(crate::model::TraefikMiddlewareBasicAuth),
	#[allow(missing_docs)] // documentation missing in model
	Chain(crate::model::TraefikMiddlewareChain),
	#[allow(missing_docs)] // documentation missing in model
	Compress(crate::model::Unit),
	#[allow(missing_docs)] // documentation missing in model
	Headers(crate::model::TraefikMiddlewareHeaders),
	#[allow(missing_docs)] // documentation missing in model
	InFlightReq(crate::model::TraefikMiddlewareInFlightReq),
	#[allow(missing_docs)] // documentation missing in model
	IpWhiteList(crate::model::TraefikMiddlewareIpWhiteList),
	#[allow(missing_docs)] // documentation missing in model
	RateLimit(crate::model::TraefikMiddlewareRateLimit),
	#[allow(missing_docs)] // documentation missing in model
	RedirectRegex(crate::model::TraefikMiddlewareRedirectRegex),
	#[allow(missing_docs)] // documentation missing in model
	ReplacePathRegex(crate::model::TraefikMiddlewareReplacePathRegex),
	#[allow(missing_docs)] // documentation missing in model
	Retry(crate::model::TraefikMiddlewareRetry),
	#[allow(missing_docs)] // documentation missing in model
	StripPrefix(crate::model::TraefikMiddlewareStripPrefix),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl TraefikMiddleware {
	/// Tries to convert the enum instance into [`AddPrefix`](crate::model::TraefikMiddleware::AddPrefix), extracting the inner [`TraefikMiddlewareAddPrefix`](crate::model::TraefikMiddlewareAddPrefix).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_add_prefix(
		&self,
	) -> std::result::Result<&crate::model::TraefikMiddlewareAddPrefix, &Self> {
		if let TraefikMiddleware::AddPrefix(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`AddPrefix`](crate::model::TraefikMiddleware::AddPrefix).
	pub fn is_add_prefix(&self) -> bool {
		self.as_add_prefix().is_ok()
	}
	/// Tries to convert the enum instance into [`BasicAuth`](crate::model::TraefikMiddleware::BasicAuth), extracting the inner [`TraefikMiddlewareBasicAuth`](crate::model::TraefikMiddlewareBasicAuth).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_basic_auth(
		&self,
	) -> std::result::Result<&crate::model::TraefikMiddlewareBasicAuth, &Self> {
		if let TraefikMiddleware::BasicAuth(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`BasicAuth`](crate::model::TraefikMiddleware::BasicAuth).
	pub fn is_basic_auth(&self) -> bool {
		self.as_basic_auth().is_ok()
	}
	/// Tries to convert the enum instance into [`Chain`](crate::model::TraefikMiddleware::Chain), extracting the inner [`TraefikMiddlewareChain`](crate::model::TraefikMiddlewareChain).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_chain(&self) -> std::result::Result<&crate::model::TraefikMiddlewareChain, &Self> {
		if let TraefikMiddleware::Chain(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Chain`](crate::model::TraefikMiddleware::Chain).
	pub fn is_chain(&self) -> bool {
		self.as_chain().is_ok()
	}
	/// Tries to convert the enum instance into [`Compress`](crate::model::TraefikMiddleware::Compress), extracting the inner [`Unit`](crate::model::Unit).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_compress(&self) -> std::result::Result<&crate::model::Unit, &Self> {
		if let TraefikMiddleware::Compress(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Compress`](crate::model::TraefikMiddleware::Compress).
	pub fn is_compress(&self) -> bool {
		self.as_compress().is_ok()
	}
	/// Tries to convert the enum instance into [`Headers`](crate::model::TraefikMiddleware::Headers), extracting the inner [`TraefikMiddlewareHeaders`](crate::model::TraefikMiddlewareHeaders).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_headers(
		&self,
	) -> std::result::Result<&crate::model::TraefikMiddlewareHeaders, &Self> {
		if let TraefikMiddleware::Headers(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Headers`](crate::model::TraefikMiddleware::Headers).
	pub fn is_headers(&self) -> bool {
		self.as_headers().is_ok()
	}
	/// Tries to convert the enum instance into [`InFlightReq`](crate::model::TraefikMiddleware::InFlightReq), extracting the inner [`TraefikMiddlewareInFlightReq`](crate::model::TraefikMiddlewareInFlightReq).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_in_flight_req(
		&self,
	) -> std::result::Result<&crate::model::TraefikMiddlewareInFlightReq, &Self> {
		if let TraefikMiddleware::InFlightReq(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`InFlightReq`](crate::model::TraefikMiddleware::InFlightReq).
	pub fn is_in_flight_req(&self) -> bool {
		self.as_in_flight_req().is_ok()
	}
	/// Tries to convert the enum instance into [`IpWhiteList`](crate::model::TraefikMiddleware::IpWhiteList), extracting the inner [`TraefikMiddlewareIpWhiteList`](crate::model::TraefikMiddlewareIpWhiteList).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_ip_white_list(
		&self,
	) -> std::result::Result<&crate::model::TraefikMiddlewareIpWhiteList, &Self> {
		if let TraefikMiddleware::IpWhiteList(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`IpWhiteList`](crate::model::TraefikMiddleware::IpWhiteList).
	pub fn is_ip_white_list(&self) -> bool {
		self.as_ip_white_list().is_ok()
	}
	/// Tries to convert the enum instance into [`RateLimit`](crate::model::TraefikMiddleware::RateLimit), extracting the inner [`TraefikMiddlewareRateLimit`](crate::model::TraefikMiddlewareRateLimit).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_rate_limit(
		&self,
	) -> std::result::Result<&crate::model::TraefikMiddlewareRateLimit, &Self> {
		if let TraefikMiddleware::RateLimit(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`RateLimit`](crate::model::TraefikMiddleware::RateLimit).
	pub fn is_rate_limit(&self) -> bool {
		self.as_rate_limit().is_ok()
	}
	/// Tries to convert the enum instance into [`RedirectRegex`](crate::model::TraefikMiddleware::RedirectRegex), extracting the inner [`TraefikMiddlewareRedirectRegex`](crate::model::TraefikMiddlewareRedirectRegex).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_redirect_regex(
		&self,
	) -> std::result::Result<&crate::model::TraefikMiddlewareRedirectRegex, &Self> {
		if let TraefikMiddleware::RedirectRegex(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`RedirectRegex`](crate::model::TraefikMiddleware::RedirectRegex).
	pub fn is_redirect_regex(&self) -> bool {
		self.as_redirect_regex().is_ok()
	}
	/// Tries to convert the enum instance into [`ReplacePathRegex`](crate::model::TraefikMiddleware::ReplacePathRegex), extracting the inner [`TraefikMiddlewareReplacePathRegex`](crate::model::TraefikMiddlewareReplacePathRegex).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_replace_path_regex(
		&self,
	) -> std::result::Result<&crate::model::TraefikMiddlewareReplacePathRegex, &Self> {
		if let TraefikMiddleware::ReplacePathRegex(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`ReplacePathRegex`](crate::model::TraefikMiddleware::ReplacePathRegex).
	pub fn is_replace_path_regex(&self) -> bool {
		self.as_replace_path_regex().is_ok()
	}
	/// Tries to convert the enum instance into [`Retry`](crate::model::TraefikMiddleware::Retry), extracting the inner [`TraefikMiddlewareRetry`](crate::model::TraefikMiddlewareRetry).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_retry(&self) -> std::result::Result<&crate::model::TraefikMiddlewareRetry, &Self> {
		if let TraefikMiddleware::Retry(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Retry`](crate::model::TraefikMiddleware::Retry).
	pub fn is_retry(&self) -> bool {
		self.as_retry().is_ok()
	}
	/// Tries to convert the enum instance into [`StripPrefix`](crate::model::TraefikMiddleware::StripPrefix), extracting the inner [`TraefikMiddlewareStripPrefix`](crate::model::TraefikMiddlewareStripPrefix).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_strip_prefix(
		&self,
	) -> std::result::Result<&crate::model::TraefikMiddlewareStripPrefix, &Self> {
		if let TraefikMiddleware::StripPrefix(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`StripPrefix`](crate::model::TraefikMiddleware::StripPrefix).
	pub fn is_strip_prefix(&self) -> bool {
		self.as_strip_prefix().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikMiddlewareBasicAuth {
	#[allow(missing_docs)] // documentation missing in model
	pub users: std::option::Option<std::vec::Vec<std::string::String>>,
	#[allow(missing_docs)] // documentation missing in model
	pub remove_header: std::option::Option<bool>,
}
impl TraefikMiddlewareBasicAuth {
	#[allow(missing_docs)] // documentation missing in model
	pub fn users(&self) -> std::option::Option<&[std::string::String]> {
		self.users.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn remove_header(&self) -> std::option::Option<bool> {
		self.remove_header
	}
}
impl std::fmt::Debug for TraefikMiddlewareBasicAuth {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikMiddlewareBasicAuth");
		formatter.field("users", &self.users);
		formatter.field("remove_header", &self.remove_header);
		formatter.finish()
	}
}
/// See [`TraefikMiddlewareBasicAuth`](crate::model::TraefikMiddlewareBasicAuth)
pub mod traefik_middleware_basic_auth {
	/// A builder for [`TraefikMiddlewareBasicAuth`](crate::model::TraefikMiddlewareBasicAuth)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) users: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) remove_header: std::option::Option<bool>,
	}
	impl Builder {
		/// Appends an item to `users`.
		///
		/// To override the contents of this collection use [`set_users`](Self::set_users).
		///
		pub fn users(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.users.unwrap_or_default();
			v.push(input.into());
			self.users = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_users(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.users = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn remove_header(mut self, input: bool) -> Self {
			self.remove_header = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_remove_header(mut self, input: std::option::Option<bool>) -> Self {
			self.remove_header = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikMiddlewareBasicAuth`](crate::model::TraefikMiddlewareBasicAuth)
		pub fn build(self) -> crate::model::TraefikMiddlewareBasicAuth {
			crate::model::TraefikMiddlewareBasicAuth {
				users: self.users,
				remove_header: self.remove_header,
			}
		}
	}
}
impl TraefikMiddlewareBasicAuth {
	/// Creates a new builder-style object to manufacture [`TraefikMiddlewareBasicAuth`](crate::model::TraefikMiddlewareBasicAuth)
	pub fn builder() -> crate::model::traefik_middleware_basic_auth::Builder {
		crate::model::traefik_middleware_basic_auth::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikMiddlewareRedirectRegex {
	#[allow(missing_docs)] // documentation missing in model
	pub permanent: std::option::Option<bool>,
	#[allow(missing_docs)] // documentation missing in model
	pub regex: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub replacement: std::option::Option<std::string::String>,
}
impl TraefikMiddlewareRedirectRegex {
	#[allow(missing_docs)] // documentation missing in model
	pub fn permanent(&self) -> std::option::Option<bool> {
		self.permanent
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn regex(&self) -> std::option::Option<&str> {
		self.regex.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn replacement(&self) -> std::option::Option<&str> {
		self.replacement.as_deref()
	}
}
impl std::fmt::Debug for TraefikMiddlewareRedirectRegex {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikMiddlewareRedirectRegex");
		formatter.field("permanent", &self.permanent);
		formatter.field("regex", &self.regex);
		formatter.field("replacement", &self.replacement);
		formatter.finish()
	}
}
/// See [`TraefikMiddlewareRedirectRegex`](crate::model::TraefikMiddlewareRedirectRegex)
pub mod traefik_middleware_redirect_regex {
	/// A builder for [`TraefikMiddlewareRedirectRegex`](crate::model::TraefikMiddlewareRedirectRegex)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) permanent: std::option::Option<bool>,
		pub(crate) regex: std::option::Option<std::string::String>,
		pub(crate) replacement: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn permanent(mut self, input: bool) -> Self {
			self.permanent = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_permanent(mut self, input: std::option::Option<bool>) -> Self {
			self.permanent = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn regex(mut self, input: impl Into<std::string::String>) -> Self {
			self.regex = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_regex(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.regex = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn replacement(mut self, input: impl Into<std::string::String>) -> Self {
			self.replacement = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_replacement(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.replacement = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikMiddlewareRedirectRegex`](crate::model::TraefikMiddlewareRedirectRegex)
		pub fn build(self) -> crate::model::TraefikMiddlewareRedirectRegex {
			crate::model::TraefikMiddlewareRedirectRegex {
				permanent: self.permanent,
				regex: self.regex,
				replacement: self.replacement,
			}
		}
	}
}
impl TraefikMiddlewareRedirectRegex {
	/// Creates a new builder-style object to manufacture [`TraefikMiddlewareRedirectRegex`](crate::model::TraefikMiddlewareRedirectRegex)
	pub fn builder() -> crate::model::traefik_middleware_redirect_regex::Builder {
		crate::model::traefik_middleware_redirect_regex::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikMiddlewareHeaders {
	#[allow(missing_docs)] // documentation missing in model
	pub access_control_allow_methods: std::option::Option<std::vec::Vec<std::string::String>>,
	#[allow(missing_docs)] // documentation missing in model
	pub access_control_allow_origin_list: std::option::Option<std::vec::Vec<std::string::String>>,
	/// Unsigned 32 bit integer.
	pub access_control_max_age: std::option::Option<i32>,
	#[allow(missing_docs)] // documentation missing in model
	pub custom_response_headers:
		std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl TraefikMiddlewareHeaders {
	#[allow(missing_docs)] // documentation missing in model
	pub fn access_control_allow_methods(&self) -> std::option::Option<&[std::string::String]> {
		self.access_control_allow_methods.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn access_control_allow_origin_list(&self) -> std::option::Option<&[std::string::String]> {
		self.access_control_allow_origin_list.as_deref()
	}
	/// Unsigned 32 bit integer.
	pub fn access_control_max_age(&self) -> std::option::Option<i32> {
		self.access_control_max_age
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn custom_response_headers(
		&self,
	) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>> {
		self.custom_response_headers.as_ref()
	}
}
impl std::fmt::Debug for TraefikMiddlewareHeaders {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikMiddlewareHeaders");
		formatter.field(
			"access_control_allow_methods",
			&self.access_control_allow_methods,
		);
		formatter.field(
			"access_control_allow_origin_list",
			&self.access_control_allow_origin_list,
		);
		formatter.field("access_control_max_age", &self.access_control_max_age);
		formatter.field("custom_response_headers", &self.custom_response_headers);
		formatter.finish()
	}
}
/// See [`TraefikMiddlewareHeaders`](crate::model::TraefikMiddlewareHeaders)
pub mod traefik_middleware_headers {
	/// A builder for [`TraefikMiddlewareHeaders`](crate::model::TraefikMiddlewareHeaders)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) access_control_allow_methods:
			std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) access_control_allow_origin_list:
			std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) access_control_max_age: std::option::Option<i32>,
		pub(crate) custom_response_headers: std::option::Option<
			std::collections::HashMap<std::string::String, std::string::String>,
		>,
	}
	impl Builder {
		/// Appends an item to `access_control_allow_methods`.
		///
		/// To override the contents of this collection use [`set_access_control_allow_methods`](Self::set_access_control_allow_methods).
		///
		pub fn access_control_allow_methods(
			mut self,
			input: impl Into<std::string::String>,
		) -> Self {
			let mut v = self.access_control_allow_methods.unwrap_or_default();
			v.push(input.into());
			self.access_control_allow_methods = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_access_control_allow_methods(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.access_control_allow_methods = input;
			self
		}
		/// Appends an item to `access_control_allow_origin_list`.
		///
		/// To override the contents of this collection use [`set_access_control_allow_origin_list`](Self::set_access_control_allow_origin_list).
		///
		pub fn access_control_allow_origin_list(
			mut self,
			input: impl Into<std::string::String>,
		) -> Self {
			let mut v = self.access_control_allow_origin_list.unwrap_or_default();
			v.push(input.into());
			self.access_control_allow_origin_list = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_access_control_allow_origin_list(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.access_control_allow_origin_list = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn access_control_max_age(mut self, input: i32) -> Self {
			self.access_control_max_age = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_access_control_max_age(mut self, input: std::option::Option<i32>) -> Self {
			self.access_control_max_age = input;
			self
		}
		/// Adds a key-value pair to `custom_response_headers`.
		///
		/// To override the contents of this collection use [`set_custom_response_headers`](Self::set_custom_response_headers).
		///
		pub fn custom_response_headers(
			mut self,
			k: impl Into<std::string::String>,
			v: impl Into<std::string::String>,
		) -> Self {
			let mut hash_map = self.custom_response_headers.unwrap_or_default();
			hash_map.insert(k.into(), v.into());
			self.custom_response_headers = Some(hash_map);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_custom_response_headers(
			mut self,
			input: std::option::Option<
				std::collections::HashMap<std::string::String, std::string::String>,
			>,
		) -> Self {
			self.custom_response_headers = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikMiddlewareHeaders`](crate::model::TraefikMiddlewareHeaders)
		pub fn build(self) -> crate::model::TraefikMiddlewareHeaders {
			crate::model::TraefikMiddlewareHeaders {
				access_control_allow_methods: self.access_control_allow_methods,
				access_control_allow_origin_list: self.access_control_allow_origin_list,
				access_control_max_age: self.access_control_max_age,
				custom_response_headers: self.custom_response_headers,
			}
		}
	}
}
impl TraefikMiddlewareHeaders {
	/// Creates a new builder-style object to manufacture [`TraefikMiddlewareHeaders`](crate::model::TraefikMiddlewareHeaders)
	pub fn builder() -> crate::model::traefik_middleware_headers::Builder {
		crate::model::traefik_middleware_headers::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Unit {}
impl std::fmt::Debug for Unit {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("Unit");
		formatter.finish()
	}
}
/// See [`Unit`](crate::model::Unit)
pub mod unit {
	/// A builder for [`Unit`](crate::model::Unit)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`Unit`](crate::model::Unit)
		pub fn build(self) -> crate::model::Unit {
			crate::model::Unit {}
		}
	}
}
impl Unit {
	/// Creates a new builder-style object to manufacture [`Unit`](crate::model::Unit)
	pub fn builder() -> crate::model::unit::Builder {
		crate::model::unit::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikMiddlewareRetry {
	/// Unsigned 32 bit integer.
	pub attempts: std::option::Option<i32>,
	#[allow(missing_docs)] // documentation missing in model
	pub initial_interval: std::option::Option<std::string::String>,
}
impl TraefikMiddlewareRetry {
	/// Unsigned 32 bit integer.
	pub fn attempts(&self) -> std::option::Option<i32> {
		self.attempts
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn initial_interval(&self) -> std::option::Option<&str> {
		self.initial_interval.as_deref()
	}
}
impl std::fmt::Debug for TraefikMiddlewareRetry {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikMiddlewareRetry");
		formatter.field("attempts", &self.attempts);
		formatter.field("initial_interval", &self.initial_interval);
		formatter.finish()
	}
}
/// See [`TraefikMiddlewareRetry`](crate::model::TraefikMiddlewareRetry)
pub mod traefik_middleware_retry {
	/// A builder for [`TraefikMiddlewareRetry`](crate::model::TraefikMiddlewareRetry)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) attempts: std::option::Option<i32>,
		pub(crate) initial_interval: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Unsigned 32 bit integer.
		pub fn attempts(mut self, input: i32) -> Self {
			self.attempts = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_attempts(mut self, input: std::option::Option<i32>) -> Self {
			self.attempts = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn initial_interval(mut self, input: impl Into<std::string::String>) -> Self {
			self.initial_interval = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_initial_interval(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.initial_interval = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikMiddlewareRetry`](crate::model::TraefikMiddlewareRetry)
		pub fn build(self) -> crate::model::TraefikMiddlewareRetry {
			crate::model::TraefikMiddlewareRetry {
				attempts: self.attempts,
				initial_interval: self.initial_interval,
			}
		}
	}
}
impl TraefikMiddlewareRetry {
	/// Creates a new builder-style object to manufacture [`TraefikMiddlewareRetry`](crate::model::TraefikMiddlewareRetry)
	pub fn builder() -> crate::model::traefik_middleware_retry::Builder {
		crate::model::traefik_middleware_retry::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikMiddlewareInFlightReq {
	/// Unsigned 32 bit integer.
	pub amount: std::option::Option<i32>,
	#[allow(missing_docs)] // documentation missing in model
	pub source_criterion: std::option::Option<crate::model::TraefikInFlightReqSourceCriterion>,
}
impl TraefikMiddlewareInFlightReq {
	/// Unsigned 32 bit integer.
	pub fn amount(&self) -> std::option::Option<i32> {
		self.amount
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn source_criterion(
		&self,
	) -> std::option::Option<&crate::model::TraefikInFlightReqSourceCriterion> {
		self.source_criterion.as_ref()
	}
}
impl std::fmt::Debug for TraefikMiddlewareInFlightReq {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikMiddlewareInFlightReq");
		formatter.field("amount", &self.amount);
		formatter.field("source_criterion", &self.source_criterion);
		formatter.finish()
	}
}
/// See [`TraefikMiddlewareInFlightReq`](crate::model::TraefikMiddlewareInFlightReq)
pub mod traefik_middleware_in_flight_req {
	/// A builder for [`TraefikMiddlewareInFlightReq`](crate::model::TraefikMiddlewareInFlightReq)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) amount: std::option::Option<i32>,
		pub(crate) source_criterion:
			std::option::Option<crate::model::TraefikInFlightReqSourceCriterion>,
	}
	impl Builder {
		/// Unsigned 32 bit integer.
		pub fn amount(mut self, input: i32) -> Self {
			self.amount = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_amount(mut self, input: std::option::Option<i32>) -> Self {
			self.amount = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn source_criterion(
			mut self,
			input: crate::model::TraefikInFlightReqSourceCriterion,
		) -> Self {
			self.source_criterion = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_source_criterion(
			mut self,
			input: std::option::Option<crate::model::TraefikInFlightReqSourceCriterion>,
		) -> Self {
			self.source_criterion = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikMiddlewareInFlightReq`](crate::model::TraefikMiddlewareInFlightReq)
		pub fn build(self) -> crate::model::TraefikMiddlewareInFlightReq {
			crate::model::TraefikMiddlewareInFlightReq {
				amount: self.amount,
				source_criterion: self.source_criterion,
			}
		}
	}
}
impl TraefikMiddlewareInFlightReq {
	/// Creates a new builder-style object to manufacture [`TraefikMiddlewareInFlightReq`](crate::model::TraefikMiddlewareInFlightReq)
	pub fn builder() -> crate::model::traefik_middleware_in_flight_req::Builder {
		crate::model::traefik_middleware_in_flight_req::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum TraefikInFlightReqSourceCriterion {
	#[allow(missing_docs)] // documentation missing in model
	IpStrategy(crate::model::TraefikIpStrategy),
	#[allow(missing_docs)] // documentation missing in model
	RequestHeaderName(crate::model::TraefikInFlightReqSourceCriterionRequestHeaderName),
	#[allow(missing_docs)] // documentation missing in model
	RequestHost(crate::model::Unit),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl TraefikInFlightReqSourceCriterion {
	/// Tries to convert the enum instance into [`IpStrategy`](crate::model::TraefikInFlightReqSourceCriterion::IpStrategy), extracting the inner [`TraefikIpStrategy`](crate::model::TraefikIpStrategy).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_ip_strategy(&self) -> std::result::Result<&crate::model::TraefikIpStrategy, &Self> {
		if let TraefikInFlightReqSourceCriterion::IpStrategy(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`IpStrategy`](crate::model::TraefikInFlightReqSourceCriterion::IpStrategy).
	pub fn is_ip_strategy(&self) -> bool {
		self.as_ip_strategy().is_ok()
	}
	/// Tries to convert the enum instance into [`RequestHeaderName`](crate::model::TraefikInFlightReqSourceCriterion::RequestHeaderName), extracting the inner [`TraefikInFlightReqSourceCriterionRequestHeaderName`](crate::model::TraefikInFlightReqSourceCriterionRequestHeaderName).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_request_header_name(
		&self,
	) -> std::result::Result<&crate::model::TraefikInFlightReqSourceCriterionRequestHeaderName, &Self>
	{
		if let TraefikInFlightReqSourceCriterion::RequestHeaderName(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`RequestHeaderName`](crate::model::TraefikInFlightReqSourceCriterion::RequestHeaderName).
	pub fn is_request_header_name(&self) -> bool {
		self.as_request_header_name().is_ok()
	}
	/// Tries to convert the enum instance into [`RequestHost`](crate::model::TraefikInFlightReqSourceCriterion::RequestHost), extracting the inner [`Unit`](crate::model::Unit).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_request_host(&self) -> std::result::Result<&crate::model::Unit, &Self> {
		if let TraefikInFlightReqSourceCriterion::RequestHost(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`RequestHost`](crate::model::TraefikInFlightReqSourceCriterion::RequestHost).
	pub fn is_request_host(&self) -> bool {
		self.as_request_host().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikInFlightReqSourceCriterionRequestHeaderName {
	#[allow(missing_docs)] // documentation missing in model
	pub request_header_name: std::option::Option<std::string::String>,
}
impl TraefikInFlightReqSourceCriterionRequestHeaderName {
	#[allow(missing_docs)] // documentation missing in model
	pub fn request_header_name(&self) -> std::option::Option<&str> {
		self.request_header_name.as_deref()
	}
}
impl std::fmt::Debug for TraefikInFlightReqSourceCriterionRequestHeaderName {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikInFlightReqSourceCriterionRequestHeaderName");
		formatter.field("request_header_name", &self.request_header_name);
		formatter.finish()
	}
}
/// See [`TraefikInFlightReqSourceCriterionRequestHeaderName`](crate::model::TraefikInFlightReqSourceCriterionRequestHeaderName)
pub mod traefik_in_flight_req_source_criterion_request_header_name {
	/// A builder for [`TraefikInFlightReqSourceCriterionRequestHeaderName`](crate::model::TraefikInFlightReqSourceCriterionRequestHeaderName)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) request_header_name: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn request_header_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.request_header_name = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_request_header_name(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.request_header_name = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikInFlightReqSourceCriterionRequestHeaderName`](crate::model::TraefikInFlightReqSourceCriterionRequestHeaderName)
		pub fn build(self) -> crate::model::TraefikInFlightReqSourceCriterionRequestHeaderName {
			crate::model::TraefikInFlightReqSourceCriterionRequestHeaderName {
				request_header_name: self.request_header_name,
			}
		}
	}
}
impl TraefikInFlightReqSourceCriterionRequestHeaderName {
	/// Creates a new builder-style object to manufacture [`TraefikInFlightReqSourceCriterionRequestHeaderName`](crate::model::TraefikInFlightReqSourceCriterionRequestHeaderName)
	pub fn builder(
	) -> crate::model::traefik_in_flight_req_source_criterion_request_header_name::Builder {
		crate::model::traefik_in_flight_req_source_criterion_request_header_name::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikIpStrategy {
	/// Unsigned 32 bit integer.
	pub depth: std::option::Option<i32>,
	#[allow(missing_docs)] // documentation missing in model
	pub exclude_i_ps: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TraefikIpStrategy {
	/// Unsigned 32 bit integer.
	pub fn depth(&self) -> std::option::Option<i32> {
		self.depth
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn exclude_i_ps(&self) -> std::option::Option<&[std::string::String]> {
		self.exclude_i_ps.as_deref()
	}
}
impl std::fmt::Debug for TraefikIpStrategy {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikIpStrategy");
		formatter.field("depth", &self.depth);
		formatter.field("exclude_i_ps", &self.exclude_i_ps);
		formatter.finish()
	}
}
/// See [`TraefikIpStrategy`](crate::model::TraefikIpStrategy)
pub mod traefik_ip_strategy {
	/// A builder for [`TraefikIpStrategy`](crate::model::TraefikIpStrategy)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) depth: std::option::Option<i32>,
		pub(crate) exclude_i_ps: std::option::Option<std::vec::Vec<std::string::String>>,
	}
	impl Builder {
		/// Unsigned 32 bit integer.
		pub fn depth(mut self, input: i32) -> Self {
			self.depth = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_depth(mut self, input: std::option::Option<i32>) -> Self {
			self.depth = input;
			self
		}
		/// Appends an item to `exclude_i_ps`.
		///
		/// To override the contents of this collection use [`set_exclude_i_ps`](Self::set_exclude_i_ps).
		///
		pub fn exclude_i_ps(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.exclude_i_ps.unwrap_or_default();
			v.push(input.into());
			self.exclude_i_ps = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_exclude_i_ps(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.exclude_i_ps = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikIpStrategy`](crate::model::TraefikIpStrategy)
		pub fn build(self) -> crate::model::TraefikIpStrategy {
			crate::model::TraefikIpStrategy {
				depth: self.depth,
				exclude_i_ps: self.exclude_i_ps,
			}
		}
	}
}
impl TraefikIpStrategy {
	/// Creates a new builder-style object to manufacture [`TraefikIpStrategy`](crate::model::TraefikIpStrategy)
	pub fn builder() -> crate::model::traefik_ip_strategy::Builder {
		crate::model::traefik_ip_strategy::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikMiddlewareRateLimit {
	/// Unsigned 32 bit integer.
	pub average: std::option::Option<i32>,
	#[allow(missing_docs)] // documentation missing in model
	pub period: std::option::Option<std::string::String>,
	/// Unsigned 32 bit integer.
	pub burst: std::option::Option<i32>,
	#[allow(missing_docs)] // documentation missing in model
	pub source_criterion: std::option::Option<crate::model::TraefikInFlightReqSourceCriterion>,
}
impl TraefikMiddlewareRateLimit {
	/// Unsigned 32 bit integer.
	pub fn average(&self) -> std::option::Option<i32> {
		self.average
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn period(&self) -> std::option::Option<&str> {
		self.period.as_deref()
	}
	/// Unsigned 32 bit integer.
	pub fn burst(&self) -> std::option::Option<i32> {
		self.burst
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn source_criterion(
		&self,
	) -> std::option::Option<&crate::model::TraefikInFlightReqSourceCriterion> {
		self.source_criterion.as_ref()
	}
}
impl std::fmt::Debug for TraefikMiddlewareRateLimit {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikMiddlewareRateLimit");
		formatter.field("average", &self.average);
		formatter.field("period", &self.period);
		formatter.field("burst", &self.burst);
		formatter.field("source_criterion", &self.source_criterion);
		formatter.finish()
	}
}
/// See [`TraefikMiddlewareRateLimit`](crate::model::TraefikMiddlewareRateLimit)
pub mod traefik_middleware_rate_limit {
	/// A builder for [`TraefikMiddlewareRateLimit`](crate::model::TraefikMiddlewareRateLimit)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) average: std::option::Option<i32>,
		pub(crate) period: std::option::Option<std::string::String>,
		pub(crate) burst: std::option::Option<i32>,
		pub(crate) source_criterion:
			std::option::Option<crate::model::TraefikInFlightReqSourceCriterion>,
	}
	impl Builder {
		/// Unsigned 32 bit integer.
		pub fn average(mut self, input: i32) -> Self {
			self.average = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_average(mut self, input: std::option::Option<i32>) -> Self {
			self.average = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn period(mut self, input: impl Into<std::string::String>) -> Self {
			self.period = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_period(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.period = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn burst(mut self, input: i32) -> Self {
			self.burst = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_burst(mut self, input: std::option::Option<i32>) -> Self {
			self.burst = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn source_criterion(
			mut self,
			input: crate::model::TraefikInFlightReqSourceCriterion,
		) -> Self {
			self.source_criterion = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_source_criterion(
			mut self,
			input: std::option::Option<crate::model::TraefikInFlightReqSourceCriterion>,
		) -> Self {
			self.source_criterion = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikMiddlewareRateLimit`](crate::model::TraefikMiddlewareRateLimit)
		pub fn build(self) -> crate::model::TraefikMiddlewareRateLimit {
			crate::model::TraefikMiddlewareRateLimit {
				average: self.average,
				period: self.period,
				burst: self.burst,
				source_criterion: self.source_criterion,
			}
		}
	}
}
impl TraefikMiddlewareRateLimit {
	/// Creates a new builder-style object to manufacture [`TraefikMiddlewareRateLimit`](crate::model::TraefikMiddlewareRateLimit)
	pub fn builder() -> crate::model::traefik_middleware_rate_limit::Builder {
		crate::model::traefik_middleware_rate_limit::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikMiddlewareAddPrefix {
	#[allow(missing_docs)] // documentation missing in model
	pub prefix: std::option::Option<std::string::String>,
}
impl TraefikMiddlewareAddPrefix {
	#[allow(missing_docs)] // documentation missing in model
	pub fn prefix(&self) -> std::option::Option<&str> {
		self.prefix.as_deref()
	}
}
impl std::fmt::Debug for TraefikMiddlewareAddPrefix {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikMiddlewareAddPrefix");
		formatter.field("prefix", &self.prefix);
		formatter.finish()
	}
}
/// See [`TraefikMiddlewareAddPrefix`](crate::model::TraefikMiddlewareAddPrefix)
pub mod traefik_middleware_add_prefix {
	/// A builder for [`TraefikMiddlewareAddPrefix`](crate::model::TraefikMiddlewareAddPrefix)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) prefix: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
			self.prefix = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.prefix = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikMiddlewareAddPrefix`](crate::model::TraefikMiddlewareAddPrefix)
		pub fn build(self) -> crate::model::TraefikMiddlewareAddPrefix {
			crate::model::TraefikMiddlewareAddPrefix {
				prefix: self.prefix,
			}
		}
	}
}
impl TraefikMiddlewareAddPrefix {
	/// Creates a new builder-style object to manufacture [`TraefikMiddlewareAddPrefix`](crate::model::TraefikMiddlewareAddPrefix)
	pub fn builder() -> crate::model::traefik_middleware_add_prefix::Builder {
		crate::model::traefik_middleware_add_prefix::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikMiddlewareStripPrefix {
	#[allow(missing_docs)] // documentation missing in model
	pub prefixes: std::option::Option<std::vec::Vec<std::string::String>>,
	#[allow(missing_docs)] // documentation missing in model
	pub force_slash: std::option::Option<bool>,
}
impl TraefikMiddlewareStripPrefix {
	#[allow(missing_docs)] // documentation missing in model
	pub fn prefixes(&self) -> std::option::Option<&[std::string::String]> {
		self.prefixes.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn force_slash(&self) -> std::option::Option<bool> {
		self.force_slash
	}
}
impl std::fmt::Debug for TraefikMiddlewareStripPrefix {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikMiddlewareStripPrefix");
		formatter.field("prefixes", &self.prefixes);
		formatter.field("force_slash", &self.force_slash);
		formatter.finish()
	}
}
/// See [`TraefikMiddlewareStripPrefix`](crate::model::TraefikMiddlewareStripPrefix)
pub mod traefik_middleware_strip_prefix {
	/// A builder for [`TraefikMiddlewareStripPrefix`](crate::model::TraefikMiddlewareStripPrefix)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) prefixes: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) force_slash: std::option::Option<bool>,
	}
	impl Builder {
		/// Appends an item to `prefixes`.
		///
		/// To override the contents of this collection use [`set_prefixes`](Self::set_prefixes).
		///
		pub fn prefixes(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.prefixes.unwrap_or_default();
			v.push(input.into());
			self.prefixes = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_prefixes(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.prefixes = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn force_slash(mut self, input: bool) -> Self {
			self.force_slash = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_force_slash(mut self, input: std::option::Option<bool>) -> Self {
			self.force_slash = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikMiddlewareStripPrefix`](crate::model::TraefikMiddlewareStripPrefix)
		pub fn build(self) -> crate::model::TraefikMiddlewareStripPrefix {
			crate::model::TraefikMiddlewareStripPrefix {
				prefixes: self.prefixes,
				force_slash: self.force_slash,
			}
		}
	}
}
impl TraefikMiddlewareStripPrefix {
	/// Creates a new builder-style object to manufacture [`TraefikMiddlewareStripPrefix`](crate::model::TraefikMiddlewareStripPrefix)
	pub fn builder() -> crate::model::traefik_middleware_strip_prefix::Builder {
		crate::model::traefik_middleware_strip_prefix::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikMiddlewareReplacePathRegex {
	#[allow(missing_docs)] // documentation missing in model
	pub regex: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub replacement: std::option::Option<std::string::String>,
}
impl TraefikMiddlewareReplacePathRegex {
	#[allow(missing_docs)] // documentation missing in model
	pub fn regex(&self) -> std::option::Option<&str> {
		self.regex.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn replacement(&self) -> std::option::Option<&str> {
		self.replacement.as_deref()
	}
}
impl std::fmt::Debug for TraefikMiddlewareReplacePathRegex {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikMiddlewareReplacePathRegex");
		formatter.field("regex", &self.regex);
		formatter.field("replacement", &self.replacement);
		formatter.finish()
	}
}
/// See [`TraefikMiddlewareReplacePathRegex`](crate::model::TraefikMiddlewareReplacePathRegex)
pub mod traefik_middleware_replace_path_regex {
	/// A builder for [`TraefikMiddlewareReplacePathRegex`](crate::model::TraefikMiddlewareReplacePathRegex)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) regex: std::option::Option<std::string::String>,
		pub(crate) replacement: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn regex(mut self, input: impl Into<std::string::String>) -> Self {
			self.regex = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_regex(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.regex = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn replacement(mut self, input: impl Into<std::string::String>) -> Self {
			self.replacement = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_replacement(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.replacement = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikMiddlewareReplacePathRegex`](crate::model::TraefikMiddlewareReplacePathRegex)
		pub fn build(self) -> crate::model::TraefikMiddlewareReplacePathRegex {
			crate::model::TraefikMiddlewareReplacePathRegex {
				regex: self.regex,
				replacement: self.replacement,
			}
		}
	}
}
impl TraefikMiddlewareReplacePathRegex {
	/// Creates a new builder-style object to manufacture [`TraefikMiddlewareReplacePathRegex`](crate::model::TraefikMiddlewareReplacePathRegex)
	pub fn builder() -> crate::model::traefik_middleware_replace_path_regex::Builder {
		crate::model::traefik_middleware_replace_path_regex::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikMiddlewareIpWhiteList {
	#[allow(missing_docs)] // documentation missing in model
	pub source_range: std::option::Option<std::vec::Vec<std::string::String>>,
	#[allow(missing_docs)] // documentation missing in model
	pub ip_strategy: std::option::Option<crate::model::TraefikIpStrategy>,
}
impl TraefikMiddlewareIpWhiteList {
	#[allow(missing_docs)] // documentation missing in model
	pub fn source_range(&self) -> std::option::Option<&[std::string::String]> {
		self.source_range.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn ip_strategy(&self) -> std::option::Option<&crate::model::TraefikIpStrategy> {
		self.ip_strategy.as_ref()
	}
}
impl std::fmt::Debug for TraefikMiddlewareIpWhiteList {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikMiddlewareIpWhiteList");
		formatter.field("source_range", &self.source_range);
		formatter.field("ip_strategy", &self.ip_strategy);
		formatter.finish()
	}
}
/// See [`TraefikMiddlewareIpWhiteList`](crate::model::TraefikMiddlewareIpWhiteList)
pub mod traefik_middleware_ip_white_list {
	/// A builder for [`TraefikMiddlewareIpWhiteList`](crate::model::TraefikMiddlewareIpWhiteList)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) source_range: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) ip_strategy: std::option::Option<crate::model::TraefikIpStrategy>,
	}
	impl Builder {
		/// Appends an item to `source_range`.
		///
		/// To override the contents of this collection use [`set_source_range`](Self::set_source_range).
		///
		pub fn source_range(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.source_range.unwrap_or_default();
			v.push(input.into());
			self.source_range = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_source_range(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.source_range = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn ip_strategy(mut self, input: crate::model::TraefikIpStrategy) -> Self {
			self.ip_strategy = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_ip_strategy(
			mut self,
			input: std::option::Option<crate::model::TraefikIpStrategy>,
		) -> Self {
			self.ip_strategy = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikMiddlewareIpWhiteList`](crate::model::TraefikMiddlewareIpWhiteList)
		pub fn build(self) -> crate::model::TraefikMiddlewareIpWhiteList {
			crate::model::TraefikMiddlewareIpWhiteList {
				source_range: self.source_range,
				ip_strategy: self.ip_strategy,
			}
		}
	}
}
impl TraefikMiddlewareIpWhiteList {
	/// Creates a new builder-style object to manufacture [`TraefikMiddlewareIpWhiteList`](crate::model::TraefikMiddlewareIpWhiteList)
	pub fn builder() -> crate::model::traefik_middleware_ip_white_list::Builder {
		crate::model::traefik_middleware_ip_white_list::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikMiddlewareChain {
	#[allow(missing_docs)] // documentation missing in model
	pub middlewares: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TraefikMiddlewareChain {
	#[allow(missing_docs)] // documentation missing in model
	pub fn middlewares(&self) -> std::option::Option<&[std::string::String]> {
		self.middlewares.as_deref()
	}
}
impl std::fmt::Debug for TraefikMiddlewareChain {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikMiddlewareChain");
		formatter.field("middlewares", &self.middlewares);
		formatter.finish()
	}
}
/// See [`TraefikMiddlewareChain`](crate::model::TraefikMiddlewareChain)
pub mod traefik_middleware_chain {
	/// A builder for [`TraefikMiddlewareChain`](crate::model::TraefikMiddlewareChain)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) middlewares: std::option::Option<std::vec::Vec<std::string::String>>,
	}
	impl Builder {
		/// Appends an item to `middlewares`.
		///
		/// To override the contents of this collection use [`set_middlewares`](Self::set_middlewares).
		///
		pub fn middlewares(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.middlewares.unwrap_or_default();
			v.push(input.into());
			self.middlewares = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_middlewares(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.middlewares = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikMiddlewareChain`](crate::model::TraefikMiddlewareChain)
		pub fn build(self) -> crate::model::TraefikMiddlewareChain {
			crate::model::TraefikMiddlewareChain {
				middlewares: self.middlewares,
			}
		}
	}
}
impl TraefikMiddlewareChain {
	/// Creates a new builder-style object to manufacture [`TraefikMiddlewareChain`](crate::model::TraefikMiddlewareChain)
	pub fn builder() -> crate::model::traefik_middleware_chain::Builder {
		crate::model::traefik_middleware_chain::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikRouter {
	#[allow(missing_docs)] // documentation missing in model
	pub entry_points: std::option::Option<std::vec::Vec<std::string::String>>,
	#[allow(missing_docs)] // documentation missing in model
	pub rule: std::option::Option<std::string::String>,
	/// Unsigned 32 bit integer.
	pub priority: std::option::Option<i32>,
	#[allow(missing_docs)] // documentation missing in model
	pub service: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub middlewares: std::option::Option<std::vec::Vec<std::string::String>>,
	#[allow(missing_docs)] // documentation missing in model
	pub tls: std::option::Option<crate::model::TraefikTls>,
}
impl TraefikRouter {
	#[allow(missing_docs)] // documentation missing in model
	pub fn entry_points(&self) -> std::option::Option<&[std::string::String]> {
		self.entry_points.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn rule(&self) -> std::option::Option<&str> {
		self.rule.as_deref()
	}
	/// Unsigned 32 bit integer.
	pub fn priority(&self) -> std::option::Option<i32> {
		self.priority
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn service(&self) -> std::option::Option<&str> {
		self.service.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn middlewares(&self) -> std::option::Option<&[std::string::String]> {
		self.middlewares.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn tls(&self) -> std::option::Option<&crate::model::TraefikTls> {
		self.tls.as_ref()
	}
}
impl std::fmt::Debug for TraefikRouter {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikRouter");
		formatter.field("entry_points", &self.entry_points);
		formatter.field("rule", &self.rule);
		formatter.field("priority", &self.priority);
		formatter.field("service", &self.service);
		formatter.field("middlewares", &self.middlewares);
		formatter.field("tls", &self.tls);
		formatter.finish()
	}
}
/// See [`TraefikRouter`](crate::model::TraefikRouter)
pub mod traefik_router {
	/// A builder for [`TraefikRouter`](crate::model::TraefikRouter)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) entry_points: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) rule: std::option::Option<std::string::String>,
		pub(crate) priority: std::option::Option<i32>,
		pub(crate) service: std::option::Option<std::string::String>,
		pub(crate) middlewares: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) tls: std::option::Option<crate::model::TraefikTls>,
	}
	impl Builder {
		/// Appends an item to `entry_points`.
		///
		/// To override the contents of this collection use [`set_entry_points`](Self::set_entry_points).
		///
		pub fn entry_points(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.entry_points.unwrap_or_default();
			v.push(input.into());
			self.entry_points = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_entry_points(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.entry_points = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn rule(mut self, input: impl Into<std::string::String>) -> Self {
			self.rule = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_rule(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.rule = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn priority(mut self, input: i32) -> Self {
			self.priority = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
			self.priority = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn service(mut self, input: impl Into<std::string::String>) -> Self {
			self.service = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_service(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.service = input;
			self
		}
		/// Appends an item to `middlewares`.
		///
		/// To override the contents of this collection use [`set_middlewares`](Self::set_middlewares).
		///
		pub fn middlewares(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.middlewares.unwrap_or_default();
			v.push(input.into());
			self.middlewares = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_middlewares(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.middlewares = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn tls(mut self, input: crate::model::TraefikTls) -> Self {
			self.tls = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_tls(mut self, input: std::option::Option<crate::model::TraefikTls>) -> Self {
			self.tls = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikRouter`](crate::model::TraefikRouter)
		pub fn build(self) -> crate::model::TraefikRouter {
			crate::model::TraefikRouter {
				entry_points: self.entry_points,
				rule: self.rule,
				priority: self.priority,
				service: self.service,
				middlewares: self.middlewares,
				tls: self.tls,
			}
		}
	}
}
impl TraefikRouter {
	/// Creates a new builder-style object to manufacture [`TraefikRouter`](crate::model::TraefikRouter)
	pub fn builder() -> crate::model::traefik_router::Builder {
		crate::model::traefik_router::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikTls {
	#[allow(missing_docs)] // documentation missing in model
	pub cert_resolver: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub domains: std::option::Option<std::vec::Vec<crate::model::TraefikTlsDomain>>,
}
impl TraefikTls {
	#[allow(missing_docs)] // documentation missing in model
	pub fn cert_resolver(&self) -> std::option::Option<&str> {
		self.cert_resolver.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn domains(&self) -> std::option::Option<&[crate::model::TraefikTlsDomain]> {
		self.domains.as_deref()
	}
}
impl std::fmt::Debug for TraefikTls {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikTls");
		formatter.field("cert_resolver", &self.cert_resolver);
		formatter.field("domains", &self.domains);
		formatter.finish()
	}
}
/// See [`TraefikTls`](crate::model::TraefikTls)
pub mod traefik_tls {
	/// A builder for [`TraefikTls`](crate::model::TraefikTls)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) cert_resolver: std::option::Option<std::string::String>,
		pub(crate) domains: std::option::Option<std::vec::Vec<crate::model::TraefikTlsDomain>>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn cert_resolver(mut self, input: impl Into<std::string::String>) -> Self {
			self.cert_resolver = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_cert_resolver(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.cert_resolver = input;
			self
		}
		/// Appends an item to `domains`.
		///
		/// To override the contents of this collection use [`set_domains`](Self::set_domains).
		///
		pub fn domains(mut self, input: crate::model::TraefikTlsDomain) -> Self {
			let mut v = self.domains.unwrap_or_default();
			v.push(input);
			self.domains = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_domains(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::TraefikTlsDomain>>,
		) -> Self {
			self.domains = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikTls`](crate::model::TraefikTls)
		pub fn build(self) -> crate::model::TraefikTls {
			crate::model::TraefikTls {
				cert_resolver: self.cert_resolver,
				domains: self.domains,
			}
		}
	}
}
impl TraefikTls {
	/// Creates a new builder-style object to manufacture [`TraefikTls`](crate::model::TraefikTls)
	pub fn builder() -> crate::model::traefik_tls::Builder {
		crate::model::traefik_tls::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikTlsDomain {
	#[allow(missing_docs)] // documentation missing in model
	pub main: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub sans: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TraefikTlsDomain {
	#[allow(missing_docs)] // documentation missing in model
	pub fn main(&self) -> std::option::Option<&str> {
		self.main.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn sans(&self) -> std::option::Option<&[std::string::String]> {
		self.sans.as_deref()
	}
}
impl std::fmt::Debug for TraefikTlsDomain {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikTlsDomain");
		formatter.field("main", &self.main);
		formatter.field("sans", &self.sans);
		formatter.finish()
	}
}
/// See [`TraefikTlsDomain`](crate::model::TraefikTlsDomain)
pub mod traefik_tls_domain {
	/// A builder for [`TraefikTlsDomain`](crate::model::TraefikTlsDomain)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) main: std::option::Option<std::string::String>,
		pub(crate) sans: std::option::Option<std::vec::Vec<std::string::String>>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn main(mut self, input: impl Into<std::string::String>) -> Self {
			self.main = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_main(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.main = input;
			self
		}
		/// Appends an item to `sans`.
		///
		/// To override the contents of this collection use [`set_sans`](Self::set_sans).
		///
		pub fn sans(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.sans.unwrap_or_default();
			v.push(input.into());
			self.sans = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_sans(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.sans = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikTlsDomain`](crate::model::TraefikTlsDomain)
		pub fn build(self) -> crate::model::TraefikTlsDomain {
			crate::model::TraefikTlsDomain {
				main: self.main,
				sans: self.sans,
			}
		}
	}
}
impl TraefikTlsDomain {
	/// Creates a new builder-style object to manufacture [`TraefikTlsDomain`](crate::model::TraefikTlsDomain)
	pub fn builder() -> crate::model::traefik_tls_domain::Builder {
		crate::model::traefik_tls_domain::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikService {
	#[allow(missing_docs)] // documentation missing in model
	pub load_balancer: std::option::Option<crate::model::TraefikLoadBalancer>,
}
impl TraefikService {
	#[allow(missing_docs)] // documentation missing in model
	pub fn load_balancer(&self) -> std::option::Option<&crate::model::TraefikLoadBalancer> {
		self.load_balancer.as_ref()
	}
}
impl std::fmt::Debug for TraefikService {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikService");
		formatter.field("load_balancer", &self.load_balancer);
		formatter.finish()
	}
}
/// See [`TraefikService`](crate::model::TraefikService)
pub mod traefik_service {
	/// A builder for [`TraefikService`](crate::model::TraefikService)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) load_balancer: std::option::Option<crate::model::TraefikLoadBalancer>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn load_balancer(mut self, input: crate::model::TraefikLoadBalancer) -> Self {
			self.load_balancer = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_load_balancer(
			mut self,
			input: std::option::Option<crate::model::TraefikLoadBalancer>,
		) -> Self {
			self.load_balancer = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikService`](crate::model::TraefikService)
		pub fn build(self) -> crate::model::TraefikService {
			crate::model::TraefikService {
				load_balancer: self.load_balancer,
			}
		}
	}
}
impl TraefikService {
	/// Creates a new builder-style object to manufacture [`TraefikService`](crate::model::TraefikService)
	pub fn builder() -> crate::model::traefik_service::Builder {
		crate::model::traefik_service::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikLoadBalancer {
	#[allow(missing_docs)] // documentation missing in model
	pub servers: std::option::Option<std::vec::Vec<crate::model::TraefikServer>>,
	#[allow(missing_docs)] // documentation missing in model
	pub sticky: std::option::Option<crate::model::TraefikLoadBalancerSticky>,
}
impl TraefikLoadBalancer {
	#[allow(missing_docs)] // documentation missing in model
	pub fn servers(&self) -> std::option::Option<&[crate::model::TraefikServer]> {
		self.servers.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn sticky(&self) -> std::option::Option<&crate::model::TraefikLoadBalancerSticky> {
		self.sticky.as_ref()
	}
}
impl std::fmt::Debug for TraefikLoadBalancer {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikLoadBalancer");
		formatter.field("servers", &self.servers);
		formatter.field("sticky", &self.sticky);
		formatter.finish()
	}
}
/// See [`TraefikLoadBalancer`](crate::model::TraefikLoadBalancer)
pub mod traefik_load_balancer {
	/// A builder for [`TraefikLoadBalancer`](crate::model::TraefikLoadBalancer)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) servers: std::option::Option<std::vec::Vec<crate::model::TraefikServer>>,
		pub(crate) sticky: std::option::Option<crate::model::TraefikLoadBalancerSticky>,
	}
	impl Builder {
		/// Appends an item to `servers`.
		///
		/// To override the contents of this collection use [`set_servers`](Self::set_servers).
		///
		pub fn servers(mut self, input: crate::model::TraefikServer) -> Self {
			let mut v = self.servers.unwrap_or_default();
			v.push(input);
			self.servers = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_servers(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::TraefikServer>>,
		) -> Self {
			self.servers = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn sticky(mut self, input: crate::model::TraefikLoadBalancerSticky) -> Self {
			self.sticky = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_sticky(
			mut self,
			input: std::option::Option<crate::model::TraefikLoadBalancerSticky>,
		) -> Self {
			self.sticky = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikLoadBalancer`](crate::model::TraefikLoadBalancer)
		pub fn build(self) -> crate::model::TraefikLoadBalancer {
			crate::model::TraefikLoadBalancer {
				servers: self.servers,
				sticky: self.sticky,
			}
		}
	}
}
impl TraefikLoadBalancer {
	/// Creates a new builder-style object to manufacture [`TraefikLoadBalancer`](crate::model::TraefikLoadBalancer)
	pub fn builder() -> crate::model::traefik_load_balancer::Builder {
		crate::model::traefik_load_balancer::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum TraefikLoadBalancerSticky {
	#[allow(missing_docs)] // documentation missing in model
	Cookie(crate::model::Unit),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl TraefikLoadBalancerSticky {
	#[allow(irrefutable_let_patterns)]
	/// Tries to convert the enum instance into [`Cookie`](crate::model::TraefikLoadBalancerSticky::Cookie), extracting the inner [`Unit`](crate::model::Unit).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_cookie(&self) -> std::result::Result<&crate::model::Unit, &Self> {
		if let TraefikLoadBalancerSticky::Cookie(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Cookie`](crate::model::TraefikLoadBalancerSticky::Cookie).
	pub fn is_cookie(&self) -> bool {
		self.as_cookie().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TraefikServer {
	#[allow(missing_docs)] // documentation missing in model
	pub url: std::option::Option<std::string::String>,
}
impl TraefikServer {
	#[allow(missing_docs)] // documentation missing in model
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
}
impl std::fmt::Debug for TraefikServer {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TraefikServer");
		formatter.field("url", &self.url);
		formatter.finish()
	}
}
/// See [`TraefikServer`](crate::model::TraefikServer)
pub mod traefik_server {
	/// A builder for [`TraefikServer`](crate::model::TraefikServer)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) url: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// Consumes the builder and constructs a [`TraefikServer`](crate::model::TraefikServer)
		pub fn build(self) -> crate::model::TraefikServer {
			crate::model::TraefikServer { url: self.url }
		}
	}
}
impl TraefikServer {
	/// Creates a new builder-style object to manufacture [`TraefikServer`](crate::model::TraefikServer)
	pub fn builder() -> crate::model::traefik_server::Builder {
		crate::model::traefik_server::Builder::default()
	}
}
