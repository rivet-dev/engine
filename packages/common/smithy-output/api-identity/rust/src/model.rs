// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Provided by watchable endpoints used in blocking loops.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct WatchResponse {
	/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
	pub index: std::option::Option<std::string::String>,
}
impl WatchResponse {
	/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
	pub fn index(&self) -> std::option::Option<&str> {
		self.index.as_deref()
	}
}
impl std::fmt::Debug for WatchResponse {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("WatchResponse");
		formatter.field("index", &self.index);
		formatter.finish()
	}
}
/// See [`WatchResponse`](crate::model::WatchResponse)
pub mod watch_response {
	/// A builder for [`WatchResponse`](crate::model::WatchResponse)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) index: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
		pub fn index(mut self, input: impl Into<std::string::String>) -> Self {
			self.index = Some(input.into());
			self
		}
		/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
		pub fn set_index(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.index = input;
			self
		}
		/// Consumes the builder and constructs a [`WatchResponse`](crate::model::WatchResponse)
		pub fn build(self) -> crate::model::WatchResponse {
			crate::model::WatchResponse { index: self.index }
		}
	}
}
impl WatchResponse {
	/// Creates a new builder-style object to manufacture [`WatchResponse`](crate::model::WatchResponse)
	pub fn builder() -> crate::model::watch_response::Builder {
		crate::model::watch_response::Builder::default()
	}
}

/// An identity handle.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdentityHandle {
	/// A universally unique identifier.
	pub identity_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
	pub account_number: std::option::Option<i32>,
	/// The URL of this identity's avatar image.
	pub avatar_url: std::option::Option<std::string::String>,
	/// Information about the identity's current status, party, and active game.
	pub presence: std::option::Option<crate::model::IdentityPresence>,
	/// A party handle.
	pub party: std::option::Option<crate::model::PartyHandle>,
	/// Whether or not this identity is registered with a linked account.
	pub is_registered: std::option::Option<bool>,
	/// External links for an identity.
	pub external: std::option::Option<crate::model::IdentityExternalLinks>,
}
impl IdentityHandle {
	/// A universally unique identifier.
	pub fn identity_id(&self) -> std::option::Option<&str> {
		self.identity_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
	pub fn account_number(&self) -> std::option::Option<i32> {
		self.account_number
	}
	/// The URL of this identity's avatar image.
	pub fn avatar_url(&self) -> std::option::Option<&str> {
		self.avatar_url.as_deref()
	}
	/// Information about the identity's current status, party, and active game.
	pub fn presence(&self) -> std::option::Option<&crate::model::IdentityPresence> {
		self.presence.as_ref()
	}
	/// A party handle.
	pub fn party(&self) -> std::option::Option<&crate::model::PartyHandle> {
		self.party.as_ref()
	}
	/// Whether or not this identity is registered with a linked account.
	pub fn is_registered(&self) -> std::option::Option<bool> {
		self.is_registered
	}
	/// External links for an identity.
	pub fn external(&self) -> std::option::Option<&crate::model::IdentityExternalLinks> {
		self.external.as_ref()
	}
}
impl std::fmt::Debug for IdentityHandle {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("IdentityHandle");
		formatter.field("identity_id", &self.identity_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("account_number", &self.account_number);
		formatter.field("avatar_url", &self.avatar_url);
		formatter.field("presence", &self.presence);
		formatter.field("party", &self.party);
		formatter.field("is_registered", &self.is_registered);
		formatter.field("external", &self.external);
		formatter.finish()
	}
}
/// See [`IdentityHandle`](crate::model::IdentityHandle)
pub mod identity_handle {
	/// A builder for [`IdentityHandle`](crate::model::IdentityHandle)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) account_number: std::option::Option<i32>,
		pub(crate) avatar_url: std::option::Option<std::string::String>,
		pub(crate) presence: std::option::Option<crate::model::IdentityPresence>,
		pub(crate) party: std::option::Option<crate::model::PartyHandle>,
		pub(crate) is_registered: std::option::Option<bool>,
		pub(crate) external: std::option::Option<crate::model::IdentityExternalLinks>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.identity_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.identity_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
		pub fn account_number(mut self, input: i32) -> Self {
			self.account_number = Some(input);
			self
		}
		/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
		pub fn set_account_number(mut self, input: std::option::Option<i32>) -> Self {
			self.account_number = input;
			self
		}
		/// The URL of this identity's avatar image.
		pub fn avatar_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.avatar_url = Some(input.into());
			self
		}
		/// The URL of this identity's avatar image.
		pub fn set_avatar_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.avatar_url = input;
			self
		}
		/// Information about the identity's current status, party, and active game.
		pub fn presence(mut self, input: crate::model::IdentityPresence) -> Self {
			self.presence = Some(input);
			self
		}
		/// Information about the identity's current status, party, and active game.
		pub fn set_presence(
			mut self,
			input: std::option::Option<crate::model::IdentityPresence>,
		) -> Self {
			self.presence = input;
			self
		}
		/// A party handle.
		pub fn party(mut self, input: crate::model::PartyHandle) -> Self {
			self.party = Some(input);
			self
		}
		/// A party handle.
		pub fn set_party(mut self, input: std::option::Option<crate::model::PartyHandle>) -> Self {
			self.party = input;
			self
		}
		/// Whether or not this identity is registered with a linked account.
		pub fn is_registered(mut self, input: bool) -> Self {
			self.is_registered = Some(input);
			self
		}
		/// Whether or not this identity is registered with a linked account.
		pub fn set_is_registered(mut self, input: std::option::Option<bool>) -> Self {
			self.is_registered = input;
			self
		}
		/// External links for an identity.
		pub fn external(mut self, input: crate::model::IdentityExternalLinks) -> Self {
			self.external = Some(input);
			self
		}
		/// External links for an identity.
		pub fn set_external(
			mut self,
			input: std::option::Option<crate::model::IdentityExternalLinks>,
		) -> Self {
			self.external = input;
			self
		}
		/// Consumes the builder and constructs a [`IdentityHandle`](crate::model::IdentityHandle)
		pub fn build(self) -> crate::model::IdentityHandle {
			crate::model::IdentityHandle {
				identity_id: self.identity_id,
				display_name: self.display_name,
				account_number: self.account_number,
				avatar_url: self.avatar_url,
				presence: self.presence,
				party: self.party,
				is_registered: self.is_registered,
				external: self.external,
			}
		}
	}
}
impl IdentityHandle {
	/// Creates a new builder-style object to manufacture [`IdentityHandle`](crate::model::IdentityHandle)
	pub fn builder() -> crate::model::identity_handle::Builder {
		crate::model::identity_handle::Builder::default()
	}
}

/// External links for an identity.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdentityExternalLinks {
	/// A link to this identity's profile page.
	pub profile: std::option::Option<std::string::String>,
	/// A link to the Rivet settings page.
	pub settings: std::option::Option<std::string::String>,
	/// A link to a chat page with the given identity.
	pub chat: std::option::Option<std::string::String>,
}
impl IdentityExternalLinks {
	/// A link to this identity's profile page.
	pub fn profile(&self) -> std::option::Option<&str> {
		self.profile.as_deref()
	}
	/// A link to the Rivet settings page.
	pub fn settings(&self) -> std::option::Option<&str> {
		self.settings.as_deref()
	}
	/// A link to a chat page with the given identity.
	pub fn chat(&self) -> std::option::Option<&str> {
		self.chat.as_deref()
	}
}
impl std::fmt::Debug for IdentityExternalLinks {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("IdentityExternalLinks");
		formatter.field("profile", &self.profile);
		formatter.field("settings", &self.settings);
		formatter.field("chat", &self.chat);
		formatter.finish()
	}
}
/// See [`IdentityExternalLinks`](crate::model::IdentityExternalLinks)
pub mod identity_external_links {
	/// A builder for [`IdentityExternalLinks`](crate::model::IdentityExternalLinks)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) profile: std::option::Option<std::string::String>,
		pub(crate) settings: std::option::Option<std::string::String>,
		pub(crate) chat: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A link to this identity's profile page.
		pub fn profile(mut self, input: impl Into<std::string::String>) -> Self {
			self.profile = Some(input.into());
			self
		}
		/// A link to this identity's profile page.
		pub fn set_profile(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.profile = input;
			self
		}
		/// A link to the Rivet settings page.
		pub fn settings(mut self, input: impl Into<std::string::String>) -> Self {
			self.settings = Some(input.into());
			self
		}
		/// A link to the Rivet settings page.
		pub fn set_settings(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.settings = input;
			self
		}
		/// A link to a chat page with the given identity.
		pub fn chat(mut self, input: impl Into<std::string::String>) -> Self {
			self.chat = Some(input.into());
			self
		}
		/// A link to a chat page with the given identity.
		pub fn set_chat(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.chat = input;
			self
		}
		/// Consumes the builder and constructs a [`IdentityExternalLinks`](crate::model::IdentityExternalLinks)
		pub fn build(self) -> crate::model::IdentityExternalLinks {
			crate::model::IdentityExternalLinks {
				profile: self.profile,
				settings: self.settings,
				chat: self.chat,
			}
		}
	}
}
impl IdentityExternalLinks {
	/// Creates a new builder-style object to manufacture [`IdentityExternalLinks`](crate::model::IdentityExternalLinks)
	pub fn builder() -> crate::model::identity_external_links::Builder {
		crate::model::identity_external_links::Builder::default()
	}
}

/// A party handle.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyHandle {
	/// A universally unique identifier.
	pub party_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
	pub activity: std::option::Option<crate::model::PartyActivity>,
	/// External links for a party.
	pub external: std::option::Option<crate::model::PartyExternalLinks>,
}
impl PartyHandle {
	/// A universally unique identifier.
	pub fn party_id(&self) -> std::option::Option<&str> {
		self.party_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
	pub fn activity(&self) -> std::option::Option<&crate::model::PartyActivity> {
		self.activity.as_ref()
	}
	/// External links for a party.
	pub fn external(&self) -> std::option::Option<&crate::model::PartyExternalLinks> {
		self.external.as_ref()
	}
}
impl std::fmt::Debug for PartyHandle {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyHandle");
		formatter.field("party_id", &self.party_id);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("activity", &self.activity);
		formatter.field("external", &self.external);
		formatter.finish()
	}
}
/// See [`PartyHandle`](crate::model::PartyHandle)
pub mod party_handle {
	/// A builder for [`PartyHandle`](crate::model::PartyHandle)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) party_id: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) activity: std::option::Option<crate::model::PartyActivity>,
		pub(crate) external: std::option::Option<crate::model::PartyExternalLinks>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn party_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.party_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_party_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.party_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
		pub fn activity(mut self, input: crate::model::PartyActivity) -> Self {
			self.activity = Some(input);
			self
		}
		/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
		pub fn set_activity(
			mut self,
			input: std::option::Option<crate::model::PartyActivity>,
		) -> Self {
			self.activity = input;
			self
		}
		/// External links for a party.
		pub fn external(mut self, input: crate::model::PartyExternalLinks) -> Self {
			self.external = Some(input);
			self
		}
		/// External links for a party.
		pub fn set_external(
			mut self,
			input: std::option::Option<crate::model::PartyExternalLinks>,
		) -> Self {
			self.external = input;
			self
		}
		/// Consumes the builder and constructs a [`PartyHandle`](crate::model::PartyHandle)
		pub fn build(self) -> crate::model::PartyHandle {
			crate::model::PartyHandle {
				party_id: self.party_id,
				create_ts: self.create_ts,
				activity: self.activity,
				external: self.external,
			}
		}
	}
}
impl PartyHandle {
	/// Creates a new builder-style object to manufacture [`PartyHandle`](crate::model::PartyHandle)
	pub fn builder() -> crate::model::party_handle::Builder {
		crate::model::party_handle::Builder::default()
	}
}

/// External links for a party.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyExternalLinks {
	/// A link to the given party's chat thread.
	pub chat: std::option::Option<std::string::String>,
}
impl PartyExternalLinks {
	/// A link to the given party's chat thread.
	pub fn chat(&self) -> std::option::Option<&str> {
		self.chat.as_deref()
	}
}
impl std::fmt::Debug for PartyExternalLinks {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyExternalLinks");
		formatter.field("chat", &self.chat);
		formatter.finish()
	}
}
/// See [`PartyExternalLinks`](crate::model::PartyExternalLinks)
pub mod party_external_links {
	/// A builder for [`PartyExternalLinks`](crate::model::PartyExternalLinks)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) chat: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A link to the given party's chat thread.
		pub fn chat(mut self, input: impl Into<std::string::String>) -> Self {
			self.chat = Some(input.into());
			self
		}
		/// A link to the given party's chat thread.
		pub fn set_chat(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.chat = input;
			self
		}
		/// Consumes the builder and constructs a [`PartyExternalLinks`](crate::model::PartyExternalLinks)
		pub fn build(self) -> crate::model::PartyExternalLinks {
			crate::model::PartyExternalLinks { chat: self.chat }
		}
	}
}
impl PartyExternalLinks {
	/// Creates a new builder-style object to manufacture [`PartyExternalLinks`](crate::model::PartyExternalLinks)
	pub fn builder() -> crate::model::party_external_links::Builder {
		crate::model::party_external_links::Builder::default()
	}
}

/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum PartyActivity {
	/// A party activity denoting that the party is idle.
	Idle(crate::model::PartyActivityIdle),
	/// A party activity denoting that the party is currently searching for a lobby.
	MatchmakerFindingLobby(crate::model::PartyActivityMatchmakerFindingLobby),
	/// A party activity denoting that the party is currently in a lobby.
	MatchmakerLobby(crate::model::PartyActivityMatchmakerLobby),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl PartyActivity {
	/// Tries to convert the enum instance into [`Idle`](crate::model::PartyActivity::Idle), extracting the inner [`PartyActivityIdle`](crate::model::PartyActivityIdle).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_idle(&self) -> std::result::Result<&crate::model::PartyActivityIdle, &Self> {
		if let PartyActivity::Idle(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Idle`](crate::model::PartyActivity::Idle).
	pub fn is_idle(&self) -> bool {
		self.as_idle().is_ok()
	}
	/// Tries to convert the enum instance into [`MatchmakerFindingLobby`](crate::model::PartyActivity::MatchmakerFindingLobby), extracting the inner [`PartyActivityMatchmakerFindingLobby`](crate::model::PartyActivityMatchmakerFindingLobby).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_matchmaker_finding_lobby(
		&self,
	) -> std::result::Result<&crate::model::PartyActivityMatchmakerFindingLobby, &Self> {
		if let PartyActivity::MatchmakerFindingLobby(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`MatchmakerFindingLobby`](crate::model::PartyActivity::MatchmakerFindingLobby).
	pub fn is_matchmaker_finding_lobby(&self) -> bool {
		self.as_matchmaker_finding_lobby().is_ok()
	}
	/// Tries to convert the enum instance into [`MatchmakerLobby`](crate::model::PartyActivity::MatchmakerLobby), extracting the inner [`PartyActivityMatchmakerLobby`](crate::model::PartyActivityMatchmakerLobby).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_matchmaker_lobby(
		&self,
	) -> std::result::Result<&crate::model::PartyActivityMatchmakerLobby, &Self> {
		if let PartyActivity::MatchmakerLobby(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`MatchmakerLobby`](crate::model::PartyActivity::MatchmakerLobby).
	pub fn is_matchmaker_lobby(&self) -> bool {
		self.as_matchmaker_lobby().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// A party activity denoting that the party is currently in a lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyActivityMatchmakerLobby {
	/// A party lobby.
	pub lobby: std::option::Option<crate::model::PartyMatchmakerLobby>,
	/// A game handle.
	pub game: std::option::Option<crate::model::GameHandle>,
}
impl PartyActivityMatchmakerLobby {
	/// A party lobby.
	pub fn lobby(&self) -> std::option::Option<&crate::model::PartyMatchmakerLobby> {
		self.lobby.as_ref()
	}
	/// A game handle.
	pub fn game(&self) -> std::option::Option<&crate::model::GameHandle> {
		self.game.as_ref()
	}
}
impl std::fmt::Debug for PartyActivityMatchmakerLobby {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyActivityMatchmakerLobby");
		formatter.field("lobby", &self.lobby);
		formatter.field("game", &self.game);
		formatter.finish()
	}
}
/// See [`PartyActivityMatchmakerLobby`](crate::model::PartyActivityMatchmakerLobby)
pub mod party_activity_matchmaker_lobby {
	/// A builder for [`PartyActivityMatchmakerLobby`](crate::model::PartyActivityMatchmakerLobby)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby: std::option::Option<crate::model::PartyMatchmakerLobby>,
		pub(crate) game: std::option::Option<crate::model::GameHandle>,
	}
	impl Builder {
		/// A party lobby.
		pub fn lobby(mut self, input: crate::model::PartyMatchmakerLobby) -> Self {
			self.lobby = Some(input);
			self
		}
		/// A party lobby.
		pub fn set_lobby(
			mut self,
			input: std::option::Option<crate::model::PartyMatchmakerLobby>,
		) -> Self {
			self.lobby = input;
			self
		}
		/// A game handle.
		pub fn game(mut self, input: crate::model::GameHandle) -> Self {
			self.game = Some(input);
			self
		}
		/// A game handle.
		pub fn set_game(mut self, input: std::option::Option<crate::model::GameHandle>) -> Self {
			self.game = input;
			self
		}
		/// Consumes the builder and constructs a [`PartyActivityMatchmakerLobby`](crate::model::PartyActivityMatchmakerLobby)
		pub fn build(self) -> crate::model::PartyActivityMatchmakerLobby {
			crate::model::PartyActivityMatchmakerLobby {
				lobby: self.lobby,
				game: self.game,
			}
		}
	}
}
impl PartyActivityMatchmakerLobby {
	/// Creates a new builder-style object to manufacture [`PartyActivityMatchmakerLobby`](crate::model::PartyActivityMatchmakerLobby)
	pub fn builder() -> crate::model::party_activity_matchmaker_lobby::Builder {
		crate::model::party_activity_matchmaker_lobby::Builder::default()
	}
}

/// A game handle.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameHandle {
	/// A universally unique identifier.
	pub game_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub name_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// The URL of this game's logo image.
	pub logo_url: std::option::Option<std::string::String>,
	/// The URL of this game's banner image.
	pub banner_url: std::option::Option<std::string::String>,
}
impl GameHandle {
	/// A universally unique identifier.
	pub fn game_id(&self) -> std::option::Option<&str> {
		self.game_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn name_id(&self) -> std::option::Option<&str> {
		self.name_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// The URL of this game's logo image.
	pub fn logo_url(&self) -> std::option::Option<&str> {
		self.logo_url.as_deref()
	}
	/// The URL of this game's banner image.
	pub fn banner_url(&self) -> std::option::Option<&str> {
		self.banner_url.as_deref()
	}
}
impl std::fmt::Debug for GameHandle {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameHandle");
		formatter.field("game_id", &self.game_id);
		formatter.field("name_id", &self.name_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("logo_url", &self.logo_url);
		formatter.field("banner_url", &self.banner_url);
		formatter.finish()
	}
}
/// See [`GameHandle`](crate::model::GameHandle)
pub mod game_handle {
	/// A builder for [`GameHandle`](crate::model::GameHandle)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_id: std::option::Option<std::string::String>,
		pub(crate) name_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) logo_url: std::option::Option<std::string::String>,
		pub(crate) banner_url: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn game_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_game_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// The URL of this game's logo image.
		pub fn logo_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.logo_url = Some(input.into());
			self
		}
		/// The URL of this game's logo image.
		pub fn set_logo_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.logo_url = input;
			self
		}
		/// The URL of this game's banner image.
		pub fn banner_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.banner_url = Some(input.into());
			self
		}
		/// The URL of this game's banner image.
		pub fn set_banner_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.banner_url = input;
			self
		}
		/// Consumes the builder and constructs a [`GameHandle`](crate::model::GameHandle)
		pub fn build(self) -> crate::model::GameHandle {
			crate::model::GameHandle {
				game_id: self.game_id,
				name_id: self.name_id,
				display_name: self.display_name,
				logo_url: self.logo_url,
				banner_url: self.banner_url,
			}
		}
	}
}
impl GameHandle {
	/// Creates a new builder-style object to manufacture [`GameHandle`](crate::model::GameHandle)
	pub fn builder() -> crate::model::game_handle::Builder {
		crate::model::game_handle::Builder::default()
	}
}

/// A party lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyMatchmakerLobby {
	/// A universally unique identifier.
	pub lobby_id: std::option::Option<std::string::String>,
}
impl PartyMatchmakerLobby {
	/// A universally unique identifier.
	pub fn lobby_id(&self) -> std::option::Option<&str> {
		self.lobby_id.as_deref()
	}
}
impl std::fmt::Debug for PartyMatchmakerLobby {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyMatchmakerLobby");
		formatter.field("lobby_id", &self.lobby_id);
		formatter.finish()
	}
}
/// See [`PartyMatchmakerLobby`](crate::model::PartyMatchmakerLobby)
pub mod party_matchmaker_lobby {
	/// A builder for [`PartyMatchmakerLobby`](crate::model::PartyMatchmakerLobby)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn lobby_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.lobby_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_lobby_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.lobby_id = input;
			self
		}
		/// Consumes the builder and constructs a [`PartyMatchmakerLobby`](crate::model::PartyMatchmakerLobby)
		pub fn build(self) -> crate::model::PartyMatchmakerLobby {
			crate::model::PartyMatchmakerLobby {
				lobby_id: self.lobby_id,
			}
		}
	}
}
impl PartyMatchmakerLobby {
	/// Creates a new builder-style object to manufacture [`PartyMatchmakerLobby`](crate::model::PartyMatchmakerLobby)
	pub fn builder() -> crate::model::party_matchmaker_lobby::Builder {
		crate::model::party_matchmaker_lobby::Builder::default()
	}
}

/// A party activity denoting that the party is currently searching for a lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyActivityMatchmakerFindingLobby {
	/// A game handle.
	pub game: std::option::Option<crate::model::GameHandle>,
}
impl PartyActivityMatchmakerFindingLobby {
	/// A game handle.
	pub fn game(&self) -> std::option::Option<&crate::model::GameHandle> {
		self.game.as_ref()
	}
}
impl std::fmt::Debug for PartyActivityMatchmakerFindingLobby {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyActivityMatchmakerFindingLobby");
		formatter.field("game", &self.game);
		formatter.finish()
	}
}
/// See [`PartyActivityMatchmakerFindingLobby`](crate::model::PartyActivityMatchmakerFindingLobby)
pub mod party_activity_matchmaker_finding_lobby {
	/// A builder for [`PartyActivityMatchmakerFindingLobby`](crate::model::PartyActivityMatchmakerFindingLobby)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game: std::option::Option<crate::model::GameHandle>,
	}
	impl Builder {
		/// A game handle.
		pub fn game(mut self, input: crate::model::GameHandle) -> Self {
			self.game = Some(input);
			self
		}
		/// A game handle.
		pub fn set_game(mut self, input: std::option::Option<crate::model::GameHandle>) -> Self {
			self.game = input;
			self
		}
		/// Consumes the builder and constructs a [`PartyActivityMatchmakerFindingLobby`](crate::model::PartyActivityMatchmakerFindingLobby)
		pub fn build(self) -> crate::model::PartyActivityMatchmakerFindingLobby {
			crate::model::PartyActivityMatchmakerFindingLobby { game: self.game }
		}
	}
}
impl PartyActivityMatchmakerFindingLobby {
	/// Creates a new builder-style object to manufacture [`PartyActivityMatchmakerFindingLobby`](crate::model::PartyActivityMatchmakerFindingLobby)
	pub fn builder() -> crate::model::party_activity_matchmaker_finding_lobby::Builder {
		crate::model::party_activity_matchmaker_finding_lobby::Builder::default()
	}
}

/// A party activity denoting that the party is idle.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyActivityIdle {}
impl std::fmt::Debug for PartyActivityIdle {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyActivityIdle");
		formatter.finish()
	}
}
/// See [`PartyActivityIdle`](crate::model::PartyActivityIdle)
pub mod party_activity_idle {
	/// A builder for [`PartyActivityIdle`](crate::model::PartyActivityIdle)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`PartyActivityIdle`](crate::model::PartyActivityIdle)
		pub fn build(self) -> crate::model::PartyActivityIdle {
			crate::model::PartyActivityIdle {}
		}
	}
}
impl PartyActivityIdle {
	/// Creates a new builder-style object to manufacture [`PartyActivityIdle`](crate::model::PartyActivityIdle)
	pub fn builder() -> crate::model::party_activity_idle::Builder {
		crate::model::party_activity_idle::Builder::default()
	}
}

/// Information about the identity's current status, party, and active game.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdentityPresence {
	/// RFC3339 timestamp.
	pub update_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// The current status of an identity. This helps players understand if another player is currently playing or has their game in the background.
	pub status: std::option::Option<crate::model::IdentityStatus>,
	/// The game an identity is currently participating in.
	pub game_activity: std::option::Option<crate::model::IdentityGameActivity>,
}
impl IdentityPresence {
	/// RFC3339 timestamp.
	pub fn update_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.update_ts.as_ref()
	}
	/// The current status of an identity. This helps players understand if another player is currently playing or has their game in the background.
	pub fn status(&self) -> std::option::Option<&crate::model::IdentityStatus> {
		self.status.as_ref()
	}
	/// The game an identity is currently participating in.
	pub fn game_activity(&self) -> std::option::Option<&crate::model::IdentityGameActivity> {
		self.game_activity.as_ref()
	}
}
impl std::fmt::Debug for IdentityPresence {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("IdentityPresence");
		formatter.field("update_ts", &self.update_ts);
		formatter.field("status", &self.status);
		formatter.field("game_activity", &self.game_activity);
		formatter.finish()
	}
}
/// See [`IdentityPresence`](crate::model::IdentityPresence)
pub mod identity_presence {
	/// A builder for [`IdentityPresence`](crate::model::IdentityPresence)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) update_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) status: std::option::Option<crate::model::IdentityStatus>,
		pub(crate) game_activity: std::option::Option<crate::model::IdentityGameActivity>,
	}
	impl Builder {
		/// RFC3339 timestamp.
		pub fn update_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.update_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_update_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.update_ts = input;
			self
		}
		/// The current status of an identity. This helps players understand if another player is currently playing or has their game in the background.
		pub fn status(mut self, input: crate::model::IdentityStatus) -> Self {
			self.status = Some(input);
			self
		}
		/// The current status of an identity. This helps players understand if another player is currently playing or has their game in the background.
		pub fn set_status(
			mut self,
			input: std::option::Option<crate::model::IdentityStatus>,
		) -> Self {
			self.status = input;
			self
		}
		/// The game an identity is currently participating in.
		pub fn game_activity(mut self, input: crate::model::IdentityGameActivity) -> Self {
			self.game_activity = Some(input);
			self
		}
		/// The game an identity is currently participating in.
		pub fn set_game_activity(
			mut self,
			input: std::option::Option<crate::model::IdentityGameActivity>,
		) -> Self {
			self.game_activity = input;
			self
		}
		/// Consumes the builder and constructs a [`IdentityPresence`](crate::model::IdentityPresence)
		pub fn build(self) -> crate::model::IdentityPresence {
			crate::model::IdentityPresence {
				update_ts: self.update_ts,
				status: self.status,
				game_activity: self.game_activity,
			}
		}
	}
}
impl IdentityPresence {
	/// Creates a new builder-style object to manufacture [`IdentityPresence`](crate::model::IdentityPresence)
	pub fn builder() -> crate::model::identity_presence::Builder {
		crate::model::identity_presence::Builder::default()
	}
}

/// The game an identity is currently participating in.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdentityGameActivity {
	/// A game handle.
	pub game: std::option::Option<crate::model::GameHandle>,
	/// A short activity message about the current game activity.
	pub message: std::option::Option<std::string::String>,
	/// JSON data seen by anyone.
	pub public_metadata: std::option::Option<aws_smithy_types::Document>,
	/// JSON data seen only by the given identity and their mutual followers.
	pub mutual_metadata: std::option::Option<aws_smithy_types::Document>,
}
impl IdentityGameActivity {
	/// A game handle.
	pub fn game(&self) -> std::option::Option<&crate::model::GameHandle> {
		self.game.as_ref()
	}
	/// A short activity message about the current game activity.
	pub fn message(&self) -> std::option::Option<&str> {
		self.message.as_deref()
	}
	/// JSON data seen by anyone.
	pub fn public_metadata(&self) -> std::option::Option<&aws_smithy_types::Document> {
		self.public_metadata.as_ref()
	}
	/// JSON data seen only by the given identity and their mutual followers.
	pub fn mutual_metadata(&self) -> std::option::Option<&aws_smithy_types::Document> {
		self.mutual_metadata.as_ref()
	}
}
impl std::fmt::Debug for IdentityGameActivity {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("IdentityGameActivity");
		formatter.field("game", &self.game);
		formatter.field("message", &self.message);
		formatter.field("public_metadata", &self.public_metadata);
		formatter.field("mutual_metadata", &self.mutual_metadata);
		formatter.finish()
	}
}
/// See [`IdentityGameActivity`](crate::model::IdentityGameActivity)
pub mod identity_game_activity {
	/// A builder for [`IdentityGameActivity`](crate::model::IdentityGameActivity)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game: std::option::Option<crate::model::GameHandle>,
		pub(crate) message: std::option::Option<std::string::String>,
		pub(crate) public_metadata: std::option::Option<aws_smithy_types::Document>,
		pub(crate) mutual_metadata: std::option::Option<aws_smithy_types::Document>,
	}
	impl Builder {
		/// A game handle.
		pub fn game(mut self, input: crate::model::GameHandle) -> Self {
			self.game = Some(input);
			self
		}
		/// A game handle.
		pub fn set_game(mut self, input: std::option::Option<crate::model::GameHandle>) -> Self {
			self.game = input;
			self
		}
		/// A short activity message about the current game activity.
		pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
			self.message = Some(input.into());
			self
		}
		/// A short activity message about the current game activity.
		pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.message = input;
			self
		}
		/// JSON data seen by anyone.
		pub fn public_metadata(mut self, input: aws_smithy_types::Document) -> Self {
			self.public_metadata = Some(input);
			self
		}
		/// JSON data seen by anyone.
		pub fn set_public_metadata(
			mut self,
			input: std::option::Option<aws_smithy_types::Document>,
		) -> Self {
			self.public_metadata = input;
			self
		}
		/// JSON data seen only by the given identity and their mutual followers.
		pub fn mutual_metadata(mut self, input: aws_smithy_types::Document) -> Self {
			self.mutual_metadata = Some(input);
			self
		}
		/// JSON data seen only by the given identity and their mutual followers.
		pub fn set_mutual_metadata(
			mut self,
			input: std::option::Option<aws_smithy_types::Document>,
		) -> Self {
			self.mutual_metadata = input;
			self
		}
		/// Consumes the builder and constructs a [`IdentityGameActivity`](crate::model::IdentityGameActivity)
		pub fn build(self) -> crate::model::IdentityGameActivity {
			crate::model::IdentityGameActivity {
				game: self.game,
				message: self.message,
				public_metadata: self.public_metadata,
				mutual_metadata: self.mutual_metadata,
			}
		}
	}
}
impl IdentityGameActivity {
	/// Creates a new builder-style object to manufacture [`IdentityGameActivity`](crate::model::IdentityGameActivity)
	pub fn builder() -> crate::model::identity_game_activity::Builder {
		crate::model::identity_game_activity::Builder::default()
	}
}

/// The current status of an identity. This helps players understand if another
/// player is currently playing or has their game in the background.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum IdentityStatus {
	#[allow(missing_docs)] // documentation missing in model
	Away,
	#[allow(missing_docs)] // documentation missing in model
	Offline,
	#[allow(missing_docs)] // documentation missing in model
	Online,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for IdentityStatus {
	fn from(s: &str) -> Self {
		match s {
			"away" => IdentityStatus::Away,
			"offline" => IdentityStatus::Offline,
			"online" => IdentityStatus::Online,
			other => IdentityStatus::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for IdentityStatus {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(IdentityStatus::from(s))
	}
}
impl IdentityStatus {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			IdentityStatus::Away => "away",
			IdentityStatus::Offline => "offline",
			IdentityStatus::Online => "online",
			IdentityStatus::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["away", "offline", "online"]
	}
}
impl AsRef<str> for IdentityStatus {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// A group summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GroupSummary {
	/// A universally unique identifier.
	pub group_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// The URL of this group's avatar image.
	pub avatar_url: std::option::Option<std::string::String>,
	/// External links for this group.
	pub external: std::option::Option<crate::model::GroupExternalLinks>,
	/// Whether or not this group is a developer.
	pub is_developer: std::option::Option<bool>,
	/// Detailed information about a profile.
	pub bio: std::option::Option<std::string::String>,
	/// Whether or not the current identity is a member of this group.
	pub is_current_identity_member: std::option::Option<bool>,
	/// The current publicity value for the given group.
	pub publicity: std::option::Option<crate::model::GroupPublicity>,
	/// Unsigned 32 bit integer.
	pub member_count: std::option::Option<i32>,
	/// A universally unique identifier.
	pub owner_identity_id: std::option::Option<std::string::String>,
}
impl GroupSummary {
	/// A universally unique identifier.
	pub fn group_id(&self) -> std::option::Option<&str> {
		self.group_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// The URL of this group's avatar image.
	pub fn avatar_url(&self) -> std::option::Option<&str> {
		self.avatar_url.as_deref()
	}
	/// External links for this group.
	pub fn external(&self) -> std::option::Option<&crate::model::GroupExternalLinks> {
		self.external.as_ref()
	}
	/// Whether or not this group is a developer.
	pub fn is_developer(&self) -> std::option::Option<bool> {
		self.is_developer
	}
	/// Detailed information about a profile.
	pub fn bio(&self) -> std::option::Option<&str> {
		self.bio.as_deref()
	}
	/// Whether or not the current identity is a member of this group.
	pub fn is_current_identity_member(&self) -> std::option::Option<bool> {
		self.is_current_identity_member
	}
	/// The current publicity value for the given group.
	pub fn publicity(&self) -> std::option::Option<&crate::model::GroupPublicity> {
		self.publicity.as_ref()
	}
	/// Unsigned 32 bit integer.
	pub fn member_count(&self) -> std::option::Option<i32> {
		self.member_count
	}
	/// A universally unique identifier.
	pub fn owner_identity_id(&self) -> std::option::Option<&str> {
		self.owner_identity_id.as_deref()
	}
}
impl std::fmt::Debug for GroupSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GroupSummary");
		formatter.field("group_id", &self.group_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("avatar_url", &self.avatar_url);
		formatter.field("external", &self.external);
		formatter.field("is_developer", &self.is_developer);
		formatter.field("bio", &self.bio);
		formatter.field(
			"is_current_identity_member",
			&self.is_current_identity_member,
		);
		formatter.field("publicity", &self.publicity);
		formatter.field("member_count", &self.member_count);
		formatter.field("owner_identity_id", &self.owner_identity_id);
		formatter.finish()
	}
}
/// See [`GroupSummary`](crate::model::GroupSummary)
pub mod group_summary {
	/// A builder for [`GroupSummary`](crate::model::GroupSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) avatar_url: std::option::Option<std::string::String>,
		pub(crate) external: std::option::Option<crate::model::GroupExternalLinks>,
		pub(crate) is_developer: std::option::Option<bool>,
		pub(crate) bio: std::option::Option<std::string::String>,
		pub(crate) is_current_identity_member: std::option::Option<bool>,
		pub(crate) publicity: std::option::Option<crate::model::GroupPublicity>,
		pub(crate) member_count: std::option::Option<i32>,
		pub(crate) owner_identity_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.group_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.group_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// The URL of this group's avatar image.
		pub fn avatar_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.avatar_url = Some(input.into());
			self
		}
		/// The URL of this group's avatar image.
		pub fn set_avatar_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.avatar_url = input;
			self
		}
		/// External links for this group.
		pub fn external(mut self, input: crate::model::GroupExternalLinks) -> Self {
			self.external = Some(input);
			self
		}
		/// External links for this group.
		pub fn set_external(
			mut self,
			input: std::option::Option<crate::model::GroupExternalLinks>,
		) -> Self {
			self.external = input;
			self
		}
		/// Whether or not this group is a developer.
		pub fn is_developer(mut self, input: bool) -> Self {
			self.is_developer = Some(input);
			self
		}
		/// Whether or not this group is a developer.
		pub fn set_is_developer(mut self, input: std::option::Option<bool>) -> Self {
			self.is_developer = input;
			self
		}
		/// Detailed information about a profile.
		pub fn bio(mut self, input: impl Into<std::string::String>) -> Self {
			self.bio = Some(input.into());
			self
		}
		/// Detailed information about a profile.
		pub fn set_bio(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.bio = input;
			self
		}
		/// Whether or not the current identity is a member of this group.
		pub fn is_current_identity_member(mut self, input: bool) -> Self {
			self.is_current_identity_member = Some(input);
			self
		}
		/// Whether or not the current identity is a member of this group.
		pub fn set_is_current_identity_member(mut self, input: std::option::Option<bool>) -> Self {
			self.is_current_identity_member = input;
			self
		}
		/// The current publicity value for the given group.
		pub fn publicity(mut self, input: crate::model::GroupPublicity) -> Self {
			self.publicity = Some(input);
			self
		}
		/// The current publicity value for the given group.
		pub fn set_publicity(
			mut self,
			input: std::option::Option<crate::model::GroupPublicity>,
		) -> Self {
			self.publicity = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn member_count(mut self, input: i32) -> Self {
			self.member_count = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_member_count(mut self, input: std::option::Option<i32>) -> Self {
			self.member_count = input;
			self
		}
		/// A universally unique identifier.
		pub fn owner_identity_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.owner_identity_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_owner_identity_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.owner_identity_id = input;
			self
		}
		/// Consumes the builder and constructs a [`GroupSummary`](crate::model::GroupSummary)
		pub fn build(self) -> crate::model::GroupSummary {
			crate::model::GroupSummary {
				group_id: self.group_id,
				display_name: self.display_name,
				avatar_url: self.avatar_url,
				external: self.external,
				is_developer: self.is_developer,
				bio: self.bio,
				is_current_identity_member: self.is_current_identity_member,
				publicity: self.publicity,
				member_count: self.member_count,
				owner_identity_id: self.owner_identity_id,
			}
		}
	}
}
impl GroupSummary {
	/// Creates a new builder-style object to manufacture [`GroupSummary`](crate::model::GroupSummary)
	pub fn builder() -> crate::model::group_summary::Builder {
		crate::model::group_summary::Builder::default()
	}
}

/// The current publicity value for the given group.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum GroupPublicity {
	#[allow(missing_docs)] // documentation missing in model
	Closed,
	#[allow(missing_docs)] // documentation missing in model
	Open,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for GroupPublicity {
	fn from(s: &str) -> Self {
		match s {
			"closed" => GroupPublicity::Closed,
			"open" => GroupPublicity::Open,
			other => GroupPublicity::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for GroupPublicity {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(GroupPublicity::from(s))
	}
}
impl GroupPublicity {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			GroupPublicity::Closed => "closed",
			GroupPublicity::Open => "open",
			GroupPublicity::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["closed", "open"]
	}
}
impl AsRef<str> for GroupPublicity {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// External links for this group.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GroupExternalLinks {
	/// A link to this group's profile page.
	pub profile: std::option::Option<std::string::String>,
	/// A link to this group's chat page.
	pub chat: std::option::Option<std::string::String>,
}
impl GroupExternalLinks {
	/// A link to this group's profile page.
	pub fn profile(&self) -> std::option::Option<&str> {
		self.profile.as_deref()
	}
	/// A link to this group's chat page.
	pub fn chat(&self) -> std::option::Option<&str> {
		self.chat.as_deref()
	}
}
impl std::fmt::Debug for GroupExternalLinks {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GroupExternalLinks");
		formatter.field("profile", &self.profile);
		formatter.field("chat", &self.chat);
		formatter.finish()
	}
}
/// See [`GroupExternalLinks`](crate::model::GroupExternalLinks)
pub mod group_external_links {
	/// A builder for [`GroupExternalLinks`](crate::model::GroupExternalLinks)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) profile: std::option::Option<std::string::String>,
		pub(crate) chat: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A link to this group's profile page.
		pub fn profile(mut self, input: impl Into<std::string::String>) -> Self {
			self.profile = Some(input.into());
			self
		}
		/// A link to this group's profile page.
		pub fn set_profile(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.profile = input;
			self
		}
		/// A link to this group's chat page.
		pub fn chat(mut self, input: impl Into<std::string::String>) -> Self {
			self.chat = Some(input.into());
			self
		}
		/// A link to this group's chat page.
		pub fn set_chat(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.chat = input;
			self
		}
		/// Consumes the builder and constructs a [`GroupExternalLinks`](crate::model::GroupExternalLinks)
		pub fn build(self) -> crate::model::GroupExternalLinks {
			crate::model::GroupExternalLinks {
				profile: self.profile,
				chat: self.chat,
			}
		}
	}
}
impl GroupExternalLinks {
	/// Creates a new builder-style object to manufacture [`GroupExternalLinks`](crate::model::GroupExternalLinks)
	pub fn builder() -> crate::model::group_external_links::Builder {
		crate::model::group_external_links::Builder::default()
	}
}

/// A party summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartySummary {
	/// A universally unique identifier.
	pub party_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
	pub activity: std::option::Option<crate::model::PartyActivity>,
	/// External links for a party.
	pub external: std::option::Option<crate::model::PartyExternalLinks>,
	#[allow(missing_docs)] // documentation missing in model
	pub publicity: std::option::Option<crate::model::PartyPublicity>,
	/// Unsigned 32 bit integer.
	pub party_size: std::option::Option<i32>,
	/// A list of party members.
	pub members: std::option::Option<std::vec::Vec<crate::model::PartyMemberSummary>>,
	/// A universally unique identifier.
	pub thread_id: std::option::Option<std::string::String>,
}
impl PartySummary {
	/// A universally unique identifier.
	pub fn party_id(&self) -> std::option::Option<&str> {
		self.party_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
	pub fn activity(&self) -> std::option::Option<&crate::model::PartyActivity> {
		self.activity.as_ref()
	}
	/// External links for a party.
	pub fn external(&self) -> std::option::Option<&crate::model::PartyExternalLinks> {
		self.external.as_ref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn publicity(&self) -> std::option::Option<&crate::model::PartyPublicity> {
		self.publicity.as_ref()
	}
	/// Unsigned 32 bit integer.
	pub fn party_size(&self) -> std::option::Option<i32> {
		self.party_size
	}
	/// A list of party members.
	pub fn members(&self) -> std::option::Option<&[crate::model::PartyMemberSummary]> {
		self.members.as_deref()
	}
	/// A universally unique identifier.
	pub fn thread_id(&self) -> std::option::Option<&str> {
		self.thread_id.as_deref()
	}
}
impl std::fmt::Debug for PartySummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartySummary");
		formatter.field("party_id", &self.party_id);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("activity", &self.activity);
		formatter.field("external", &self.external);
		formatter.field("publicity", &self.publicity);
		formatter.field("party_size", &self.party_size);
		formatter.field("members", &self.members);
		formatter.field("thread_id", &self.thread_id);
		formatter.finish()
	}
}
/// See [`PartySummary`](crate::model::PartySummary)
pub mod party_summary {
	/// A builder for [`PartySummary`](crate::model::PartySummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) party_id: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) activity: std::option::Option<crate::model::PartyActivity>,
		pub(crate) external: std::option::Option<crate::model::PartyExternalLinks>,
		pub(crate) publicity: std::option::Option<crate::model::PartyPublicity>,
		pub(crate) party_size: std::option::Option<i32>,
		pub(crate) members: std::option::Option<std::vec::Vec<crate::model::PartyMemberSummary>>,
		pub(crate) thread_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn party_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.party_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_party_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.party_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
		pub fn activity(mut self, input: crate::model::PartyActivity) -> Self {
			self.activity = Some(input);
			self
		}
		/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
		pub fn set_activity(
			mut self,
			input: std::option::Option<crate::model::PartyActivity>,
		) -> Self {
			self.activity = input;
			self
		}
		/// External links for a party.
		pub fn external(mut self, input: crate::model::PartyExternalLinks) -> Self {
			self.external = Some(input);
			self
		}
		/// External links for a party.
		pub fn set_external(
			mut self,
			input: std::option::Option<crate::model::PartyExternalLinks>,
		) -> Self {
			self.external = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn publicity(mut self, input: crate::model::PartyPublicity) -> Self {
			self.publicity = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_publicity(
			mut self,
			input: std::option::Option<crate::model::PartyPublicity>,
		) -> Self {
			self.publicity = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn party_size(mut self, input: i32) -> Self {
			self.party_size = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_party_size(mut self, input: std::option::Option<i32>) -> Self {
			self.party_size = input;
			self
		}
		/// Appends an item to `members`.
		///
		/// To override the contents of this collection use [`set_members`](Self::set_members).
		///
		/// A list of party members.
		pub fn members(mut self, input: crate::model::PartyMemberSummary) -> Self {
			let mut v = self.members.unwrap_or_default();
			v.push(input);
			self.members = Some(v);
			self
		}
		/// A list of party members.
		pub fn set_members(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::PartyMemberSummary>>,
		) -> Self {
			self.members = input;
			self
		}
		/// A universally unique identifier.
		pub fn thread_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.thread_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_thread_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.thread_id = input;
			self
		}
		/// Consumes the builder and constructs a [`PartySummary`](crate::model::PartySummary)
		pub fn build(self) -> crate::model::PartySummary {
			crate::model::PartySummary {
				party_id: self.party_id,
				create_ts: self.create_ts,
				activity: self.activity,
				external: self.external,
				publicity: self.publicity,
				party_size: self.party_size,
				members: self.members,
				thread_id: self.thread_id,
			}
		}
	}
}
impl PartySummary {
	/// Creates a new builder-style object to manufacture [`PartySummary`](crate::model::PartySummary)
	pub fn builder() -> crate::model::party_summary::Builder {
		crate::model::party_summary::Builder::default()
	}
}

/// A party member summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyMemberSummary {
	/// An identity handle.
	pub identity: std::option::Option<crate::model::IdentityHandle>,
	/// Whether or not this party member is the leader of the given party.
	pub is_leader: std::option::Option<bool>,
	/// RFC3339 timestamp.
	pub join_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// A union representing the current state of a party member. - `Inactive`: The player is not doing anything. For example, the player can be sitting in the game menu or hanging out on the hub. - It's possible for the member to be in an inactive state while the party is in a lobby; this means the player is simply observing/interacting with others in the party and not part of the matchmaking process. - `MatchmakerReady`: This means the member wants a player created for them. - Members can be in the ready state while the party is in an idle state. This means that the player will get a player created for them. - Members can be in the ready state while the party is in a lobby. This means that the player could not join the lobby because it was full or the player left the lobby unintentionally. - `MatchmakerFindingLobby`: A find request is in progress for the member. - `MatchmakerLobby`: The member is in a lobby.
	pub state: std::option::Option<crate::model::PartyMemberState>,
}
impl PartyMemberSummary {
	/// An identity handle.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.identity.as_ref()
	}
	/// Whether or not this party member is the leader of the given party.
	pub fn is_leader(&self) -> std::option::Option<bool> {
		self.is_leader
	}
	/// RFC3339 timestamp.
	pub fn join_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.join_ts.as_ref()
	}
	/// A union representing the current state of a party member. - `Inactive`: The player is not doing anything. For example, the player can be sitting in the game menu or hanging out on the hub. - It's possible for the member to be in an inactive state while the party is in a lobby; this means the player is simply observing/interacting with others in the party and not part of the matchmaking process. - `MatchmakerReady`: This means the member wants a player created for them. - Members can be in the ready state while the party is in an idle state. This means that the player will get a player created for them. - Members can be in the ready state while the party is in a lobby. This means that the player could not join the lobby because it was full or the player left the lobby unintentionally. - `MatchmakerFindingLobby`: A find request is in progress for the member. - `MatchmakerLobby`: The member is in a lobby.
	pub fn state(&self) -> std::option::Option<&crate::model::PartyMemberState> {
		self.state.as_ref()
	}
}
impl std::fmt::Debug for PartyMemberSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyMemberSummary");
		formatter.field("identity", &self.identity);
		formatter.field("is_leader", &self.is_leader);
		formatter.field("join_ts", &self.join_ts);
		formatter.field("state", &self.state);
		formatter.finish()
	}
}
/// See [`PartyMemberSummary`](crate::model::PartyMemberSummary)
pub mod party_member_summary {
	/// A builder for [`PartyMemberSummary`](crate::model::PartyMemberSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity: std::option::Option<crate::model::IdentityHandle>,
		pub(crate) is_leader: std::option::Option<bool>,
		pub(crate) join_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) state: std::option::Option<crate::model::PartyMemberState>,
	}
	impl Builder {
		/// An identity handle.
		pub fn identity(mut self, input: crate::model::IdentityHandle) -> Self {
			self.identity = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Whether or not this party member is the leader of the given party.
		pub fn is_leader(mut self, input: bool) -> Self {
			self.is_leader = Some(input);
			self
		}
		/// Whether or not this party member is the leader of the given party.
		pub fn set_is_leader(mut self, input: std::option::Option<bool>) -> Self {
			self.is_leader = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn join_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.join_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_join_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.join_ts = input;
			self
		}
		/// A union representing the current state of a party member. - `Inactive`: The player is not doing anything. For example, the player can be sitting in the game menu or hanging out on the hub. - It's possible for the member to be in an inactive state while the party is in a lobby; this means the player is simply observing/interacting with others in the party and not part of the matchmaking process. - `MatchmakerReady`: This means the member wants a player created for them. - Members can be in the ready state while the party is in an idle state. This means that the player will get a player created for them. - Members can be in the ready state while the party is in a lobby. This means that the player could not join the lobby because it was full or the player left the lobby unintentionally. - `MatchmakerFindingLobby`: A find request is in progress for the member. - `MatchmakerLobby`: The member is in a lobby.
		pub fn state(mut self, input: crate::model::PartyMemberState) -> Self {
			self.state = Some(input);
			self
		}
		/// A union representing the current state of a party member. - `Inactive`: The player is not doing anything. For example, the player can be sitting in the game menu or hanging out on the hub. - It's possible for the member to be in an inactive state while the party is in a lobby; this means the player is simply observing/interacting with others in the party and not part of the matchmaking process. - `MatchmakerReady`: This means the member wants a player created for them. - Members can be in the ready state while the party is in an idle state. This means that the player will get a player created for them. - Members can be in the ready state while the party is in a lobby. This means that the player could not join the lobby because it was full or the player left the lobby unintentionally. - `MatchmakerFindingLobby`: A find request is in progress for the member. - `MatchmakerLobby`: The member is in a lobby.
		pub fn set_state(
			mut self,
			input: std::option::Option<crate::model::PartyMemberState>,
		) -> Self {
			self.state = input;
			self
		}
		/// Consumes the builder and constructs a [`PartyMemberSummary`](crate::model::PartyMemberSummary)
		pub fn build(self) -> crate::model::PartyMemberSummary {
			crate::model::PartyMemberSummary {
				identity: self.identity,
				is_leader: self.is_leader,
				join_ts: self.join_ts,
				state: self.state,
			}
		}
	}
}
impl PartyMemberSummary {
	/// Creates a new builder-style object to manufacture [`PartyMemberSummary`](crate::model::PartyMemberSummary)
	pub fn builder() -> crate::model::party_member_summary::Builder {
		crate::model::party_member_summary::Builder::default()
	}
}

/// A union representing the current state of a party member. - `Inactive`: The player is not doing anything. For example, the player can be sitting in the game menu or hanging out on the hub. - It's possible for the member to be in an inactive state while the party is in a lobby; this means the player is simply observing/interacting with others in the party and not part of the matchmaking process. - `MatchmakerReady`: This means the member wants a player created for them. - Members can be in the ready state while the party is in an idle state. This means that the player will get a player created for them. - Members can be in the ready state while the party is in a lobby. This means that the player could not join the lobby because it was full or the player left the lobby unintentionally. - `MatchmakerFindingLobby`: A find request is in progress for the member. - `MatchmakerLobby`: The member is in a lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum PartyMemberState {
	/// A party member state denoting that the member is inactive.
	Inactive(crate::model::PartyMemberStateInactive),
	/// A party member state denoting that the member is currently searching for a lobby.
	MatchmakerFindingLobby(crate::model::PartyMemberStateMatchmakerFindingLobby),
	/// A party member state denoting that the member is in a lobby.
	MatchmakerLobby(crate::model::PartyMemberStateMatchmakerLobby),
	/// A party member state denoting that the member is currently waiting to start matchmaking.
	MatchmakerReady(crate::model::PartyMemberStateMatchmakerReady),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl PartyMemberState {
	/// Tries to convert the enum instance into [`Inactive`](crate::model::PartyMemberState::Inactive), extracting the inner [`PartyMemberStateInactive`](crate::model::PartyMemberStateInactive).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_inactive(
		&self,
	) -> std::result::Result<&crate::model::PartyMemberStateInactive, &Self> {
		if let PartyMemberState::Inactive(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Inactive`](crate::model::PartyMemberState::Inactive).
	pub fn is_inactive(&self) -> bool {
		self.as_inactive().is_ok()
	}
	/// Tries to convert the enum instance into [`MatchmakerFindingLobby`](crate::model::PartyMemberState::MatchmakerFindingLobby), extracting the inner [`PartyMemberStateMatchmakerFindingLobby`](crate::model::PartyMemberStateMatchmakerFindingLobby).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_matchmaker_finding_lobby(
		&self,
	) -> std::result::Result<&crate::model::PartyMemberStateMatchmakerFindingLobby, &Self> {
		if let PartyMemberState::MatchmakerFindingLobby(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`MatchmakerFindingLobby`](crate::model::PartyMemberState::MatchmakerFindingLobby).
	pub fn is_matchmaker_finding_lobby(&self) -> bool {
		self.as_matchmaker_finding_lobby().is_ok()
	}
	/// Tries to convert the enum instance into [`MatchmakerLobby`](crate::model::PartyMemberState::MatchmakerLobby), extracting the inner [`PartyMemberStateMatchmakerLobby`](crate::model::PartyMemberStateMatchmakerLobby).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_matchmaker_lobby(
		&self,
	) -> std::result::Result<&crate::model::PartyMemberStateMatchmakerLobby, &Self> {
		if let PartyMemberState::MatchmakerLobby(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`MatchmakerLobby`](crate::model::PartyMemberState::MatchmakerLobby).
	pub fn is_matchmaker_lobby(&self) -> bool {
		self.as_matchmaker_lobby().is_ok()
	}
	/// Tries to convert the enum instance into [`MatchmakerReady`](crate::model::PartyMemberState::MatchmakerReady), extracting the inner [`PartyMemberStateMatchmakerReady`](crate::model::PartyMemberStateMatchmakerReady).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_matchmaker_ready(
		&self,
	) -> std::result::Result<&crate::model::PartyMemberStateMatchmakerReady, &Self> {
		if let PartyMemberState::MatchmakerReady(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`MatchmakerReady`](crate::model::PartyMemberState::MatchmakerReady).
	pub fn is_matchmaker_ready(&self) -> bool {
		self.as_matchmaker_ready().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// A party member state denoting that the member is in a lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyMemberStateMatchmakerLobby {
	/// A universally unique identifier.
	pub player_id: std::option::Option<std::string::String>,
}
impl PartyMemberStateMatchmakerLobby {
	/// A universally unique identifier.
	pub fn player_id(&self) -> std::option::Option<&str> {
		self.player_id.as_deref()
	}
}
impl std::fmt::Debug for PartyMemberStateMatchmakerLobby {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyMemberStateMatchmakerLobby");
		formatter.field("player_id", &self.player_id);
		formatter.finish()
	}
}
/// See [`PartyMemberStateMatchmakerLobby`](crate::model::PartyMemberStateMatchmakerLobby)
pub mod party_member_state_matchmaker_lobby {
	/// A builder for [`PartyMemberStateMatchmakerLobby`](crate::model::PartyMemberStateMatchmakerLobby)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) player_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn player_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.player_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_player_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.player_id = input;
			self
		}
		/// Consumes the builder and constructs a [`PartyMemberStateMatchmakerLobby`](crate::model::PartyMemberStateMatchmakerLobby)
		pub fn build(self) -> crate::model::PartyMemberStateMatchmakerLobby {
			crate::model::PartyMemberStateMatchmakerLobby {
				player_id: self.player_id,
			}
		}
	}
}
impl PartyMemberStateMatchmakerLobby {
	/// Creates a new builder-style object to manufacture [`PartyMemberStateMatchmakerLobby`](crate::model::PartyMemberStateMatchmakerLobby)
	pub fn builder() -> crate::model::party_member_state_matchmaker_lobby::Builder {
		crate::model::party_member_state_matchmaker_lobby::Builder::default()
	}
}

/// A party member state denoting that the member is currently searching for a lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyMemberStateMatchmakerFindingLobby {}
impl std::fmt::Debug for PartyMemberStateMatchmakerFindingLobby {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyMemberStateMatchmakerFindingLobby");
		formatter.finish()
	}
}
/// See [`PartyMemberStateMatchmakerFindingLobby`](crate::model::PartyMemberStateMatchmakerFindingLobby)
pub mod party_member_state_matchmaker_finding_lobby {
	/// A builder for [`PartyMemberStateMatchmakerFindingLobby`](crate::model::PartyMemberStateMatchmakerFindingLobby)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`PartyMemberStateMatchmakerFindingLobby`](crate::model::PartyMemberStateMatchmakerFindingLobby)
		pub fn build(self) -> crate::model::PartyMemberStateMatchmakerFindingLobby {
			crate::model::PartyMemberStateMatchmakerFindingLobby {}
		}
	}
}
impl PartyMemberStateMatchmakerFindingLobby {
	/// Creates a new builder-style object to manufacture [`PartyMemberStateMatchmakerFindingLobby`](crate::model::PartyMemberStateMatchmakerFindingLobby)
	pub fn builder() -> crate::model::party_member_state_matchmaker_finding_lobby::Builder {
		crate::model::party_member_state_matchmaker_finding_lobby::Builder::default()
	}
}

/// A party member state denoting that the member is currently waiting to start matchmaking.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyMemberStateMatchmakerReady {}
impl std::fmt::Debug for PartyMemberStateMatchmakerReady {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyMemberStateMatchmakerReady");
		formatter.finish()
	}
}
/// See [`PartyMemberStateMatchmakerReady`](crate::model::PartyMemberStateMatchmakerReady)
pub mod party_member_state_matchmaker_ready {
	/// A builder for [`PartyMemberStateMatchmakerReady`](crate::model::PartyMemberStateMatchmakerReady)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`PartyMemberStateMatchmakerReady`](crate::model::PartyMemberStateMatchmakerReady)
		pub fn build(self) -> crate::model::PartyMemberStateMatchmakerReady {
			crate::model::PartyMemberStateMatchmakerReady {}
		}
	}
}
impl PartyMemberStateMatchmakerReady {
	/// Creates a new builder-style object to manufacture [`PartyMemberStateMatchmakerReady`](crate::model::PartyMemberStateMatchmakerReady)
	pub fn builder() -> crate::model::party_member_state_matchmaker_ready::Builder {
		crate::model::party_member_state_matchmaker_ready::Builder::default()
	}
}

/// A party member state denoting that the member is inactive.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyMemberStateInactive {}
impl std::fmt::Debug for PartyMemberStateInactive {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyMemberStateInactive");
		formatter.finish()
	}
}
/// See [`PartyMemberStateInactive`](crate::model::PartyMemberStateInactive)
pub mod party_member_state_inactive {
	/// A builder for [`PartyMemberStateInactive`](crate::model::PartyMemberStateInactive)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`PartyMemberStateInactive`](crate::model::PartyMemberStateInactive)
		pub fn build(self) -> crate::model::PartyMemberStateInactive {
			crate::model::PartyMemberStateInactive {}
		}
	}
}
impl PartyMemberStateInactive {
	/// Creates a new builder-style object to manufacture [`PartyMemberStateInactive`](crate::model::PartyMemberStateInactive)
	pub fn builder() -> crate::model::party_member_state_inactive::Builder {
		crate::model::party_member_state_inactive::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PartyPublicity {
	#[allow(missing_docs)] // documentation missing in model
	pub public: std::option::Option<crate::model::PartyPublicityLevel>,
	#[allow(missing_docs)] // documentation missing in model
	pub mutual_followers: std::option::Option<crate::model::PartyPublicityLevel>,
	#[allow(missing_docs)] // documentation missing in model
	pub groups: std::option::Option<crate::model::PartyPublicityLevel>,
}
impl PartyPublicity {
	#[allow(missing_docs)] // documentation missing in model
	pub fn public(&self) -> std::option::Option<&crate::model::PartyPublicityLevel> {
		self.public.as_ref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn mutual_followers(&self) -> std::option::Option<&crate::model::PartyPublicityLevel> {
		self.mutual_followers.as_ref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn groups(&self) -> std::option::Option<&crate::model::PartyPublicityLevel> {
		self.groups.as_ref()
	}
}
impl std::fmt::Debug for PartyPublicity {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PartyPublicity");
		formatter.field("public", &self.public);
		formatter.field("mutual_followers", &self.mutual_followers);
		formatter.field("groups", &self.groups);
		formatter.finish()
	}
}
/// See [`PartyPublicity`](crate::model::PartyPublicity)
pub mod party_publicity {
	/// A builder for [`PartyPublicity`](crate::model::PartyPublicity)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) public: std::option::Option<crate::model::PartyPublicityLevel>,
		pub(crate) mutual_followers: std::option::Option<crate::model::PartyPublicityLevel>,
		pub(crate) groups: std::option::Option<crate::model::PartyPublicityLevel>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn public(mut self, input: crate::model::PartyPublicityLevel) -> Self {
			self.public = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_public(
			mut self,
			input: std::option::Option<crate::model::PartyPublicityLevel>,
		) -> Self {
			self.public = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn mutual_followers(mut self, input: crate::model::PartyPublicityLevel) -> Self {
			self.mutual_followers = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_mutual_followers(
			mut self,
			input: std::option::Option<crate::model::PartyPublicityLevel>,
		) -> Self {
			self.mutual_followers = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn groups(mut self, input: crate::model::PartyPublicityLevel) -> Self {
			self.groups = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_groups(
			mut self,
			input: std::option::Option<crate::model::PartyPublicityLevel>,
		) -> Self {
			self.groups = input;
			self
		}
		/// Consumes the builder and constructs a [`PartyPublicity`](crate::model::PartyPublicity)
		pub fn build(self) -> crate::model::PartyPublicity {
			crate::model::PartyPublicity {
				public: self.public,
				mutual_followers: self.mutual_followers,
				groups: self.groups,
			}
		}
	}
}
impl PartyPublicity {
	/// Creates a new builder-style object to manufacture [`PartyPublicity`](crate::model::PartyPublicity)
	pub fn builder() -> crate::model::party_publicity::Builder {
		crate::model::party_publicity::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum PartyPublicityLevel {
	#[allow(missing_docs)] // documentation missing in model
	Join,
	#[allow(missing_docs)] // documentation missing in model
	None,
	#[allow(missing_docs)] // documentation missing in model
	View,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for PartyPublicityLevel {
	fn from(s: &str) -> Self {
		match s {
			"join" => PartyPublicityLevel::Join,
			"none" => PartyPublicityLevel::None,
			"view" => PartyPublicityLevel::View,
			other => PartyPublicityLevel::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for PartyPublicityLevel {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(PartyPublicityLevel::from(s))
	}
}
impl PartyPublicityLevel {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			PartyPublicityLevel::Join => "join",
			PartyPublicityLevel::None => "none",
			PartyPublicityLevel::View => "view",
			PartyPublicityLevel::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["join", "none", "view"]
	}
}
impl AsRef<str> for PartyPublicityLevel {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameSummary {
	/// A universally unique identifier.
	pub game_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub name_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// The URL of this game's logo image.
	pub logo_url: std::option::Option<std::string::String>,
	/// The URL of this game's banner image.
	pub banner_url: std::option::Option<std::string::String>,
	/// The URL to this game's website.
	pub url: std::option::Option<std::string::String>,
	/// A group handle.
	pub developer: std::option::Option<crate::model::GroupHandle>,
	/// A list of game tags.
	pub tags: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GameSummary {
	/// A universally unique identifier.
	pub fn game_id(&self) -> std::option::Option<&str> {
		self.game_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn name_id(&self) -> std::option::Option<&str> {
		self.name_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// The URL of this game's logo image.
	pub fn logo_url(&self) -> std::option::Option<&str> {
		self.logo_url.as_deref()
	}
	/// The URL of this game's banner image.
	pub fn banner_url(&self) -> std::option::Option<&str> {
		self.banner_url.as_deref()
	}
	/// The URL to this game's website.
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
	/// A group handle.
	pub fn developer(&self) -> std::option::Option<&crate::model::GroupHandle> {
		self.developer.as_ref()
	}
	/// A list of game tags.
	pub fn tags(&self) -> std::option::Option<&[std::string::String]> {
		self.tags.as_deref()
	}
}
impl std::fmt::Debug for GameSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameSummary");
		formatter.field("game_id", &self.game_id);
		formatter.field("name_id", &self.name_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("logo_url", &self.logo_url);
		formatter.field("banner_url", &self.banner_url);
		formatter.field("url", &self.url);
		formatter.field("developer", &self.developer);
		formatter.field("tags", &self.tags);
		formatter.finish()
	}
}
/// See [`GameSummary`](crate::model::GameSummary)
pub mod game_summary {
	/// A builder for [`GameSummary`](crate::model::GameSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_id: std::option::Option<std::string::String>,
		pub(crate) name_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) logo_url: std::option::Option<std::string::String>,
		pub(crate) banner_url: std::option::Option<std::string::String>,
		pub(crate) url: std::option::Option<std::string::String>,
		pub(crate) developer: std::option::Option<crate::model::GroupHandle>,
		pub(crate) tags: std::option::Option<std::vec::Vec<std::string::String>>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn game_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_game_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// The URL of this game's logo image.
		pub fn logo_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.logo_url = Some(input.into());
			self
		}
		/// The URL of this game's logo image.
		pub fn set_logo_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.logo_url = input;
			self
		}
		/// The URL of this game's banner image.
		pub fn banner_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.banner_url = Some(input.into());
			self
		}
		/// The URL of this game's banner image.
		pub fn set_banner_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.banner_url = input;
			self
		}
		/// The URL to this game's website.
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		/// The URL to this game's website.
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// A group handle.
		pub fn developer(mut self, input: crate::model::GroupHandle) -> Self {
			self.developer = Some(input);
			self
		}
		/// A group handle.
		pub fn set_developer(
			mut self,
			input: std::option::Option<crate::model::GroupHandle>,
		) -> Self {
			self.developer = input;
			self
		}
		/// Appends an item to `tags`.
		///
		/// To override the contents of this collection use [`set_tags`](Self::set_tags).
		///
		/// A list of game tags.
		pub fn tags(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.tags.unwrap_or_default();
			v.push(input.into());
			self.tags = Some(v);
			self
		}
		/// A list of game tags.
		pub fn set_tags(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.tags = input;
			self
		}
		/// Consumes the builder and constructs a [`GameSummary`](crate::model::GameSummary)
		pub fn build(self) -> crate::model::GameSummary {
			crate::model::GameSummary {
				game_id: self.game_id,
				name_id: self.name_id,
				display_name: self.display_name,
				logo_url: self.logo_url,
				banner_url: self.banner_url,
				url: self.url,
				developer: self.developer,
				tags: self.tags,
			}
		}
	}
}
impl GameSummary {
	/// Creates a new builder-style object to manufacture [`GameSummary`](crate::model::GameSummary)
	pub fn builder() -> crate::model::game_summary::Builder {
		crate::model::game_summary::Builder::default()
	}
}

/// A group handle.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GroupHandle {
	/// A universally unique identifier.
	pub group_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// The URL of this group's avatar image.
	pub avatar_url: std::option::Option<std::string::String>,
	/// External links for this group.
	pub external: std::option::Option<crate::model::GroupExternalLinks>,
	/// Whether or not this group is a developer group.
	pub is_developer: std::option::Option<bool>,
}
impl GroupHandle {
	/// A universally unique identifier.
	pub fn group_id(&self) -> std::option::Option<&str> {
		self.group_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// The URL of this group's avatar image.
	pub fn avatar_url(&self) -> std::option::Option<&str> {
		self.avatar_url.as_deref()
	}
	/// External links for this group.
	pub fn external(&self) -> std::option::Option<&crate::model::GroupExternalLinks> {
		self.external.as_ref()
	}
	/// Whether or not this group is a developer group.
	pub fn is_developer(&self) -> std::option::Option<bool> {
		self.is_developer
	}
}
impl std::fmt::Debug for GroupHandle {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GroupHandle");
		formatter.field("group_id", &self.group_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("avatar_url", &self.avatar_url);
		formatter.field("external", &self.external);
		formatter.field("is_developer", &self.is_developer);
		formatter.finish()
	}
}
/// See [`GroupHandle`](crate::model::GroupHandle)
pub mod group_handle {
	/// A builder for [`GroupHandle`](crate::model::GroupHandle)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) avatar_url: std::option::Option<std::string::String>,
		pub(crate) external: std::option::Option<crate::model::GroupExternalLinks>,
		pub(crate) is_developer: std::option::Option<bool>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.group_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.group_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// The URL of this group's avatar image.
		pub fn avatar_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.avatar_url = Some(input.into());
			self
		}
		/// The URL of this group's avatar image.
		pub fn set_avatar_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.avatar_url = input;
			self
		}
		/// External links for this group.
		pub fn external(mut self, input: crate::model::GroupExternalLinks) -> Self {
			self.external = Some(input);
			self
		}
		/// External links for this group.
		pub fn set_external(
			mut self,
			input: std::option::Option<crate::model::GroupExternalLinks>,
		) -> Self {
			self.external = input;
			self
		}
		/// Whether or not this group is a developer group.
		pub fn is_developer(mut self, input: bool) -> Self {
			self.is_developer = Some(input);
			self
		}
		/// Whether or not this group is a developer group.
		pub fn set_is_developer(mut self, input: std::option::Option<bool>) -> Self {
			self.is_developer = input;
			self
		}
		/// Consumes the builder and constructs a [`GroupHandle`](crate::model::GroupHandle)
		pub fn build(self) -> crate::model::GroupHandle {
			crate::model::GroupHandle {
				group_id: self.group_id,
				display_name: self.display_name,
				avatar_url: self.avatar_url,
				external: self.external,
				is_developer: self.is_developer,
			}
		}
	}
}
impl GroupHandle {
	/// Creates a new builder-style object to manufacture [`GroupHandle`](crate::model::GroupHandle)
	pub fn builder() -> crate::model::group_handle::Builder {
		crate::model::group_handle::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameLinkNewIdentity {
	/// See `rivet.api.identity#SetupIdentityOutput$identity_token`.
	pub identity_token: std::option::Option<std::string::String>,
	/// See `rivet.api.identity#SetupIdentityOutput$identity_token_expire_ts`.
	pub identity_token_expire_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// See `rivet.api.identity#SetupIdentityOutput$identity`.
	pub identity: std::option::Option<crate::model::IdentityProfile>,
}
impl GetGameLinkNewIdentity {
	/// See `rivet.api.identity#SetupIdentityOutput$identity_token`.
	pub fn identity_token(&self) -> std::option::Option<&str> {
		self.identity_token.as_deref()
	}
	/// See `rivet.api.identity#SetupIdentityOutput$identity_token_expire_ts`.
	pub fn identity_token_expire_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.identity_token_expire_ts.as_ref()
	}
	/// See `rivet.api.identity#SetupIdentityOutput$identity`.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityProfile> {
		self.identity.as_ref()
	}
}
impl std::fmt::Debug for GetGameLinkNewIdentity {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameLinkNewIdentity");
		formatter.field("identity_token", &"*** Sensitive Data Redacted ***");
		formatter.field("identity_token_expire_ts", &self.identity_token_expire_ts);
		formatter.field("identity", &self.identity);
		formatter.finish()
	}
}
/// See [`GetGameLinkNewIdentity`](crate::model::GetGameLinkNewIdentity)
pub mod get_game_link_new_identity {
	/// A builder for [`GetGameLinkNewIdentity`](crate::model::GetGameLinkNewIdentity)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity_token: std::option::Option<std::string::String>,
		pub(crate) identity_token_expire_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) identity: std::option::Option<crate::model::IdentityProfile>,
	}
	impl Builder {
		/// See `rivet.api.identity#SetupIdentityOutput$identity_token`.
		pub fn identity_token(mut self, input: impl Into<std::string::String>) -> Self {
			self.identity_token = Some(input.into());
			self
		}
		/// See `rivet.api.identity#SetupIdentityOutput$identity_token`.
		pub fn set_identity_token(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.identity_token = input;
			self
		}
		/// See `rivet.api.identity#SetupIdentityOutput$identity_token_expire_ts`.
		pub fn identity_token_expire_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.identity_token_expire_ts = Some(input);
			self
		}
		/// See `rivet.api.identity#SetupIdentityOutput$identity_token_expire_ts`.
		pub fn set_identity_token_expire_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.identity_token_expire_ts = input;
			self
		}
		/// See `rivet.api.identity#SetupIdentityOutput$identity`.
		pub fn identity(mut self, input: crate::model::IdentityProfile) -> Self {
			self.identity = Some(input);
			self
		}
		/// See `rivet.api.identity#SetupIdentityOutput$identity`.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityProfile>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameLinkNewIdentity`](crate::model::GetGameLinkNewIdentity)
		pub fn build(self) -> crate::model::GetGameLinkNewIdentity {
			crate::model::GetGameLinkNewIdentity {
				identity_token: self.identity_token,
				identity_token_expire_ts: self.identity_token_expire_ts,
				identity: self.identity,
			}
		}
	}
}
impl GetGameLinkNewIdentity {
	/// Creates a new builder-style object to manufacture [`GetGameLinkNewIdentity`](crate::model::GetGameLinkNewIdentity)
	pub fn builder() -> crate::model::get_game_link_new_identity::Builder {
		crate::model::get_game_link_new_identity::Builder::default()
	}
}

/// An identity profile.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdentityProfile {
	/// A universally unique identifier.
	pub identity_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
	pub account_number: std::option::Option<i32>,
	/// The URL of this identity's avatar image.
	pub avatar_url: std::option::Option<std::string::String>,
	/// Information about the identity's current status, party, and active game.
	pub presence: std::option::Option<crate::model::IdentityPresence>,
	/// A party summary.
	pub party: std::option::Option<crate::model::PartySummary>,
	/// Whether or not this identity is registered with a linked account.
	pub is_registered: std::option::Option<bool>,
	/// External links for an identity.
	pub external: std::option::Option<crate::model::IdentityExternalLinks>,
	/// Whether or not this identity is an admin.
	pub is_admin: std::option::Option<bool>,
	/// Whether or not this game user has been linked through the Rivet dashboard.
	pub is_game_linked: std::option::Option<bool>,
	/// The state of the given identity's developer status.
	pub dev_state: std::option::Option<crate::model::IdentityDevState>,
	/// Unsigned 64 bit integer.
	pub follower_count: std::option::Option<i64>,
	/// Unsigned 64 bit integer.
	pub following_count: std::option::Option<i64>,
	/// Whether or not the requestee's identity is following this identity.
	pub following: std::option::Option<bool>,
	/// Whether or not this identity following the requestee's identity.
	pub is_following_me: std::option::Option<bool>,
	/// Whether or not this identity is both following and is followed by the requestee's identity.
	pub is_mutual_following: std::option::Option<bool>,
	/// RFC3339 timestamp.
	pub join_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Detailed information about a profile.
	pub bio: std::option::Option<std::string::String>,
	/// A list of an identity's linked accounts.
	pub linked_accounts: std::option::Option<std::vec::Vec<crate::model::IdentityLinkedAccount>>,
	/// A list of groups that the given identity is in.
	pub groups: std::option::Option<std::vec::Vec<crate::model::IdentityGroup>>,
	/// A list of game statistic summaries.
	pub games: std::option::Option<std::vec::Vec<crate::model::GameStatSummary>>,
	/// Whether or not this identity is awaiting account deletion. Only visible to when the requestee is this identity.
	pub awaiting_deletion: std::option::Option<bool>,
}
impl IdentityProfile {
	/// A universally unique identifier.
	pub fn identity_id(&self) -> std::option::Option<&str> {
		self.identity_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
	pub fn account_number(&self) -> std::option::Option<i32> {
		self.account_number
	}
	/// The URL of this identity's avatar image.
	pub fn avatar_url(&self) -> std::option::Option<&str> {
		self.avatar_url.as_deref()
	}
	/// Information about the identity's current status, party, and active game.
	pub fn presence(&self) -> std::option::Option<&crate::model::IdentityPresence> {
		self.presence.as_ref()
	}
	/// A party summary.
	pub fn party(&self) -> std::option::Option<&crate::model::PartySummary> {
		self.party.as_ref()
	}
	/// Whether or not this identity is registered with a linked account.
	pub fn is_registered(&self) -> std::option::Option<bool> {
		self.is_registered
	}
	/// External links for an identity.
	pub fn external(&self) -> std::option::Option<&crate::model::IdentityExternalLinks> {
		self.external.as_ref()
	}
	/// Whether or not this identity is an admin.
	pub fn is_admin(&self) -> std::option::Option<bool> {
		self.is_admin
	}
	/// Whether or not this game user has been linked through the Rivet dashboard.
	pub fn is_game_linked(&self) -> std::option::Option<bool> {
		self.is_game_linked
	}
	/// The state of the given identity's developer status.
	pub fn dev_state(&self) -> std::option::Option<&crate::model::IdentityDevState> {
		self.dev_state.as_ref()
	}
	/// Unsigned 64 bit integer.
	pub fn follower_count(&self) -> std::option::Option<i64> {
		self.follower_count
	}
	/// Unsigned 64 bit integer.
	pub fn following_count(&self) -> std::option::Option<i64> {
		self.following_count
	}
	/// Whether or not the requestee's identity is following this identity.
	pub fn following(&self) -> std::option::Option<bool> {
		self.following
	}
	/// Whether or not this identity following the requestee's identity.
	pub fn is_following_me(&self) -> std::option::Option<bool> {
		self.is_following_me
	}
	/// Whether or not this identity is both following and is followed by the requestee's identity.
	pub fn is_mutual_following(&self) -> std::option::Option<bool> {
		self.is_mutual_following
	}
	/// RFC3339 timestamp.
	pub fn join_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.join_ts.as_ref()
	}
	/// Detailed information about a profile.
	pub fn bio(&self) -> std::option::Option<&str> {
		self.bio.as_deref()
	}
	/// A list of an identity's linked accounts.
	pub fn linked_accounts(&self) -> std::option::Option<&[crate::model::IdentityLinkedAccount]> {
		self.linked_accounts.as_deref()
	}
	/// A list of groups that the given identity is in.
	pub fn groups(&self) -> std::option::Option<&[crate::model::IdentityGroup]> {
		self.groups.as_deref()
	}
	/// A list of game statistic summaries.
	pub fn games(&self) -> std::option::Option<&[crate::model::GameStatSummary]> {
		self.games.as_deref()
	}
	/// Whether or not this identity is awaiting account deletion. Only visible to when the requestee is this identity.
	pub fn awaiting_deletion(&self) -> std::option::Option<bool> {
		self.awaiting_deletion
	}
}
impl std::fmt::Debug for IdentityProfile {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("IdentityProfile");
		formatter.field("identity_id", &self.identity_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("account_number", &self.account_number);
		formatter.field("avatar_url", &self.avatar_url);
		formatter.field("presence", &self.presence);
		formatter.field("party", &self.party);
		formatter.field("is_registered", &self.is_registered);
		formatter.field("external", &self.external);
		formatter.field("is_admin", &self.is_admin);
		formatter.field("is_game_linked", &self.is_game_linked);
		formatter.field("dev_state", &self.dev_state);
		formatter.field("follower_count", &self.follower_count);
		formatter.field("following_count", &self.following_count);
		formatter.field("following", &self.following);
		formatter.field("is_following_me", &self.is_following_me);
		formatter.field("is_mutual_following", &self.is_mutual_following);
		formatter.field("join_ts", &self.join_ts);
		formatter.field("bio", &self.bio);
		formatter.field("linked_accounts", &"*** Sensitive Data Redacted ***");
		formatter.field("groups", &self.groups);
		formatter.field("games", &self.games);
		formatter.field("awaiting_deletion", &self.awaiting_deletion);
		formatter.finish()
	}
}
/// See [`IdentityProfile`](crate::model::IdentityProfile)
pub mod identity_profile {
	/// A builder for [`IdentityProfile`](crate::model::IdentityProfile)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) account_number: std::option::Option<i32>,
		pub(crate) avatar_url: std::option::Option<std::string::String>,
		pub(crate) presence: std::option::Option<crate::model::IdentityPresence>,
		pub(crate) party: std::option::Option<crate::model::PartySummary>,
		pub(crate) is_registered: std::option::Option<bool>,
		pub(crate) external: std::option::Option<crate::model::IdentityExternalLinks>,
		pub(crate) is_admin: std::option::Option<bool>,
		pub(crate) is_game_linked: std::option::Option<bool>,
		pub(crate) dev_state: std::option::Option<crate::model::IdentityDevState>,
		pub(crate) follower_count: std::option::Option<i64>,
		pub(crate) following_count: std::option::Option<i64>,
		pub(crate) following: std::option::Option<bool>,
		pub(crate) is_following_me: std::option::Option<bool>,
		pub(crate) is_mutual_following: std::option::Option<bool>,
		pub(crate) join_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) bio: std::option::Option<std::string::String>,
		pub(crate) linked_accounts:
			std::option::Option<std::vec::Vec<crate::model::IdentityLinkedAccount>>,
		pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::IdentityGroup>>,
		pub(crate) games: std::option::Option<std::vec::Vec<crate::model::GameStatSummary>>,
		pub(crate) awaiting_deletion: std::option::Option<bool>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.identity_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.identity_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
		pub fn account_number(mut self, input: i32) -> Self {
			self.account_number = Some(input);
			self
		}
		/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
		pub fn set_account_number(mut self, input: std::option::Option<i32>) -> Self {
			self.account_number = input;
			self
		}
		/// The URL of this identity's avatar image.
		pub fn avatar_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.avatar_url = Some(input.into());
			self
		}
		/// The URL of this identity's avatar image.
		pub fn set_avatar_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.avatar_url = input;
			self
		}
		/// Information about the identity's current status, party, and active game.
		pub fn presence(mut self, input: crate::model::IdentityPresence) -> Self {
			self.presence = Some(input);
			self
		}
		/// Information about the identity's current status, party, and active game.
		pub fn set_presence(
			mut self,
			input: std::option::Option<crate::model::IdentityPresence>,
		) -> Self {
			self.presence = input;
			self
		}
		/// A party summary.
		pub fn party(mut self, input: crate::model::PartySummary) -> Self {
			self.party = Some(input);
			self
		}
		/// A party summary.
		pub fn set_party(mut self, input: std::option::Option<crate::model::PartySummary>) -> Self {
			self.party = input;
			self
		}
		/// Whether or not this identity is registered with a linked account.
		pub fn is_registered(mut self, input: bool) -> Self {
			self.is_registered = Some(input);
			self
		}
		/// Whether or not this identity is registered with a linked account.
		pub fn set_is_registered(mut self, input: std::option::Option<bool>) -> Self {
			self.is_registered = input;
			self
		}
		/// External links for an identity.
		pub fn external(mut self, input: crate::model::IdentityExternalLinks) -> Self {
			self.external = Some(input);
			self
		}
		/// External links for an identity.
		pub fn set_external(
			mut self,
			input: std::option::Option<crate::model::IdentityExternalLinks>,
		) -> Self {
			self.external = input;
			self
		}
		/// Whether or not this identity is an admin.
		pub fn is_admin(mut self, input: bool) -> Self {
			self.is_admin = Some(input);
			self
		}
		/// Whether or not this identity is an admin.
		pub fn set_is_admin(mut self, input: std::option::Option<bool>) -> Self {
			self.is_admin = input;
			self
		}
		/// Whether or not this game user has been linked through the Rivet dashboard.
		pub fn is_game_linked(mut self, input: bool) -> Self {
			self.is_game_linked = Some(input);
			self
		}
		/// Whether or not this game user has been linked through the Rivet dashboard.
		pub fn set_is_game_linked(mut self, input: std::option::Option<bool>) -> Self {
			self.is_game_linked = input;
			self
		}
		/// The state of the given identity's developer status.
		pub fn dev_state(mut self, input: crate::model::IdentityDevState) -> Self {
			self.dev_state = Some(input);
			self
		}
		/// The state of the given identity's developer status.
		pub fn set_dev_state(
			mut self,
			input: std::option::Option<crate::model::IdentityDevState>,
		) -> Self {
			self.dev_state = input;
			self
		}
		/// Unsigned 64 bit integer.
		pub fn follower_count(mut self, input: i64) -> Self {
			self.follower_count = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_follower_count(mut self, input: std::option::Option<i64>) -> Self {
			self.follower_count = input;
			self
		}
		/// Unsigned 64 bit integer.
		pub fn following_count(mut self, input: i64) -> Self {
			self.following_count = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_following_count(mut self, input: std::option::Option<i64>) -> Self {
			self.following_count = input;
			self
		}
		/// Whether or not the requestee's identity is following this identity.
		pub fn following(mut self, input: bool) -> Self {
			self.following = Some(input);
			self
		}
		/// Whether or not the requestee's identity is following this identity.
		pub fn set_following(mut self, input: std::option::Option<bool>) -> Self {
			self.following = input;
			self
		}
		/// Whether or not this identity following the requestee's identity.
		pub fn is_following_me(mut self, input: bool) -> Self {
			self.is_following_me = Some(input);
			self
		}
		/// Whether or not this identity following the requestee's identity.
		pub fn set_is_following_me(mut self, input: std::option::Option<bool>) -> Self {
			self.is_following_me = input;
			self
		}
		/// Whether or not this identity is both following and is followed by the requestee's identity.
		pub fn is_mutual_following(mut self, input: bool) -> Self {
			self.is_mutual_following = Some(input);
			self
		}
		/// Whether or not this identity is both following and is followed by the requestee's identity.
		pub fn set_is_mutual_following(mut self, input: std::option::Option<bool>) -> Self {
			self.is_mutual_following = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn join_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.join_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_join_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.join_ts = input;
			self
		}
		/// Detailed information about a profile.
		pub fn bio(mut self, input: impl Into<std::string::String>) -> Self {
			self.bio = Some(input.into());
			self
		}
		/// Detailed information about a profile.
		pub fn set_bio(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.bio = input;
			self
		}
		/// Appends an item to `linked_accounts`.
		///
		/// To override the contents of this collection use [`set_linked_accounts`](Self::set_linked_accounts).
		///
		/// A list of an identity's linked accounts.
		pub fn linked_accounts(mut self, input: crate::model::IdentityLinkedAccount) -> Self {
			let mut v = self.linked_accounts.unwrap_or_default();
			v.push(input);
			self.linked_accounts = Some(v);
			self
		}
		/// A list of an identity's linked accounts.
		pub fn set_linked_accounts(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentityLinkedAccount>>,
		) -> Self {
			self.linked_accounts = input;
			self
		}
		/// Appends an item to `groups`.
		///
		/// To override the contents of this collection use [`set_groups`](Self::set_groups).
		///
		/// A list of groups that the given identity is in.
		pub fn groups(mut self, input: crate::model::IdentityGroup) -> Self {
			let mut v = self.groups.unwrap_or_default();
			v.push(input);
			self.groups = Some(v);
			self
		}
		/// A list of groups that the given identity is in.
		pub fn set_groups(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentityGroup>>,
		) -> Self {
			self.groups = input;
			self
		}
		/// Appends an item to `games`.
		///
		/// To override the contents of this collection use [`set_games`](Self::set_games).
		///
		/// A list of game statistic summaries.
		pub fn games(mut self, input: crate::model::GameStatSummary) -> Self {
			let mut v = self.games.unwrap_or_default();
			v.push(input);
			self.games = Some(v);
			self
		}
		/// A list of game statistic summaries.
		pub fn set_games(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GameStatSummary>>,
		) -> Self {
			self.games = input;
			self
		}
		/// Whether or not this identity is awaiting account deletion. Only visible to when the requestee is this identity.
		pub fn awaiting_deletion(mut self, input: bool) -> Self {
			self.awaiting_deletion = Some(input);
			self
		}
		/// Whether or not this identity is awaiting account deletion. Only visible to when the requestee is this identity.
		pub fn set_awaiting_deletion(mut self, input: std::option::Option<bool>) -> Self {
			self.awaiting_deletion = input;
			self
		}
		/// Consumes the builder and constructs a [`IdentityProfile`](crate::model::IdentityProfile)
		pub fn build(self) -> crate::model::IdentityProfile {
			crate::model::IdentityProfile {
				identity_id: self.identity_id,
				display_name: self.display_name,
				account_number: self.account_number,
				avatar_url: self.avatar_url,
				presence: self.presence,
				party: self.party,
				is_registered: self.is_registered,
				external: self.external,
				is_admin: self.is_admin,
				is_game_linked: self.is_game_linked,
				dev_state: self.dev_state,
				follower_count: self.follower_count,
				following_count: self.following_count,
				following: self.following,
				is_following_me: self.is_following_me,
				is_mutual_following: self.is_mutual_following,
				join_ts: self.join_ts,
				bio: self.bio,
				linked_accounts: self.linked_accounts,
				groups: self.groups,
				games: self.games,
				awaiting_deletion: self.awaiting_deletion,
			}
		}
	}
}
impl IdentityProfile {
	/// Creates a new builder-style object to manufacture [`IdentityProfile`](crate::model::IdentityProfile)
	pub fn builder() -> crate::model::identity_profile::Builder {
		crate::model::identity_profile::Builder::default()
	}
}

/// A game statistic summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameStatSummary {
	/// A game handle.
	pub game: std::option::Option<crate::model::GameHandle>,
	/// A list of game statistics.
	pub stats: std::option::Option<std::vec::Vec<crate::model::GameStat>>,
}
impl GameStatSummary {
	/// A game handle.
	pub fn game(&self) -> std::option::Option<&crate::model::GameHandle> {
		self.game.as_ref()
	}
	/// A list of game statistics.
	pub fn stats(&self) -> std::option::Option<&[crate::model::GameStat]> {
		self.stats.as_deref()
	}
}
impl std::fmt::Debug for GameStatSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameStatSummary");
		formatter.field("game", &self.game);
		formatter.field("stats", &self.stats);
		formatter.finish()
	}
}
/// See [`GameStatSummary`](crate::model::GameStatSummary)
pub mod game_stat_summary {
	/// A builder for [`GameStatSummary`](crate::model::GameStatSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game: std::option::Option<crate::model::GameHandle>,
		pub(crate) stats: std::option::Option<std::vec::Vec<crate::model::GameStat>>,
	}
	impl Builder {
		/// A game handle.
		pub fn game(mut self, input: crate::model::GameHandle) -> Self {
			self.game = Some(input);
			self
		}
		/// A game handle.
		pub fn set_game(mut self, input: std::option::Option<crate::model::GameHandle>) -> Self {
			self.game = input;
			self
		}
		/// Appends an item to `stats`.
		///
		/// To override the contents of this collection use [`set_stats`](Self::set_stats).
		///
		/// A list of game statistics.
		pub fn stats(mut self, input: crate::model::GameStat) -> Self {
			let mut v = self.stats.unwrap_or_default();
			v.push(input);
			self.stats = Some(v);
			self
		}
		/// A list of game statistics.
		pub fn set_stats(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GameStat>>,
		) -> Self {
			self.stats = input;
			self
		}
		/// Consumes the builder and constructs a [`GameStatSummary`](crate::model::GameStatSummary)
		pub fn build(self) -> crate::model::GameStatSummary {
			crate::model::GameStatSummary {
				game: self.game,
				stats: self.stats,
			}
		}
	}
}
impl GameStatSummary {
	/// Creates a new builder-style object to manufacture [`GameStatSummary`](crate::model::GameStatSummary)
	pub fn builder() -> crate::model::game_stat_summary::Builder {
		crate::model::game_stat_summary::Builder::default()
	}
}

/// A game statistic.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameStat {
	/// A game statistic config.
	pub config: std::option::Option<crate::model::GameStatConfig>,
	/// A single overall value of the given statistic.
	pub overall_value: std::option::Option<f32>,
}
impl GameStat {
	/// A game statistic config.
	pub fn config(&self) -> std::option::Option<&crate::model::GameStatConfig> {
		self.config.as_ref()
	}
	/// A single overall value of the given statistic.
	pub fn overall_value(&self) -> std::option::Option<f32> {
		self.overall_value
	}
}
impl std::fmt::Debug for GameStat {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameStat");
		formatter.field("config", &self.config);
		formatter.field("overall_value", &self.overall_value);
		formatter.finish()
	}
}
/// See [`GameStat`](crate::model::GameStat)
pub mod game_stat {
	/// A builder for [`GameStat`](crate::model::GameStat)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) config: std::option::Option<crate::model::GameStatConfig>,
		pub(crate) overall_value: std::option::Option<f32>,
	}
	impl Builder {
		/// A game statistic config.
		pub fn config(mut self, input: crate::model::GameStatConfig) -> Self {
			self.config = Some(input);
			self
		}
		/// A game statistic config.
		pub fn set_config(
			mut self,
			input: std::option::Option<crate::model::GameStatConfig>,
		) -> Self {
			self.config = input;
			self
		}
		/// A single overall value of the given statistic.
		pub fn overall_value(mut self, input: f32) -> Self {
			self.overall_value = Some(input);
			self
		}
		/// A single overall value of the given statistic.
		pub fn set_overall_value(mut self, input: std::option::Option<f32>) -> Self {
			self.overall_value = input;
			self
		}
		/// Consumes the builder and constructs a [`GameStat`](crate::model::GameStat)
		pub fn build(self) -> crate::model::GameStat {
			crate::model::GameStat {
				config: self.config,
				overall_value: self.overall_value,
			}
		}
	}
}
impl GameStat {
	/// Creates a new builder-style object to manufacture [`GameStat`](crate::model::GameStat)
	pub fn builder() -> crate::model::game_stat::Builder {
		crate::model::game_stat::Builder::default()
	}
}

/// A game statistic config.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameStatConfig {
	/// A universally unique identifier.
	pub record_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub icon_id: std::option::Option<std::string::String>,
	/// A value denoting the format method of a game statistic.
	pub format: std::option::Option<crate::model::GameStatFormatMethod>,
	/// A value denoting the aggregation method of a game statistic.
	pub aggregation: std::option::Option<crate::model::GameStatAggregationMethod>,
	/// A value denoting the sorting method of a game statistic.
	pub sorting: std::option::Option<crate::model::GameStatSortingMethod>,
	/// Unsigned 32 bit integer.
	pub priority: std::option::Option<i32>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// A string appended to the end of a singular game statistic's value. Example: 1 **dollar**.
	pub postfix_singular: std::option::Option<std::string::String>,
	/// A string appended to the end of a game statistic's value that is not exactly 1. Example: 45 **dollars**.
	pub postfix_plural: std::option::Option<std::string::String>,
	/// A string appended to the beginning of a singular game statistic's value. Example: **value** 1.
	pub prefix_singular: std::option::Option<std::string::String>,
	/// A string prepended to the beginning of a game statistic's value that is not exactly 1. Example: **values** 45.
	pub prefix_plural: std::option::Option<std::string::String>,
}
impl GameStatConfig {
	/// A universally unique identifier.
	pub fn record_id(&self) -> std::option::Option<&str> {
		self.record_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn icon_id(&self) -> std::option::Option<&str> {
		self.icon_id.as_deref()
	}
	/// A value denoting the format method of a game statistic.
	pub fn format(&self) -> std::option::Option<&crate::model::GameStatFormatMethod> {
		self.format.as_ref()
	}
	/// A value denoting the aggregation method of a game statistic.
	pub fn aggregation(&self) -> std::option::Option<&crate::model::GameStatAggregationMethod> {
		self.aggregation.as_ref()
	}
	/// A value denoting the sorting method of a game statistic.
	pub fn sorting(&self) -> std::option::Option<&crate::model::GameStatSortingMethod> {
		self.sorting.as_ref()
	}
	/// Unsigned 32 bit integer.
	pub fn priority(&self) -> std::option::Option<i32> {
		self.priority
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// A string appended to the end of a singular game statistic's value. Example: 1 **dollar**.
	pub fn postfix_singular(&self) -> std::option::Option<&str> {
		self.postfix_singular.as_deref()
	}
	/// A string appended to the end of a game statistic's value that is not exactly 1. Example: 45 **dollars**.
	pub fn postfix_plural(&self) -> std::option::Option<&str> {
		self.postfix_plural.as_deref()
	}
	/// A string appended to the beginning of a singular game statistic's value. Example: **value** 1.
	pub fn prefix_singular(&self) -> std::option::Option<&str> {
		self.prefix_singular.as_deref()
	}
	/// A string prepended to the beginning of a game statistic's value that is not exactly 1. Example: **values** 45.
	pub fn prefix_plural(&self) -> std::option::Option<&str> {
		self.prefix_plural.as_deref()
	}
}
impl std::fmt::Debug for GameStatConfig {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameStatConfig");
		formatter.field("record_id", &self.record_id);
		formatter.field("icon_id", &self.icon_id);
		formatter.field("format", &self.format);
		formatter.field("aggregation", &self.aggregation);
		formatter.field("sorting", &self.sorting);
		formatter.field("priority", &self.priority);
		formatter.field("display_name", &self.display_name);
		formatter.field("postfix_singular", &self.postfix_singular);
		formatter.field("postfix_plural", &self.postfix_plural);
		formatter.field("prefix_singular", &self.prefix_singular);
		formatter.field("prefix_plural", &self.prefix_plural);
		formatter.finish()
	}
}
/// See [`GameStatConfig`](crate::model::GameStatConfig)
pub mod game_stat_config {
	/// A builder for [`GameStatConfig`](crate::model::GameStatConfig)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) record_id: std::option::Option<std::string::String>,
		pub(crate) icon_id: std::option::Option<std::string::String>,
		pub(crate) format: std::option::Option<crate::model::GameStatFormatMethod>,
		pub(crate) aggregation: std::option::Option<crate::model::GameStatAggregationMethod>,
		pub(crate) sorting: std::option::Option<crate::model::GameStatSortingMethod>,
		pub(crate) priority: std::option::Option<i32>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) postfix_singular: std::option::Option<std::string::String>,
		pub(crate) postfix_plural: std::option::Option<std::string::String>,
		pub(crate) prefix_singular: std::option::Option<std::string::String>,
		pub(crate) prefix_plural: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn record_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.record_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_record_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.record_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn icon_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.icon_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_icon_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.icon_id = input;
			self
		}
		/// A value denoting the format method of a game statistic.
		pub fn format(mut self, input: crate::model::GameStatFormatMethod) -> Self {
			self.format = Some(input);
			self
		}
		/// A value denoting the format method of a game statistic.
		pub fn set_format(
			mut self,
			input: std::option::Option<crate::model::GameStatFormatMethod>,
		) -> Self {
			self.format = input;
			self
		}
		/// A value denoting the aggregation method of a game statistic.
		pub fn aggregation(mut self, input: crate::model::GameStatAggregationMethod) -> Self {
			self.aggregation = Some(input);
			self
		}
		/// A value denoting the aggregation method of a game statistic.
		pub fn set_aggregation(
			mut self,
			input: std::option::Option<crate::model::GameStatAggregationMethod>,
		) -> Self {
			self.aggregation = input;
			self
		}
		/// A value denoting the sorting method of a game statistic.
		pub fn sorting(mut self, input: crate::model::GameStatSortingMethod) -> Self {
			self.sorting = Some(input);
			self
		}
		/// A value denoting the sorting method of a game statistic.
		pub fn set_sorting(
			mut self,
			input: std::option::Option<crate::model::GameStatSortingMethod>,
		) -> Self {
			self.sorting = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn priority(mut self, input: i32) -> Self {
			self.priority = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
			self.priority = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// A string appended to the end of a singular game statistic's value. Example: 1 **dollar**.
		pub fn postfix_singular(mut self, input: impl Into<std::string::String>) -> Self {
			self.postfix_singular = Some(input.into());
			self
		}
		/// A string appended to the end of a singular game statistic's value. Example: 1 **dollar**.
		pub fn set_postfix_singular(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.postfix_singular = input;
			self
		}
		/// A string appended to the end of a game statistic's value that is not exactly 1. Example: 45 **dollars**.
		pub fn postfix_plural(mut self, input: impl Into<std::string::String>) -> Self {
			self.postfix_plural = Some(input.into());
			self
		}
		/// A string appended to the end of a game statistic's value that is not exactly 1. Example: 45 **dollars**.
		pub fn set_postfix_plural(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.postfix_plural = input;
			self
		}
		/// A string appended to the beginning of a singular game statistic's value. Example: **value** 1.
		pub fn prefix_singular(mut self, input: impl Into<std::string::String>) -> Self {
			self.prefix_singular = Some(input.into());
			self
		}
		/// A string appended to the beginning of a singular game statistic's value. Example: **value** 1.
		pub fn set_prefix_singular(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.prefix_singular = input;
			self
		}
		/// A string prepended to the beginning of a game statistic's value that is not exactly 1. Example: **values** 45.
		pub fn prefix_plural(mut self, input: impl Into<std::string::String>) -> Self {
			self.prefix_plural = Some(input.into());
			self
		}
		/// A string prepended to the beginning of a game statistic's value that is not exactly 1. Example: **values** 45.
		pub fn set_prefix_plural(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.prefix_plural = input;
			self
		}
		/// Consumes the builder and constructs a [`GameStatConfig`](crate::model::GameStatConfig)
		pub fn build(self) -> crate::model::GameStatConfig {
			crate::model::GameStatConfig {
				record_id: self.record_id,
				icon_id: self.icon_id,
				format: self.format,
				aggregation: self.aggregation,
				sorting: self.sorting,
				priority: self.priority,
				display_name: self.display_name,
				postfix_singular: self.postfix_singular,
				postfix_plural: self.postfix_plural,
				prefix_singular: self.prefix_singular,
				prefix_plural: self.prefix_plural,
			}
		}
	}
}
impl GameStatConfig {
	/// Creates a new builder-style object to manufacture [`GameStatConfig`](crate::model::GameStatConfig)
	pub fn builder() -> crate::model::game_stat_config::Builder {
		crate::model::game_stat_config::Builder::default()
	}
}

/// A value denoting the sorting method of a game statistic.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum GameStatSortingMethod {
	/// Ascending sorting.
	Asc,
	/// Descending sorting.
	Desc,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for GameStatSortingMethod {
	fn from(s: &str) -> Self {
		match s {
			"asc" => GameStatSortingMethod::Asc,
			"desc" => GameStatSortingMethod::Desc,
			other => GameStatSortingMethod::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for GameStatSortingMethod {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(GameStatSortingMethod::from(s))
	}
}
impl GameStatSortingMethod {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			GameStatSortingMethod::Asc => "asc",
			GameStatSortingMethod::Desc => "desc",
			GameStatSortingMethod::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["asc", "desc"]
	}
}
impl AsRef<str> for GameStatSortingMethod {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// A value denoting the aggregation method of a game statistic.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum GameStatAggregationMethod {
	/// Average aggergation.
	Average,
	/// Maximum value aggregation.
	Max,
	/// Minimum value aggregation.
	Min,
	/// Summation aggregation.
	Sum,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for GameStatAggregationMethod {
	fn from(s: &str) -> Self {
		match s {
			"average" => GameStatAggregationMethod::Average,
			"max" => GameStatAggregationMethod::Max,
			"min" => GameStatAggregationMethod::Min,
			"sum" => GameStatAggregationMethod::Sum,
			other => GameStatAggregationMethod::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for GameStatAggregationMethod {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(GameStatAggregationMethod::from(s))
	}
}
impl GameStatAggregationMethod {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			GameStatAggregationMethod::Average => "average",
			GameStatAggregationMethod::Max => "max",
			GameStatAggregationMethod::Min => "min",
			GameStatAggregationMethod::Sum => "sum",
			GameStatAggregationMethod::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["average", "max", "min", "sum"]
	}
}
impl AsRef<str> for GameStatAggregationMethod {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// A value denoting the format method of a game statistic.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum GameStatFormatMethod {
	/// A duration with hundredth-second precision (1d 2h 45m 21.46s).
	DurationHundredthSecond,
	/// A duration with minute precision (1d 2h 45m).
	DurationMinute,
	/// A duration with second precision (1d 2h 45m 21s).
	DuractionSecond,
	/// A float with 1 decimal (1,234.5).
	Float1,
	/// A float with 2 decimals (1,234.56).
	Float2,
	/// A float with 3 decimals (1,234.567).
	Float3,
	/// An integer with no decimals (1,234).
	Integer,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for GameStatFormatMethod {
	fn from(s: &str) -> Self {
		match s {
			"duration_hundredth_second" => GameStatFormatMethod::DurationHundredthSecond,
			"duration_minute" => GameStatFormatMethod::DurationMinute,
			"duration_second" => GameStatFormatMethod::DuractionSecond,
			"float_1" => GameStatFormatMethod::Float1,
			"float_2" => GameStatFormatMethod::Float2,
			"float_3" => GameStatFormatMethod::Float3,
			"integer" => GameStatFormatMethod::Integer,
			other => GameStatFormatMethod::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for GameStatFormatMethod {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(GameStatFormatMethod::from(s))
	}
}
impl GameStatFormatMethod {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			GameStatFormatMethod::DurationHundredthSecond => "duration_hundredth_second",
			GameStatFormatMethod::DurationMinute => "duration_minute",
			GameStatFormatMethod::DuractionSecond => "duration_second",
			GameStatFormatMethod::Float1 => "float_1",
			GameStatFormatMethod::Float2 => "float_2",
			GameStatFormatMethod::Float3 => "float_3",
			GameStatFormatMethod::Integer => "integer",
			GameStatFormatMethod::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&[
			"duration_hundredth_second",
			"duration_minute",
			"duration_second",
			"float_1",
			"float_2",
			"float_3",
			"integer",
		]
	}
}
impl AsRef<str> for GameStatFormatMethod {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// A group that the given identity.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdentityGroup {
	/// A group handle.
	pub group: std::option::Option<crate::model::GroupHandle>,
}
impl IdentityGroup {
	/// A group handle.
	pub fn group(&self) -> std::option::Option<&crate::model::GroupHandle> {
		self.group.as_ref()
	}
}
impl std::fmt::Debug for IdentityGroup {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("IdentityGroup");
		formatter.field("group", &self.group);
		formatter.finish()
	}
}
/// See [`IdentityGroup`](crate::model::IdentityGroup)
pub mod identity_group {
	/// A builder for [`IdentityGroup`](crate::model::IdentityGroup)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group: std::option::Option<crate::model::GroupHandle>,
	}
	impl Builder {
		/// A group handle.
		pub fn group(mut self, input: crate::model::GroupHandle) -> Self {
			self.group = Some(input);
			self
		}
		/// A group handle.
		pub fn set_group(mut self, input: std::option::Option<crate::model::GroupHandle>) -> Self {
			self.group = input;
			self
		}
		/// Consumes the builder and constructs a [`IdentityGroup`](crate::model::IdentityGroup)
		pub fn build(self) -> crate::model::IdentityGroup {
			crate::model::IdentityGroup { group: self.group }
		}
	}
}
impl IdentityGroup {
	/// Creates a new builder-style object to manufacture [`IdentityGroup`](crate::model::IdentityGroup)
	pub fn builder() -> crate::model::identity_group::Builder {
		crate::model::identity_group::Builder::default()
	}
}

/// A union representing an identity's linked accounts.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum IdentityLinkedAccount {
	/// An identity's linked email.
	Email(crate::model::IdentityEmailLinkedAccount),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl IdentityLinkedAccount {
	#[allow(irrefutable_let_patterns)]
	/// Tries to convert the enum instance into [`Email`](crate::model::IdentityLinkedAccount::Email), extracting the inner [`IdentityEmailLinkedAccount`](crate::model::IdentityEmailLinkedAccount).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_email(
		&self,
	) -> std::result::Result<&crate::model::IdentityEmailLinkedAccount, &Self> {
		if let IdentityLinkedAccount::Email(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Email`](crate::model::IdentityLinkedAccount::Email).
	pub fn is_email(&self) -> bool {
		self.as_email().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// An identity's linked email.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdentityEmailLinkedAccount {
	/// A valid email address.
	pub email: std::option::Option<std::string::String>,
}
impl IdentityEmailLinkedAccount {
	/// A valid email address.
	pub fn email(&self) -> std::option::Option<&str> {
		self.email.as_deref()
	}
}
impl std::fmt::Debug for IdentityEmailLinkedAccount {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("IdentityEmailLinkedAccount");
		formatter.field("email", &"*** Sensitive Data Redacted ***");
		formatter.finish()
	}
}
/// See [`IdentityEmailLinkedAccount`](crate::model::IdentityEmailLinkedAccount)
pub mod identity_email_linked_account {
	/// A builder for [`IdentityEmailLinkedAccount`](crate::model::IdentityEmailLinkedAccount)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) email: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A valid email address.
		pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
			self.email = Some(input.into());
			self
		}
		/// A valid email address.
		pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.email = input;
			self
		}
		/// Consumes the builder and constructs a [`IdentityEmailLinkedAccount`](crate::model::IdentityEmailLinkedAccount)
		pub fn build(self) -> crate::model::IdentityEmailLinkedAccount {
			crate::model::IdentityEmailLinkedAccount { email: self.email }
		}
	}
}
impl IdentityEmailLinkedAccount {
	/// Creates a new builder-style object to manufacture [`IdentityEmailLinkedAccount`](crate::model::IdentityEmailLinkedAccount)
	pub fn builder() -> crate::model::identity_email_linked_account::Builder {
		crate::model::identity_email_linked_account::Builder::default()
	}
}

/// The state of the given identity's developer status.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum IdentityDevState {
	#[allow(missing_docs)] // documentation missing in model
	Accepted,
	#[allow(missing_docs)] // documentation missing in model
	Inactive,
	#[allow(missing_docs)] // documentation missing in model
	Pending,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for IdentityDevState {
	fn from(s: &str) -> Self {
		match s {
			"accepted" => IdentityDevState::Accepted,
			"inactive" => IdentityDevState::Inactive,
			"pending" => IdentityDevState::Pending,
			other => IdentityDevState::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for IdentityDevState {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(IdentityDevState::from(s))
	}
}
impl IdentityDevState {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			IdentityDevState::Accepted => "accepted",
			IdentityDevState::Inactive => "inactive",
			IdentityDevState::Pending => "pending",
			IdentityDevState::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["accepted", "inactive", "pending"]
	}
}
impl AsRef<str> for IdentityDevState {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// The link status between an identity and a game user.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum GameLinkStatus {
	#[allow(missing_docs)] // documentation missing in model
	Cancelled,
	#[allow(missing_docs)] // documentation missing in model
	Complete,
	#[allow(missing_docs)] // documentation missing in model
	Incomplete,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for GameLinkStatus {
	fn from(s: &str) -> Self {
		match s {
			"cancelled" => GameLinkStatus::Cancelled,
			"complete" => GameLinkStatus::Complete,
			"incomplete" => GameLinkStatus::Incomplete,
			other => GameLinkStatus::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for GameLinkStatus {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(GameLinkStatus::from(s))
	}
}
impl GameLinkStatus {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			GameLinkStatus::Cancelled => "cancelled",
			GameLinkStatus::Complete => "complete",
			GameLinkStatus::Incomplete => "incomplete",
			GameLinkStatus::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["cancelled", "complete", "incomplete"]
	}
}
impl AsRef<str> for GameLinkStatus {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// An event relevant to the current identity.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GlobalEvent {
	/// RFC3339 timestamp.
	pub ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Kind of event that occurred.
	pub kind: std::option::Option<crate::model::GlobalEventKind>,
	/// Notifications represent information that should be presented to the user immediately. At the moment, only chat message events have associated notifications. # Display Notifications should be displayed in an unobtrusive manner throughout the entire game. Notifications should disappear after a few seconds if not interacted with. # Interactions If your platform supports it, notifications should be able to be clicked or tapped in order to open the relevant context for the event. For a simple implementation of notification interactions, open `url` in a web browser to present the relevant context. For example, a chat message notification will open the thread the chat message was sent in. For advanced implementations that implement a custom chat UI, use `rivet.api.identity.common#GlobalEvent$kind` to determine what action to take when the notification is interacted with. For example, if the global event kind is `rivet.api.identity.common#GlobalEventChatMessage`, then open the chat UI for the given thread.
	pub notification: std::option::Option<crate::model::GlobalEventNotification>,
}
impl GlobalEvent {
	/// RFC3339 timestamp.
	pub fn ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.ts.as_ref()
	}
	/// Kind of event that occurred.
	pub fn kind(&self) -> std::option::Option<&crate::model::GlobalEventKind> {
		self.kind.as_ref()
	}
	/// Notifications represent information that should be presented to the user immediately. At the moment, only chat message events have associated notifications. # Display Notifications should be displayed in an unobtrusive manner throughout the entire game. Notifications should disappear after a few seconds if not interacted with. # Interactions If your platform supports it, notifications should be able to be clicked or tapped in order to open the relevant context for the event. For a simple implementation of notification interactions, open `url` in a web browser to present the relevant context. For example, a chat message notification will open the thread the chat message was sent in. For advanced implementations that implement a custom chat UI, use `rivet.api.identity.common#GlobalEvent$kind` to determine what action to take when the notification is interacted with. For example, if the global event kind is `rivet.api.identity.common#GlobalEventChatMessage`, then open the chat UI for the given thread.
	pub fn notification(&self) -> std::option::Option<&crate::model::GlobalEventNotification> {
		self.notification.as_ref()
	}
}
impl std::fmt::Debug for GlobalEvent {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GlobalEvent");
		formatter.field("ts", &self.ts);
		formatter.field("kind", &self.kind);
		formatter.field("notification", &self.notification);
		formatter.finish()
	}
}
/// See [`GlobalEvent`](crate::model::GlobalEvent)
pub mod global_event {
	/// A builder for [`GlobalEvent`](crate::model::GlobalEvent)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) kind: std::option::Option<crate::model::GlobalEventKind>,
		pub(crate) notification: std::option::Option<crate::model::GlobalEventNotification>,
	}
	impl Builder {
		/// RFC3339 timestamp.
		pub fn ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_ts(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
			self.ts = input;
			self
		}
		/// Kind of event that occurred.
		pub fn kind(mut self, input: crate::model::GlobalEventKind) -> Self {
			self.kind = Some(input);
			self
		}
		/// Kind of event that occurred.
		pub fn set_kind(
			mut self,
			input: std::option::Option<crate::model::GlobalEventKind>,
		) -> Self {
			self.kind = input;
			self
		}
		/// Notifications represent information that should be presented to the user immediately. At the moment, only chat message events have associated notifications. # Display Notifications should be displayed in an unobtrusive manner throughout the entire game. Notifications should disappear after a few seconds if not interacted with. # Interactions If your platform supports it, notifications should be able to be clicked or tapped in order to open the relevant context for the event. For a simple implementation of notification interactions, open `url` in a web browser to present the relevant context. For example, a chat message notification will open the thread the chat message was sent in. For advanced implementations that implement a custom chat UI, use `rivet.api.identity.common#GlobalEvent$kind` to determine what action to take when the notification is interacted with. For example, if the global event kind is `rivet.api.identity.common#GlobalEventChatMessage`, then open the chat UI for the given thread.
		pub fn notification(mut self, input: crate::model::GlobalEventNotification) -> Self {
			self.notification = Some(input);
			self
		}
		/// Notifications represent information that should be presented to the user immediately. At the moment, only chat message events have associated notifications. # Display Notifications should be displayed in an unobtrusive manner throughout the entire game. Notifications should disappear after a few seconds if not interacted with. # Interactions If your platform supports it, notifications should be able to be clicked or tapped in order to open the relevant context for the event. For a simple implementation of notification interactions, open `url` in a web browser to present the relevant context. For example, a chat message notification will open the thread the chat message was sent in. For advanced implementations that implement a custom chat UI, use `rivet.api.identity.common#GlobalEvent$kind` to determine what action to take when the notification is interacted with. For example, if the global event kind is `rivet.api.identity.common#GlobalEventChatMessage`, then open the chat UI for the given thread.
		pub fn set_notification(
			mut self,
			input: std::option::Option<crate::model::GlobalEventNotification>,
		) -> Self {
			self.notification = input;
			self
		}
		/// Consumes the builder and constructs a [`GlobalEvent`](crate::model::GlobalEvent)
		pub fn build(self) -> crate::model::GlobalEvent {
			crate::model::GlobalEvent {
				ts: self.ts,
				kind: self.kind,
				notification: self.notification,
			}
		}
	}
}
impl GlobalEvent {
	/// Creates a new builder-style object to manufacture [`GlobalEvent`](crate::model::GlobalEvent)
	pub fn builder() -> crate::model::global_event::Builder {
		crate::model::global_event::Builder::default()
	}
}

/// Notifications represent information that should be presented to the user immediately. At the moment, only chat message events have associated notifications. # Display Notifications should be displayed in an unobtrusive manner throughout the entire game. Notifications should disappear after a few seconds if not interacted with. # Interactions If your platform supports it, notifications should be able to be clicked or tapped in order to open the relevant context for the event. For a simple implementation of notification interactions, open `url` in a web browser to present the relevant context. For example, a chat message notification will open the thread the chat message was sent in. For advanced implementations that implement a custom chat UI, use `rivet.api.identity.common#GlobalEvent$kind` to determine what action to take when the notification is interacted with. For example, if the global event kind is `rivet.api.identity.common#GlobalEventChatMessage`, then open the chat UI for the given thread.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GlobalEventNotification {
	#[allow(missing_docs)] // documentation missing in model
	pub title: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub description: std::option::Option<std::string::String>,
	/// URL to an image thumbnail that should be shown for this notification.
	pub thumbnail_url: std::option::Option<std::string::String>,
	/// Rivet Hub URL that holds the relevant context for this notification.
	pub url: std::option::Option<std::string::String>,
}
impl GlobalEventNotification {
	#[allow(missing_docs)] // documentation missing in model
	pub fn title(&self) -> std::option::Option<&str> {
		self.title.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn description(&self) -> std::option::Option<&str> {
		self.description.as_deref()
	}
	/// URL to an image thumbnail that should be shown for this notification.
	pub fn thumbnail_url(&self) -> std::option::Option<&str> {
		self.thumbnail_url.as_deref()
	}
	/// Rivet Hub URL that holds the relevant context for this notification.
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
}
impl std::fmt::Debug for GlobalEventNotification {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GlobalEventNotification");
		formatter.field("title", &self.title);
		formatter.field("description", &self.description);
		formatter.field("thumbnail_url", &self.thumbnail_url);
		formatter.field("url", &self.url);
		formatter.finish()
	}
}
/// See [`GlobalEventNotification`](crate::model::GlobalEventNotification)
pub mod global_event_notification {
	/// A builder for [`GlobalEventNotification`](crate::model::GlobalEventNotification)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) title: std::option::Option<std::string::String>,
		pub(crate) description: std::option::Option<std::string::String>,
		pub(crate) thumbnail_url: std::option::Option<std::string::String>,
		pub(crate) url: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
			self.title = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.title = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
			self.description = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.description = input;
			self
		}
		/// URL to an image thumbnail that should be shown for this notification.
		pub fn thumbnail_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.thumbnail_url = Some(input.into());
			self
		}
		/// URL to an image thumbnail that should be shown for this notification.
		pub fn set_thumbnail_url(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.thumbnail_url = input;
			self
		}
		/// Rivet Hub URL that holds the relevant context for this notification.
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		/// Rivet Hub URL that holds the relevant context for this notification.
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// Consumes the builder and constructs a [`GlobalEventNotification`](crate::model::GlobalEventNotification)
		pub fn build(self) -> crate::model::GlobalEventNotification {
			crate::model::GlobalEventNotification {
				title: self.title,
				description: self.description,
				thumbnail_url: self.thumbnail_url,
				url: self.url,
			}
		}
	}
}
impl GlobalEventNotification {
	/// Creates a new builder-style object to manufacture [`GlobalEventNotification`](crate::model::GlobalEventNotification)
	pub fn builder() -> crate::model::global_event_notification::Builder {
		crate::model::global_event_notification::Builder::default()
	}
}

/// Kind of event that occurred.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum GlobalEventKind {
	/// `rivet.api.identity.common#GlobalEventKind` variant for chat messages. Received any time a message is sent to a chat the identity is in.
	ChatMessage(crate::model::GlobalEventChatMessage),
	/// `rivet.api.identity.common#GlobalEventKind` variant for chat reads. Received any time the last read timestamp is set. Used to update the status of unread indicators on chats.
	ChatRead(crate::model::GlobalEventChatRead),
	/// `rivet.api.identity.common#GlobalEventKind` variant for a chat thread being removed. Received any time the current identity is no longer able to access the given thread. This can happen if
	ChatThreadRemove(crate::model::GlobalEventChatThreadRemove),
	/// `rivet.api.identity.common#GlobalEventKind` variant for identity updates. Received any time identity details are changed OR the identity switches.
	IdentityUpdate(crate::model::GlobalEventIdentityUpdate),
	/// `rivet.api.identity.common#GlobalEventKind` variant for party updates. Received when the identity should be instructed to join a lobby. This needs to be implemented in conjunction with parties in order to force clients to join the same lobby as the party they're in.
	MatchmakerLobbyJoin(crate::model::GlobalEventMatchmakerLobbyJoin),
	/// `rivet.api.identity.common#GlobalEventKind` variant for party updates. Received any time the identity joins a party, a party is updated, or when the identity leaves a party.
	PartyUpdate(crate::model::GlobalEventPartyUpdate),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl GlobalEventKind {
	/// Tries to convert the enum instance into [`ChatMessage`](crate::model::GlobalEventKind::ChatMessage), extracting the inner [`GlobalEventChatMessage`](crate::model::GlobalEventChatMessage).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_chat_message(
		&self,
	) -> std::result::Result<&crate::model::GlobalEventChatMessage, &Self> {
		if let GlobalEventKind::ChatMessage(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`ChatMessage`](crate::model::GlobalEventKind::ChatMessage).
	pub fn is_chat_message(&self) -> bool {
		self.as_chat_message().is_ok()
	}
	/// Tries to convert the enum instance into [`ChatRead`](crate::model::GlobalEventKind::ChatRead), extracting the inner [`GlobalEventChatRead`](crate::model::GlobalEventChatRead).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_chat_read(&self) -> std::result::Result<&crate::model::GlobalEventChatRead, &Self> {
		if let GlobalEventKind::ChatRead(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`ChatRead`](crate::model::GlobalEventKind::ChatRead).
	pub fn is_chat_read(&self) -> bool {
		self.as_chat_read().is_ok()
	}
	/// Tries to convert the enum instance into [`ChatThreadRemove`](crate::model::GlobalEventKind::ChatThreadRemove), extracting the inner [`GlobalEventChatThreadRemove`](crate::model::GlobalEventChatThreadRemove).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_chat_thread_remove(
		&self,
	) -> std::result::Result<&crate::model::GlobalEventChatThreadRemove, &Self> {
		if let GlobalEventKind::ChatThreadRemove(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`ChatThreadRemove`](crate::model::GlobalEventKind::ChatThreadRemove).
	pub fn is_chat_thread_remove(&self) -> bool {
		self.as_chat_thread_remove().is_ok()
	}
	/// Tries to convert the enum instance into [`IdentityUpdate`](crate::model::GlobalEventKind::IdentityUpdate), extracting the inner [`GlobalEventIdentityUpdate`](crate::model::GlobalEventIdentityUpdate).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_identity_update(
		&self,
	) -> std::result::Result<&crate::model::GlobalEventIdentityUpdate, &Self> {
		if let GlobalEventKind::IdentityUpdate(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`IdentityUpdate`](crate::model::GlobalEventKind::IdentityUpdate).
	pub fn is_identity_update(&self) -> bool {
		self.as_identity_update().is_ok()
	}
	/// Tries to convert the enum instance into [`MatchmakerLobbyJoin`](crate::model::GlobalEventKind::MatchmakerLobbyJoin), extracting the inner [`GlobalEventMatchmakerLobbyJoin`](crate::model::GlobalEventMatchmakerLobbyJoin).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_matchmaker_lobby_join(
		&self,
	) -> std::result::Result<&crate::model::GlobalEventMatchmakerLobbyJoin, &Self> {
		if let GlobalEventKind::MatchmakerLobbyJoin(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`MatchmakerLobbyJoin`](crate::model::GlobalEventKind::MatchmakerLobbyJoin).
	pub fn is_matchmaker_lobby_join(&self) -> bool {
		self.as_matchmaker_lobby_join().is_ok()
	}
	/// Tries to convert the enum instance into [`PartyUpdate`](crate::model::GlobalEventKind::PartyUpdate), extracting the inner [`GlobalEventPartyUpdate`](crate::model::GlobalEventPartyUpdate).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_party_update(
		&self,
	) -> std::result::Result<&crate::model::GlobalEventPartyUpdate, &Self> {
		if let GlobalEventKind::PartyUpdate(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`PartyUpdate`](crate::model::GlobalEventKind::PartyUpdate).
	pub fn is_party_update(&self) -> bool {
		self.as_party_update().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// `rivet.api.identity.common#GlobalEventKind` variant for a chat thread being removed. Received any time the current identity is no longer able to access the given thread. This can happen if
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GlobalEventChatThreadRemove {
	/// A universally unique identifier.
	pub thread_id: std::option::Option<std::string::String>,
}
impl GlobalEventChatThreadRemove {
	/// A universally unique identifier.
	pub fn thread_id(&self) -> std::option::Option<&str> {
		self.thread_id.as_deref()
	}
}
impl std::fmt::Debug for GlobalEventChatThreadRemove {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GlobalEventChatThreadRemove");
		formatter.field("thread_id", &self.thread_id);
		formatter.finish()
	}
}
/// See [`GlobalEventChatThreadRemove`](crate::model::GlobalEventChatThreadRemove)
pub mod global_event_chat_thread_remove {
	/// A builder for [`GlobalEventChatThreadRemove`](crate::model::GlobalEventChatThreadRemove)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) thread_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn thread_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.thread_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_thread_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.thread_id = input;
			self
		}
		/// Consumes the builder and constructs a [`GlobalEventChatThreadRemove`](crate::model::GlobalEventChatThreadRemove)
		pub fn build(self) -> crate::model::GlobalEventChatThreadRemove {
			crate::model::GlobalEventChatThreadRemove {
				thread_id: self.thread_id,
			}
		}
	}
}
impl GlobalEventChatThreadRemove {
	/// Creates a new builder-style object to manufacture [`GlobalEventChatThreadRemove`](crate::model::GlobalEventChatThreadRemove)
	pub fn builder() -> crate::model::global_event_chat_thread_remove::Builder {
		crate::model::global_event_chat_thread_remove::Builder::default()
	}
}

/// `rivet.api.identity.common#GlobalEventKind` variant for party updates. Received when the identity should be instructed to join a lobby. This needs to be implemented in conjunction with parties in order to force clients to join the same lobby as the party they're in.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GlobalEventMatchmakerLobbyJoin {
	/// A matchmaker lobby.
	pub lobby: std::option::Option<crate::model::MatchmakerLobbyJoinInfo>,
}
impl GlobalEventMatchmakerLobbyJoin {
	/// A matchmaker lobby.
	pub fn lobby(&self) -> std::option::Option<&crate::model::MatchmakerLobbyJoinInfo> {
		self.lobby.as_ref()
	}
}
impl std::fmt::Debug for GlobalEventMatchmakerLobbyJoin {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GlobalEventMatchmakerLobbyJoin");
		formatter.field("lobby", &self.lobby);
		formatter.finish()
	}
}
/// See [`GlobalEventMatchmakerLobbyJoin`](crate::model::GlobalEventMatchmakerLobbyJoin)
pub mod global_event_matchmaker_lobby_join {
	/// A builder for [`GlobalEventMatchmakerLobbyJoin`](crate::model::GlobalEventMatchmakerLobbyJoin)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby: std::option::Option<crate::model::MatchmakerLobbyJoinInfo>,
	}
	impl Builder {
		/// A matchmaker lobby.
		pub fn lobby(mut self, input: crate::model::MatchmakerLobbyJoinInfo) -> Self {
			self.lobby = Some(input);
			self
		}
		/// A matchmaker lobby.
		pub fn set_lobby(
			mut self,
			input: std::option::Option<crate::model::MatchmakerLobbyJoinInfo>,
		) -> Self {
			self.lobby = input;
			self
		}
		/// Consumes the builder and constructs a [`GlobalEventMatchmakerLobbyJoin`](crate::model::GlobalEventMatchmakerLobbyJoin)
		pub fn build(self) -> crate::model::GlobalEventMatchmakerLobbyJoin {
			crate::model::GlobalEventMatchmakerLobbyJoin { lobby: self.lobby }
		}
	}
}
impl GlobalEventMatchmakerLobbyJoin {
	/// Creates a new builder-style object to manufacture [`GlobalEventMatchmakerLobbyJoin`](crate::model::GlobalEventMatchmakerLobbyJoin)
	pub fn builder() -> crate::model::global_event_matchmaker_lobby_join::Builder {
		crate::model::global_event_matchmaker_lobby_join::Builder::default()
	}
}

/// A matchmaker lobby.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerLobbyJoinInfo {
	/// A universally unique identifier.
	pub lobby_id: std::option::Option<std::string::String>,
	/// A matchmaker lobby region.
	pub region: std::option::Option<crate::model::MatchmakerLobbyJoinInfoRegion>,
	/// A list of lobby ports.
	pub ports: std::option::Option<
		std::collections::HashMap<std::string::String, crate::model::MatchmakerLobbyJoinInfoPort>,
	>,
	/// A matchmaker lobby player.
	pub player: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPlayer>,
}
impl MatchmakerLobbyJoinInfo {
	/// A universally unique identifier.
	pub fn lobby_id(&self) -> std::option::Option<&str> {
		self.lobby_id.as_deref()
	}
	/// A matchmaker lobby region.
	pub fn region(&self) -> std::option::Option<&crate::model::MatchmakerLobbyJoinInfoRegion> {
		self.region.as_ref()
	}
	/// A list of lobby ports.
	pub fn ports(
		&self,
	) -> std::option::Option<
		&std::collections::HashMap<std::string::String, crate::model::MatchmakerLobbyJoinInfoPort>,
	> {
		self.ports.as_ref()
	}
	/// A matchmaker lobby player.
	pub fn player(&self) -> std::option::Option<&crate::model::MatchmakerLobbyJoinInfoPlayer> {
		self.player.as_ref()
	}
}
impl std::fmt::Debug for MatchmakerLobbyJoinInfo {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerLobbyJoinInfo");
		formatter.field("lobby_id", &self.lobby_id);
		formatter.field("region", &self.region);
		formatter.field("ports", &self.ports);
		formatter.field("player", &self.player);
		formatter.finish()
	}
}
/// See [`MatchmakerLobbyJoinInfo`](crate::model::MatchmakerLobbyJoinInfo)
pub mod matchmaker_lobby_join_info {
	/// A builder for [`MatchmakerLobbyJoinInfo`](crate::model::MatchmakerLobbyJoinInfo)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby_id: std::option::Option<std::string::String>,
		pub(crate) region: std::option::Option<crate::model::MatchmakerLobbyJoinInfoRegion>,
		pub(crate) ports: std::option::Option<
			std::collections::HashMap<
				std::string::String,
				crate::model::MatchmakerLobbyJoinInfoPort,
			>,
		>,
		pub(crate) player: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPlayer>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn lobby_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.lobby_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_lobby_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.lobby_id = input;
			self
		}
		/// A matchmaker lobby region.
		pub fn region(mut self, input: crate::model::MatchmakerLobbyJoinInfoRegion) -> Self {
			self.region = Some(input);
			self
		}
		/// A matchmaker lobby region.
		pub fn set_region(
			mut self,
			input: std::option::Option<crate::model::MatchmakerLobbyJoinInfoRegion>,
		) -> Self {
			self.region = input;
			self
		}
		/// Adds a key-value pair to `ports`.
		///
		/// To override the contents of this collection use [`set_ports`](Self::set_ports).
		///
		/// A list of lobby ports.
		pub fn ports(
			mut self,
			k: impl Into<std::string::String>,
			v: crate::model::MatchmakerLobbyJoinInfoPort,
		) -> Self {
			let mut hash_map = self.ports.unwrap_or_default();
			hash_map.insert(k.into(), v);
			self.ports = Some(hash_map);
			self
		}
		/// A list of lobby ports.
		pub fn set_ports(
			mut self,
			input: std::option::Option<
				std::collections::HashMap<
					std::string::String,
					crate::model::MatchmakerLobbyJoinInfoPort,
				>,
			>,
		) -> Self {
			self.ports = input;
			self
		}
		/// A matchmaker lobby player.
		pub fn player(mut self, input: crate::model::MatchmakerLobbyJoinInfoPlayer) -> Self {
			self.player = Some(input);
			self
		}
		/// A matchmaker lobby player.
		pub fn set_player(
			mut self,
			input: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPlayer>,
		) -> Self {
			self.player = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerLobbyJoinInfo`](crate::model::MatchmakerLobbyJoinInfo)
		pub fn build(self) -> crate::model::MatchmakerLobbyJoinInfo {
			crate::model::MatchmakerLobbyJoinInfo {
				lobby_id: self.lobby_id,
				region: self.region,
				ports: self.ports,
				player: self.player,
			}
		}
	}
}
impl MatchmakerLobbyJoinInfo {
	/// Creates a new builder-style object to manufacture [`MatchmakerLobbyJoinInfo`](crate::model::MatchmakerLobbyJoinInfo)
	pub fn builder() -> crate::model::matchmaker_lobby_join_info::Builder {
		crate::model::matchmaker_lobby_join_info::Builder::default()
	}
}

/// A matchmaker lobby player.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerLobbyJoinInfoPlayer {
	/// Pass this token through the socket to the lobby server. The lobby server will validate this token with `rivet.api.matchmaker#PlayerConnected$player_token`.
	pub token: std::option::Option<std::string::String>,
}
impl MatchmakerLobbyJoinInfoPlayer {
	/// Pass this token through the socket to the lobby server. The lobby server will validate this token with `rivet.api.matchmaker#PlayerConnected$player_token`.
	pub fn token(&self) -> std::option::Option<&str> {
		self.token.as_deref()
	}
}
impl std::fmt::Debug for MatchmakerLobbyJoinInfoPlayer {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerLobbyJoinInfoPlayer");
		formatter.field("token", &"*** Sensitive Data Redacted ***");
		formatter.finish()
	}
}
/// See [`MatchmakerLobbyJoinInfoPlayer`](crate::model::MatchmakerLobbyJoinInfoPlayer)
pub mod matchmaker_lobby_join_info_player {
	/// A builder for [`MatchmakerLobbyJoinInfoPlayer`](crate::model::MatchmakerLobbyJoinInfoPlayer)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) token: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Pass this token through the socket to the lobby server. The lobby server will validate this token with `rivet.api.matchmaker#PlayerConnected$player_token`.
		pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
			self.token = Some(input.into());
			self
		}
		/// Pass this token through the socket to the lobby server. The lobby server will validate this token with `rivet.api.matchmaker#PlayerConnected$player_token`.
		pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.token = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerLobbyJoinInfoPlayer`](crate::model::MatchmakerLobbyJoinInfoPlayer)
		pub fn build(self) -> crate::model::MatchmakerLobbyJoinInfoPlayer {
			crate::model::MatchmakerLobbyJoinInfoPlayer { token: self.token }
		}
	}
}
impl MatchmakerLobbyJoinInfoPlayer {
	/// Creates a new builder-style object to manufacture [`MatchmakerLobbyJoinInfoPlayer`](crate::model::MatchmakerLobbyJoinInfoPlayer)
	pub fn builder() -> crate::model::matchmaker_lobby_join_info_player::Builder {
		crate::model::matchmaker_lobby_join_info_player::Builder::default()
	}
}

/// A matchmaker lobby port. Configured by `rivet.cloud#LobbyGroupRuntimeDockerPort$label`.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerLobbyJoinInfoPort {
	/// The host for the given port. Will be null if using a port range.
	pub host: std::option::Option<std::string::String>,
	/// The hostname for the given port.
	pub hostname: std::option::Option<std::string::String>,
	/// The port number for this lobby. Will be null if using a port range.
	pub port: std::option::Option<i32>,
	/// The port range for this lobby.
	pub port_range: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPortRange>,
	/// Wether or not this lobby port uses TLS. You cannot mix a non-TLS and TLS ports.
	pub is_tls: std::option::Option<bool>,
}
impl MatchmakerLobbyJoinInfoPort {
	/// The host for the given port. Will be null if using a port range.
	pub fn host(&self) -> std::option::Option<&str> {
		self.host.as_deref()
	}
	/// The hostname for the given port.
	pub fn hostname(&self) -> std::option::Option<&str> {
		self.hostname.as_deref()
	}
	/// The port number for this lobby. Will be null if using a port range.
	pub fn port(&self) -> std::option::Option<i32> {
		self.port
	}
	/// The port range for this lobby.
	pub fn port_range(
		&self,
	) -> std::option::Option<&crate::model::MatchmakerLobbyJoinInfoPortRange> {
		self.port_range.as_ref()
	}
	/// Wether or not this lobby port uses TLS. You cannot mix a non-TLS and TLS ports.
	pub fn is_tls(&self) -> std::option::Option<bool> {
		self.is_tls
	}
}
impl std::fmt::Debug for MatchmakerLobbyJoinInfoPort {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerLobbyJoinInfoPort");
		formatter.field("host", &self.host);
		formatter.field("hostname", &self.hostname);
		formatter.field("port", &self.port);
		formatter.field("port_range", &self.port_range);
		formatter.field("is_tls", &self.is_tls);
		formatter.finish()
	}
}
/// See [`MatchmakerLobbyJoinInfoPort`](crate::model::MatchmakerLobbyJoinInfoPort)
pub mod matchmaker_lobby_join_info_port {
	/// A builder for [`MatchmakerLobbyJoinInfoPort`](crate::model::MatchmakerLobbyJoinInfoPort)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) host: std::option::Option<std::string::String>,
		pub(crate) hostname: std::option::Option<std::string::String>,
		pub(crate) port: std::option::Option<i32>,
		pub(crate) port_range: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPortRange>,
		pub(crate) is_tls: std::option::Option<bool>,
	}
	impl Builder {
		/// The host for the given port. Will be null if using a port range.
		pub fn host(mut self, input: impl Into<std::string::String>) -> Self {
			self.host = Some(input.into());
			self
		}
		/// The host for the given port. Will be null if using a port range.
		pub fn set_host(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.host = input;
			self
		}
		/// The hostname for the given port.
		pub fn hostname(mut self, input: impl Into<std::string::String>) -> Self {
			self.hostname = Some(input.into());
			self
		}
		/// The hostname for the given port.
		pub fn set_hostname(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.hostname = input;
			self
		}
		/// The port number for this lobby. Will be null if using a port range.
		pub fn port(mut self, input: i32) -> Self {
			self.port = Some(input);
			self
		}
		/// The port number for this lobby. Will be null if using a port range.
		pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
			self.port = input;
			self
		}
		/// The port range for this lobby.
		pub fn port_range(mut self, input: crate::model::MatchmakerLobbyJoinInfoPortRange) -> Self {
			self.port_range = Some(input);
			self
		}
		/// The port range for this lobby.
		pub fn set_port_range(
			mut self,
			input: std::option::Option<crate::model::MatchmakerLobbyJoinInfoPortRange>,
		) -> Self {
			self.port_range = input;
			self
		}
		/// Wether or not this lobby port uses TLS. You cannot mix a non-TLS and TLS ports.
		pub fn is_tls(mut self, input: bool) -> Self {
			self.is_tls = Some(input);
			self
		}
		/// Wether or not this lobby port uses TLS. You cannot mix a non-TLS and TLS ports.
		pub fn set_is_tls(mut self, input: std::option::Option<bool>) -> Self {
			self.is_tls = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerLobbyJoinInfoPort`](crate::model::MatchmakerLobbyJoinInfoPort)
		pub fn build(self) -> crate::model::MatchmakerLobbyJoinInfoPort {
			crate::model::MatchmakerLobbyJoinInfoPort {
				host: self.host,
				hostname: self.hostname,
				port: self.port,
				port_range: self.port_range,
				is_tls: self.is_tls,
			}
		}
	}
}
impl MatchmakerLobbyJoinInfoPort {
	/// Creates a new builder-style object to manufacture [`MatchmakerLobbyJoinInfoPort`](crate::model::MatchmakerLobbyJoinInfoPort)
	pub fn builder() -> crate::model::matchmaker_lobby_join_info_port::Builder {
		crate::model::matchmaker_lobby_join_info_port::Builder::default()
	}
}

/// Inclusive range of ports that can be connected to.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerLobbyJoinInfoPortRange {
	/// Minimum port that can be connected to. Inclusive range.
	pub min: std::option::Option<i32>,
	/// Maximum port that can be connected to. Inclusive range.
	pub max: std::option::Option<i32>,
}
impl MatchmakerLobbyJoinInfoPortRange {
	/// Minimum port that can be connected to. Inclusive range.
	pub fn min(&self) -> std::option::Option<i32> {
		self.min
	}
	/// Maximum port that can be connected to. Inclusive range.
	pub fn max(&self) -> std::option::Option<i32> {
		self.max
	}
}
impl std::fmt::Debug for MatchmakerLobbyJoinInfoPortRange {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerLobbyJoinInfoPortRange");
		formatter.field("min", &self.min);
		formatter.field("max", &self.max);
		formatter.finish()
	}
}
/// See [`MatchmakerLobbyJoinInfoPortRange`](crate::model::MatchmakerLobbyJoinInfoPortRange)
pub mod matchmaker_lobby_join_info_port_range {
	/// A builder for [`MatchmakerLobbyJoinInfoPortRange`](crate::model::MatchmakerLobbyJoinInfoPortRange)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) min: std::option::Option<i32>,
		pub(crate) max: std::option::Option<i32>,
	}
	impl Builder {
		/// Minimum port that can be connected to. Inclusive range.
		pub fn min(mut self, input: i32) -> Self {
			self.min = Some(input);
			self
		}
		/// Minimum port that can be connected to. Inclusive range.
		pub fn set_min(mut self, input: std::option::Option<i32>) -> Self {
			self.min = input;
			self
		}
		/// Maximum port that can be connected to. Inclusive range.
		pub fn max(mut self, input: i32) -> Self {
			self.max = Some(input);
			self
		}
		/// Maximum port that can be connected to. Inclusive range.
		pub fn set_max(mut self, input: std::option::Option<i32>) -> Self {
			self.max = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerLobbyJoinInfoPortRange`](crate::model::MatchmakerLobbyJoinInfoPortRange)
		pub fn build(self) -> crate::model::MatchmakerLobbyJoinInfoPortRange {
			crate::model::MatchmakerLobbyJoinInfoPortRange {
				min: self.min,
				max: self.max,
			}
		}
	}
}
impl MatchmakerLobbyJoinInfoPortRange {
	/// Creates a new builder-style object to manufacture [`MatchmakerLobbyJoinInfoPortRange`](crate::model::MatchmakerLobbyJoinInfoPortRange)
	pub fn builder() -> crate::model::matchmaker_lobby_join_info_port_range::Builder {
		crate::model::matchmaker_lobby_join_info_port_range::Builder::default()
	}
}

/// A matchmaker lobby region.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerLobbyJoinInfoRegion {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub region_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
}
impl MatchmakerLobbyJoinInfoRegion {
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn region_id(&self) -> std::option::Option<&str> {
		self.region_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
}
impl std::fmt::Debug for MatchmakerLobbyJoinInfoRegion {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerLobbyJoinInfoRegion");
		formatter.field("region_id", &self.region_id);
		formatter.field("display_name", &self.display_name);
		formatter.finish()
	}
}
/// See [`MatchmakerLobbyJoinInfoRegion`](crate::model::MatchmakerLobbyJoinInfoRegion)
pub mod matchmaker_lobby_join_info_region {
	/// A builder for [`MatchmakerLobbyJoinInfoRegion`](crate::model::MatchmakerLobbyJoinInfoRegion)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) region_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn region_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.region_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_region_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.region_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// Consumes the builder and constructs a [`MatchmakerLobbyJoinInfoRegion`](crate::model::MatchmakerLobbyJoinInfoRegion)
		pub fn build(self) -> crate::model::MatchmakerLobbyJoinInfoRegion {
			crate::model::MatchmakerLobbyJoinInfoRegion {
				region_id: self.region_id,
				display_name: self.display_name,
			}
		}
	}
}
impl MatchmakerLobbyJoinInfoRegion {
	/// Creates a new builder-style object to manufacture [`MatchmakerLobbyJoinInfoRegion`](crate::model::MatchmakerLobbyJoinInfoRegion)
	pub fn builder() -> crate::model::matchmaker_lobby_join_info_region::Builder {
		crate::model::matchmaker_lobby_join_info_region::Builder::default()
	}
}

/// `rivet.api.identity.common#GlobalEventKind` variant for identity updates. Received any time identity details are changed OR the identity switches.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GlobalEventIdentityUpdate {
	/// An identity profile.
	pub identity: std::option::Option<crate::model::IdentityProfile>,
}
impl GlobalEventIdentityUpdate {
	/// An identity profile.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityProfile> {
		self.identity.as_ref()
	}
}
impl std::fmt::Debug for GlobalEventIdentityUpdate {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GlobalEventIdentityUpdate");
		formatter.field("identity", &self.identity);
		formatter.finish()
	}
}
/// See [`GlobalEventIdentityUpdate`](crate::model::GlobalEventIdentityUpdate)
pub mod global_event_identity_update {
	/// A builder for [`GlobalEventIdentityUpdate`](crate::model::GlobalEventIdentityUpdate)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity: std::option::Option<crate::model::IdentityProfile>,
	}
	impl Builder {
		/// An identity profile.
		pub fn identity(mut self, input: crate::model::IdentityProfile) -> Self {
			self.identity = Some(input);
			self
		}
		/// An identity profile.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityProfile>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Consumes the builder and constructs a [`GlobalEventIdentityUpdate`](crate::model::GlobalEventIdentityUpdate)
		pub fn build(self) -> crate::model::GlobalEventIdentityUpdate {
			crate::model::GlobalEventIdentityUpdate {
				identity: self.identity,
			}
		}
	}
}
impl GlobalEventIdentityUpdate {
	/// Creates a new builder-style object to manufacture [`GlobalEventIdentityUpdate`](crate::model::GlobalEventIdentityUpdate)
	pub fn builder() -> crate::model::global_event_identity_update::Builder {
		crate::model::global_event_identity_update::Builder::default()
	}
}

/// `rivet.api.identity.common#GlobalEventKind` variant for party updates. Received any time the identity joins a party, a party is updated, or when the identity leaves a party.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GlobalEventPartyUpdate {
	/// If null, the identity left the party.
	pub party: std::option::Option<crate::model::PartySummary>,
}
impl GlobalEventPartyUpdate {
	/// If null, the identity left the party.
	pub fn party(&self) -> std::option::Option<&crate::model::PartySummary> {
		self.party.as_ref()
	}
}
impl std::fmt::Debug for GlobalEventPartyUpdate {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GlobalEventPartyUpdate");
		formatter.field("party", &self.party);
		formatter.finish()
	}
}
/// See [`GlobalEventPartyUpdate`](crate::model::GlobalEventPartyUpdate)
pub mod global_event_party_update {
	/// A builder for [`GlobalEventPartyUpdate`](crate::model::GlobalEventPartyUpdate)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) party: std::option::Option<crate::model::PartySummary>,
	}
	impl Builder {
		/// If null, the identity left the party.
		pub fn party(mut self, input: crate::model::PartySummary) -> Self {
			self.party = Some(input);
			self
		}
		/// If null, the identity left the party.
		pub fn set_party(mut self, input: std::option::Option<crate::model::PartySummary>) -> Self {
			self.party = input;
			self
		}
		/// Consumes the builder and constructs a [`GlobalEventPartyUpdate`](crate::model::GlobalEventPartyUpdate)
		pub fn build(self) -> crate::model::GlobalEventPartyUpdate {
			crate::model::GlobalEventPartyUpdate { party: self.party }
		}
	}
}
impl GlobalEventPartyUpdate {
	/// Creates a new builder-style object to manufacture [`GlobalEventPartyUpdate`](crate::model::GlobalEventPartyUpdate)
	pub fn builder() -> crate::model::global_event_party_update::Builder {
		crate::model::global_event_party_update::Builder::default()
	}
}

/// `rivet.api.identity.common#GlobalEventKind` variant for chat reads. Received any time the last read timestamp is set. Used to update the status of unread indicators on chats.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GlobalEventChatRead {
	/// A universally unique identifier.
	pub thread_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub read_ts: std::option::Option<aws_smithy_types::DateTime>,
}
impl GlobalEventChatRead {
	/// A universally unique identifier.
	pub fn thread_id(&self) -> std::option::Option<&str> {
		self.thread_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn read_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.read_ts.as_ref()
	}
}
impl std::fmt::Debug for GlobalEventChatRead {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GlobalEventChatRead");
		formatter.field("thread_id", &self.thread_id);
		formatter.field("read_ts", &self.read_ts);
		formatter.finish()
	}
}
/// See [`GlobalEventChatRead`](crate::model::GlobalEventChatRead)
pub mod global_event_chat_read {
	/// A builder for [`GlobalEventChatRead`](crate::model::GlobalEventChatRead)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) thread_id: std::option::Option<std::string::String>,
		pub(crate) read_ts: std::option::Option<aws_smithy_types::DateTime>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn thread_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.thread_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_thread_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.thread_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn read_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.read_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_read_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.read_ts = input;
			self
		}
		/// Consumes the builder and constructs a [`GlobalEventChatRead`](crate::model::GlobalEventChatRead)
		pub fn build(self) -> crate::model::GlobalEventChatRead {
			crate::model::GlobalEventChatRead {
				thread_id: self.thread_id,
				read_ts: self.read_ts,
			}
		}
	}
}
impl GlobalEventChatRead {
	/// Creates a new builder-style object to manufacture [`GlobalEventChatRead`](crate::model::GlobalEventChatRead)
	pub fn builder() -> crate::model::global_event_chat_read::Builder {
		crate::model::global_event_chat_read::Builder::default()
	}
}

/// `rivet.api.identity.common#GlobalEventKind` variant for chat messages. Received any time a message is sent to a chat the identity is in.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GlobalEventChatMessage {
	/// A chat thread.
	pub thread: std::option::Option<crate::model::ChatThread>,
}
impl GlobalEventChatMessage {
	/// A chat thread.
	pub fn thread(&self) -> std::option::Option<&crate::model::ChatThread> {
		self.thread.as_ref()
	}
}
impl std::fmt::Debug for GlobalEventChatMessage {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GlobalEventChatMessage");
		formatter.field("thread", &self.thread);
		formatter.finish()
	}
}
/// See [`GlobalEventChatMessage`](crate::model::GlobalEventChatMessage)
pub mod global_event_chat_message {
	/// A builder for [`GlobalEventChatMessage`](crate::model::GlobalEventChatMessage)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) thread: std::option::Option<crate::model::ChatThread>,
	}
	impl Builder {
		/// A chat thread.
		pub fn thread(mut self, input: crate::model::ChatThread) -> Self {
			self.thread = Some(input);
			self
		}
		/// A chat thread.
		pub fn set_thread(mut self, input: std::option::Option<crate::model::ChatThread>) -> Self {
			self.thread = input;
			self
		}
		/// Consumes the builder and constructs a [`GlobalEventChatMessage`](crate::model::GlobalEventChatMessage)
		pub fn build(self) -> crate::model::GlobalEventChatMessage {
			crate::model::GlobalEventChatMessage {
				thread: self.thread,
			}
		}
	}
}
impl GlobalEventChatMessage {
	/// Creates a new builder-style object to manufacture [`GlobalEventChatMessage`](crate::model::GlobalEventChatMessage)
	pub fn builder() -> crate::model::global_event_chat_message::Builder {
		crate::model::global_event_chat_message::Builder::default()
	}
}

/// A chat thread.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatThread {
	/// A universally unique identifier.
	pub thread_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub create_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Represents the topic of the given chat thread.
	pub topic: std::option::Option<crate::model::ChatTopic>,
	/// A chat message.
	pub tail_message: std::option::Option<crate::model::ChatMessage>,
	/// RFC3339 timestamp.
	pub last_read_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Unsigned 64 bit integer.
	pub unread_count: std::option::Option<i64>,
	/// External links for a chat thread.
	pub external: std::option::Option<crate::model::ChatThreadExternalLinks>,
}
impl ChatThread {
	/// A universally unique identifier.
	pub fn thread_id(&self) -> std::option::Option<&str> {
		self.thread_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn create_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.create_ts.as_ref()
	}
	/// Represents the topic of the given chat thread.
	pub fn topic(&self) -> std::option::Option<&crate::model::ChatTopic> {
		self.topic.as_ref()
	}
	/// A chat message.
	pub fn tail_message(&self) -> std::option::Option<&crate::model::ChatMessage> {
		self.tail_message.as_ref()
	}
	/// RFC3339 timestamp.
	pub fn last_read_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.last_read_ts.as_ref()
	}
	/// Unsigned 64 bit integer.
	pub fn unread_count(&self) -> std::option::Option<i64> {
		self.unread_count
	}
	/// External links for a chat thread.
	pub fn external(&self) -> std::option::Option<&crate::model::ChatThreadExternalLinks> {
		self.external.as_ref()
	}
}
impl std::fmt::Debug for ChatThread {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatThread");
		formatter.field("thread_id", &self.thread_id);
		formatter.field("create_ts", &self.create_ts);
		formatter.field("topic", &self.topic);
		formatter.field("tail_message", &self.tail_message);
		formatter.field("last_read_ts", &self.last_read_ts);
		formatter.field("unread_count", &self.unread_count);
		formatter.field("external", &self.external);
		formatter.finish()
	}
}
/// See [`ChatThread`](crate::model::ChatThread)
pub mod chat_thread {
	/// A builder for [`ChatThread`](crate::model::ChatThread)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) thread_id: std::option::Option<std::string::String>,
		pub(crate) create_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) topic: std::option::Option<crate::model::ChatTopic>,
		pub(crate) tail_message: std::option::Option<crate::model::ChatMessage>,
		pub(crate) last_read_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) unread_count: std::option::Option<i64>,
		pub(crate) external: std::option::Option<crate::model::ChatThreadExternalLinks>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn thread_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.thread_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_thread_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.thread_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn create_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.create_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_create_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.create_ts = input;
			self
		}
		/// Represents the topic of the given chat thread.
		pub fn topic(mut self, input: crate::model::ChatTopic) -> Self {
			self.topic = Some(input);
			self
		}
		/// Represents the topic of the given chat thread.
		pub fn set_topic(mut self, input: std::option::Option<crate::model::ChatTopic>) -> Self {
			self.topic = input;
			self
		}
		/// A chat message.
		pub fn tail_message(mut self, input: crate::model::ChatMessage) -> Self {
			self.tail_message = Some(input);
			self
		}
		/// A chat message.
		pub fn set_tail_message(
			mut self,
			input: std::option::Option<crate::model::ChatMessage>,
		) -> Self {
			self.tail_message = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn last_read_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.last_read_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_last_read_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.last_read_ts = input;
			self
		}
		/// Unsigned 64 bit integer.
		pub fn unread_count(mut self, input: i64) -> Self {
			self.unread_count = Some(input);
			self
		}
		/// Unsigned 64 bit integer.
		pub fn set_unread_count(mut self, input: std::option::Option<i64>) -> Self {
			self.unread_count = input;
			self
		}
		/// External links for a chat thread.
		pub fn external(mut self, input: crate::model::ChatThreadExternalLinks) -> Self {
			self.external = Some(input);
			self
		}
		/// External links for a chat thread.
		pub fn set_external(
			mut self,
			input: std::option::Option<crate::model::ChatThreadExternalLinks>,
		) -> Self {
			self.external = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatThread`](crate::model::ChatThread)
		pub fn build(self) -> crate::model::ChatThread {
			crate::model::ChatThread {
				thread_id: self.thread_id,
				create_ts: self.create_ts,
				topic: self.topic,
				tail_message: self.tail_message,
				last_read_ts: self.last_read_ts,
				unread_count: self.unread_count,
				external: self.external,
			}
		}
	}
}
impl ChatThread {
	/// Creates a new builder-style object to manufacture [`ChatThread`](crate::model::ChatThread)
	pub fn builder() -> crate::model::chat_thread::Builder {
		crate::model::chat_thread::Builder::default()
	}
}

/// External links for a chat thread.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatThreadExternalLinks {
	/// A link to opening the chat thread.
	pub chat: std::option::Option<std::string::String>,
}
impl ChatThreadExternalLinks {
	/// A link to opening the chat thread.
	pub fn chat(&self) -> std::option::Option<&str> {
		self.chat.as_deref()
	}
}
impl std::fmt::Debug for ChatThreadExternalLinks {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatThreadExternalLinks");
		formatter.field("chat", &self.chat);
		formatter.finish()
	}
}
/// See [`ChatThreadExternalLinks`](crate::model::ChatThreadExternalLinks)
pub mod chat_thread_external_links {
	/// A builder for [`ChatThreadExternalLinks`](crate::model::ChatThreadExternalLinks)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) chat: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A link to opening the chat thread.
		pub fn chat(mut self, input: impl Into<std::string::String>) -> Self {
			self.chat = Some(input.into());
			self
		}
		/// A link to opening the chat thread.
		pub fn set_chat(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.chat = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatThreadExternalLinks`](crate::model::ChatThreadExternalLinks)
		pub fn build(self) -> crate::model::ChatThreadExternalLinks {
			crate::model::ChatThreadExternalLinks { chat: self.chat }
		}
	}
}
impl ChatThreadExternalLinks {
	/// Creates a new builder-style object to manufacture [`ChatThreadExternalLinks`](crate::model::ChatThreadExternalLinks)
	pub fn builder() -> crate::model::chat_thread_external_links::Builder {
		crate::model::chat_thread_external_links::Builder::default()
	}
}

/// A chat message.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessage {
	/// A universally unique identifier.
	pub chat_message_id: std::option::Option<std::string::String>,
	/// A universally unique identifier.
	pub thread_id: std::option::Option<std::string::String>,
	/// RFC3339 timestamp.
	pub send_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Represents types of chat message bodies.
	pub body: std::option::Option<crate::model::ChatMessageBody>,
}
impl ChatMessage {
	/// A universally unique identifier.
	pub fn chat_message_id(&self) -> std::option::Option<&str> {
		self.chat_message_id.as_deref()
	}
	/// A universally unique identifier.
	pub fn thread_id(&self) -> std::option::Option<&str> {
		self.thread_id.as_deref()
	}
	/// RFC3339 timestamp.
	pub fn send_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.send_ts.as_ref()
	}
	/// Represents types of chat message bodies.
	pub fn body(&self) -> std::option::Option<&crate::model::ChatMessageBody> {
		self.body.as_ref()
	}
}
impl std::fmt::Debug for ChatMessage {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessage");
		formatter.field("chat_message_id", &self.chat_message_id);
		formatter.field("thread_id", &self.thread_id);
		formatter.field("send_ts", &self.send_ts);
		formatter.field("body", &self.body);
		formatter.finish()
	}
}
/// See [`ChatMessage`](crate::model::ChatMessage)
pub mod chat_message {
	/// A builder for [`ChatMessage`](crate::model::ChatMessage)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) chat_message_id: std::option::Option<std::string::String>,
		pub(crate) thread_id: std::option::Option<std::string::String>,
		pub(crate) send_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) body: std::option::Option<crate::model::ChatMessageBody>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn chat_message_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.chat_message_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_chat_message_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.chat_message_id = input;
			self
		}
		/// A universally unique identifier.
		pub fn thread_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.thread_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_thread_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.thread_id = input;
			self
		}
		/// RFC3339 timestamp.
		pub fn send_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.send_ts = Some(input);
			self
		}
		/// RFC3339 timestamp.
		pub fn set_send_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.send_ts = input;
			self
		}
		/// Represents types of chat message bodies.
		pub fn body(mut self, input: crate::model::ChatMessageBody) -> Self {
			self.body = Some(input);
			self
		}
		/// Represents types of chat message bodies.
		pub fn set_body(
			mut self,
			input: std::option::Option<crate::model::ChatMessageBody>,
		) -> Self {
			self.body = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatMessage`](crate::model::ChatMessage)
		pub fn build(self) -> crate::model::ChatMessage {
			crate::model::ChatMessage {
				chat_message_id: self.chat_message_id,
				thread_id: self.thread_id,
				send_ts: self.send_ts,
				body: self.body,
			}
		}
	}
}
impl ChatMessage {
	/// Creates a new builder-style object to manufacture [`ChatMessage`](crate::model::ChatMessage)
	pub fn builder() -> crate::model::chat_message::Builder {
		crate::model::chat_message::Builder::default()
	}
}

/// Represents types of chat message bodies.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum ChatMessageBody {
	/// `rivet.chat#ChatMessageBody` variant for indicating a new chat was created.
	ChatCreate(crate::model::ChatMessageBodyChatCreate),
	/// `rivet.chat#ChatMessageBody` variant for deleted messages.
	Deleted(crate::model::ChatMessageBodyDeleted),
	/// `rivet.chat#ChatMessageBody` variant for indicating an identity joined the group.
	GroupJoin(crate::model::ChatMessageBodyGroupJoin),
	/// `rivet.chat#ChatMessageBody` variant for indicating an identity left the group.
	GroupLeave(crate::model::ChatMessageBodyGroupLeave),
	/// `rivet.chat#ChatMessageBody` variant for indicating an identity has been kicked from the group.
	GroupMemberKick(crate::model::ChatMessageBodyGroupMemberKick),
	/// `rivet.chat#ChatMessageBody` variant for indicating an identity followed the identity.
	IdentityFollow(crate::model::ChatMessageBodyIdentityFollow),
	/// `rivet.chat#ChatMessageBody` variant for indicating a change in the party's current activity.
	PartyActivityChange(crate::model::ChatMessageBodyPartyActivityChange),
	/// `rivet.chat#ChatMessageBody` variant holding an a party invitation.
	PartyInvite(crate::model::ChatMessageBodyPartyInvite),
	/// `rivet.chat#ChatMessageBody` variant for indicating an identity joined the party.
	PartyJoin(crate::model::ChatMessageBodyPartyJoin),
	/// `rivet.chat#ChatMessageBody` variant for indicating an identity requesting to join your party.
	PartyJoinRequest(crate::model::ChatMessageBodyPartyJoinRequest),
	/// `rivet.chat#ChatMessageBody` variant for indicating an identity left the party.
	PartyLeave(crate::model::ChatMessageBodyPartyLeave),
	/// `rivet.chat#ChatMessageBody` variant for text messages. Sent by other identities using the chat interface.
	Text(crate::model::ChatMessageBodyText),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl ChatMessageBody {
	/// Tries to convert the enum instance into [`ChatCreate`](crate::model::ChatMessageBody::ChatCreate), extracting the inner [`ChatMessageBodyChatCreate`](crate::model::ChatMessageBodyChatCreate).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_chat_create(
		&self,
	) -> std::result::Result<&crate::model::ChatMessageBodyChatCreate, &Self> {
		if let ChatMessageBody::ChatCreate(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`ChatCreate`](crate::model::ChatMessageBody::ChatCreate).
	pub fn is_chat_create(&self) -> bool {
		self.as_chat_create().is_ok()
	}
	/// Tries to convert the enum instance into [`Deleted`](crate::model::ChatMessageBody::Deleted), extracting the inner [`ChatMessageBodyDeleted`](crate::model::ChatMessageBodyDeleted).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_deleted(&self) -> std::result::Result<&crate::model::ChatMessageBodyDeleted, &Self> {
		if let ChatMessageBody::Deleted(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Deleted`](crate::model::ChatMessageBody::Deleted).
	pub fn is_deleted(&self) -> bool {
		self.as_deleted().is_ok()
	}
	/// Tries to convert the enum instance into [`GroupJoin`](crate::model::ChatMessageBody::GroupJoin), extracting the inner [`ChatMessageBodyGroupJoin`](crate::model::ChatMessageBodyGroupJoin).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_group_join(
		&self,
	) -> std::result::Result<&crate::model::ChatMessageBodyGroupJoin, &Self> {
		if let ChatMessageBody::GroupJoin(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`GroupJoin`](crate::model::ChatMessageBody::GroupJoin).
	pub fn is_group_join(&self) -> bool {
		self.as_group_join().is_ok()
	}
	/// Tries to convert the enum instance into [`GroupLeave`](crate::model::ChatMessageBody::GroupLeave), extracting the inner [`ChatMessageBodyGroupLeave`](crate::model::ChatMessageBodyGroupLeave).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_group_leave(
		&self,
	) -> std::result::Result<&crate::model::ChatMessageBodyGroupLeave, &Self> {
		if let ChatMessageBody::GroupLeave(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`GroupLeave`](crate::model::ChatMessageBody::GroupLeave).
	pub fn is_group_leave(&self) -> bool {
		self.as_group_leave().is_ok()
	}
	/// Tries to convert the enum instance into [`GroupMemberKick`](crate::model::ChatMessageBody::GroupMemberKick), extracting the inner [`ChatMessageBodyGroupMemberKick`](crate::model::ChatMessageBodyGroupMemberKick).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_group_member_kick(
		&self,
	) -> std::result::Result<&crate::model::ChatMessageBodyGroupMemberKick, &Self> {
		if let ChatMessageBody::GroupMemberKick(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`GroupMemberKick`](crate::model::ChatMessageBody::GroupMemberKick).
	pub fn is_group_member_kick(&self) -> bool {
		self.as_group_member_kick().is_ok()
	}
	/// Tries to convert the enum instance into [`IdentityFollow`](crate::model::ChatMessageBody::IdentityFollow), extracting the inner [`ChatMessageBodyIdentityFollow`](crate::model::ChatMessageBodyIdentityFollow).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_identity_follow(
		&self,
	) -> std::result::Result<&crate::model::ChatMessageBodyIdentityFollow, &Self> {
		if let ChatMessageBody::IdentityFollow(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`IdentityFollow`](crate::model::ChatMessageBody::IdentityFollow).
	pub fn is_identity_follow(&self) -> bool {
		self.as_identity_follow().is_ok()
	}
	/// Tries to convert the enum instance into [`PartyActivityChange`](crate::model::ChatMessageBody::PartyActivityChange), extracting the inner [`ChatMessageBodyPartyActivityChange`](crate::model::ChatMessageBodyPartyActivityChange).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_party_activity_change(
		&self,
	) -> std::result::Result<&crate::model::ChatMessageBodyPartyActivityChange, &Self> {
		if let ChatMessageBody::PartyActivityChange(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`PartyActivityChange`](crate::model::ChatMessageBody::PartyActivityChange).
	pub fn is_party_activity_change(&self) -> bool {
		self.as_party_activity_change().is_ok()
	}
	/// Tries to convert the enum instance into [`PartyInvite`](crate::model::ChatMessageBody::PartyInvite), extracting the inner [`ChatMessageBodyPartyInvite`](crate::model::ChatMessageBodyPartyInvite).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_party_invite(
		&self,
	) -> std::result::Result<&crate::model::ChatMessageBodyPartyInvite, &Self> {
		if let ChatMessageBody::PartyInvite(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`PartyInvite`](crate::model::ChatMessageBody::PartyInvite).
	pub fn is_party_invite(&self) -> bool {
		self.as_party_invite().is_ok()
	}
	/// Tries to convert the enum instance into [`PartyJoin`](crate::model::ChatMessageBody::PartyJoin), extracting the inner [`ChatMessageBodyPartyJoin`](crate::model::ChatMessageBodyPartyJoin).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_party_join(
		&self,
	) -> std::result::Result<&crate::model::ChatMessageBodyPartyJoin, &Self> {
		if let ChatMessageBody::PartyJoin(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`PartyJoin`](crate::model::ChatMessageBody::PartyJoin).
	pub fn is_party_join(&self) -> bool {
		self.as_party_join().is_ok()
	}
	/// Tries to convert the enum instance into [`PartyJoinRequest`](crate::model::ChatMessageBody::PartyJoinRequest), extracting the inner [`ChatMessageBodyPartyJoinRequest`](crate::model::ChatMessageBodyPartyJoinRequest).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_party_join_request(
		&self,
	) -> std::result::Result<&crate::model::ChatMessageBodyPartyJoinRequest, &Self> {
		if let ChatMessageBody::PartyJoinRequest(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`PartyJoinRequest`](crate::model::ChatMessageBody::PartyJoinRequest).
	pub fn is_party_join_request(&self) -> bool {
		self.as_party_join_request().is_ok()
	}
	/// Tries to convert the enum instance into [`PartyLeave`](crate::model::ChatMessageBody::PartyLeave), extracting the inner [`ChatMessageBodyPartyLeave`](crate::model::ChatMessageBodyPartyLeave).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_party_leave(
		&self,
	) -> std::result::Result<&crate::model::ChatMessageBodyPartyLeave, &Self> {
		if let ChatMessageBody::PartyLeave(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`PartyLeave`](crate::model::ChatMessageBody::PartyLeave).
	pub fn is_party_leave(&self) -> bool {
		self.as_party_leave().is_ok()
	}
	/// Tries to convert the enum instance into [`Text`](crate::model::ChatMessageBody::Text), extracting the inner [`ChatMessageBodyText`](crate::model::ChatMessageBodyText).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_text(&self) -> std::result::Result<&crate::model::ChatMessageBodyText, &Self> {
		if let ChatMessageBody::Text(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Text`](crate::model::ChatMessageBody::Text).
	pub fn is_text(&self) -> bool {
		self.as_text().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// `rivet.chat#ChatMessageBody` variant for indicating a change in the party's current activity.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyPartyActivityChange {
	/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
	pub activity: std::option::Option<crate::model::PartyActivity>,
}
impl ChatMessageBodyPartyActivityChange {
	/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
	pub fn activity(&self) -> std::option::Option<&crate::model::PartyActivity> {
		self.activity.as_ref()
	}
}
impl std::fmt::Debug for ChatMessageBodyPartyActivityChange {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyPartyActivityChange");
		formatter.field("activity", &self.activity);
		formatter.finish()
	}
}
/// See [`ChatMessageBodyPartyActivityChange`](crate::model::ChatMessageBodyPartyActivityChange)
pub mod chat_message_body_party_activity_change {
	/// A builder for [`ChatMessageBodyPartyActivityChange`](crate::model::ChatMessageBodyPartyActivityChange)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) activity: std::option::Option<crate::model::PartyActivity>,
	}
	impl Builder {
		/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
		pub fn activity(mut self, input: crate::model::PartyActivity) -> Self {
			self.activity = Some(input);
			self
		}
		/// A union representing the activity of a given party. - `Idle`: The party is not doing anything. For example, the leader is sitting in the game menu or the players are hanging out on the hub. - `MatchmakerFindingLobby`: There is a find request in progress for the lobby. If the find request fails, it will go back to `Idle`. If the find request succeeds, it will go to `MatchmakerLobby`. - `MatchmakerLobby`: The party is in a lobby. This does not mean that all of the party members are in the lobby, see the member-specific states.
		pub fn set_activity(
			mut self,
			input: std::option::Option<crate::model::PartyActivity>,
		) -> Self {
			self.activity = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatMessageBodyPartyActivityChange`](crate::model::ChatMessageBodyPartyActivityChange)
		pub fn build(self) -> crate::model::ChatMessageBodyPartyActivityChange {
			crate::model::ChatMessageBodyPartyActivityChange {
				activity: self.activity,
			}
		}
	}
}
impl ChatMessageBodyPartyActivityChange {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyPartyActivityChange`](crate::model::ChatMessageBodyPartyActivityChange)
	pub fn builder() -> crate::model::chat_message_body_party_activity_change::Builder {
		crate::model::chat_message_body_party_activity_change::Builder::default()
	}
}

/// `rivet.chat#ChatMessageBody` variant for indicating an identity left the party.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyPartyLeave {
	/// An identity handle.
	pub identity: std::option::Option<crate::model::IdentityHandle>,
}
impl ChatMessageBodyPartyLeave {
	/// An identity handle.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.identity.as_ref()
	}
}
impl std::fmt::Debug for ChatMessageBodyPartyLeave {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyPartyLeave");
		formatter.field("identity", &self.identity);
		formatter.finish()
	}
}
/// See [`ChatMessageBodyPartyLeave`](crate::model::ChatMessageBodyPartyLeave)
pub mod chat_message_body_party_leave {
	/// A builder for [`ChatMessageBodyPartyLeave`](crate::model::ChatMessageBodyPartyLeave)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity: std::option::Option<crate::model::IdentityHandle>,
	}
	impl Builder {
		/// An identity handle.
		pub fn identity(mut self, input: crate::model::IdentityHandle) -> Self {
			self.identity = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatMessageBodyPartyLeave`](crate::model::ChatMessageBodyPartyLeave)
		pub fn build(self) -> crate::model::ChatMessageBodyPartyLeave {
			crate::model::ChatMessageBodyPartyLeave {
				identity: self.identity,
			}
		}
	}
}
impl ChatMessageBodyPartyLeave {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyPartyLeave`](crate::model::ChatMessageBodyPartyLeave)
	pub fn builder() -> crate::model::chat_message_body_party_leave::Builder {
		crate::model::chat_message_body_party_leave::Builder::default()
	}
}

/// `rivet.chat#ChatMessageBody` variant for indicating an identity joined the party.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyPartyJoin {
	/// An identity handle.
	pub identity: std::option::Option<crate::model::IdentityHandle>,
}
impl ChatMessageBodyPartyJoin {
	/// An identity handle.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.identity.as_ref()
	}
}
impl std::fmt::Debug for ChatMessageBodyPartyJoin {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyPartyJoin");
		formatter.field("identity", &self.identity);
		formatter.finish()
	}
}
/// See [`ChatMessageBodyPartyJoin`](crate::model::ChatMessageBodyPartyJoin)
pub mod chat_message_body_party_join {
	/// A builder for [`ChatMessageBodyPartyJoin`](crate::model::ChatMessageBodyPartyJoin)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity: std::option::Option<crate::model::IdentityHandle>,
	}
	impl Builder {
		/// An identity handle.
		pub fn identity(mut self, input: crate::model::IdentityHandle) -> Self {
			self.identity = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatMessageBodyPartyJoin`](crate::model::ChatMessageBodyPartyJoin)
		pub fn build(self) -> crate::model::ChatMessageBodyPartyJoin {
			crate::model::ChatMessageBodyPartyJoin {
				identity: self.identity,
			}
		}
	}
}
impl ChatMessageBodyPartyJoin {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyPartyJoin`](crate::model::ChatMessageBodyPartyJoin)
	pub fn builder() -> crate::model::chat_message_body_party_join::Builder {
		crate::model::chat_message_body_party_join::Builder::default()
	}
}

/// `rivet.chat#ChatMessageBody` variant for indicating an identity requesting to join your party.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyPartyJoinRequest {
	/// An identity handle.
	pub sender: std::option::Option<crate::model::IdentityHandle>,
}
impl ChatMessageBodyPartyJoinRequest {
	/// An identity handle.
	pub fn sender(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.sender.as_ref()
	}
}
impl std::fmt::Debug for ChatMessageBodyPartyJoinRequest {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyPartyJoinRequest");
		formatter.field("sender", &self.sender);
		formatter.finish()
	}
}
/// See [`ChatMessageBodyPartyJoinRequest`](crate::model::ChatMessageBodyPartyJoinRequest)
pub mod chat_message_body_party_join_request {
	/// A builder for [`ChatMessageBodyPartyJoinRequest`](crate::model::ChatMessageBodyPartyJoinRequest)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) sender: std::option::Option<crate::model::IdentityHandle>,
	}
	impl Builder {
		/// An identity handle.
		pub fn sender(mut self, input: crate::model::IdentityHandle) -> Self {
			self.sender = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_sender(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.sender = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatMessageBodyPartyJoinRequest`](crate::model::ChatMessageBodyPartyJoinRequest)
		pub fn build(self) -> crate::model::ChatMessageBodyPartyJoinRequest {
			crate::model::ChatMessageBodyPartyJoinRequest {
				sender: self.sender,
			}
		}
	}
}
impl ChatMessageBodyPartyJoinRequest {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyPartyJoinRequest`](crate::model::ChatMessageBodyPartyJoinRequest)
	pub fn builder() -> crate::model::chat_message_body_party_join_request::Builder {
		crate::model::chat_message_body_party_join_request::Builder::default()
	}
}

/// `rivet.chat#ChatMessageBody` variant holding an a party invitation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyPartyInvite {
	/// An identity handle.
	pub sender: std::option::Option<crate::model::IdentityHandle>,
	/// A party handle.
	pub party: std::option::Option<crate::model::PartyHandle>,
	/// Pass to `rivet.api.party#GetPartyFromInvite$token` to view more information about the party. Pass to `rivet.api.party.common#JoinPartyInvite$token` to join the party.
	pub invite_token: std::option::Option<std::string::String>,
}
impl ChatMessageBodyPartyInvite {
	/// An identity handle.
	pub fn sender(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.sender.as_ref()
	}
	/// A party handle.
	pub fn party(&self) -> std::option::Option<&crate::model::PartyHandle> {
		self.party.as_ref()
	}
	/// Pass to `rivet.api.party#GetPartyFromInvite$token` to view more information about the party. Pass to `rivet.api.party.common#JoinPartyInvite$token` to join the party.
	pub fn invite_token(&self) -> std::option::Option<&str> {
		self.invite_token.as_deref()
	}
}
impl std::fmt::Debug for ChatMessageBodyPartyInvite {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyPartyInvite");
		formatter.field("sender", &self.sender);
		formatter.field("party", &self.party);
		formatter.field("invite_token", &"*** Sensitive Data Redacted ***");
		formatter.finish()
	}
}
/// See [`ChatMessageBodyPartyInvite`](crate::model::ChatMessageBodyPartyInvite)
pub mod chat_message_body_party_invite {
	/// A builder for [`ChatMessageBodyPartyInvite`](crate::model::ChatMessageBodyPartyInvite)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) sender: std::option::Option<crate::model::IdentityHandle>,
		pub(crate) party: std::option::Option<crate::model::PartyHandle>,
		pub(crate) invite_token: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// An identity handle.
		pub fn sender(mut self, input: crate::model::IdentityHandle) -> Self {
			self.sender = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_sender(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.sender = input;
			self
		}
		/// A party handle.
		pub fn party(mut self, input: crate::model::PartyHandle) -> Self {
			self.party = Some(input);
			self
		}
		/// A party handle.
		pub fn set_party(mut self, input: std::option::Option<crate::model::PartyHandle>) -> Self {
			self.party = input;
			self
		}
		/// Pass to `rivet.api.party#GetPartyFromInvite$token` to view more information about the party. Pass to `rivet.api.party.common#JoinPartyInvite$token` to join the party.
		pub fn invite_token(mut self, input: impl Into<std::string::String>) -> Self {
			self.invite_token = Some(input.into());
			self
		}
		/// Pass to `rivet.api.party#GetPartyFromInvite$token` to view more information about the party. Pass to `rivet.api.party.common#JoinPartyInvite$token` to join the party.
		pub fn set_invite_token(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.invite_token = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatMessageBodyPartyInvite`](crate::model::ChatMessageBodyPartyInvite)
		pub fn build(self) -> crate::model::ChatMessageBodyPartyInvite {
			crate::model::ChatMessageBodyPartyInvite {
				sender: self.sender,
				party: self.party,
				invite_token: self.invite_token,
			}
		}
	}
}
impl ChatMessageBodyPartyInvite {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyPartyInvite`](crate::model::ChatMessageBodyPartyInvite)
	pub fn builder() -> crate::model::chat_message_body_party_invite::Builder {
		crate::model::chat_message_body_party_invite::Builder::default()
	}
}

/// `rivet.chat#ChatMessageBody` variant for indicating an identity has been kicked from the group.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyGroupMemberKick {
	/// An identity handle.
	pub identity: std::option::Option<crate::model::IdentityHandle>,
}
impl ChatMessageBodyGroupMemberKick {
	/// An identity handle.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.identity.as_ref()
	}
}
impl std::fmt::Debug for ChatMessageBodyGroupMemberKick {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyGroupMemberKick");
		formatter.field("identity", &self.identity);
		formatter.finish()
	}
}
/// See [`ChatMessageBodyGroupMemberKick`](crate::model::ChatMessageBodyGroupMemberKick)
pub mod chat_message_body_group_member_kick {
	/// A builder for [`ChatMessageBodyGroupMemberKick`](crate::model::ChatMessageBodyGroupMemberKick)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity: std::option::Option<crate::model::IdentityHandle>,
	}
	impl Builder {
		/// An identity handle.
		pub fn identity(mut self, input: crate::model::IdentityHandle) -> Self {
			self.identity = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatMessageBodyGroupMemberKick`](crate::model::ChatMessageBodyGroupMemberKick)
		pub fn build(self) -> crate::model::ChatMessageBodyGroupMemberKick {
			crate::model::ChatMessageBodyGroupMemberKick {
				identity: self.identity,
			}
		}
	}
}
impl ChatMessageBodyGroupMemberKick {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyGroupMemberKick`](crate::model::ChatMessageBodyGroupMemberKick)
	pub fn builder() -> crate::model::chat_message_body_group_member_kick::Builder {
		crate::model::chat_message_body_group_member_kick::Builder::default()
	}
}

/// `rivet.chat#ChatMessageBody` variant for indicating an identity left the group.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyGroupLeave {
	/// An identity handle.
	pub identity: std::option::Option<crate::model::IdentityHandle>,
}
impl ChatMessageBodyGroupLeave {
	/// An identity handle.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.identity.as_ref()
	}
}
impl std::fmt::Debug for ChatMessageBodyGroupLeave {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyGroupLeave");
		formatter.field("identity", &self.identity);
		formatter.finish()
	}
}
/// See [`ChatMessageBodyGroupLeave`](crate::model::ChatMessageBodyGroupLeave)
pub mod chat_message_body_group_leave {
	/// A builder for [`ChatMessageBodyGroupLeave`](crate::model::ChatMessageBodyGroupLeave)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity: std::option::Option<crate::model::IdentityHandle>,
	}
	impl Builder {
		/// An identity handle.
		pub fn identity(mut self, input: crate::model::IdentityHandle) -> Self {
			self.identity = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatMessageBodyGroupLeave`](crate::model::ChatMessageBodyGroupLeave)
		pub fn build(self) -> crate::model::ChatMessageBodyGroupLeave {
			crate::model::ChatMessageBodyGroupLeave {
				identity: self.identity,
			}
		}
	}
}
impl ChatMessageBodyGroupLeave {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyGroupLeave`](crate::model::ChatMessageBodyGroupLeave)
	pub fn builder() -> crate::model::chat_message_body_group_leave::Builder {
		crate::model::chat_message_body_group_leave::Builder::default()
	}
}

/// `rivet.chat#ChatMessageBody` variant for indicating an identity joined the group.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyGroupJoin {
	/// An identity handle.
	pub identity: std::option::Option<crate::model::IdentityHandle>,
}
impl ChatMessageBodyGroupJoin {
	/// An identity handle.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.identity.as_ref()
	}
}
impl std::fmt::Debug for ChatMessageBodyGroupJoin {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyGroupJoin");
		formatter.field("identity", &self.identity);
		formatter.finish()
	}
}
/// See [`ChatMessageBodyGroupJoin`](crate::model::ChatMessageBodyGroupJoin)
pub mod chat_message_body_group_join {
	/// A builder for [`ChatMessageBodyGroupJoin`](crate::model::ChatMessageBodyGroupJoin)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity: std::option::Option<crate::model::IdentityHandle>,
	}
	impl Builder {
		/// An identity handle.
		pub fn identity(mut self, input: crate::model::IdentityHandle) -> Self {
			self.identity = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatMessageBodyGroupJoin`](crate::model::ChatMessageBodyGroupJoin)
		pub fn build(self) -> crate::model::ChatMessageBodyGroupJoin {
			crate::model::ChatMessageBodyGroupJoin {
				identity: self.identity,
			}
		}
	}
}
impl ChatMessageBodyGroupJoin {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyGroupJoin`](crate::model::ChatMessageBodyGroupJoin)
	pub fn builder() -> crate::model::chat_message_body_group_join::Builder {
		crate::model::chat_message_body_group_join::Builder::default()
	}
}

/// `rivet.chat#ChatMessageBody` variant for indicating an identity followed the identity.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyIdentityFollow {}
impl std::fmt::Debug for ChatMessageBodyIdentityFollow {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyIdentityFollow");
		formatter.finish()
	}
}
/// See [`ChatMessageBodyIdentityFollow`](crate::model::ChatMessageBodyIdentityFollow)
pub mod chat_message_body_identity_follow {
	/// A builder for [`ChatMessageBodyIdentityFollow`](crate::model::ChatMessageBodyIdentityFollow)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`ChatMessageBodyIdentityFollow`](crate::model::ChatMessageBodyIdentityFollow)
		pub fn build(self) -> crate::model::ChatMessageBodyIdentityFollow {
			crate::model::ChatMessageBodyIdentityFollow {}
		}
	}
}
impl ChatMessageBodyIdentityFollow {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyIdentityFollow`](crate::model::ChatMessageBodyIdentityFollow)
	pub fn builder() -> crate::model::chat_message_body_identity_follow::Builder {
		crate::model::chat_message_body_identity_follow::Builder::default()
	}
}

/// `rivet.chat#ChatMessageBody` variant for deleted messages.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyDeleted {
	/// An identity handle.
	pub sender: std::option::Option<crate::model::IdentityHandle>,
}
impl ChatMessageBodyDeleted {
	/// An identity handle.
	pub fn sender(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.sender.as_ref()
	}
}
impl std::fmt::Debug for ChatMessageBodyDeleted {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyDeleted");
		formatter.field("sender", &self.sender);
		formatter.finish()
	}
}
/// See [`ChatMessageBodyDeleted`](crate::model::ChatMessageBodyDeleted)
pub mod chat_message_body_deleted {
	/// A builder for [`ChatMessageBodyDeleted`](crate::model::ChatMessageBodyDeleted)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) sender: std::option::Option<crate::model::IdentityHandle>,
	}
	impl Builder {
		/// An identity handle.
		pub fn sender(mut self, input: crate::model::IdentityHandle) -> Self {
			self.sender = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_sender(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.sender = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatMessageBodyDeleted`](crate::model::ChatMessageBodyDeleted)
		pub fn build(self) -> crate::model::ChatMessageBodyDeleted {
			crate::model::ChatMessageBodyDeleted {
				sender: self.sender,
			}
		}
	}
}
impl ChatMessageBodyDeleted {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyDeleted`](crate::model::ChatMessageBodyDeleted)
	pub fn builder() -> crate::model::chat_message_body_deleted::Builder {
		crate::model::chat_message_body_deleted::Builder::default()
	}
}

/// `rivet.chat#ChatMessageBody` variant for indicating a new chat was created.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyChatCreate {}
impl std::fmt::Debug for ChatMessageBodyChatCreate {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyChatCreate");
		formatter.finish()
	}
}
/// See [`ChatMessageBodyChatCreate`](crate::model::ChatMessageBodyChatCreate)
pub mod chat_message_body_chat_create {
	/// A builder for [`ChatMessageBodyChatCreate`](crate::model::ChatMessageBodyChatCreate)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`ChatMessageBodyChatCreate`](crate::model::ChatMessageBodyChatCreate)
		pub fn build(self) -> crate::model::ChatMessageBodyChatCreate {
			crate::model::ChatMessageBodyChatCreate {}
		}
	}
}
impl ChatMessageBodyChatCreate {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyChatCreate`](crate::model::ChatMessageBodyChatCreate)
	pub fn builder() -> crate::model::chat_message_body_chat_create::Builder {
		crate::model::chat_message_body_chat_create::Builder::default()
	}
}

/// `rivet.chat#ChatMessageBody` variant for text messages. Sent by other identities using the chat interface.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatMessageBodyText {
	/// An identity handle.
	pub sender: std::option::Option<crate::model::IdentityHandle>,
	/// The text in the message.
	pub body: std::option::Option<std::string::String>,
}
impl ChatMessageBodyText {
	/// An identity handle.
	pub fn sender(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.sender.as_ref()
	}
	/// The text in the message.
	pub fn body(&self) -> std::option::Option<&str> {
		self.body.as_deref()
	}
}
impl std::fmt::Debug for ChatMessageBodyText {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatMessageBodyText");
		formatter.field("sender", &self.sender);
		formatter.field("body", &self.body);
		formatter.finish()
	}
}
/// See [`ChatMessageBodyText`](crate::model::ChatMessageBodyText)
pub mod chat_message_body_text {
	/// A builder for [`ChatMessageBodyText`](crate::model::ChatMessageBodyText)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) sender: std::option::Option<crate::model::IdentityHandle>,
		pub(crate) body: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// An identity handle.
		pub fn sender(mut self, input: crate::model::IdentityHandle) -> Self {
			self.sender = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_sender(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.sender = input;
			self
		}
		/// The text in the message.
		pub fn body(mut self, input: impl Into<std::string::String>) -> Self {
			self.body = Some(input.into());
			self
		}
		/// The text in the message.
		pub fn set_body(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.body = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatMessageBodyText`](crate::model::ChatMessageBodyText)
		pub fn build(self) -> crate::model::ChatMessageBodyText {
			crate::model::ChatMessageBodyText {
				sender: self.sender,
				body: self.body,
			}
		}
	}
}
impl ChatMessageBodyText {
	/// Creates a new builder-style object to manufacture [`ChatMessageBodyText`](crate::model::ChatMessageBodyText)
	pub fn builder() -> crate::model::chat_message_body_text::Builder {
		crate::model::chat_message_body_text::Builder::default()
	}
}

/// Represents the topic of the given chat thread.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum ChatTopic {
	/// `rivet.chat#ChatTopic` variant for direct (identity to identity) chats.
	Direct(crate::model::ChatTopicDirect),
	/// `rivet.chat#ChatTopic` variant for groups.
	Group(crate::model::ChatTopicGroup),
	/// `rivet.chat#ChatTopic` variant for parties.
	Party(crate::model::ChatTopicParty),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl ChatTopic {
	/// Tries to convert the enum instance into [`Direct`](crate::model::ChatTopic::Direct), extracting the inner [`ChatTopicDirect`](crate::model::ChatTopicDirect).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_direct(&self) -> std::result::Result<&crate::model::ChatTopicDirect, &Self> {
		if let ChatTopic::Direct(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Direct`](crate::model::ChatTopic::Direct).
	pub fn is_direct(&self) -> bool {
		self.as_direct().is_ok()
	}
	/// Tries to convert the enum instance into [`Group`](crate::model::ChatTopic::Group), extracting the inner [`ChatTopicGroup`](crate::model::ChatTopicGroup).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_group(&self) -> std::result::Result<&crate::model::ChatTopicGroup, &Self> {
		if let ChatTopic::Group(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Group`](crate::model::ChatTopic::Group).
	pub fn is_group(&self) -> bool {
		self.as_group().is_ok()
	}
	/// Tries to convert the enum instance into [`Party`](crate::model::ChatTopic::Party), extracting the inner [`ChatTopicParty`](crate::model::ChatTopicParty).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_party(&self) -> std::result::Result<&crate::model::ChatTopicParty, &Self> {
		if let ChatTopic::Party(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Party`](crate::model::ChatTopic::Party).
	pub fn is_party(&self) -> bool {
		self.as_party().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// `rivet.chat#ChatTopic` variant for direct (identity to identity) chats.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatTopicDirect {
	/// An identity handle.
	pub identity_a: std::option::Option<crate::model::IdentityHandle>,
	/// An identity handle.
	pub identity_b: std::option::Option<crate::model::IdentityHandle>,
}
impl ChatTopicDirect {
	/// An identity handle.
	pub fn identity_a(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.identity_a.as_ref()
	}
	/// An identity handle.
	pub fn identity_b(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.identity_b.as_ref()
	}
}
impl std::fmt::Debug for ChatTopicDirect {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatTopicDirect");
		formatter.field("identity_a", &self.identity_a);
		formatter.field("identity_b", &self.identity_b);
		formatter.finish()
	}
}
/// See [`ChatTopicDirect`](crate::model::ChatTopicDirect)
pub mod chat_topic_direct {
	/// A builder for [`ChatTopicDirect`](crate::model::ChatTopicDirect)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity_a: std::option::Option<crate::model::IdentityHandle>,
		pub(crate) identity_b: std::option::Option<crate::model::IdentityHandle>,
	}
	impl Builder {
		/// An identity handle.
		pub fn identity_a(mut self, input: crate::model::IdentityHandle) -> Self {
			self.identity_a = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_identity_a(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.identity_a = input;
			self
		}
		/// An identity handle.
		pub fn identity_b(mut self, input: crate::model::IdentityHandle) -> Self {
			self.identity_b = Some(input);
			self
		}
		/// An identity handle.
		pub fn set_identity_b(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.identity_b = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatTopicDirect`](crate::model::ChatTopicDirect)
		pub fn build(self) -> crate::model::ChatTopicDirect {
			crate::model::ChatTopicDirect {
				identity_a: self.identity_a,
				identity_b: self.identity_b,
			}
		}
	}
}
impl ChatTopicDirect {
	/// Creates a new builder-style object to manufacture [`ChatTopicDirect`](crate::model::ChatTopicDirect)
	pub fn builder() -> crate::model::chat_topic_direct::Builder {
		crate::model::chat_topic_direct::Builder::default()
	}
}

/// `rivet.chat#ChatTopic` variant for parties.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatTopicParty {
	/// A party handle.
	pub party: std::option::Option<crate::model::PartyHandle>,
}
impl ChatTopicParty {
	/// A party handle.
	pub fn party(&self) -> std::option::Option<&crate::model::PartyHandle> {
		self.party.as_ref()
	}
}
impl std::fmt::Debug for ChatTopicParty {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatTopicParty");
		formatter.field("party", &self.party);
		formatter.finish()
	}
}
/// See [`ChatTopicParty`](crate::model::ChatTopicParty)
pub mod chat_topic_party {
	/// A builder for [`ChatTopicParty`](crate::model::ChatTopicParty)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) party: std::option::Option<crate::model::PartyHandle>,
	}
	impl Builder {
		/// A party handle.
		pub fn party(mut self, input: crate::model::PartyHandle) -> Self {
			self.party = Some(input);
			self
		}
		/// A party handle.
		pub fn set_party(mut self, input: std::option::Option<crate::model::PartyHandle>) -> Self {
			self.party = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatTopicParty`](crate::model::ChatTopicParty)
		pub fn build(self) -> crate::model::ChatTopicParty {
			crate::model::ChatTopicParty { party: self.party }
		}
	}
}
impl ChatTopicParty {
	/// Creates a new builder-style object to manufacture [`ChatTopicParty`](crate::model::ChatTopicParty)
	pub fn builder() -> crate::model::chat_topic_party::Builder {
		crate::model::chat_topic_party::Builder::default()
	}
}

/// `rivet.chat#ChatTopic` variant for groups.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChatTopicGroup {
	/// A group handle.
	pub group: std::option::Option<crate::model::GroupHandle>,
}
impl ChatTopicGroup {
	/// A group handle.
	pub fn group(&self) -> std::option::Option<&crate::model::GroupHandle> {
		self.group.as_ref()
	}
}
impl std::fmt::Debug for ChatTopicGroup {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ChatTopicGroup");
		formatter.field("group", &self.group);
		formatter.finish()
	}
}
/// See [`ChatTopicGroup`](crate::model::ChatTopicGroup)
pub mod chat_topic_group {
	/// A builder for [`ChatTopicGroup`](crate::model::ChatTopicGroup)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group: std::option::Option<crate::model::GroupHandle>,
	}
	impl Builder {
		/// A group handle.
		pub fn group(mut self, input: crate::model::GroupHandle) -> Self {
			self.group = Some(input);
			self
		}
		/// A group handle.
		pub fn set_group(mut self, input: std::option::Option<crate::model::GroupHandle>) -> Self {
			self.group = input;
			self
		}
		/// Consumes the builder and constructs a [`ChatTopicGroup`](crate::model::ChatTopicGroup)
		pub fn build(self) -> crate::model::ChatTopicGroup {
			crate::model::ChatTopicGroup { group: self.group }
		}
	}
}
impl ChatTopicGroup {
	/// Creates a new builder-style object to manufacture [`ChatTopicGroup`](crate::model::ChatTopicGroup)
	pub fn builder() -> crate::model::chat_topic_group::Builder {
		crate::model::chat_topic_group::Builder::default()
	}
}

/// An identity summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IdentitySummary {
	/// A universally unique identifier.
	pub identity_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
	pub account_number: std::option::Option<i32>,
	/// The URL of this identity's avatar image.
	pub avatar_url: std::option::Option<std::string::String>,
	/// Information about the identity's current status, party, and active game.
	pub presence: std::option::Option<crate::model::IdentityPresence>,
	/// A party handle.
	pub party: std::option::Option<crate::model::PartyHandle>,
	/// Whether or not this identity is registered with a linked account.
	pub is_registered: std::option::Option<bool>,
	/// External links for an identity.
	pub external: std::option::Option<crate::model::IdentityExternalLinks>,
	/// Whether or not the requestee's identity is following this identity.
	pub following: std::option::Option<bool>,
	/// Whether or not this identity following the requestee's identity.
	pub is_following_me: std::option::Option<bool>,
	/// Whether or not this identity is both following and is followed by the requestee's identity.
	pub is_mutual_following: std::option::Option<bool>,
}
impl IdentitySummary {
	/// A universally unique identifier.
	pub fn identity_id(&self) -> std::option::Option<&str> {
		self.identity_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
	pub fn account_number(&self) -> std::option::Option<i32> {
		self.account_number
	}
	/// The URL of this identity's avatar image.
	pub fn avatar_url(&self) -> std::option::Option<&str> {
		self.avatar_url.as_deref()
	}
	/// Information about the identity's current status, party, and active game.
	pub fn presence(&self) -> std::option::Option<&crate::model::IdentityPresence> {
		self.presence.as_ref()
	}
	/// A party handle.
	pub fn party(&self) -> std::option::Option<&crate::model::PartyHandle> {
		self.party.as_ref()
	}
	/// Whether or not this identity is registered with a linked account.
	pub fn is_registered(&self) -> std::option::Option<bool> {
		self.is_registered
	}
	/// External links for an identity.
	pub fn external(&self) -> std::option::Option<&crate::model::IdentityExternalLinks> {
		self.external.as_ref()
	}
	/// Whether or not the requestee's identity is following this identity.
	pub fn following(&self) -> std::option::Option<bool> {
		self.following
	}
	/// Whether or not this identity following the requestee's identity.
	pub fn is_following_me(&self) -> std::option::Option<bool> {
		self.is_following_me
	}
	/// Whether or not this identity is both following and is followed by the requestee's identity.
	pub fn is_mutual_following(&self) -> std::option::Option<bool> {
		self.is_mutual_following
	}
}
impl std::fmt::Debug for IdentitySummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("IdentitySummary");
		formatter.field("identity_id", &self.identity_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("account_number", &self.account_number);
		formatter.field("avatar_url", &self.avatar_url);
		formatter.field("presence", &self.presence);
		formatter.field("party", &self.party);
		formatter.field("is_registered", &self.is_registered);
		formatter.field("external", &self.external);
		formatter.field("following", &self.following);
		formatter.field("is_following_me", &self.is_following_me);
		formatter.field("is_mutual_following", &self.is_mutual_following);
		formatter.finish()
	}
}
/// See [`IdentitySummary`](crate::model::IdentitySummary)
pub mod identity_summary {
	/// A builder for [`IdentitySummary`](crate::model::IdentitySummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) account_number: std::option::Option<i32>,
		pub(crate) avatar_url: std::option::Option<std::string::String>,
		pub(crate) presence: std::option::Option<crate::model::IdentityPresence>,
		pub(crate) party: std::option::Option<crate::model::PartyHandle>,
		pub(crate) is_registered: std::option::Option<bool>,
		pub(crate) external: std::option::Option<crate::model::IdentityExternalLinks>,
		pub(crate) following: std::option::Option<bool>,
		pub(crate) is_following_me: std::option::Option<bool>,
		pub(crate) is_mutual_following: std::option::Option<bool>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.identity_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.identity_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
		pub fn account_number(mut self, input: i32) -> Self {
			self.account_number = Some(input);
			self
		}
		/// Identity profile account number (#1234). These are assigned in addition to an identity's display name in order to allow multiple identities to have the same display name while still providing a unique handle. These are unique to each display name; you can have multiple accounts with different display names and the same account number.
		pub fn set_account_number(mut self, input: std::option::Option<i32>) -> Self {
			self.account_number = input;
			self
		}
		/// The URL of this identity's avatar image.
		pub fn avatar_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.avatar_url = Some(input.into());
			self
		}
		/// The URL of this identity's avatar image.
		pub fn set_avatar_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.avatar_url = input;
			self
		}
		/// Information about the identity's current status, party, and active game.
		pub fn presence(mut self, input: crate::model::IdentityPresence) -> Self {
			self.presence = Some(input);
			self
		}
		/// Information about the identity's current status, party, and active game.
		pub fn set_presence(
			mut self,
			input: std::option::Option<crate::model::IdentityPresence>,
		) -> Self {
			self.presence = input;
			self
		}
		/// A party handle.
		pub fn party(mut self, input: crate::model::PartyHandle) -> Self {
			self.party = Some(input);
			self
		}
		/// A party handle.
		pub fn set_party(mut self, input: std::option::Option<crate::model::PartyHandle>) -> Self {
			self.party = input;
			self
		}
		/// Whether or not this identity is registered with a linked account.
		pub fn is_registered(mut self, input: bool) -> Self {
			self.is_registered = Some(input);
			self
		}
		/// Whether or not this identity is registered with a linked account.
		pub fn set_is_registered(mut self, input: std::option::Option<bool>) -> Self {
			self.is_registered = input;
			self
		}
		/// External links for an identity.
		pub fn external(mut self, input: crate::model::IdentityExternalLinks) -> Self {
			self.external = Some(input);
			self
		}
		/// External links for an identity.
		pub fn set_external(
			mut self,
			input: std::option::Option<crate::model::IdentityExternalLinks>,
		) -> Self {
			self.external = input;
			self
		}
		/// Whether or not the requestee's identity is following this identity.
		pub fn following(mut self, input: bool) -> Self {
			self.following = Some(input);
			self
		}
		/// Whether or not the requestee's identity is following this identity.
		pub fn set_following(mut self, input: std::option::Option<bool>) -> Self {
			self.following = input;
			self
		}
		/// Whether or not this identity following the requestee's identity.
		pub fn is_following_me(mut self, input: bool) -> Self {
			self.is_following_me = Some(input);
			self
		}
		/// Whether or not this identity following the requestee's identity.
		pub fn set_is_following_me(mut self, input: std::option::Option<bool>) -> Self {
			self.is_following_me = input;
			self
		}
		/// Whether or not this identity is both following and is followed by the requestee's identity.
		pub fn is_mutual_following(mut self, input: bool) -> Self {
			self.is_mutual_following = Some(input);
			self
		}
		/// Whether or not this identity is both following and is followed by the requestee's identity.
		pub fn set_is_mutual_following(mut self, input: std::option::Option<bool>) -> Self {
			self.is_mutual_following = input;
			self
		}
		/// Consumes the builder and constructs a [`IdentitySummary`](crate::model::IdentitySummary)
		pub fn build(self) -> crate::model::IdentitySummary {
			crate::model::IdentitySummary {
				identity_id: self.identity_id,
				display_name: self.display_name,
				account_number: self.account_number,
				avatar_url: self.avatar_url,
				presence: self.presence,
				party: self.party,
				is_registered: self.is_registered,
				external: self.external,
				following: self.following,
				is_following_me: self.is_following_me,
				is_mutual_following: self.is_mutual_following,
			}
		}
	}
}
impl IdentitySummary {
	/// Creates a new builder-style object to manufacture [`IdentitySummary`](crate::model::IdentitySummary)
	pub fn builder() -> crate::model::identity_summary::Builder {
		crate::model::identity_summary::Builder::default()
	}
}

/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UploadPresignedRequest {
	/// The name of the file to upload. This is the same as the one given in the upload prepare file.
	pub path: std::option::Option<std::string::String>,
	/// The URL of the presigned request for which to upload your file to.
	pub url: std::option::Option<std::string::String>,
}
impl UploadPresignedRequest {
	/// The name of the file to upload. This is the same as the one given in the upload prepare file.
	pub fn path(&self) -> std::option::Option<&str> {
		self.path.as_deref()
	}
	/// The URL of the presigned request for which to upload your file to.
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
}
impl std::fmt::Debug for UploadPresignedRequest {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UploadPresignedRequest");
		formatter.field("path", &self.path);
		formatter.field("url", &self.url);
		formatter.finish()
	}
}
/// See [`UploadPresignedRequest`](crate::model::UploadPresignedRequest)
pub mod upload_presigned_request {
	/// A builder for [`UploadPresignedRequest`](crate::model::UploadPresignedRequest)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) path: std::option::Option<std::string::String>,
		pub(crate) url: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// The name of the file to upload. This is the same as the one given in the upload prepare file.
		pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
			self.path = Some(input.into());
			self
		}
		/// The name of the file to upload. This is the same as the one given in the upload prepare file.
		pub fn set_path(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.path = input;
			self
		}
		/// The URL of the presigned request for which to upload your file to.
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		/// The URL of the presigned request for which to upload your file to.
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// Consumes the builder and constructs a [`UploadPresignedRequest`](crate::model::UploadPresignedRequest)
		pub fn build(self) -> crate::model::UploadPresignedRequest {
			crate::model::UploadPresignedRequest {
				path: self.path,
				url: self.url,
			}
		}
	}
}
impl UploadPresignedRequest {
	/// Creates a new builder-style object to manufacture [`UploadPresignedRequest`](crate::model::UploadPresignedRequest)
	pub fn builder() -> crate::model::upload_presigned_request::Builder {
		crate::model::upload_presigned_request::Builder::default()
	}
}

/// Information about the identity's current game. This is information that all other identities can see about what the current identity is doing.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateIdentityGameActivity {
	/// A short message about the current game activity.
	pub message: std::option::Option<std::string::String>,
	/// JSON data seen by anyone.
	pub public_metadata: std::option::Option<aws_smithy_types::Document>,
	/// JSON data seen only by the given identity and their mutual followers.
	pub mutual_metadata: std::option::Option<aws_smithy_types::Document>,
}
impl UpdateIdentityGameActivity {
	/// A short message about the current game activity.
	pub fn message(&self) -> std::option::Option<&str> {
		self.message.as_deref()
	}
	/// JSON data seen by anyone.
	pub fn public_metadata(&self) -> std::option::Option<&aws_smithy_types::Document> {
		self.public_metadata.as_ref()
	}
	/// JSON data seen only by the given identity and their mutual followers.
	pub fn mutual_metadata(&self) -> std::option::Option<&aws_smithy_types::Document> {
		self.mutual_metadata.as_ref()
	}
}
impl std::fmt::Debug for UpdateIdentityGameActivity {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UpdateIdentityGameActivity");
		formatter.field("message", &self.message);
		formatter.field("public_metadata", &self.public_metadata);
		formatter.field("mutual_metadata", &self.mutual_metadata);
		formatter.finish()
	}
}
/// See [`UpdateIdentityGameActivity`](crate::model::UpdateIdentityGameActivity)
pub mod update_identity_game_activity {
	/// A builder for [`UpdateIdentityGameActivity`](crate::model::UpdateIdentityGameActivity)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) message: std::option::Option<std::string::String>,
		pub(crate) public_metadata: std::option::Option<aws_smithy_types::Document>,
		pub(crate) mutual_metadata: std::option::Option<aws_smithy_types::Document>,
	}
	impl Builder {
		/// A short message about the current game activity.
		pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
			self.message = Some(input.into());
			self
		}
		/// A short message about the current game activity.
		pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.message = input;
			self
		}
		/// JSON data seen by anyone.
		pub fn public_metadata(mut self, input: aws_smithy_types::Document) -> Self {
			self.public_metadata = Some(input);
			self
		}
		/// JSON data seen by anyone.
		pub fn set_public_metadata(
			mut self,
			input: std::option::Option<aws_smithy_types::Document>,
		) -> Self {
			self.public_metadata = input;
			self
		}
		/// JSON data seen only by the given identity and their mutual followers.
		pub fn mutual_metadata(mut self, input: aws_smithy_types::Document) -> Self {
			self.mutual_metadata = Some(input);
			self
		}
		/// JSON data seen only by the given identity and their mutual followers.
		pub fn set_mutual_metadata(
			mut self,
			input: std::option::Option<aws_smithy_types::Document>,
		) -> Self {
			self.mutual_metadata = input;
			self
		}
		/// Consumes the builder and constructs a [`UpdateIdentityGameActivity`](crate::model::UpdateIdentityGameActivity)
		pub fn build(self) -> crate::model::UpdateIdentityGameActivity {
			crate::model::UpdateIdentityGameActivity {
				message: self.message,
				public_metadata: self.public_metadata,
				mutual_metadata: self.mutual_metadata,
			}
		}
	}
}
impl UpdateIdentityGameActivity {
	/// Creates a new builder-style object to manufacture [`UpdateIdentityGameActivity`](crate::model::UpdateIdentityGameActivity)
	pub fn builder() -> crate::model::update_identity_game_activity::Builder {
		crate::model::update_identity_game_activity::Builder::default()
	}
}

/// An error given by failed content validation.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidationError {
	/// A list of strings denoting the origin of a validation error.
	pub path: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ValidationError {
	/// A list of strings denoting the origin of a validation error.
	pub fn path(&self) -> std::option::Option<&[std::string::String]> {
		self.path.as_deref()
	}
}
impl std::fmt::Debug for ValidationError {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidationError");
		formatter.field("path", &self.path);
		formatter.finish()
	}
}
/// See [`ValidationError`](crate::model::ValidationError)
pub mod validation_error {
	/// A builder for [`ValidationError`](crate::model::ValidationError)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) path: std::option::Option<std::vec::Vec<std::string::String>>,
	}
	impl Builder {
		/// Appends an item to `path`.
		///
		/// To override the contents of this collection use [`set_path`](Self::set_path).
		///
		/// A list of strings denoting the origin of a validation error.
		pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.path.unwrap_or_default();
			v.push(input.into());
			self.path = Some(v);
			self
		}
		/// A list of strings denoting the origin of a validation error.
		pub fn set_path(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.path = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidationError`](crate::model::ValidationError)
		pub fn build(self) -> crate::model::ValidationError {
			crate::model::ValidationError { path: self.path }
		}
	}
}
impl ValidationError {
	/// Creates a new builder-style object to manufacture [`ValidationError`](crate::model::ValidationError)
	pub fn builder() -> crate::model::validation_error::Builder {
		crate::model::validation_error::Builder::default()
	}
}
