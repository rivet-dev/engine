// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CancelGameLink`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`cancel_game_link`](crate::client::Client::cancel_game_link).
///
/// See [`crate::client::fluent_builders::CancelGameLink`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelGameLink {
	_private: (),
}
impl CancelGameLink {
	/// Creates a new builder-style object to manufacture [`CancelGameLinkInput`](crate::input::CancelGameLinkInput)
	pub fn builder() -> crate::input::cancel_game_link_input::Builder {
		crate::input::cancel_game_link_input::Builder::default()
	}
	/// Creates a new `CancelGameLink` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CancelGameLink {
	type Output =
		std::result::Result<crate::output::CancelGameLinkOutput, crate::error::CancelGameLinkError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_cancel_game_link_error(response)
		} else {
			crate::operation_deser::parse_cancel_game_link_response(response)
		}
	}
}

/// Operation shape for `CompleteGameLink`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`complete_game_link`](crate::client::Client::complete_game_link).
///
/// See [`crate::client::fluent_builders::CompleteGameLink`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CompleteGameLink {
	_private: (),
}
impl CompleteGameLink {
	/// Creates a new builder-style object to manufacture [`CompleteGameLinkInput`](crate::input::CompleteGameLinkInput)
	pub fn builder() -> crate::input::complete_game_link_input::Builder {
		crate::input::complete_game_link_input::Builder::default()
	}
	/// Creates a new `CompleteGameLink` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CompleteGameLink {
	type Output = std::result::Result<
		crate::output::CompleteGameLinkOutput,
		crate::error::CompleteGameLinkError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_complete_game_link_error(response)
		} else {
			crate::operation_deser::parse_complete_game_link_response(response)
		}
	}
}

/// Operation shape for `CompleteIdentityAvatarUpload`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`complete_identity_avatar_upload`](crate::client::Client::complete_identity_avatar_upload).
///
/// See [`crate::client::fluent_builders::CompleteIdentityAvatarUpload`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CompleteIdentityAvatarUpload {
	_private: (),
}
impl CompleteIdentityAvatarUpload {
	/// Creates a new builder-style object to manufacture [`CompleteIdentityAvatarUploadInput`](crate::input::CompleteIdentityAvatarUploadInput)
	pub fn builder() -> crate::input::complete_identity_avatar_upload_input::Builder {
		crate::input::complete_identity_avatar_upload_input::Builder::default()
	}
	/// Creates a new `CompleteIdentityAvatarUpload` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CompleteIdentityAvatarUpload {
	type Output = std::result::Result<
		crate::output::CompleteIdentityAvatarUploadOutput,
		crate::error::CompleteIdentityAvatarUploadError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_complete_identity_avatar_upload_error(response)
		} else {
			crate::operation_deser::parse_complete_identity_avatar_upload_response(response)
		}
	}
}

/// Operation shape for `FollowIdentity`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`follow_identity`](crate::client::Client::follow_identity).
///
/// See [`crate::client::fluent_builders::FollowIdentity`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct FollowIdentity {
	_private: (),
}
impl FollowIdentity {
	/// Creates a new builder-style object to manufacture [`FollowIdentityInput`](crate::input::FollowIdentityInput)
	pub fn builder() -> crate::input::follow_identity_input::Builder {
		crate::input::follow_identity_input::Builder::default()
	}
	/// Creates a new `FollowIdentity` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for FollowIdentity {
	type Output =
		std::result::Result<crate::output::FollowIdentityOutput, crate::error::FollowIdentityError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_follow_identity_error(response)
		} else {
			crate::operation_deser::parse_follow_identity_response(response)
		}
	}
}

/// Operation shape for `GetGameLink`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_game_link`](crate::client::Client::get_game_link).
///
/// See [`crate::client::fluent_builders::GetGameLink`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGameLink {
	_private: (),
}
impl GetGameLink {
	/// Creates a new builder-style object to manufacture [`GetGameLinkInput`](crate::input::GetGameLinkInput)
	pub fn builder() -> crate::input::get_game_link_input::Builder {
		crate::input::get_game_link_input::Builder::default()
	}
	/// Creates a new `GetGameLink` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGameLink {
	type Output =
		std::result::Result<crate::output::GetGameLinkOutput, crate::error::GetGameLinkError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_game_link_error(response)
		} else {
			crate::operation_deser::parse_get_game_link_response(response)
		}
	}
}

/// Operation shape for `GetIdentityHandles`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_identity_handles`](crate::client::Client::get_identity_handles).
///
/// See [`crate::client::fluent_builders::GetIdentityHandles`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetIdentityHandles {
	_private: (),
}
impl GetIdentityHandles {
	/// Creates a new builder-style object to manufacture [`GetIdentityHandlesInput`](crate::input::GetIdentityHandlesInput)
	pub fn builder() -> crate::input::get_identity_handles_input::Builder {
		crate::input::get_identity_handles_input::Builder::default()
	}
	/// Creates a new `GetIdentityHandles` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetIdentityHandles {
	type Output = std::result::Result<
		crate::output::GetIdentityHandlesOutput,
		crate::error::GetIdentityHandlesError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_identity_handles_error(response)
		} else {
			crate::operation_deser::parse_get_identity_handles_response(response)
		}
	}
}

/// Operation shape for `GetIdentityProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_identity_profile`](crate::client::Client::get_identity_profile).
///
/// See [`crate::client::fluent_builders::GetIdentityProfile`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetIdentityProfile {
	_private: (),
}
impl GetIdentityProfile {
	/// Creates a new builder-style object to manufacture [`GetIdentityProfileInput`](crate::input::GetIdentityProfileInput)
	pub fn builder() -> crate::input::get_identity_profile_input::Builder {
		crate::input::get_identity_profile_input::Builder::default()
	}
	/// Creates a new `GetIdentityProfile` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetIdentityProfile {
	type Output = std::result::Result<
		crate::output::GetIdentityProfileOutput,
		crate::error::GetIdentityProfileError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_identity_profile_error(response)
		} else {
			crate::operation_deser::parse_get_identity_profile_response(response)
		}
	}
}

/// Operation shape for `GetIdentitySelfProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_identity_self_profile`](crate::client::Client::get_identity_self_profile).
///
/// See [`crate::client::fluent_builders::GetIdentitySelfProfile`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetIdentitySelfProfile {
	_private: (),
}
impl GetIdentitySelfProfile {
	/// Creates a new builder-style object to manufacture [`GetIdentitySelfProfileInput`](crate::input::GetIdentitySelfProfileInput)
	pub fn builder() -> crate::input::get_identity_self_profile_input::Builder {
		crate::input::get_identity_self_profile_input::Builder::default()
	}
	/// Creates a new `GetIdentitySelfProfile` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetIdentitySelfProfile {
	type Output = std::result::Result<
		crate::output::GetIdentitySelfProfileOutput,
		crate::error::GetIdentitySelfProfileError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_identity_self_profile_error(response)
		} else {
			crate::operation_deser::parse_get_identity_self_profile_response(response)
		}
	}
}

/// Operation shape for `GetIdentitySummaries`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_identity_summaries`](crate::client::Client::get_identity_summaries).
///
/// See [`crate::client::fluent_builders::GetIdentitySummaries`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetIdentitySummaries {
	_private: (),
}
impl GetIdentitySummaries {
	/// Creates a new builder-style object to manufacture [`GetIdentitySummariesInput`](crate::input::GetIdentitySummariesInput)
	pub fn builder() -> crate::input::get_identity_summaries_input::Builder {
		crate::input::get_identity_summaries_input::Builder::default()
	}
	/// Creates a new `GetIdentitySummaries` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetIdentitySummaries {
	type Output = std::result::Result<
		crate::output::GetIdentitySummariesOutput,
		crate::error::GetIdentitySummariesError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_identity_summaries_error(response)
		} else {
			crate::operation_deser::parse_get_identity_summaries_response(response)
		}
	}
}

/// Operation shape for `ListActivities`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_activities`](crate::client::Client::list_activities).
///
/// See [`crate::client::fluent_builders::ListActivities`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListActivities {
	_private: (),
}
impl ListActivities {
	/// Creates a new builder-style object to manufacture [`ListActivitiesInput`](crate::input::ListActivitiesInput)
	pub fn builder() -> crate::input::list_activities_input::Builder {
		crate::input::list_activities_input::Builder::default()
	}
	/// Creates a new `ListActivities` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ListActivities {
	type Output =
		std::result::Result<crate::output::ListActivitiesOutput, crate::error::ListActivitiesError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_list_activities_error(response)
		} else {
			crate::operation_deser::parse_list_activities_response(response)
		}
	}
}

/// Operation shape for `ListFollowers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_followers`](crate::client::Client::list_followers).
///
/// See [`crate::client::fluent_builders::ListFollowers`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFollowers {
	_private: (),
}
impl ListFollowers {
	/// Creates a new builder-style object to manufacture [`ListFollowersInput`](crate::input::ListFollowersInput)
	pub fn builder() -> crate::input::list_followers_input::Builder {
		crate::input::list_followers_input::Builder::default()
	}
	/// Creates a new `ListFollowers` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ListFollowers {
	type Output =
		std::result::Result<crate::output::ListFollowersOutput, crate::error::ListFollowersError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_list_followers_error(response)
		} else {
			crate::operation_deser::parse_list_followers_response(response)
		}
	}
}

/// Operation shape for `ListFollowing`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_following`](crate::client::Client::list_following).
///
/// See [`crate::client::fluent_builders::ListFollowing`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFollowing {
	_private: (),
}
impl ListFollowing {
	/// Creates a new builder-style object to manufacture [`ListFollowingInput`](crate::input::ListFollowingInput)
	pub fn builder() -> crate::input::list_following_input::Builder {
		crate::input::list_following_input::Builder::default()
	}
	/// Creates a new `ListFollowing` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ListFollowing {
	type Output =
		std::result::Result<crate::output::ListFollowingOutput, crate::error::ListFollowingError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_list_following_error(response)
		} else {
			crate::operation_deser::parse_list_following_response(response)
		}
	}
}

/// Operation shape for `ListFriends`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_friends`](crate::client::Client::list_friends).
///
/// See [`crate::client::fluent_builders::ListFriends`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListFriends {
	_private: (),
}
impl ListFriends {
	/// Creates a new builder-style object to manufacture [`ListFriendsInput`](crate::input::ListFriendsInput)
	pub fn builder() -> crate::input::list_friends_input::Builder {
		crate::input::list_friends_input::Builder::default()
	}
	/// Creates a new `ListFriends` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ListFriends {
	type Output =
		std::result::Result<crate::output::ListFriendsOutput, crate::error::ListFriendsError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_list_friends_error(response)
		} else {
			crate::operation_deser::parse_list_friends_response(response)
		}
	}
}

/// Operation shape for `ListMutualFriends`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_mutual_friends`](crate::client::Client::list_mutual_friends).
///
/// See [`crate::client::fluent_builders::ListMutualFriends`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMutualFriends {
	_private: (),
}
impl ListMutualFriends {
	/// Creates a new builder-style object to manufacture [`ListMutualFriendsInput`](crate::input::ListMutualFriendsInput)
	pub fn builder() -> crate::input::list_mutual_friends_input::Builder {
		crate::input::list_mutual_friends_input::Builder::default()
	}
	/// Creates a new `ListMutualFriends` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ListMutualFriends {
	type Output = std::result::Result<
		crate::output::ListMutualFriendsOutput,
		crate::error::ListMutualFriendsError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_list_mutual_friends_error(response)
		} else {
			crate::operation_deser::parse_list_mutual_friends_response(response)
		}
	}
}

/// Operation shape for `ListRecentFollowers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_recent_followers`](crate::client::Client::list_recent_followers).
///
/// See [`crate::client::fluent_builders::ListRecentFollowers`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRecentFollowers {
	_private: (),
}
impl ListRecentFollowers {
	/// Creates a new builder-style object to manufacture [`ListRecentFollowersInput`](crate::input::ListRecentFollowersInput)
	pub fn builder() -> crate::input::list_recent_followers_input::Builder {
		crate::input::list_recent_followers_input::Builder::default()
	}
	/// Creates a new `ListRecentFollowers` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ListRecentFollowers {
	type Output = std::result::Result<
		crate::output::ListRecentFollowersOutput,
		crate::error::ListRecentFollowersError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_list_recent_followers_error(response)
		} else {
			crate::operation_deser::parse_list_recent_followers_response(response)
		}
	}
}

/// Operation shape for `MarkDeletion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`mark_deletion`](crate::client::Client::mark_deletion).
///
/// See [`crate::client::fluent_builders::MarkDeletion`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct MarkDeletion {
	_private: (),
}
impl MarkDeletion {
	/// Creates a new builder-style object to manufacture [`MarkDeletionInput`](crate::input::MarkDeletionInput)
	pub fn builder() -> crate::input::mark_deletion_input::Builder {
		crate::input::mark_deletion_input::Builder::default()
	}
	/// Creates a new `MarkDeletion` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for MarkDeletion {
	type Output =
		std::result::Result<crate::output::MarkDeletionOutput, crate::error::MarkDeletionError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_mark_deletion_error(response)
		} else {
			crate::operation_deser::parse_mark_deletion_response(response)
		}
	}
}

/// Operation shape for `PrepareGameLink`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`prepare_game_link`](crate::client::Client::prepare_game_link).
///
/// See [`crate::client::fluent_builders::PrepareGameLink`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PrepareGameLink {
	_private: (),
}
impl PrepareGameLink {
	/// Creates a new builder-style object to manufacture [`PrepareGameLinkInput`](crate::input::PrepareGameLinkInput)
	pub fn builder() -> crate::input::prepare_game_link_input::Builder {
		crate::input::prepare_game_link_input::Builder::default()
	}
	/// Creates a new `PrepareGameLink` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for PrepareGameLink {
	type Output = std::result::Result<
		crate::output::PrepareGameLinkOutput,
		crate::error::PrepareGameLinkError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_prepare_game_link_error(response)
		} else {
			crate::operation_deser::parse_prepare_game_link_response(response)
		}
	}
}

/// Operation shape for `PrepareIdentityAvatarUpload`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`prepare_identity_avatar_upload`](crate::client::Client::prepare_identity_avatar_upload).
///
/// See [`crate::client::fluent_builders::PrepareIdentityAvatarUpload`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PrepareIdentityAvatarUpload {
	_private: (),
}
impl PrepareIdentityAvatarUpload {
	/// Creates a new builder-style object to manufacture [`PrepareIdentityAvatarUploadInput`](crate::input::PrepareIdentityAvatarUploadInput)
	pub fn builder() -> crate::input::prepare_identity_avatar_upload_input::Builder {
		crate::input::prepare_identity_avatar_upload_input::Builder::default()
	}
	/// Creates a new `PrepareIdentityAvatarUpload` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for PrepareIdentityAvatarUpload {
	type Output = std::result::Result<
		crate::output::PrepareIdentityAvatarUploadOutput,
		crate::error::PrepareIdentityAvatarUploadError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_prepare_identity_avatar_upload_error(response)
		} else {
			crate::operation_deser::parse_prepare_identity_avatar_upload_response(response)
		}
	}
}

/// Operation shape for `RecentFollowerIgnore`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`recent_follower_ignore`](crate::client::Client::recent_follower_ignore).
///
/// See [`crate::client::fluent_builders::RecentFollowerIgnore`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RecentFollowerIgnore {
	_private: (),
}
impl RecentFollowerIgnore {
	/// Creates a new builder-style object to manufacture [`RecentFollowerIgnoreInput`](crate::input::RecentFollowerIgnoreInput)
	pub fn builder() -> crate::input::recent_follower_ignore_input::Builder {
		crate::input::recent_follower_ignore_input::Builder::default()
	}
	/// Creates a new `RecentFollowerIgnore` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for RecentFollowerIgnore {
	type Output = std::result::Result<
		crate::output::RecentFollowerIgnoreOutput,
		crate::error::RecentFollowerIgnoreError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_recent_follower_ignore_error(response)
		} else {
			crate::operation_deser::parse_recent_follower_ignore_response(response)
		}
	}
}

/// Operation shape for `RemoveIdentityGameActivity`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_identity_game_activity`](crate::client::Client::remove_identity_game_activity).
///
/// See [`crate::client::fluent_builders::RemoveIdentityGameActivity`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveIdentityGameActivity {
	_private: (),
}
impl RemoveIdentityGameActivity {
	/// Creates a new builder-style object to manufacture [`RemoveIdentityGameActivityInput`](crate::input::RemoveIdentityGameActivityInput)
	pub fn builder() -> crate::input::remove_identity_game_activity_input::Builder {
		crate::input::remove_identity_game_activity_input::Builder::default()
	}
	/// Creates a new `RemoveIdentityGameActivity` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveIdentityGameActivity {
	type Output = std::result::Result<
		crate::output::RemoveIdentityGameActivityOutput,
		crate::error::RemoveIdentityGameActivityError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_remove_identity_game_activity_error(response)
		} else {
			crate::operation_deser::parse_remove_identity_game_activity_response(response)
		}
	}
}

/// Operation shape for `ReportIdentity`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`report_identity`](crate::client::Client::report_identity).
///
/// See [`crate::client::fluent_builders::ReportIdentity`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ReportIdentity {
	_private: (),
}
impl ReportIdentity {
	/// Creates a new builder-style object to manufacture [`ReportIdentityInput`](crate::input::ReportIdentityInput)
	pub fn builder() -> crate::input::report_identity_input::Builder {
		crate::input::report_identity_input::Builder::default()
	}
	/// Creates a new `ReportIdentity` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ReportIdentity {
	type Output =
		std::result::Result<crate::output::ReportIdentityOutput, crate::error::ReportIdentityError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_report_identity_error(response)
		} else {
			crate::operation_deser::parse_report_identity_response(response)
		}
	}
}

/// Operation shape for `SearchIdentities`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`search_identities`](crate::client::Client::search_identities).
///
/// See [`crate::client::fluent_builders::SearchIdentities`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SearchIdentities {
	_private: (),
}
impl SearchIdentities {
	/// Creates a new builder-style object to manufacture [`SearchIdentitiesInput`](crate::input::SearchIdentitiesInput)
	pub fn builder() -> crate::input::search_identities_input::Builder {
		crate::input::search_identities_input::Builder::default()
	}
	/// Creates a new `SearchIdentities` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for SearchIdentities {
	type Output = std::result::Result<
		crate::output::SearchIdentitiesOutput,
		crate::error::SearchIdentitiesError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_search_identities_error(response)
		} else {
			crate::operation_deser::parse_search_identities_response(response)
		}
	}
}

/// Operation shape for `SetIdentityGameActivity`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`set_identity_game_activity`](crate::client::Client::set_identity_game_activity).
///
/// See [`crate::client::fluent_builders::SetIdentityGameActivity`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetIdentityGameActivity {
	_private: (),
}
impl SetIdentityGameActivity {
	/// Creates a new builder-style object to manufacture [`SetIdentityGameActivityInput`](crate::input::SetIdentityGameActivityInput)
	pub fn builder() -> crate::input::set_identity_game_activity_input::Builder {
		crate::input::set_identity_game_activity_input::Builder::default()
	}
	/// Creates a new `SetIdentityGameActivity` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for SetIdentityGameActivity {
	type Output = std::result::Result<
		crate::output::SetIdentityGameActivityOutput,
		crate::error::SetIdentityGameActivityError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_set_identity_game_activity_error(response)
		} else {
			crate::operation_deser::parse_set_identity_game_activity_response(response)
		}
	}
}

/// Operation shape for `SetupIdentity`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`setup_identity`](crate::client::Client::setup_identity).
///
/// See [`crate::client::fluent_builders::SetupIdentity`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetupIdentity {
	_private: (),
}
impl SetupIdentity {
	/// Creates a new builder-style object to manufacture [`SetupIdentityInput`](crate::input::SetupIdentityInput)
	pub fn builder() -> crate::input::setup_identity_input::Builder {
		crate::input::setup_identity_input::Builder::default()
	}
	/// Creates a new `SetupIdentity` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for SetupIdentity {
	type Output =
		std::result::Result<crate::output::SetupIdentityOutput, crate::error::SetupIdentityError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_setup_identity_error(response)
		} else {
			crate::operation_deser::parse_setup_identity_response(response)
		}
	}
}

/// Operation shape for `SignupForBeta`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`signup_for_beta`](crate::client::Client::signup_for_beta).
///
/// See [`crate::client::fluent_builders::SignupForBeta`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SignupForBeta {
	_private: (),
}
impl SignupForBeta {
	/// Creates a new builder-style object to manufacture [`SignupForBetaInput`](crate::input::SignupForBetaInput)
	pub fn builder() -> crate::input::signup_for_beta_input::Builder {
		crate::input::signup_for_beta_input::Builder::default()
	}
	/// Creates a new `SignupForBeta` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for SignupForBeta {
	type Output =
		std::result::Result<crate::output::SignupForBetaOutput, crate::error::SignupForBetaError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_signup_for_beta_error(response)
		} else {
			crate::operation_deser::parse_signup_for_beta_response(response)
		}
	}
}

/// Operation shape for `UnfollowIdentity`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`unfollow_identity`](crate::client::Client::unfollow_identity).
///
/// See [`crate::client::fluent_builders::UnfollowIdentity`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnfollowIdentity {
	_private: (),
}
impl UnfollowIdentity {
	/// Creates a new builder-style object to manufacture [`UnfollowIdentityInput`](crate::input::UnfollowIdentityInput)
	pub fn builder() -> crate::input::unfollow_identity_input::Builder {
		crate::input::unfollow_identity_input::Builder::default()
	}
	/// Creates a new `UnfollowIdentity` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for UnfollowIdentity {
	type Output = std::result::Result<
		crate::output::UnfollowIdentityOutput,
		crate::error::UnfollowIdentityError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_unfollow_identity_error(response)
		} else {
			crate::operation_deser::parse_unfollow_identity_response(response)
		}
	}
}

/// Operation shape for `UnmarkDeletion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`unmark_deletion`](crate::client::Client::unmark_deletion).
///
/// See [`crate::client::fluent_builders::UnmarkDeletion`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnmarkDeletion {
	_private: (),
}
impl UnmarkDeletion {
	/// Creates a new builder-style object to manufacture [`UnmarkDeletionInput`](crate::input::UnmarkDeletionInput)
	pub fn builder() -> crate::input::unmark_deletion_input::Builder {
		crate::input::unmark_deletion_input::Builder::default()
	}
	/// Creates a new `UnmarkDeletion` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for UnmarkDeletion {
	type Output =
		std::result::Result<crate::output::UnmarkDeletionOutput, crate::error::UnmarkDeletionError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_unmark_deletion_error(response)
		} else {
			crate::operation_deser::parse_unmark_deletion_response(response)
		}
	}
}

/// Operation shape for `UpdateIdentityProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_identity_profile`](crate::client::Client::update_identity_profile).
///
/// See [`crate::client::fluent_builders::UpdateIdentityProfile`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateIdentityProfile {
	_private: (),
}
impl UpdateIdentityProfile {
	/// Creates a new builder-style object to manufacture [`UpdateIdentityProfileInput`](crate::input::UpdateIdentityProfileInput)
	pub fn builder() -> crate::input::update_identity_profile_input::Builder {
		crate::input::update_identity_profile_input::Builder::default()
	}
	/// Creates a new `UpdateIdentityProfile` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateIdentityProfile {
	type Output = std::result::Result<
		crate::output::UpdateIdentityProfileOutput,
		crate::error::UpdateIdentityProfileError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_update_identity_profile_error(response)
		} else {
			crate::operation_deser::parse_update_identity_profile_response(response)
		}
	}
}

/// Operation shape for `UpdateIdentityStatus`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_identity_status`](crate::client::Client::update_identity_status).
///
/// See [`crate::client::fluent_builders::UpdateIdentityStatus`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateIdentityStatus {
	_private: (),
}
impl UpdateIdentityStatus {
	/// Creates a new builder-style object to manufacture [`UpdateIdentityStatusInput`](crate::input::UpdateIdentityStatusInput)
	pub fn builder() -> crate::input::update_identity_status_input::Builder {
		crate::input::update_identity_status_input::Builder::default()
	}
	/// Creates a new `UpdateIdentityStatus` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateIdentityStatus {
	type Output = std::result::Result<
		crate::output::UpdateIdentityStatusOutput,
		crate::error::UpdateIdentityStatusError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_update_identity_status_error(response)
		} else {
			crate::operation_deser::parse_update_identity_status_response(response)
		}
	}
}

/// Operation shape for `ValidateIdentityProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`validate_identity_profile`](crate::client::Client::validate_identity_profile).
///
/// See [`crate::client::fluent_builders::ValidateIdentityProfile`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ValidateIdentityProfile {
	_private: (),
}
impl ValidateIdentityProfile {
	/// Creates a new builder-style object to manufacture [`ValidateIdentityProfileInput`](crate::input::ValidateIdentityProfileInput)
	pub fn builder() -> crate::input::validate_identity_profile_input::Builder {
		crate::input::validate_identity_profile_input::Builder::default()
	}
	/// Creates a new `ValidateIdentityProfile` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ValidateIdentityProfile {
	type Output = std::result::Result<
		crate::output::ValidateIdentityProfileOutput,
		crate::error::ValidateIdentityProfileError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_validate_identity_profile_error(response)
		} else {
			crate::operation_deser::parse_validate_identity_profile_response(response)
		}
	}
}

/// Operation shape for `WatchEvents`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`watch_events`](crate::client::Client::watch_events).
///
/// See [`crate::client::fluent_builders::WatchEvents`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct WatchEvents {
	_private: (),
}
impl WatchEvents {
	/// Creates a new builder-style object to manufacture [`WatchEventsInput`](crate::input::WatchEventsInput)
	pub fn builder() -> crate::input::watch_events_input::Builder {
		crate::input::watch_events_input::Builder::default()
	}
	/// Creates a new `WatchEvents` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for WatchEvents {
	type Output =
		std::result::Result<crate::output::WatchEventsOutput, crate::error::WatchEventsError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_watch_events_error(response)
		} else {
			crate::operation_deser::parse_watch_events_response(response)
		}
	}
}
