// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_cancel_game_link_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CancelGameLinkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_1) = &input.identity_link_token {
		object.key("identity_link_token").string(var_1.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_complete_game_link_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CompleteGameLinkInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_2) = &input.identity_link_token {
		object.key("identity_link_token").string(var_2.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_prepare_identity_avatar_upload_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::PrepareIdentityAvatarUploadInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_3) = &input.content_length {
		object.key("content_length").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_3).into()),
		);
	}
	if let Some(var_4) = &input.mime {
		object.key("mime").string(var_4.as_str());
	}
	if let Some(var_5) = &input.path {
		object.key("path").string(var_5.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_report_identity_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ReportIdentityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_6) = &input.reason {
		object.key("reason").string(var_6.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_set_identity_game_activity_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::SetIdentityGameActivityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_7) = &input.game_activity {
		let mut object_8 = object.key("game_activity").start_object();
		crate::json_ser::serialize_structure_crate_model_update_identity_game_activity(
			&mut object_8,
			var_7,
		)?;
		object_8.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_setup_identity_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::SetupIdentityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_9) = &input.existing_identity_token {
		object.key("existing_identity_token").string(var_9.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_signup_for_beta_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::SignupForBetaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_10) = &input.company_name {
		object.key("company_name").string(var_10.as_str());
	}
	if let Some(var_11) = &input.company_size {
		object.key("company_size").string(var_11.as_str());
	}
	if let Some(var_12) = &input.goals {
		object.key("goals").string(var_12.as_str());
	}
	if let Some(var_13) = &input.name {
		object.key("name").string(var_13.as_str());
	}
	if let Some(var_14) = &input.preferred_tools {
		object.key("preferred_tools").string(var_14.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_update_identity_profile_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::UpdateIdentityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_15) = &input.account_number {
		object.key("account_number").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_15).into()),
		);
	}
	if let Some(var_16) = &input.bio {
		object.key("bio").string(var_16.as_str());
	}
	if let Some(var_17) = &input.display_name {
		object.key("display_name").string(var_17.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_update_identity_status_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::UpdateIdentityStatusInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_18) = &input.status {
		object.key("status").string(var_18.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_identity_profile_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateIdentityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_19) = &input.account_number {
		object.key("account_number").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_19).into()),
		);
	}
	if let Some(var_20) = &input.bio {
		object.key("bio").string(var_20.as_str());
	}
	if let Some(var_21) = &input.display_name {
		object.key("display_name").string(var_21.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_update_identity_game_activity(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::UpdateIdentityGameActivity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_22) = &input.message {
		object.key("message").string(var_22.as_str());
	}
	if let Some(var_23) = &input.public_metadata {
		object.key("public_metadata").document(var_23);
	}
	if let Some(var_24) = &input.mutual_metadata {
		object.key("mutual_metadata").document(var_24);
	}
	Ok(())
}
