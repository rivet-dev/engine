// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListActivitiesOutput {
	/// A list of identity handles.
	pub identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
	/// A list of game summaries.
	pub games: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
	/// A list of party summaries.
	pub parties: std::option::Option<std::vec::Vec<crate::model::PartySummary>>,
	/// A list of group summaries.
	pub suggested_groups: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
	/// A list of identity handles.
	pub suggested_players: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl ListActivitiesOutput {
	/// A list of identity handles.
	pub fn identities(&self) -> std::option::Option<&[crate::model::IdentityHandle]> {
		self.identities.as_deref()
	}
	/// A list of game summaries.
	pub fn games(&self) -> std::option::Option<&[crate::model::GameSummary]> {
		self.games.as_deref()
	}
	/// A list of party summaries.
	pub fn parties(&self) -> std::option::Option<&[crate::model::PartySummary]> {
		self.parties.as_deref()
	}
	/// A list of group summaries.
	pub fn suggested_groups(&self) -> std::option::Option<&[crate::model::GroupSummary]> {
		self.suggested_groups.as_deref()
	}
	/// A list of identity handles.
	pub fn suggested_players(&self) -> std::option::Option<&[crate::model::IdentityHandle]> {
		self.suggested_players.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for ListActivitiesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListActivitiesOutput");
		formatter.field("identities", &self.identities);
		formatter.field("games", &self.games);
		formatter.field("parties", &self.parties);
		formatter.field("suggested_groups", &self.suggested_groups);
		formatter.field("suggested_players", &self.suggested_players);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`ListActivitiesOutput`](crate::output::ListActivitiesOutput)
pub mod list_activities_output {
	/// A builder for [`ListActivitiesOutput`](crate::output::ListActivitiesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		pub(crate) games: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
		pub(crate) parties: std::option::Option<std::vec::Vec<crate::model::PartySummary>>,
		pub(crate) suggested_groups: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
		pub(crate) suggested_players:
			std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `identities`.
		///
		/// To override the contents of this collection use [`set_identities`](Self::set_identities).
		///
		/// A list of identity handles.
		pub fn identities(mut self, input: crate::model::IdentityHandle) -> Self {
			let mut v = self.identities.unwrap_or_default();
			v.push(input);
			self.identities = Some(v);
			self
		}
		/// A list of identity handles.
		pub fn set_identities(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		) -> Self {
			self.identities = input;
			self
		}
		/// Appends an item to `games`.
		///
		/// To override the contents of this collection use [`set_games`](Self::set_games).
		///
		/// A list of game summaries.
		pub fn games(mut self, input: crate::model::GameSummary) -> Self {
			let mut v = self.games.unwrap_or_default();
			v.push(input);
			self.games = Some(v);
			self
		}
		/// A list of game summaries.
		pub fn set_games(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
		) -> Self {
			self.games = input;
			self
		}
		/// Appends an item to `parties`.
		///
		/// To override the contents of this collection use [`set_parties`](Self::set_parties).
		///
		/// A list of party summaries.
		pub fn parties(mut self, input: crate::model::PartySummary) -> Self {
			let mut v = self.parties.unwrap_or_default();
			v.push(input);
			self.parties = Some(v);
			self
		}
		/// A list of party summaries.
		pub fn set_parties(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::PartySummary>>,
		) -> Self {
			self.parties = input;
			self
		}
		/// Appends an item to `suggested_groups`.
		///
		/// To override the contents of this collection use [`set_suggested_groups`](Self::set_suggested_groups).
		///
		/// A list of group summaries.
		pub fn suggested_groups(mut self, input: crate::model::GroupSummary) -> Self {
			let mut v = self.suggested_groups.unwrap_or_default();
			v.push(input);
			self.suggested_groups = Some(v);
			self
		}
		/// A list of group summaries.
		pub fn set_suggested_groups(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
		) -> Self {
			self.suggested_groups = input;
			self
		}
		/// Appends an item to `suggested_players`.
		///
		/// To override the contents of this collection use [`set_suggested_players`](Self::set_suggested_players).
		///
		/// A list of identity handles.
		pub fn suggested_players(mut self, input: crate::model::IdentityHandle) -> Self {
			let mut v = self.suggested_players.unwrap_or_default();
			v.push(input);
			self.suggested_players = Some(v);
			self
		}
		/// A list of identity handles.
		pub fn set_suggested_players(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		) -> Self {
			self.suggested_players = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`ListActivitiesOutput`](crate::output::ListActivitiesOutput)
		pub fn build(self) -> crate::output::ListActivitiesOutput {
			crate::output::ListActivitiesOutput {
				identities: self.identities,
				games: self.games,
				parties: self.parties,
				suggested_groups: self.suggested_groups,
				suggested_players: self.suggested_players,
				watch: self.watch,
			}
		}
	}
}
impl ListActivitiesOutput {
	/// Creates a new builder-style object to manufacture [`ListActivitiesOutput`](crate::output::ListActivitiesOutput)
	pub fn builder() -> crate::output::list_activities_output::Builder {
		crate::output::list_activities_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelGameLinkOutput {}
impl std::fmt::Debug for CancelGameLinkOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CancelGameLinkOutput");
		formatter.finish()
	}
}
/// See [`CancelGameLinkOutput`](crate::output::CancelGameLinkOutput)
pub mod cancel_game_link_output {
	/// A builder for [`CancelGameLinkOutput`](crate::output::CancelGameLinkOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`CancelGameLinkOutput`](crate::output::CancelGameLinkOutput)
		pub fn build(self) -> crate::output::CancelGameLinkOutput {
			crate::output::CancelGameLinkOutput {}
		}
	}
}
impl CancelGameLinkOutput {
	/// Creates a new builder-style object to manufacture [`CancelGameLinkOutput`](crate::output::CancelGameLinkOutput)
	pub fn builder() -> crate::output::cancel_game_link_output::Builder {
		crate::output::cancel_game_link_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CompleteGameLinkOutput {}
impl std::fmt::Debug for CompleteGameLinkOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CompleteGameLinkOutput");
		formatter.finish()
	}
}
/// See [`CompleteGameLinkOutput`](crate::output::CompleteGameLinkOutput)
pub mod complete_game_link_output {
	/// A builder for [`CompleteGameLinkOutput`](crate::output::CompleteGameLinkOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`CompleteGameLinkOutput`](crate::output::CompleteGameLinkOutput)
		pub fn build(self) -> crate::output::CompleteGameLinkOutput {
			crate::output::CompleteGameLinkOutput {}
		}
	}
}
impl CompleteGameLinkOutput {
	/// Creates a new builder-style object to manufacture [`CompleteGameLinkOutput`](crate::output::CompleteGameLinkOutput)
	pub fn builder() -> crate::output::complete_game_link_output::Builder {
		crate::output::complete_game_link_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameLinkOutput {
	/// The link status between an identity and a game user.
	pub status: std::option::Option<crate::model::GameLinkStatus>,
	/// A game handle.
	pub game: std::option::Option<crate::model::GameHandle>,
	/// The current game user identity which created this game link.
	pub current_identity: std::option::Option<crate::model::IdentityHandle>,
	/// If `status` is `GameLinkStatus$COMPLETE`, this will return the new identity and identity token to use for all future requests.
	pub new_identity: std::option::Option<crate::model::GetGameLinkNewIdentity>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetGameLinkOutput {
	/// The link status between an identity and a game user.
	pub fn status(&self) -> std::option::Option<&crate::model::GameLinkStatus> {
		self.status.as_ref()
	}
	/// A game handle.
	pub fn game(&self) -> std::option::Option<&crate::model::GameHandle> {
		self.game.as_ref()
	}
	/// The current game user identity which created this game link.
	pub fn current_identity(&self) -> std::option::Option<&crate::model::IdentityHandle> {
		self.current_identity.as_ref()
	}
	/// If `status` is `GameLinkStatus$COMPLETE`, this will return the new identity and identity token to use for all future requests.
	pub fn new_identity(&self) -> std::option::Option<&crate::model::GetGameLinkNewIdentity> {
		self.new_identity.as_ref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetGameLinkOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameLinkOutput");
		formatter.field("status", &self.status);
		formatter.field("game", &self.game);
		formatter.field("current_identity", &self.current_identity);
		formatter.field("new_identity", &self.new_identity);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetGameLinkOutput`](crate::output::GetGameLinkOutput)
pub mod get_game_link_output {
	/// A builder for [`GetGameLinkOutput`](crate::output::GetGameLinkOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) status: std::option::Option<crate::model::GameLinkStatus>,
		pub(crate) game: std::option::Option<crate::model::GameHandle>,
		pub(crate) current_identity: std::option::Option<crate::model::IdentityHandle>,
		pub(crate) new_identity: std::option::Option<crate::model::GetGameLinkNewIdentity>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// The link status between an identity and a game user.
		pub fn status(mut self, input: crate::model::GameLinkStatus) -> Self {
			self.status = Some(input);
			self
		}
		/// The link status between an identity and a game user.
		pub fn set_status(
			mut self,
			input: std::option::Option<crate::model::GameLinkStatus>,
		) -> Self {
			self.status = input;
			self
		}
		/// A game handle.
		pub fn game(mut self, input: crate::model::GameHandle) -> Self {
			self.game = Some(input);
			self
		}
		/// A game handle.
		pub fn set_game(mut self, input: std::option::Option<crate::model::GameHandle>) -> Self {
			self.game = input;
			self
		}
		/// The current game user identity which created this game link.
		pub fn current_identity(mut self, input: crate::model::IdentityHandle) -> Self {
			self.current_identity = Some(input);
			self
		}
		/// The current game user identity which created this game link.
		pub fn set_current_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityHandle>,
		) -> Self {
			self.current_identity = input;
			self
		}
		/// If `status` is `GameLinkStatus$COMPLETE`, this will return the new identity and identity token to use for all future requests.
		pub fn new_identity(mut self, input: crate::model::GetGameLinkNewIdentity) -> Self {
			self.new_identity = Some(input);
			self
		}
		/// If `status` is `GameLinkStatus$COMPLETE`, this will return the new identity and identity token to use for all future requests.
		pub fn set_new_identity(
			mut self,
			input: std::option::Option<crate::model::GetGameLinkNewIdentity>,
		) -> Self {
			self.new_identity = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameLinkOutput`](crate::output::GetGameLinkOutput)
		pub fn build(self) -> crate::output::GetGameLinkOutput {
			crate::output::GetGameLinkOutput {
				status: self.status,
				game: self.game,
				current_identity: self.current_identity,
				new_identity: self.new_identity,
				watch: self.watch,
			}
		}
	}
}
impl GetGameLinkOutput {
	/// Creates a new builder-style object to manufacture [`GetGameLinkOutput`](crate::output::GetGameLinkOutput)
	pub fn builder() -> crate::output::get_game_link_output::Builder {
		crate::output::get_game_link_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PrepareGameLinkOutput {
	/// Pass this to `rivet.api.identity#GetGameLink` to get the linking status. Valid for 15 minutes.
	pub identity_link_token: std::option::Option<std::string::String>,
	/// The URL that the user should visit to link their Rivet account.
	pub identity_link_url: std::option::Option<std::string::String>,
	/// Timestamp (in milliseconds) at which the link will expire.
	pub expire_ts: std::option::Option<aws_smithy_types::DateTime>,
}
impl PrepareGameLinkOutput {
	/// Pass this to `rivet.api.identity#GetGameLink` to get the linking status. Valid for 15 minutes.
	pub fn identity_link_token(&self) -> std::option::Option<&str> {
		self.identity_link_token.as_deref()
	}
	/// The URL that the user should visit to link their Rivet account.
	pub fn identity_link_url(&self) -> std::option::Option<&str> {
		self.identity_link_url.as_deref()
	}
	/// Timestamp (in milliseconds) at which the link will expire.
	pub fn expire_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.expire_ts.as_ref()
	}
}
impl std::fmt::Debug for PrepareGameLinkOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PrepareGameLinkOutput");
		formatter.field("identity_link_token", &self.identity_link_token);
		formatter.field("identity_link_url", &self.identity_link_url);
		formatter.field("expire_ts", &self.expire_ts);
		formatter.finish()
	}
}
/// See [`PrepareGameLinkOutput`](crate::output::PrepareGameLinkOutput)
pub mod prepare_game_link_output {
	/// A builder for [`PrepareGameLinkOutput`](crate::output::PrepareGameLinkOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity_link_token: std::option::Option<std::string::String>,
		pub(crate) identity_link_url: std::option::Option<std::string::String>,
		pub(crate) expire_ts: std::option::Option<aws_smithy_types::DateTime>,
	}
	impl Builder {
		/// Pass this to `rivet.api.identity#GetGameLink` to get the linking status. Valid for 15 minutes.
		pub fn identity_link_token(mut self, input: impl Into<std::string::String>) -> Self {
			self.identity_link_token = Some(input.into());
			self
		}
		/// Pass this to `rivet.api.identity#GetGameLink` to get the linking status. Valid for 15 minutes.
		pub fn set_identity_link_token(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.identity_link_token = input;
			self
		}
		/// The URL that the user should visit to link their Rivet account.
		pub fn identity_link_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.identity_link_url = Some(input.into());
			self
		}
		/// The URL that the user should visit to link their Rivet account.
		pub fn set_identity_link_url(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.identity_link_url = input;
			self
		}
		/// Timestamp (in milliseconds) at which the link will expire.
		pub fn expire_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.expire_ts = Some(input);
			self
		}
		/// Timestamp (in milliseconds) at which the link will expire.
		pub fn set_expire_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.expire_ts = input;
			self
		}
		/// Consumes the builder and constructs a [`PrepareGameLinkOutput`](crate::output::PrepareGameLinkOutput)
		pub fn build(self) -> crate::output::PrepareGameLinkOutput {
			crate::output::PrepareGameLinkOutput {
				identity_link_token: self.identity_link_token,
				identity_link_url: self.identity_link_url,
				expire_ts: self.expire_ts,
			}
		}
	}
}
impl PrepareGameLinkOutput {
	/// Creates a new builder-style object to manufacture [`PrepareGameLinkOutput`](crate::output::PrepareGameLinkOutput)
	pub fn builder() -> crate::output::prepare_game_link_output::Builder {
		crate::output::prepare_game_link_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct WatchEventsOutput {
	/// A list of global events. Ordered old to new.
	pub events: std::option::Option<std::vec::Vec<crate::model::GlobalEvent>>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl WatchEventsOutput {
	/// A list of global events. Ordered old to new.
	pub fn events(&self) -> std::option::Option<&[crate::model::GlobalEvent]> {
		self.events.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for WatchEventsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("WatchEventsOutput");
		formatter.field("events", &self.events);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`WatchEventsOutput`](crate::output::WatchEventsOutput)
pub mod watch_events_output {
	/// A builder for [`WatchEventsOutput`](crate::output::WatchEventsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) events: std::option::Option<std::vec::Vec<crate::model::GlobalEvent>>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `events`.
		///
		/// To override the contents of this collection use [`set_events`](Self::set_events).
		///
		/// A list of global events. Ordered old to new.
		pub fn events(mut self, input: crate::model::GlobalEvent) -> Self {
			let mut v = self.events.unwrap_or_default();
			v.push(input);
			self.events = Some(v);
			self
		}
		/// A list of global events. Ordered old to new.
		pub fn set_events(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GlobalEvent>>,
		) -> Self {
			self.events = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`WatchEventsOutput`](crate::output::WatchEventsOutput)
		pub fn build(self) -> crate::output::WatchEventsOutput {
			crate::output::WatchEventsOutput {
				events: self.events,
				watch: self.watch,
			}
		}
	}
}
impl WatchEventsOutput {
	/// Creates a new builder-style object to manufacture [`WatchEventsOutput`](crate::output::WatchEventsOutput)
	pub fn builder() -> crate::output::watch_events_output::Builder {
		crate::output::watch_events_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnmarkDeletionOutput {}
impl std::fmt::Debug for UnmarkDeletionOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UnmarkDeletionOutput");
		formatter.finish()
	}
}
/// See [`UnmarkDeletionOutput`](crate::output::UnmarkDeletionOutput)
pub mod unmark_deletion_output {
	/// A builder for [`UnmarkDeletionOutput`](crate::output::UnmarkDeletionOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UnmarkDeletionOutput`](crate::output::UnmarkDeletionOutput)
		pub fn build(self) -> crate::output::UnmarkDeletionOutput {
			crate::output::UnmarkDeletionOutput {}
		}
	}
}
impl UnmarkDeletionOutput {
	/// Creates a new builder-style object to manufacture [`UnmarkDeletionOutput`](crate::output::UnmarkDeletionOutput)
	pub fn builder() -> crate::output::unmark_deletion_output::Builder {
		crate::output::unmark_deletion_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MarkDeletionOutput {}
impl std::fmt::Debug for MarkDeletionOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MarkDeletionOutput");
		formatter.finish()
	}
}
/// See [`MarkDeletionOutput`](crate::output::MarkDeletionOutput)
pub mod mark_deletion_output {
	/// A builder for [`MarkDeletionOutput`](crate::output::MarkDeletionOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`MarkDeletionOutput`](crate::output::MarkDeletionOutput)
		pub fn build(self) -> crate::output::MarkDeletionOutput {
			crate::output::MarkDeletionOutput {}
		}
	}
}
impl MarkDeletionOutput {
	/// Creates a new builder-style object to manufacture [`MarkDeletionOutput`](crate::output::MarkDeletionOutput)
	pub fn builder() -> crate::output::mark_deletion_output::Builder {
		crate::output::mark_deletion_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListMutualFriendsOutput {
	/// A list of identity handles.
	pub identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
	#[allow(missing_docs)] // documentation missing in model
	pub anchor: std::option::Option<std::string::String>,
}
impl ListMutualFriendsOutput {
	/// A list of identity handles.
	pub fn identities(&self) -> std::option::Option<&[crate::model::IdentityHandle]> {
		self.identities.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn anchor(&self) -> std::option::Option<&str> {
		self.anchor.as_deref()
	}
}
impl std::fmt::Debug for ListMutualFriendsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListMutualFriendsOutput");
		formatter.field("identities", &self.identities);
		formatter.field("anchor", &self.anchor);
		formatter.finish()
	}
}
/// See [`ListMutualFriendsOutput`](crate::output::ListMutualFriendsOutput)
pub mod list_mutual_friends_output {
	/// A builder for [`ListMutualFriendsOutput`](crate::output::ListMutualFriendsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		pub(crate) anchor: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Appends an item to `identities`.
		///
		/// To override the contents of this collection use [`set_identities`](Self::set_identities).
		///
		/// A list of identity handles.
		pub fn identities(mut self, input: crate::model::IdentityHandle) -> Self {
			let mut v = self.identities.unwrap_or_default();
			v.push(input);
			self.identities = Some(v);
			self
		}
		/// A list of identity handles.
		pub fn set_identities(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		) -> Self {
			self.identities = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn anchor(mut self, input: impl Into<std::string::String>) -> Self {
			self.anchor = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_anchor(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.anchor = input;
			self
		}
		/// Consumes the builder and constructs a [`ListMutualFriendsOutput`](crate::output::ListMutualFriendsOutput)
		pub fn build(self) -> crate::output::ListMutualFriendsOutput {
			crate::output::ListMutualFriendsOutput {
				identities: self.identities,
				anchor: self.anchor,
			}
		}
	}
}
impl ListMutualFriendsOutput {
	/// Creates a new builder-style object to manufacture [`ListMutualFriendsOutput`](crate::output::ListMutualFriendsOutput)
	pub fn builder() -> crate::output::list_mutual_friends_output::Builder {
		crate::output::list_mutual_friends_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RecentFollowerIgnoreOutput {}
impl std::fmt::Debug for RecentFollowerIgnoreOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RecentFollowerIgnoreOutput");
		formatter.finish()
	}
}
/// See [`RecentFollowerIgnoreOutput`](crate::output::RecentFollowerIgnoreOutput)
pub mod recent_follower_ignore_output {
	/// A builder for [`RecentFollowerIgnoreOutput`](crate::output::RecentFollowerIgnoreOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`RecentFollowerIgnoreOutput`](crate::output::RecentFollowerIgnoreOutput)
		pub fn build(self) -> crate::output::RecentFollowerIgnoreOutput {
			crate::output::RecentFollowerIgnoreOutput {}
		}
	}
}
impl RecentFollowerIgnoreOutput {
	/// Creates a new builder-style object to manufacture [`RecentFollowerIgnoreOutput`](crate::output::RecentFollowerIgnoreOutput)
	pub fn builder() -> crate::output::recent_follower_ignore_output::Builder {
		crate::output::recent_follower_ignore_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListRecentFollowersOutput {
	/// A list of identity handles.
	pub identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
	#[allow(missing_docs)] // documentation missing in model
	pub anchor: std::option::Option<std::string::String>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl ListRecentFollowersOutput {
	/// A list of identity handles.
	pub fn identities(&self) -> std::option::Option<&[crate::model::IdentityHandle]> {
		self.identities.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn anchor(&self) -> std::option::Option<&str> {
		self.anchor.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for ListRecentFollowersOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListRecentFollowersOutput");
		formatter.field("identities", &self.identities);
		formatter.field("anchor", &self.anchor);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`ListRecentFollowersOutput`](crate::output::ListRecentFollowersOutput)
pub mod list_recent_followers_output {
	/// A builder for [`ListRecentFollowersOutput`](crate::output::ListRecentFollowersOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		pub(crate) anchor: std::option::Option<std::string::String>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `identities`.
		///
		/// To override the contents of this collection use [`set_identities`](Self::set_identities).
		///
		/// A list of identity handles.
		pub fn identities(mut self, input: crate::model::IdentityHandle) -> Self {
			let mut v = self.identities.unwrap_or_default();
			v.push(input);
			self.identities = Some(v);
			self
		}
		/// A list of identity handles.
		pub fn set_identities(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		) -> Self {
			self.identities = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn anchor(mut self, input: impl Into<std::string::String>) -> Self {
			self.anchor = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_anchor(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.anchor = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`ListRecentFollowersOutput`](crate::output::ListRecentFollowersOutput)
		pub fn build(self) -> crate::output::ListRecentFollowersOutput {
			crate::output::ListRecentFollowersOutput {
				identities: self.identities,
				anchor: self.anchor,
				watch: self.watch,
			}
		}
	}
}
impl ListRecentFollowersOutput {
	/// Creates a new builder-style object to manufacture [`ListRecentFollowersOutput`](crate::output::ListRecentFollowersOutput)
	pub fn builder() -> crate::output::list_recent_followers_output::Builder {
		crate::output::list_recent_followers_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetIdentitySummariesOutput {
	/// A list of identity summaries.
	pub identities: std::option::Option<std::vec::Vec<crate::model::IdentitySummary>>,
}
impl GetIdentitySummariesOutput {
	/// A list of identity summaries.
	pub fn identities(&self) -> std::option::Option<&[crate::model::IdentitySummary]> {
		self.identities.as_deref()
	}
}
impl std::fmt::Debug for GetIdentitySummariesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetIdentitySummariesOutput");
		formatter.field("identities", &self.identities);
		formatter.finish()
	}
}
/// See [`GetIdentitySummariesOutput`](crate::output::GetIdentitySummariesOutput)
pub mod get_identity_summaries_output {
	/// A builder for [`GetIdentitySummariesOutput`](crate::output::GetIdentitySummariesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identities: std::option::Option<std::vec::Vec<crate::model::IdentitySummary>>,
	}
	impl Builder {
		/// Appends an item to `identities`.
		///
		/// To override the contents of this collection use [`set_identities`](Self::set_identities).
		///
		/// A list of identity summaries.
		pub fn identities(mut self, input: crate::model::IdentitySummary) -> Self {
			let mut v = self.identities.unwrap_or_default();
			v.push(input);
			self.identities = Some(v);
			self
		}
		/// A list of identity summaries.
		pub fn set_identities(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentitySummary>>,
		) -> Self {
			self.identities = input;
			self
		}
		/// Consumes the builder and constructs a [`GetIdentitySummariesOutput`](crate::output::GetIdentitySummariesOutput)
		pub fn build(self) -> crate::output::GetIdentitySummariesOutput {
			crate::output::GetIdentitySummariesOutput {
				identities: self.identities,
			}
		}
	}
}
impl GetIdentitySummariesOutput {
	/// Creates a new builder-style object to manufacture [`GetIdentitySummariesOutput`](crate::output::GetIdentitySummariesOutput)
	pub fn builder() -> crate::output::get_identity_summaries_output::Builder {
		crate::output::get_identity_summaries_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetIdentityHandlesOutput {
	/// A list of identity handles.
	pub identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
}
impl GetIdentityHandlesOutput {
	/// A list of identity handles.
	pub fn identities(&self) -> std::option::Option<&[crate::model::IdentityHandle]> {
		self.identities.as_deref()
	}
}
impl std::fmt::Debug for GetIdentityHandlesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetIdentityHandlesOutput");
		formatter.field("identities", &self.identities);
		formatter.finish()
	}
}
/// See [`GetIdentityHandlesOutput`](crate::output::GetIdentityHandlesOutput)
pub mod get_identity_handles_output {
	/// A builder for [`GetIdentityHandlesOutput`](crate::output::GetIdentityHandlesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
	}
	impl Builder {
		/// Appends an item to `identities`.
		///
		/// To override the contents of this collection use [`set_identities`](Self::set_identities).
		///
		/// A list of identity handles.
		pub fn identities(mut self, input: crate::model::IdentityHandle) -> Self {
			let mut v = self.identities.unwrap_or_default();
			v.push(input);
			self.identities = Some(v);
			self
		}
		/// A list of identity handles.
		pub fn set_identities(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		) -> Self {
			self.identities = input;
			self
		}
		/// Consumes the builder and constructs a [`GetIdentityHandlesOutput`](crate::output::GetIdentityHandlesOutput)
		pub fn build(self) -> crate::output::GetIdentityHandlesOutput {
			crate::output::GetIdentityHandlesOutput {
				identities: self.identities,
			}
		}
	}
}
impl GetIdentityHandlesOutput {
	/// Creates a new builder-style object to manufacture [`GetIdentityHandlesOutput`](crate::output::GetIdentityHandlesOutput)
	pub fn builder() -> crate::output::get_identity_handles_output::Builder {
		crate::output::get_identity_handles_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReportIdentityOutput {}
impl std::fmt::Debug for ReportIdentityOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ReportIdentityOutput");
		formatter.finish()
	}
}
/// See [`ReportIdentityOutput`](crate::output::ReportIdentityOutput)
pub mod report_identity_output {
	/// A builder for [`ReportIdentityOutput`](crate::output::ReportIdentityOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`ReportIdentityOutput`](crate::output::ReportIdentityOutput)
		pub fn build(self) -> crate::output::ReportIdentityOutput {
			crate::output::ReportIdentityOutput {}
		}
	}
}
impl ReportIdentityOutput {
	/// Creates a new builder-style object to manufacture [`ReportIdentityOutput`](crate::output::ReportIdentityOutput)
	pub fn builder() -> crate::output::report_identity_output::Builder {
		crate::output::report_identity_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListFriendsOutput {
	/// A list of identity handles.
	pub identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
	#[allow(missing_docs)] // documentation missing in model
	pub anchor: std::option::Option<std::string::String>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl ListFriendsOutput {
	/// A list of identity handles.
	pub fn identities(&self) -> std::option::Option<&[crate::model::IdentityHandle]> {
		self.identities.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn anchor(&self) -> std::option::Option<&str> {
		self.anchor.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for ListFriendsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListFriendsOutput");
		formatter.field("identities", &self.identities);
		formatter.field("anchor", &self.anchor);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`ListFriendsOutput`](crate::output::ListFriendsOutput)
pub mod list_friends_output {
	/// A builder for [`ListFriendsOutput`](crate::output::ListFriendsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		pub(crate) anchor: std::option::Option<std::string::String>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `identities`.
		///
		/// To override the contents of this collection use [`set_identities`](Self::set_identities).
		///
		/// A list of identity handles.
		pub fn identities(mut self, input: crate::model::IdentityHandle) -> Self {
			let mut v = self.identities.unwrap_or_default();
			v.push(input);
			self.identities = Some(v);
			self
		}
		/// A list of identity handles.
		pub fn set_identities(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		) -> Self {
			self.identities = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn anchor(mut self, input: impl Into<std::string::String>) -> Self {
			self.anchor = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_anchor(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.anchor = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`ListFriendsOutput`](crate::output::ListFriendsOutput)
		pub fn build(self) -> crate::output::ListFriendsOutput {
			crate::output::ListFriendsOutput {
				identities: self.identities,
				anchor: self.anchor,
				watch: self.watch,
			}
		}
	}
}
impl ListFriendsOutput {
	/// Creates a new builder-style object to manufacture [`ListFriendsOutput`](crate::output::ListFriendsOutput)
	pub fn builder() -> crate::output::list_friends_output::Builder {
		crate::output::list_friends_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListFollowingOutput {
	/// A list of identity handles.
	pub identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
	#[allow(missing_docs)] // documentation missing in model
	pub anchor: std::option::Option<std::string::String>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl ListFollowingOutput {
	/// A list of identity handles.
	pub fn identities(&self) -> std::option::Option<&[crate::model::IdentityHandle]> {
		self.identities.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn anchor(&self) -> std::option::Option<&str> {
		self.anchor.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for ListFollowingOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListFollowingOutput");
		formatter.field("identities", &self.identities);
		formatter.field("anchor", &self.anchor);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`ListFollowingOutput`](crate::output::ListFollowingOutput)
pub mod list_following_output {
	/// A builder for [`ListFollowingOutput`](crate::output::ListFollowingOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		pub(crate) anchor: std::option::Option<std::string::String>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `identities`.
		///
		/// To override the contents of this collection use [`set_identities`](Self::set_identities).
		///
		/// A list of identity handles.
		pub fn identities(mut self, input: crate::model::IdentityHandle) -> Self {
			let mut v = self.identities.unwrap_or_default();
			v.push(input);
			self.identities = Some(v);
			self
		}
		/// A list of identity handles.
		pub fn set_identities(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		) -> Self {
			self.identities = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn anchor(mut self, input: impl Into<std::string::String>) -> Self {
			self.anchor = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_anchor(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.anchor = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`ListFollowingOutput`](crate::output::ListFollowingOutput)
		pub fn build(self) -> crate::output::ListFollowingOutput {
			crate::output::ListFollowingOutput {
				identities: self.identities,
				anchor: self.anchor,
				watch: self.watch,
			}
		}
	}
}
impl ListFollowingOutput {
	/// Creates a new builder-style object to manufacture [`ListFollowingOutput`](crate::output::ListFollowingOutput)
	pub fn builder() -> crate::output::list_following_output::Builder {
		crate::output::list_following_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListFollowersOutput {
	/// A list of identity handles.
	pub identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
	#[allow(missing_docs)] // documentation missing in model
	pub anchor: std::option::Option<std::string::String>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl ListFollowersOutput {
	/// A list of identity handles.
	pub fn identities(&self) -> std::option::Option<&[crate::model::IdentityHandle]> {
		self.identities.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn anchor(&self) -> std::option::Option<&str> {
		self.anchor.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for ListFollowersOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListFollowersOutput");
		formatter.field("identities", &self.identities);
		formatter.field("anchor", &self.anchor);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`ListFollowersOutput`](crate::output::ListFollowersOutput)
pub mod list_followers_output {
	/// A builder for [`ListFollowersOutput`](crate::output::ListFollowersOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		pub(crate) anchor: std::option::Option<std::string::String>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `identities`.
		///
		/// To override the contents of this collection use [`set_identities`](Self::set_identities).
		///
		/// A list of identity handles.
		pub fn identities(mut self, input: crate::model::IdentityHandle) -> Self {
			let mut v = self.identities.unwrap_or_default();
			v.push(input);
			self.identities = Some(v);
			self
		}
		/// A list of identity handles.
		pub fn set_identities(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		) -> Self {
			self.identities = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn anchor(mut self, input: impl Into<std::string::String>) -> Self {
			self.anchor = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_anchor(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.anchor = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`ListFollowersOutput`](crate::output::ListFollowersOutput)
		pub fn build(self) -> crate::output::ListFollowersOutput {
			crate::output::ListFollowersOutput {
				identities: self.identities,
				anchor: self.anchor,
				watch: self.watch,
			}
		}
	}
}
impl ListFollowersOutput {
	/// Creates a new builder-style object to manufacture [`ListFollowersOutput`](crate::output::ListFollowersOutput)
	pub fn builder() -> crate::output::list_followers_output::Builder {
		crate::output::list_followers_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SignupForBetaOutput {}
impl std::fmt::Debug for SignupForBetaOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SignupForBetaOutput");
		formatter.finish()
	}
}
/// See [`SignupForBetaOutput`](crate::output::SignupForBetaOutput)
pub mod signup_for_beta_output {
	/// A builder for [`SignupForBetaOutput`](crate::output::SignupForBetaOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`SignupForBetaOutput`](crate::output::SignupForBetaOutput)
		pub fn build(self) -> crate::output::SignupForBetaOutput {
			crate::output::SignupForBetaOutput {}
		}
	}
}
impl SignupForBetaOutput {
	/// Creates a new builder-style object to manufacture [`SignupForBetaOutput`](crate::output::SignupForBetaOutput)
	pub fn builder() -> crate::output::signup_for_beta_output::Builder {
		crate::output::signup_for_beta_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CompleteIdentityAvatarUploadOutput {}
impl std::fmt::Debug for CompleteIdentityAvatarUploadOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CompleteIdentityAvatarUploadOutput");
		formatter.finish()
	}
}
/// See [`CompleteIdentityAvatarUploadOutput`](crate::output::CompleteIdentityAvatarUploadOutput)
pub mod complete_identity_avatar_upload_output {
	/// A builder for [`CompleteIdentityAvatarUploadOutput`](crate::output::CompleteIdentityAvatarUploadOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`CompleteIdentityAvatarUploadOutput`](crate::output::CompleteIdentityAvatarUploadOutput)
		pub fn build(self) -> crate::output::CompleteIdentityAvatarUploadOutput {
			crate::output::CompleteIdentityAvatarUploadOutput {}
		}
	}
}
impl CompleteIdentityAvatarUploadOutput {
	/// Creates a new builder-style object to manufacture [`CompleteIdentityAvatarUploadOutput`](crate::output::CompleteIdentityAvatarUploadOutput)
	pub fn builder() -> crate::output::complete_identity_avatar_upload_output::Builder {
		crate::output::complete_identity_avatar_upload_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PrepareIdentityAvatarUploadOutput {
	/// A universally unique identifier.
	pub upload_id: std::option::Option<std::string::String>,
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
}
impl PrepareIdentityAvatarUploadOutput {
	/// A universally unique identifier.
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
	pub fn presigned_request(&self) -> std::option::Option<&crate::model::UploadPresignedRequest> {
		self.presigned_request.as_ref()
	}
}
impl std::fmt::Debug for PrepareIdentityAvatarUploadOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("PrepareIdentityAvatarUploadOutput");
		formatter.field("upload_id", &self.upload_id);
		formatter.field("presigned_request", &self.presigned_request);
		formatter.finish()
	}
}
/// See [`PrepareIdentityAvatarUploadOutput`](crate::output::PrepareIdentityAvatarUploadOutput)
pub mod prepare_identity_avatar_upload_output {
	/// A builder for [`PrepareIdentityAvatarUploadOutput`](crate::output::PrepareIdentityAvatarUploadOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn presigned_request(mut self, input: crate::model::UploadPresignedRequest) -> Self {
			self.presigned_request = Some(input);
			self
		}
		/// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
		pub fn set_presigned_request(
			mut self,
			input: std::option::Option<crate::model::UploadPresignedRequest>,
		) -> Self {
			self.presigned_request = input;
			self
		}
		/// Consumes the builder and constructs a [`PrepareIdentityAvatarUploadOutput`](crate::output::PrepareIdentityAvatarUploadOutput)
		pub fn build(self) -> crate::output::PrepareIdentityAvatarUploadOutput {
			crate::output::PrepareIdentityAvatarUploadOutput {
				upload_id: self.upload_id,
				presigned_request: self.presigned_request,
			}
		}
	}
}
impl PrepareIdentityAvatarUploadOutput {
	/// Creates a new builder-style object to manufacture [`PrepareIdentityAvatarUploadOutput`](crate::output::PrepareIdentityAvatarUploadOutput)
	pub fn builder() -> crate::output::prepare_identity_avatar_upload_output::Builder {
		crate::output::prepare_identity_avatar_upload_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnfollowIdentityOutput {}
impl std::fmt::Debug for UnfollowIdentityOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UnfollowIdentityOutput");
		formatter.finish()
	}
}
/// See [`UnfollowIdentityOutput`](crate::output::UnfollowIdentityOutput)
pub mod unfollow_identity_output {
	/// A builder for [`UnfollowIdentityOutput`](crate::output::UnfollowIdentityOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UnfollowIdentityOutput`](crate::output::UnfollowIdentityOutput)
		pub fn build(self) -> crate::output::UnfollowIdentityOutput {
			crate::output::UnfollowIdentityOutput {}
		}
	}
}
impl UnfollowIdentityOutput {
	/// Creates a new builder-style object to manufacture [`UnfollowIdentityOutput`](crate::output::UnfollowIdentityOutput)
	pub fn builder() -> crate::output::unfollow_identity_output::Builder {
		crate::output::unfollow_identity_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct FollowIdentityOutput {}
impl std::fmt::Debug for FollowIdentityOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("FollowIdentityOutput");
		formatter.finish()
	}
}
/// See [`FollowIdentityOutput`](crate::output::FollowIdentityOutput)
pub mod follow_identity_output {
	/// A builder for [`FollowIdentityOutput`](crate::output::FollowIdentityOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`FollowIdentityOutput`](crate::output::FollowIdentityOutput)
		pub fn build(self) -> crate::output::FollowIdentityOutput {
			crate::output::FollowIdentityOutput {}
		}
	}
}
impl FollowIdentityOutput {
	/// Creates a new builder-style object to manufacture [`FollowIdentityOutput`](crate::output::FollowIdentityOutput)
	pub fn builder() -> crate::output::follow_identity_output::Builder {
		crate::output::follow_identity_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateIdentityStatusOutput {}
impl std::fmt::Debug for UpdateIdentityStatusOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UpdateIdentityStatusOutput");
		formatter.finish()
	}
}
/// See [`UpdateIdentityStatusOutput`](crate::output::UpdateIdentityStatusOutput)
pub mod update_identity_status_output {
	/// A builder for [`UpdateIdentityStatusOutput`](crate::output::UpdateIdentityStatusOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UpdateIdentityStatusOutput`](crate::output::UpdateIdentityStatusOutput)
		pub fn build(self) -> crate::output::UpdateIdentityStatusOutput {
			crate::output::UpdateIdentityStatusOutput {}
		}
	}
}
impl UpdateIdentityStatusOutput {
	/// Creates a new builder-style object to manufacture [`UpdateIdentityStatusOutput`](crate::output::UpdateIdentityStatusOutput)
	pub fn builder() -> crate::output::update_identity_status_output::Builder {
		crate::output::update_identity_status_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveIdentityGameActivityOutput {}
impl std::fmt::Debug for RemoveIdentityGameActivityOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RemoveIdentityGameActivityOutput");
		formatter.finish()
	}
}
/// See [`RemoveIdentityGameActivityOutput`](crate::output::RemoveIdentityGameActivityOutput)
pub mod remove_identity_game_activity_output {
	/// A builder for [`RemoveIdentityGameActivityOutput`](crate::output::RemoveIdentityGameActivityOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`RemoveIdentityGameActivityOutput`](crate::output::RemoveIdentityGameActivityOutput)
		pub fn build(self) -> crate::output::RemoveIdentityGameActivityOutput {
			crate::output::RemoveIdentityGameActivityOutput {}
		}
	}
}
impl RemoveIdentityGameActivityOutput {
	/// Creates a new builder-style object to manufacture [`RemoveIdentityGameActivityOutput`](crate::output::RemoveIdentityGameActivityOutput)
	pub fn builder() -> crate::output::remove_identity_game_activity_output::Builder {
		crate::output::remove_identity_game_activity_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetIdentityGameActivityOutput {}
impl std::fmt::Debug for SetIdentityGameActivityOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SetIdentityGameActivityOutput");
		formatter.finish()
	}
}
/// See [`SetIdentityGameActivityOutput`](crate::output::SetIdentityGameActivityOutput)
pub mod set_identity_game_activity_output {
	/// A builder for [`SetIdentityGameActivityOutput`](crate::output::SetIdentityGameActivityOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`SetIdentityGameActivityOutput`](crate::output::SetIdentityGameActivityOutput)
		pub fn build(self) -> crate::output::SetIdentityGameActivityOutput {
			crate::output::SetIdentityGameActivityOutput {}
		}
	}
}
impl SetIdentityGameActivityOutput {
	/// Creates a new builder-style object to manufacture [`SetIdentityGameActivityOutput`](crate::output::SetIdentityGameActivityOutput)
	pub fn builder() -> crate::output::set_identity_game_activity_output::Builder {
		crate::output::set_identity_game_activity_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SearchIdentitiesOutput {
	/// A list of identity handles.
	pub identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
	#[allow(missing_docs)] // documentation missing in model
	pub anchor: std::option::Option<std::string::String>,
}
impl SearchIdentitiesOutput {
	/// A list of identity handles.
	pub fn identities(&self) -> std::option::Option<&[crate::model::IdentityHandle]> {
		self.identities.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn anchor(&self) -> std::option::Option<&str> {
		self.anchor.as_deref()
	}
}
impl std::fmt::Debug for SearchIdentitiesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SearchIdentitiesOutput");
		formatter.field("identities", &self.identities);
		formatter.field("anchor", &self.anchor);
		formatter.finish()
	}
}
/// See [`SearchIdentitiesOutput`](crate::output::SearchIdentitiesOutput)
pub mod search_identities_output {
	/// A builder for [`SearchIdentitiesOutput`](crate::output::SearchIdentitiesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identities: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		pub(crate) anchor: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Appends an item to `identities`.
		///
		/// To override the contents of this collection use [`set_identities`](Self::set_identities).
		///
		/// A list of identity handles.
		pub fn identities(mut self, input: crate::model::IdentityHandle) -> Self {
			let mut v = self.identities.unwrap_or_default();
			v.push(input);
			self.identities = Some(v);
			self
		}
		/// A list of identity handles.
		pub fn set_identities(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::IdentityHandle>>,
		) -> Self {
			self.identities = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn anchor(mut self, input: impl Into<std::string::String>) -> Self {
			self.anchor = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_anchor(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.anchor = input;
			self
		}
		/// Consumes the builder and constructs a [`SearchIdentitiesOutput`](crate::output::SearchIdentitiesOutput)
		pub fn build(self) -> crate::output::SearchIdentitiesOutput {
			crate::output::SearchIdentitiesOutput {
				identities: self.identities,
				anchor: self.anchor,
			}
		}
	}
}
impl SearchIdentitiesOutput {
	/// Creates a new builder-style object to manufacture [`SearchIdentitiesOutput`](crate::output::SearchIdentitiesOutput)
	pub fn builder() -> crate::output::search_identities_output::Builder {
		crate::output::search_identities_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateIdentityProfileOutput {
	/// A list of validation errors.
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateIdentityProfileOutput {
	/// A list of validation errors.
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateIdentityProfileOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateIdentityProfileOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateIdentityProfileOutput`](crate::output::ValidateIdentityProfileOutput)
pub mod validate_identity_profile_output {
	/// A builder for [`ValidateIdentityProfileOutput`](crate::output::ValidateIdentityProfileOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		/// A list of validation errors.
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		/// A list of validation errors.
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateIdentityProfileOutput`](crate::output::ValidateIdentityProfileOutput)
		pub fn build(self) -> crate::output::ValidateIdentityProfileOutput {
			crate::output::ValidateIdentityProfileOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateIdentityProfileOutput {
	/// Creates a new builder-style object to manufacture [`ValidateIdentityProfileOutput`](crate::output::ValidateIdentityProfileOutput)
	pub fn builder() -> crate::output::validate_identity_profile_output::Builder {
		crate::output::validate_identity_profile_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateIdentityProfileOutput {}
impl std::fmt::Debug for UpdateIdentityProfileOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UpdateIdentityProfileOutput");
		formatter.finish()
	}
}
/// See [`UpdateIdentityProfileOutput`](crate::output::UpdateIdentityProfileOutput)
pub mod update_identity_profile_output {
	/// A builder for [`UpdateIdentityProfileOutput`](crate::output::UpdateIdentityProfileOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UpdateIdentityProfileOutput`](crate::output::UpdateIdentityProfileOutput)
		pub fn build(self) -> crate::output::UpdateIdentityProfileOutput {
			crate::output::UpdateIdentityProfileOutput {}
		}
	}
}
impl UpdateIdentityProfileOutput {
	/// Creates a new builder-style object to manufacture [`UpdateIdentityProfileOutput`](crate::output::UpdateIdentityProfileOutput)
	pub fn builder() -> crate::output::update_identity_profile_output::Builder {
		crate::output::update_identity_profile_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetIdentitySelfProfileOutput {
	/// An identity profile.
	pub identity: std::option::Option<crate::model::IdentityProfile>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetIdentitySelfProfileOutput {
	/// An identity profile.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityProfile> {
		self.identity.as_ref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetIdentitySelfProfileOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetIdentitySelfProfileOutput");
		formatter.field("identity", &self.identity);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetIdentitySelfProfileOutput`](crate::output::GetIdentitySelfProfileOutput)
pub mod get_identity_self_profile_output {
	/// A builder for [`GetIdentitySelfProfileOutput`](crate::output::GetIdentitySelfProfileOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity: std::option::Option<crate::model::IdentityProfile>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// An identity profile.
		pub fn identity(mut self, input: crate::model::IdentityProfile) -> Self {
			self.identity = Some(input);
			self
		}
		/// An identity profile.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityProfile>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetIdentitySelfProfileOutput`](crate::output::GetIdentitySelfProfileOutput)
		pub fn build(self) -> crate::output::GetIdentitySelfProfileOutput {
			crate::output::GetIdentitySelfProfileOutput {
				identity: self.identity,
				watch: self.watch,
			}
		}
	}
}
impl GetIdentitySelfProfileOutput {
	/// Creates a new builder-style object to manufacture [`GetIdentitySelfProfileOutput`](crate::output::GetIdentitySelfProfileOutput)
	pub fn builder() -> crate::output::get_identity_self_profile_output::Builder {
		crate::output::get_identity_self_profile_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetIdentityProfileOutput {
	/// An identity profile.
	pub identity: std::option::Option<crate::model::IdentityProfile>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetIdentityProfileOutput {
	/// An identity profile.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityProfile> {
		self.identity.as_ref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetIdentityProfileOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetIdentityProfileOutput");
		formatter.field("identity", &self.identity);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetIdentityProfileOutput`](crate::output::GetIdentityProfileOutput)
pub mod get_identity_profile_output {
	/// A builder for [`GetIdentityProfileOutput`](crate::output::GetIdentityProfileOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity: std::option::Option<crate::model::IdentityProfile>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// An identity profile.
		pub fn identity(mut self, input: crate::model::IdentityProfile) -> Self {
			self.identity = Some(input);
			self
		}
		/// An identity profile.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityProfile>,
		) -> Self {
			self.identity = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetIdentityProfileOutput`](crate::output::GetIdentityProfileOutput)
		pub fn build(self) -> crate::output::GetIdentityProfileOutput {
			crate::output::GetIdentityProfileOutput {
				identity: self.identity,
				watch: self.watch,
			}
		}
	}
}
impl GetIdentityProfileOutput {
	/// Creates a new builder-style object to manufacture [`GetIdentityProfileOutput`](crate::output::GetIdentityProfileOutput)
	pub fn builder() -> crate::output::get_identity_profile_output::Builder {
		crate::output::get_identity_profile_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetupIdentityOutput {
	/// Token used to authenticate the identity. Should be stored somewhere permanent. Pass this to `rivet.api.identity#SetupIdentity$existing_identity_token` next time `rivet.api.identity#SetupIdentity` is called. Token has a 90 day TTL. This means that if `rivet.api.identity#SetupIdentity` is not called again within 90 days, the token will no longer be valid. If this happens, the user can recover their account through the linking process (see `rivet.api.identity#PrepareGameLink`). This token should be stored locally and never sent to a server or another device. If this token is compromised, anyone with access to this token has control of the identity.
	pub identity_token: std::option::Option<std::string::String>,
	/// Timestamp (in milliseconds) at which the token expires.
	pub identity_token_expire_ts: std::option::Option<aws_smithy_types::DateTime>,
	/// Information about the identity that was just authenticated.
	pub identity: std::option::Option<crate::model::IdentityProfile>,
	/// A universally unique identifier.
	pub game_id: std::option::Option<std::string::String>,
}
impl SetupIdentityOutput {
	/// Token used to authenticate the identity. Should be stored somewhere permanent. Pass this to `rivet.api.identity#SetupIdentity$existing_identity_token` next time `rivet.api.identity#SetupIdentity` is called. Token has a 90 day TTL. This means that if `rivet.api.identity#SetupIdentity` is not called again within 90 days, the token will no longer be valid. If this happens, the user can recover their account through the linking process (see `rivet.api.identity#PrepareGameLink`). This token should be stored locally and never sent to a server or another device. If this token is compromised, anyone with access to this token has control of the identity.
	pub fn identity_token(&self) -> std::option::Option<&str> {
		self.identity_token.as_deref()
	}
	/// Timestamp (in milliseconds) at which the token expires.
	pub fn identity_token_expire_ts(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.identity_token_expire_ts.as_ref()
	}
	/// Information about the identity that was just authenticated.
	pub fn identity(&self) -> std::option::Option<&crate::model::IdentityProfile> {
		self.identity.as_ref()
	}
	/// A universally unique identifier.
	pub fn game_id(&self) -> std::option::Option<&str> {
		self.game_id.as_deref()
	}
}
impl std::fmt::Debug for SetupIdentityOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SetupIdentityOutput");
		formatter.field("identity_token", &"*** Sensitive Data Redacted ***");
		formatter.field("identity_token_expire_ts", &self.identity_token_expire_ts);
		formatter.field("identity", &self.identity);
		formatter.field("game_id", &self.game_id);
		formatter.finish()
	}
}
/// See [`SetupIdentityOutput`](crate::output::SetupIdentityOutput)
pub mod setup_identity_output {
	/// A builder for [`SetupIdentityOutput`](crate::output::SetupIdentityOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) identity_token: std::option::Option<std::string::String>,
		pub(crate) identity_token_expire_ts: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) identity: std::option::Option<crate::model::IdentityProfile>,
		pub(crate) game_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Token used to authenticate the identity. Should be stored somewhere permanent. Pass this to `rivet.api.identity#SetupIdentity$existing_identity_token` next time `rivet.api.identity#SetupIdentity` is called. Token has a 90 day TTL. This means that if `rivet.api.identity#SetupIdentity` is not called again within 90 days, the token will no longer be valid. If this happens, the user can recover their account through the linking process (see `rivet.api.identity#PrepareGameLink`). This token should be stored locally and never sent to a server or another device. If this token is compromised, anyone with access to this token has control of the identity.
		pub fn identity_token(mut self, input: impl Into<std::string::String>) -> Self {
			self.identity_token = Some(input.into());
			self
		}
		/// Token used to authenticate the identity. Should be stored somewhere permanent. Pass this to `rivet.api.identity#SetupIdentity$existing_identity_token` next time `rivet.api.identity#SetupIdentity` is called. Token has a 90 day TTL. This means that if `rivet.api.identity#SetupIdentity` is not called again within 90 days, the token will no longer be valid. If this happens, the user can recover their account through the linking process (see `rivet.api.identity#PrepareGameLink`). This token should be stored locally and never sent to a server or another device. If this token is compromised, anyone with access to this token has control of the identity.
		pub fn set_identity_token(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.identity_token = input;
			self
		}
		/// Timestamp (in milliseconds) at which the token expires.
		pub fn identity_token_expire_ts(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.identity_token_expire_ts = Some(input);
			self
		}
		/// Timestamp (in milliseconds) at which the token expires.
		pub fn set_identity_token_expire_ts(
			mut self,
			input: std::option::Option<aws_smithy_types::DateTime>,
		) -> Self {
			self.identity_token_expire_ts = input;
			self
		}
		/// Information about the identity that was just authenticated.
		pub fn identity(mut self, input: crate::model::IdentityProfile) -> Self {
			self.identity = Some(input);
			self
		}
		/// Information about the identity that was just authenticated.
		pub fn set_identity(
			mut self,
			input: std::option::Option<crate::model::IdentityProfile>,
		) -> Self {
			self.identity = input;
			self
		}
		/// A universally unique identifier.
		pub fn game_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_game_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_id = input;
			self
		}
		/// Consumes the builder and constructs a [`SetupIdentityOutput`](crate::output::SetupIdentityOutput)
		pub fn build(self) -> crate::output::SetupIdentityOutput {
			crate::output::SetupIdentityOutput {
				identity_token: self.identity_token,
				identity_token_expire_ts: self.identity_token_expire_ts,
				identity: self.identity,
				game_id: self.game_id,
			}
		}
	}
}
impl SetupIdentityOutput {
	/// Creates a new builder-style object to manufacture [`SetupIdentityOutput`](crate::output::SetupIdentityOutput)
	pub fn builder() -> crate::output::setup_identity_output::Builder {
		crate::output::setup_identity_output::Builder::default()
	}
}
