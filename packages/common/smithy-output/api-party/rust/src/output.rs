// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MatchmakerSelfReadyOutput {}
impl std::fmt::Debug for MatchmakerSelfReadyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("MatchmakerSelfReadyOutput");
		formatter.finish()
	}
}
/// See [`MatchmakerSelfReadyOutput`](crate::output::MatchmakerSelfReadyOutput)
pub mod matchmaker_self_ready_output {
	/// A builder for [`MatchmakerSelfReadyOutput`](crate::output::MatchmakerSelfReadyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`MatchmakerSelfReadyOutput`](crate::output::MatchmakerSelfReadyOutput)
		pub fn build(self) -> crate::output::MatchmakerSelfReadyOutput {
			crate::output::MatchmakerSelfReadyOutput {}
		}
	}
}
impl MatchmakerSelfReadyOutput {
	/// Creates a new builder-style object to manufacture [`MatchmakerSelfReadyOutput`](crate::output::MatchmakerSelfReadyOutput)
	pub fn builder() -> crate::output::matchmaker_self_ready_output::Builder {
		crate::output::matchmaker_self_ready_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct FindMatchmakerLobbyForPartyOutput {}
impl std::fmt::Debug for FindMatchmakerLobbyForPartyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("FindMatchmakerLobbyForPartyOutput");
		formatter.finish()
	}
}
/// See [`FindMatchmakerLobbyForPartyOutput`](crate::output::FindMatchmakerLobbyForPartyOutput)
pub mod find_matchmaker_lobby_for_party_output {
	/// A builder for [`FindMatchmakerLobbyForPartyOutput`](crate::output::FindMatchmakerLobbyForPartyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`FindMatchmakerLobbyForPartyOutput`](crate::output::FindMatchmakerLobbyForPartyOutput)
		pub fn build(self) -> crate::output::FindMatchmakerLobbyForPartyOutput {
			crate::output::FindMatchmakerLobbyForPartyOutput {}
		}
	}
}
impl FindMatchmakerLobbyForPartyOutput {
	/// Creates a new builder-style object to manufacture [`FindMatchmakerLobbyForPartyOutput`](crate::output::FindMatchmakerLobbyForPartyOutput)
	pub fn builder() -> crate::output::find_matchmaker_lobby_for_party_output::Builder {
		crate::output::find_matchmaker_lobby_for_party_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct JoinMatchmakerLobbyForPartyOutput {}
impl std::fmt::Debug for JoinMatchmakerLobbyForPartyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("JoinMatchmakerLobbyForPartyOutput");
		formatter.finish()
	}
}
/// See [`JoinMatchmakerLobbyForPartyOutput`](crate::output::JoinMatchmakerLobbyForPartyOutput)
pub mod join_matchmaker_lobby_for_party_output {
	/// A builder for [`JoinMatchmakerLobbyForPartyOutput`](crate::output::JoinMatchmakerLobbyForPartyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`JoinMatchmakerLobbyForPartyOutput`](crate::output::JoinMatchmakerLobbyForPartyOutput)
		pub fn build(self) -> crate::output::JoinMatchmakerLobbyForPartyOutput {
			crate::output::JoinMatchmakerLobbyForPartyOutput {}
		}
	}
}
impl JoinMatchmakerLobbyForPartyOutput {
	/// Creates a new builder-style object to manufacture [`JoinMatchmakerLobbyForPartyOutput`](crate::output::JoinMatchmakerLobbyForPartyOutput)
	pub fn builder() -> crate::output::join_matchmaker_lobby_for_party_output::Builder {
		crate::output::join_matchmaker_lobby_for_party_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetSelfInactiveOutput {}
impl std::fmt::Debug for SetSelfInactiveOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SetSelfInactiveOutput");
		formatter.finish()
	}
}
/// See [`SetSelfInactiveOutput`](crate::output::SetSelfInactiveOutput)
pub mod set_self_inactive_output {
	/// A builder for [`SetSelfInactiveOutput`](crate::output::SetSelfInactiveOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`SetSelfInactiveOutput`](crate::output::SetSelfInactiveOutput)
		pub fn build(self) -> crate::output::SetSelfInactiveOutput {
			crate::output::SetSelfInactiveOutput {}
		}
	}
}
impl SetSelfInactiveOutput {
	/// Creates a new builder-style object to manufacture [`SetSelfInactiveOutput`](crate::output::SetSelfInactiveOutput)
	pub fn builder() -> crate::output::set_self_inactive_output::Builder {
		crate::output::set_self_inactive_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetPartyToIdleOutput {}
impl std::fmt::Debug for SetPartyToIdleOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SetPartyToIdleOutput");
		formatter.finish()
	}
}
/// See [`SetPartyToIdleOutput`](crate::output::SetPartyToIdleOutput)
pub mod set_party_to_idle_output {
	/// A builder for [`SetPartyToIdleOutput`](crate::output::SetPartyToIdleOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`SetPartyToIdleOutput`](crate::output::SetPartyToIdleOutput)
		pub fn build(self) -> crate::output::SetPartyToIdleOutput {
			crate::output::SetPartyToIdleOutput {}
		}
	}
}
impl SetPartyToIdleOutput {
	/// Creates a new builder-style object to manufacture [`SetPartyToIdleOutput`](crate::output::SetPartyToIdleOutput)
	pub fn builder() -> crate::output::set_party_to_idle_output::Builder {
		crate::output::set_party_to_idle_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SendJoinRequestOutput {}
impl std::fmt::Debug for SendJoinRequestOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SendJoinRequestOutput");
		formatter.finish()
	}
}
/// See [`SendJoinRequestOutput`](crate::output::SendJoinRequestOutput)
pub mod send_join_request_output {
	/// A builder for [`SendJoinRequestOutput`](crate::output::SendJoinRequestOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`SendJoinRequestOutput`](crate::output::SendJoinRequestOutput)
		pub fn build(self) -> crate::output::SendJoinRequestOutput {
			crate::output::SendJoinRequestOutput {}
		}
	}
}
impl SendJoinRequestOutput {
	/// Creates a new builder-style object to manufacture [`SendJoinRequestOutput`](crate::output::SendJoinRequestOutput)
	pub fn builder() -> crate::output::send_join_request_output::Builder {
		crate::output::send_join_request_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPartyFromInviteOutput {
	/// A party summary.
	pub party: std::option::Option<crate::model::PartySummary>,
}
impl GetPartyFromInviteOutput {
	/// A party summary.
	pub fn party(&self) -> std::option::Option<&crate::model::PartySummary> {
		self.party.as_ref()
	}
}
impl std::fmt::Debug for GetPartyFromInviteOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetPartyFromInviteOutput");
		formatter.field("party", &self.party);
		formatter.finish()
	}
}
/// See [`GetPartyFromInviteOutput`](crate::output::GetPartyFromInviteOutput)
pub mod get_party_from_invite_output {
	/// A builder for [`GetPartyFromInviteOutput`](crate::output::GetPartyFromInviteOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) party: std::option::Option<crate::model::PartySummary>,
	}
	impl Builder {
		/// A party summary.
		pub fn party(mut self, input: crate::model::PartySummary) -> Self {
			self.party = Some(input);
			self
		}
		/// A party summary.
		pub fn set_party(mut self, input: std::option::Option<crate::model::PartySummary>) -> Self {
			self.party = input;
			self
		}
		/// Consumes the builder and constructs a [`GetPartyFromInviteOutput`](crate::output::GetPartyFromInviteOutput)
		pub fn build(self) -> crate::output::GetPartyFromInviteOutput {
			crate::output::GetPartyFromInviteOutput { party: self.party }
		}
	}
}
impl GetPartyFromInviteOutput {
	/// Creates a new builder-style object to manufacture [`GetPartyFromInviteOutput`](crate::output::GetPartyFromInviteOutput)
	pub fn builder() -> crate::output::get_party_from_invite_output::Builder {
		crate::output::get_party_from_invite_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RevokePartyInviteOutput {}
impl std::fmt::Debug for RevokePartyInviteOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RevokePartyInviteOutput");
		formatter.finish()
	}
}
/// See [`RevokePartyInviteOutput`](crate::output::RevokePartyInviteOutput)
pub mod revoke_party_invite_output {
	/// A builder for [`RevokePartyInviteOutput`](crate::output::RevokePartyInviteOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`RevokePartyInviteOutput`](crate::output::RevokePartyInviteOutput)
		pub fn build(self) -> crate::output::RevokePartyInviteOutput {
			crate::output::RevokePartyInviteOutput {}
		}
	}
}
impl RevokePartyInviteOutput {
	/// Creates a new builder-style object to manufacture [`RevokePartyInviteOutput`](crate::output::RevokePartyInviteOutput)
	pub fn builder() -> crate::output::revoke_party_invite_output::Builder {
		crate::output::revoke_party_invite_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct KickMemberOutput {}
impl std::fmt::Debug for KickMemberOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("KickMemberOutput");
		formatter.finish()
	}
}
/// See [`KickMemberOutput`](crate::output::KickMemberOutput)
pub mod kick_member_output {
	/// A builder for [`KickMemberOutput`](crate::output::KickMemberOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`KickMemberOutput`](crate::output::KickMemberOutput)
		pub fn build(self) -> crate::output::KickMemberOutput {
			crate::output::KickMemberOutput {}
		}
	}
}
impl KickMemberOutput {
	/// Creates a new builder-style object to manufacture [`KickMemberOutput`](crate::output::KickMemberOutput)
	pub fn builder() -> crate::output::kick_member_output::Builder {
		crate::output::kick_member_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TransferPartyOwnershipOutput {}
impl std::fmt::Debug for TransferPartyOwnershipOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TransferPartyOwnershipOutput");
		formatter.finish()
	}
}
/// See [`TransferPartyOwnershipOutput`](crate::output::TransferPartyOwnershipOutput)
pub mod transfer_party_ownership_output {
	/// A builder for [`TransferPartyOwnershipOutput`](crate::output::TransferPartyOwnershipOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`TransferPartyOwnershipOutput`](crate::output::TransferPartyOwnershipOutput)
		pub fn build(self) -> crate::output::TransferPartyOwnershipOutput {
			crate::output::TransferPartyOwnershipOutput {}
		}
	}
}
impl TransferPartyOwnershipOutput {
	/// Creates a new builder-style object to manufacture [`TransferPartyOwnershipOutput`](crate::output::TransferPartyOwnershipOutput)
	pub fn builder() -> crate::output::transfer_party_ownership_output::Builder {
		crate::output::transfer_party_ownership_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetPartyPublicityOutput {}
impl std::fmt::Debug for SetPartyPublicityOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("SetPartyPublicityOutput");
		formatter.finish()
	}
}
/// See [`SetPartyPublicityOutput`](crate::output::SetPartyPublicityOutput)
pub mod set_party_publicity_output {
	/// A builder for [`SetPartyPublicityOutput`](crate::output::SetPartyPublicityOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`SetPartyPublicityOutput`](crate::output::SetPartyPublicityOutput)
		pub fn build(self) -> crate::output::SetPartyPublicityOutput {
			crate::output::SetPartyPublicityOutput {}
		}
	}
}
impl SetPartyPublicityOutput {
	/// Creates a new builder-style object to manufacture [`SetPartyPublicityOutput`](crate::output::SetPartyPublicityOutput)
	pub fn builder() -> crate::output::set_party_publicity_output::Builder {
		crate::output::set_party_publicity_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LeavePartyOutput {}
impl std::fmt::Debug for LeavePartyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("LeavePartyOutput");
		formatter.finish()
	}
}
/// See [`LeavePartyOutput`](crate::output::LeavePartyOutput)
pub mod leave_party_output {
	/// A builder for [`LeavePartyOutput`](crate::output::LeavePartyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`LeavePartyOutput`](crate::output::LeavePartyOutput)
		pub fn build(self) -> crate::output::LeavePartyOutput {
			crate::output::LeavePartyOutput {}
		}
	}
}
impl LeavePartyOutput {
	/// Creates a new builder-style object to manufacture [`LeavePartyOutput`](crate::output::LeavePartyOutput)
	pub fn builder() -> crate::output::leave_party_output::Builder {
		crate::output::leave_party_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct JoinPartyOutput {
	/// A universally unique identifier.
	pub party_id: std::option::Option<std::string::String>,
}
impl JoinPartyOutput {
	/// A universally unique identifier.
	pub fn party_id(&self) -> std::option::Option<&str> {
		self.party_id.as_deref()
	}
}
impl std::fmt::Debug for JoinPartyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("JoinPartyOutput");
		formatter.field("party_id", &self.party_id);
		formatter.finish()
	}
}
/// See [`JoinPartyOutput`](crate::output::JoinPartyOutput)
pub mod join_party_output {
	/// A builder for [`JoinPartyOutput`](crate::output::JoinPartyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) party_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn party_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.party_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_party_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.party_id = input;
			self
		}
		/// Consumes the builder and constructs a [`JoinPartyOutput`](crate::output::JoinPartyOutput)
		pub fn build(self) -> crate::output::JoinPartyOutput {
			crate::output::JoinPartyOutput {
				party_id: self.party_id,
			}
		}
	}
}
impl JoinPartyOutput {
	/// Creates a new builder-style object to manufacture [`JoinPartyOutput`](crate::output::JoinPartyOutput)
	pub fn builder() -> crate::output::join_party_output::Builder {
		crate::output::join_party_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreatePartyInviteOutput {
	/// Output from a created invite.
	pub invite: std::option::Option<crate::model::CreatedInvite>,
}
impl CreatePartyInviteOutput {
	/// Output from a created invite.
	pub fn invite(&self) -> std::option::Option<&crate::model::CreatedInvite> {
		self.invite.as_ref()
	}
}
impl std::fmt::Debug for CreatePartyInviteOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreatePartyInviteOutput");
		formatter.field("invite", &self.invite);
		formatter.finish()
	}
}
/// See [`CreatePartyInviteOutput`](crate::output::CreatePartyInviteOutput)
pub mod create_party_invite_output {
	/// A builder for [`CreatePartyInviteOutput`](crate::output::CreatePartyInviteOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) invite: std::option::Option<crate::model::CreatedInvite>,
	}
	impl Builder {
		/// Output from a created invite.
		pub fn invite(mut self, input: crate::model::CreatedInvite) -> Self {
			self.invite = Some(input);
			self
		}
		/// Output from a created invite.
		pub fn set_invite(
			mut self,
			input: std::option::Option<crate::model::CreatedInvite>,
		) -> Self {
			self.invite = input;
			self
		}
		/// Consumes the builder and constructs a [`CreatePartyInviteOutput`](crate::output::CreatePartyInviteOutput)
		pub fn build(self) -> crate::output::CreatePartyInviteOutput {
			crate::output::CreatePartyInviteOutput {
				invite: self.invite,
			}
		}
	}
}
impl CreatePartyInviteOutput {
	/// Creates a new builder-style object to manufacture [`CreatePartyInviteOutput`](crate::output::CreatePartyInviteOutput)
	pub fn builder() -> crate::output::create_party_invite_output::Builder {
		crate::output::create_party_invite_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreatePartyOutput {
	/// A universally unique identifier.
	pub party_id: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub invites: std::option::Option<std::vec::Vec<crate::model::CreatedInvite>>,
}
impl CreatePartyOutput {
	/// A universally unique identifier.
	pub fn party_id(&self) -> std::option::Option<&str> {
		self.party_id.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn invites(&self) -> std::option::Option<&[crate::model::CreatedInvite]> {
		self.invites.as_deref()
	}
}
impl std::fmt::Debug for CreatePartyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreatePartyOutput");
		formatter.field("party_id", &self.party_id);
		formatter.field("invites", &self.invites);
		formatter.finish()
	}
}
/// See [`CreatePartyOutput`](crate::output::CreatePartyOutput)
pub mod create_party_output {
	/// A builder for [`CreatePartyOutput`](crate::output::CreatePartyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) party_id: std::option::Option<std::string::String>,
		pub(crate) invites: std::option::Option<std::vec::Vec<crate::model::CreatedInvite>>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn party_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.party_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_party_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.party_id = input;
			self
		}
		/// Appends an item to `invites`.
		///
		/// To override the contents of this collection use [`set_invites`](Self::set_invites).
		///
		pub fn invites(mut self, input: crate::model::CreatedInvite) -> Self {
			let mut v = self.invites.unwrap_or_default();
			v.push(input);
			self.invites = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_invites(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::CreatedInvite>>,
		) -> Self {
			self.invites = input;
			self
		}
		/// Consumes the builder and constructs a [`CreatePartyOutput`](crate::output::CreatePartyOutput)
		pub fn build(self) -> crate::output::CreatePartyOutput {
			crate::output::CreatePartyOutput {
				party_id: self.party_id,
				invites: self.invites,
			}
		}
	}
}
impl CreatePartyOutput {
	/// Creates a new builder-style object to manufacture [`CreatePartyOutput`](crate::output::CreatePartyOutput)
	pub fn builder() -> crate::output::create_party_output::Builder {
		crate::output::create_party_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPartySelfProfileOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub party: std::option::Option<crate::model::PartyProfile>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetPartySelfProfileOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn party(&self) -> std::option::Option<&crate::model::PartyProfile> {
		self.party.as_ref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetPartySelfProfileOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetPartySelfProfileOutput");
		formatter.field("party", &self.party);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetPartySelfProfileOutput`](crate::output::GetPartySelfProfileOutput)
pub mod get_party_self_profile_output {
	/// A builder for [`GetPartySelfProfileOutput`](crate::output::GetPartySelfProfileOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) party: std::option::Option<crate::model::PartyProfile>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn party(mut self, input: crate::model::PartyProfile) -> Self {
			self.party = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_party(mut self, input: std::option::Option<crate::model::PartyProfile>) -> Self {
			self.party = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetPartySelfProfileOutput`](crate::output::GetPartySelfProfileOutput)
		pub fn build(self) -> crate::output::GetPartySelfProfileOutput {
			crate::output::GetPartySelfProfileOutput {
				party: self.party,
				watch: self.watch,
			}
		}
	}
}
impl GetPartySelfProfileOutput {
	/// Creates a new builder-style object to manufacture [`GetPartySelfProfileOutput`](crate::output::GetPartySelfProfileOutput)
	pub fn builder() -> crate::output::get_party_self_profile_output::Builder {
		crate::output::get_party_self_profile_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPartyProfileOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub party: std::option::Option<crate::model::PartyProfile>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetPartyProfileOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn party(&self) -> std::option::Option<&crate::model::PartyProfile> {
		self.party.as_ref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetPartyProfileOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetPartyProfileOutput");
		formatter.field("party", &self.party);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetPartyProfileOutput`](crate::output::GetPartyProfileOutput)
pub mod get_party_profile_output {
	/// A builder for [`GetPartyProfileOutput`](crate::output::GetPartyProfileOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) party: std::option::Option<crate::model::PartyProfile>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn party(mut self, input: crate::model::PartyProfile) -> Self {
			self.party = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_party(mut self, input: std::option::Option<crate::model::PartyProfile>) -> Self {
			self.party = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetPartyProfileOutput`](crate::output::GetPartyProfileOutput)
		pub fn build(self) -> crate::output::GetPartyProfileOutput {
			crate::output::GetPartyProfileOutput {
				party: self.party,
				watch: self.watch,
			}
		}
	}
}
impl GetPartyProfileOutput {
	/// Creates a new builder-style object to manufacture [`GetPartyProfileOutput`](crate::output::GetPartyProfileOutput)
	pub fn builder() -> crate::output::get_party_profile_output::Builder {
		crate::output::get_party_profile_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPartySelfSummaryOutput {
	/// A party summary.
	pub party: std::option::Option<crate::model::PartySummary>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetPartySelfSummaryOutput {
	/// A party summary.
	pub fn party(&self) -> std::option::Option<&crate::model::PartySummary> {
		self.party.as_ref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetPartySelfSummaryOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetPartySelfSummaryOutput");
		formatter.field("party", &self.party);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetPartySelfSummaryOutput`](crate::output::GetPartySelfSummaryOutput)
pub mod get_party_self_summary_output {
	/// A builder for [`GetPartySelfSummaryOutput`](crate::output::GetPartySelfSummaryOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) party: std::option::Option<crate::model::PartySummary>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// A party summary.
		pub fn party(mut self, input: crate::model::PartySummary) -> Self {
			self.party = Some(input);
			self
		}
		/// A party summary.
		pub fn set_party(mut self, input: std::option::Option<crate::model::PartySummary>) -> Self {
			self.party = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetPartySelfSummaryOutput`](crate::output::GetPartySelfSummaryOutput)
		pub fn build(self) -> crate::output::GetPartySelfSummaryOutput {
			crate::output::GetPartySelfSummaryOutput {
				party: self.party,
				watch: self.watch,
			}
		}
	}
}
impl GetPartySelfSummaryOutput {
	/// Creates a new builder-style object to manufacture [`GetPartySelfSummaryOutput`](crate::output::GetPartySelfSummaryOutput)
	pub fn builder() -> crate::output::get_party_self_summary_output::Builder {
		crate::output::get_party_self_summary_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPartySummaryOutput {
	/// A party summary.
	pub party: std::option::Option<crate::model::PartySummary>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetPartySummaryOutput {
	/// A party summary.
	pub fn party(&self) -> std::option::Option<&crate::model::PartySummary> {
		self.party.as_ref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetPartySummaryOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetPartySummaryOutput");
		formatter.field("party", &self.party);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetPartySummaryOutput`](crate::output::GetPartySummaryOutput)
pub mod get_party_summary_output {
	/// A builder for [`GetPartySummaryOutput`](crate::output::GetPartySummaryOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) party: std::option::Option<crate::model::PartySummary>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// A party summary.
		pub fn party(mut self, input: crate::model::PartySummary) -> Self {
			self.party = Some(input);
			self
		}
		/// A party summary.
		pub fn set_party(mut self, input: std::option::Option<crate::model::PartySummary>) -> Self {
			self.party = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetPartySummaryOutput`](crate::output::GetPartySummaryOutput)
		pub fn build(self) -> crate::output::GetPartySummaryOutput {
			crate::output::GetPartySummaryOutput {
				party: self.party,
				watch: self.watch,
			}
		}
	}
}
impl GetPartySummaryOutput {
	/// Creates a new builder-style object to manufacture [`GetPartySummaryOutput`](crate::output::GetPartySummaryOutput)
	pub fn builder() -> crate::output::get_party_summary_output::Builder {
		crate::output::get_party_summary_output::Builder::default()
	}
}
