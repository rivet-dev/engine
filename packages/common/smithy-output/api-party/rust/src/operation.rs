// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateParty`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_party`](crate::client::Client::create_party).
///
/// See [`crate::client::fluent_builders::CreateParty`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateParty {
	_private: (),
}
impl CreateParty {
	/// Creates a new builder-style object to manufacture [`CreatePartyInput`](crate::input::CreatePartyInput)
	pub fn builder() -> crate::input::create_party_input::Builder {
		crate::input::create_party_input::Builder::default()
	}
	/// Creates a new `CreateParty` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateParty {
	type Output =
		std::result::Result<crate::output::CreatePartyOutput, crate::error::CreatePartyError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_party_error(response)
		} else {
			crate::operation_deser::parse_create_party_response(response)
		}
	}
}

/// Operation shape for `CreatePartyInvite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_party_invite`](crate::client::Client::create_party_invite).
///
/// See [`crate::client::fluent_builders::CreatePartyInvite`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePartyInvite {
	_private: (),
}
impl CreatePartyInvite {
	/// Creates a new builder-style object to manufacture [`CreatePartyInviteInput`](crate::input::CreatePartyInviteInput)
	pub fn builder() -> crate::input::create_party_invite_input::Builder {
		crate::input::create_party_invite_input::Builder::default()
	}
	/// Creates a new `CreatePartyInvite` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreatePartyInvite {
	type Output = std::result::Result<
		crate::output::CreatePartyInviteOutput,
		crate::error::CreatePartyInviteError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_party_invite_error(response)
		} else {
			crate::operation_deser::parse_create_party_invite_response(response)
		}
	}
}

/// Operation shape for `GetPartyFromInvite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_party_from_invite`](crate::client::Client::get_party_from_invite).
///
/// See [`crate::client::fluent_builders::GetPartyFromInvite`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPartyFromInvite {
	_private: (),
}
impl GetPartyFromInvite {
	/// Creates a new builder-style object to manufacture [`GetPartyFromInviteInput`](crate::input::GetPartyFromInviteInput)
	pub fn builder() -> crate::input::get_party_from_invite_input::Builder {
		crate::input::get_party_from_invite_input::Builder::default()
	}
	/// Creates a new `GetPartyFromInvite` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetPartyFromInvite {
	type Output = std::result::Result<
		crate::output::GetPartyFromInviteOutput,
		crate::error::GetPartyFromInviteError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_party_from_invite_error(response)
		} else {
			crate::operation_deser::parse_get_party_from_invite_response(response)
		}
	}
}

/// Operation shape for `GetPartyProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_party_profile`](crate::client::Client::get_party_profile).
///
/// See [`crate::client::fluent_builders::GetPartyProfile`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPartyProfile {
	_private: (),
}
impl GetPartyProfile {
	/// Creates a new builder-style object to manufacture [`GetPartyProfileInput`](crate::input::GetPartyProfileInput)
	pub fn builder() -> crate::input::get_party_profile_input::Builder {
		crate::input::get_party_profile_input::Builder::default()
	}
	/// Creates a new `GetPartyProfile` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetPartyProfile {
	type Output = std::result::Result<
		crate::output::GetPartyProfileOutput,
		crate::error::GetPartyProfileError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_party_profile_error(response)
		} else {
			crate::operation_deser::parse_get_party_profile_response(response)
		}
	}
}

/// Operation shape for `GetPartySelfProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_party_self_profile`](crate::client::Client::get_party_self_profile).
///
/// See [`crate::client::fluent_builders::GetPartySelfProfile`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPartySelfProfile {
	_private: (),
}
impl GetPartySelfProfile {
	/// Creates a new builder-style object to manufacture [`GetPartySelfProfileInput`](crate::input::GetPartySelfProfileInput)
	pub fn builder() -> crate::input::get_party_self_profile_input::Builder {
		crate::input::get_party_self_profile_input::Builder::default()
	}
	/// Creates a new `GetPartySelfProfile` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetPartySelfProfile {
	type Output = std::result::Result<
		crate::output::GetPartySelfProfileOutput,
		crate::error::GetPartySelfProfileError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_party_self_profile_error(response)
		} else {
			crate::operation_deser::parse_get_party_self_profile_response(response)
		}
	}
}

/// Operation shape for `GetPartySelfSummary`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_party_self_summary`](crate::client::Client::get_party_self_summary).
///
/// See [`crate::client::fluent_builders::GetPartySelfSummary`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPartySelfSummary {
	_private: (),
}
impl GetPartySelfSummary {
	/// Creates a new builder-style object to manufacture [`GetPartySelfSummaryInput`](crate::input::GetPartySelfSummaryInput)
	pub fn builder() -> crate::input::get_party_self_summary_input::Builder {
		crate::input::get_party_self_summary_input::Builder::default()
	}
	/// Creates a new `GetPartySelfSummary` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetPartySelfSummary {
	type Output = std::result::Result<
		crate::output::GetPartySelfSummaryOutput,
		crate::error::GetPartySelfSummaryError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_party_self_summary_error(response)
		} else {
			crate::operation_deser::parse_get_party_self_summary_response(response)
		}
	}
}

/// Operation shape for `GetPartySummary`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_party_summary`](crate::client::Client::get_party_summary).
///
/// See [`crate::client::fluent_builders::GetPartySummary`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPartySummary {
	_private: (),
}
impl GetPartySummary {
	/// Creates a new builder-style object to manufacture [`GetPartySummaryInput`](crate::input::GetPartySummaryInput)
	pub fn builder() -> crate::input::get_party_summary_input::Builder {
		crate::input::get_party_summary_input::Builder::default()
	}
	/// Creates a new `GetPartySummary` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetPartySummary {
	type Output = std::result::Result<
		crate::output::GetPartySummaryOutput,
		crate::error::GetPartySummaryError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_party_summary_error(response)
		} else {
			crate::operation_deser::parse_get_party_summary_response(response)
		}
	}
}

/// Operation shape for `JoinParty`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`join_party`](crate::client::Client::join_party).
///
/// See [`crate::client::fluent_builders::JoinParty`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct JoinParty {
	_private: (),
}
impl JoinParty {
	/// Creates a new builder-style object to manufacture [`JoinPartyInput`](crate::input::JoinPartyInput)
	pub fn builder() -> crate::input::join_party_input::Builder {
		crate::input::join_party_input::Builder::default()
	}
	/// Creates a new `JoinParty` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for JoinParty {
	type Output = std::result::Result<crate::output::JoinPartyOutput, crate::error::JoinPartyError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_join_party_error(response)
		} else {
			crate::operation_deser::parse_join_party_response(response)
		}
	}
}

/// Operation shape for `KickMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`kick_member`](crate::client::Client::kick_member).
///
/// See [`crate::client::fluent_builders::KickMember`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct KickMember {
	_private: (),
}
impl KickMember {
	/// Creates a new builder-style object to manufacture [`KickMemberInput`](crate::input::KickMemberInput)
	pub fn builder() -> crate::input::kick_member_input::Builder {
		crate::input::kick_member_input::Builder::default()
	}
	/// Creates a new `KickMember` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for KickMember {
	type Output =
		std::result::Result<crate::output::KickMemberOutput, crate::error::KickMemberError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_kick_member_error(response)
		} else {
			crate::operation_deser::parse_kick_member_response(response)
		}
	}
}

/// Operation shape for `LeaveParty`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`leave_party`](crate::client::Client::leave_party).
///
/// See [`crate::client::fluent_builders::LeaveParty`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct LeaveParty {
	_private: (),
}
impl LeaveParty {
	/// Creates a new builder-style object to manufacture [`LeavePartyInput`](crate::input::LeavePartyInput)
	pub fn builder() -> crate::input::leave_party_input::Builder {
		crate::input::leave_party_input::Builder::default()
	}
	/// Creates a new `LeaveParty` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for LeaveParty {
	type Output =
		std::result::Result<crate::output::LeavePartyOutput, crate::error::LeavePartyError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_leave_party_error(response)
		} else {
			crate::operation_deser::parse_leave_party_response(response)
		}
	}
}

/// Operation shape for `RevokePartyInvite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`revoke_party_invite`](crate::client::Client::revoke_party_invite).
///
/// See [`crate::client::fluent_builders::RevokePartyInvite`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RevokePartyInvite {
	_private: (),
}
impl RevokePartyInvite {
	/// Creates a new builder-style object to manufacture [`RevokePartyInviteInput`](crate::input::RevokePartyInviteInput)
	pub fn builder() -> crate::input::revoke_party_invite_input::Builder {
		crate::input::revoke_party_invite_input::Builder::default()
	}
	/// Creates a new `RevokePartyInvite` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for RevokePartyInvite {
	type Output = std::result::Result<
		crate::output::RevokePartyInviteOutput,
		crate::error::RevokePartyInviteError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_revoke_party_invite_error(response)
		} else {
			crate::operation_deser::parse_revoke_party_invite_response(response)
		}
	}
}

/// Operation shape for `SendJoinRequest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`send_join_request`](crate::client::Client::send_join_request).
///
/// See [`crate::client::fluent_builders::SendJoinRequest`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendJoinRequest {
	_private: (),
}
impl SendJoinRequest {
	/// Creates a new builder-style object to manufacture [`SendJoinRequestInput`](crate::input::SendJoinRequestInput)
	pub fn builder() -> crate::input::send_join_request_input::Builder {
		crate::input::send_join_request_input::Builder::default()
	}
	/// Creates a new `SendJoinRequest` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for SendJoinRequest {
	type Output = std::result::Result<
		crate::output::SendJoinRequestOutput,
		crate::error::SendJoinRequestError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_send_join_request_error(response)
		} else {
			crate::operation_deser::parse_send_join_request_response(response)
		}
	}
}

/// Operation shape for `SetPartyPublicity`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`set_party_publicity`](crate::client::Client::set_party_publicity).
///
/// See [`crate::client::fluent_builders::SetPartyPublicity`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetPartyPublicity {
	_private: (),
}
impl SetPartyPublicity {
	/// Creates a new builder-style object to manufacture [`SetPartyPublicityInput`](crate::input::SetPartyPublicityInput)
	pub fn builder() -> crate::input::set_party_publicity_input::Builder {
		crate::input::set_party_publicity_input::Builder::default()
	}
	/// Creates a new `SetPartyPublicity` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for SetPartyPublicity {
	type Output = std::result::Result<
		crate::output::SetPartyPublicityOutput,
		crate::error::SetPartyPublicityError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_set_party_publicity_error(response)
		} else {
			crate::operation_deser::parse_set_party_publicity_response(response)
		}
	}
}

/// Operation shape for `TransferPartyOwnership`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`transfer_party_ownership`](crate::client::Client::transfer_party_ownership).
///
/// See [`crate::client::fluent_builders::TransferPartyOwnership`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TransferPartyOwnership {
	_private: (),
}
impl TransferPartyOwnership {
	/// Creates a new builder-style object to manufacture [`TransferPartyOwnershipInput`](crate::input::TransferPartyOwnershipInput)
	pub fn builder() -> crate::input::transfer_party_ownership_input::Builder {
		crate::input::transfer_party_ownership_input::Builder::default()
	}
	/// Creates a new `TransferPartyOwnership` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for TransferPartyOwnership {
	type Output = std::result::Result<
		crate::output::TransferPartyOwnershipOutput,
		crate::error::TransferPartyOwnershipError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_transfer_party_ownership_error(response)
		} else {
			crate::operation_deser::parse_transfer_party_ownership_response(response)
		}
	}
}

/// Operation shape for `FindMatchmakerLobbyForParty`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`find_matchmaker_lobby_for_party`](crate::client::Client::find_matchmaker_lobby_for_party).
///
/// See [`crate::client::fluent_builders::FindMatchmakerLobbyForParty`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct FindMatchmakerLobbyForParty {
	_private: (),
}
impl FindMatchmakerLobbyForParty {
	/// Creates a new builder-style object to manufacture [`FindMatchmakerLobbyForPartyInput`](crate::input::FindMatchmakerLobbyForPartyInput)
	pub fn builder() -> crate::input::find_matchmaker_lobby_for_party_input::Builder {
		crate::input::find_matchmaker_lobby_for_party_input::Builder::default()
	}
	/// Creates a new `FindMatchmakerLobbyForParty` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for FindMatchmakerLobbyForParty {
	type Output = std::result::Result<
		crate::output::FindMatchmakerLobbyForPartyOutput,
		crate::error::FindMatchmakerLobbyForPartyError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_find_matchmaker_lobby_for_party_error(response)
		} else {
			crate::operation_deser::parse_find_matchmaker_lobby_for_party_response(response)
		}
	}
}

/// Operation shape for `JoinMatchmakerLobbyForParty`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`join_matchmaker_lobby_for_party`](crate::client::Client::join_matchmaker_lobby_for_party).
///
/// See [`crate::client::fluent_builders::JoinMatchmakerLobbyForParty`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct JoinMatchmakerLobbyForParty {
	_private: (),
}
impl JoinMatchmakerLobbyForParty {
	/// Creates a new builder-style object to manufacture [`JoinMatchmakerLobbyForPartyInput`](crate::input::JoinMatchmakerLobbyForPartyInput)
	pub fn builder() -> crate::input::join_matchmaker_lobby_for_party_input::Builder {
		crate::input::join_matchmaker_lobby_for_party_input::Builder::default()
	}
	/// Creates a new `JoinMatchmakerLobbyForParty` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for JoinMatchmakerLobbyForParty {
	type Output = std::result::Result<
		crate::output::JoinMatchmakerLobbyForPartyOutput,
		crate::error::JoinMatchmakerLobbyForPartyError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_join_matchmaker_lobby_for_party_error(response)
		} else {
			crate::operation_deser::parse_join_matchmaker_lobby_for_party_response(response)
		}
	}
}

/// Operation shape for `MatchmakerSelfReady`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`matchmaker_self_ready`](crate::client::Client::matchmaker_self_ready).
///
/// See [`crate::client::fluent_builders::MatchmakerSelfReady`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct MatchmakerSelfReady {
	_private: (),
}
impl MatchmakerSelfReady {
	/// Creates a new builder-style object to manufacture [`MatchmakerSelfReadyInput`](crate::input::MatchmakerSelfReadyInput)
	pub fn builder() -> crate::input::matchmaker_self_ready_input::Builder {
		crate::input::matchmaker_self_ready_input::Builder::default()
	}
	/// Creates a new `MatchmakerSelfReady` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for MatchmakerSelfReady {
	type Output = std::result::Result<
		crate::output::MatchmakerSelfReadyOutput,
		crate::error::MatchmakerSelfReadyError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_matchmaker_self_ready_error(response)
		} else {
			crate::operation_deser::parse_matchmaker_self_ready_response(response)
		}
	}
}

/// Operation shape for `SetPartyToIdle`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`set_party_to_idle`](crate::client::Client::set_party_to_idle).
///
/// See [`crate::client::fluent_builders::SetPartyToIdle`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetPartyToIdle {
	_private: (),
}
impl SetPartyToIdle {
	/// Creates a new builder-style object to manufacture [`SetPartyToIdleInput`](crate::input::SetPartyToIdleInput)
	pub fn builder() -> crate::input::set_party_to_idle_input::Builder {
		crate::input::set_party_to_idle_input::Builder::default()
	}
	/// Creates a new `SetPartyToIdle` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for SetPartyToIdle {
	type Output =
		std::result::Result<crate::output::SetPartyToIdleOutput, crate::error::SetPartyToIdleError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_set_party_to_idle_error(response)
		} else {
			crate::operation_deser::parse_set_party_to_idle_response(response)
		}
	}
}

/// Operation shape for `SetSelfInactive`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`set_self_inactive`](crate::client::Client::set_self_inactive).
///
/// See [`crate::client::fluent_builders::SetSelfInactive`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SetSelfInactive {
	_private: (),
}
impl SetSelfInactive {
	/// Creates a new builder-style object to manufacture [`SetSelfInactiveInput`](crate::input::SetSelfInactiveInput)
	pub fn builder() -> crate::input::set_self_inactive_input::Builder {
		crate::input::set_self_inactive_input::Builder::default()
	}
	/// Creates a new `SetSelfInactive` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for SetSelfInactive {
	type Output = std::result::Result<
		crate::output::SetSelfInactiveOutput,
		crate::error::SetSelfInactiveError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_set_self_inactive_error(response)
		} else {
			crate::operation_deser::parse_set_self_inactive_response(response)
		}
	}
}
