// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_party_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreatePartyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_1) = &input.invites {
		let mut array_2 = object.key("invites").start_array();
		for item_3 in var_1 {
			{
				let mut object_4 = array_2.value().start_object();
				crate::json_ser::serialize_structure_crate_model_create_party_invite_config(
					&mut object_4,
					item_3,
				)?;
				object_4.finish();
			}
		}
		array_2.finish();
	}
	if let Some(var_5) = &input.matchmaker_current_player_token {
		object
			.key("matchmaker_current_player_token")
			.string(var_5.as_str());
	}
	if let Some(var_6) = &input.party_size {
		object.key("party_size").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_6).into()),
		);
	}
	if let Some(var_7) = &input.publicity {
		let mut object_8 = object.key("publicity").start_object();
		crate::json_ser::serialize_structure_crate_model_create_party_publicity_config(
			&mut object_8,
			var_7,
		)?;
		object_8.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_party_invite_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreatePartyInviteInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_9) = &input.alias {
		object.key("alias").string(var_9.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_join_party_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::JoinPartyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_10) = &input.invite {
		let mut object_11 = object.key("invite").start_object();
		crate::json_ser::serialize_union_crate_model_join_party_invite(&mut object_11, var_10)?;
		object_11.finish();
	}
	if let Some(var_12) = &input.matchmaker_auto_join_lobby {
		object.key("matchmaker_auto_join_lobby").boolean(*var_12);
	}
	if let Some(var_13) = &input.matchmaker_current_player_token {
		object
			.key("matchmaker_current_player_token")
			.string(var_13.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_set_party_publicity_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::SetPartyPublicityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_14) = &input.groups {
		object.key("groups").string(var_14.as_str());
	}
	if let Some(var_15) = &input.mutual_followers {
		object.key("mutual_followers").string(var_15.as_str());
	}
	if let Some(var_16) = &input.public {
		object.key("public").string(var_16.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_find_matchmaker_lobby_for_party_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::FindMatchmakerLobbyForPartyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_17) = &input.captcha {
		let mut object_18 = object.key("captcha").start_object();
		crate::json_ser::serialize_union_crate_model_captcha_config(&mut object_18, var_17)?;
		object_18.finish();
	}
	if let Some(var_19) = &input.game_modes {
		let mut array_20 = object.key("game_modes").start_array();
		for item_21 in var_19 {
			{
				array_20.value().string(item_21.as_str());
			}
		}
		array_20.finish();
	}
	if let Some(var_22) = &input.prevent_auto_create_lobby {
		object.key("prevent_auto_create_lobby").boolean(*var_22);
	}
	if let Some(var_23) = &input.regions {
		let mut array_24 = object.key("regions").start_array();
		for item_25 in var_23 {
			{
				array_24.value().string(item_25.as_str());
			}
		}
		array_24.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_join_matchmaker_lobby_for_party_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::JoinMatchmakerLobbyForPartyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_26) = &input.captcha {
		let mut object_27 = object.key("captcha").start_object();
		crate::json_ser::serialize_union_crate_model_captcha_config(&mut object_27, var_26)?;
		object_27.finish();
	}
	if let Some(var_28) = &input.lobby_id {
		object.key("lobby_id").string(var_28.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_create_party_invite_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CreatePartyInviteConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_29) = &input.alias {
		object.key("alias").string(var_29.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_create_party_publicity_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CreatePartyPublicityConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_30) = &input.public {
		object.key("public").string(var_30.as_str());
	}
	if let Some(var_31) = &input.mutual_followers {
		object.key("mutual_followers").string(var_31.as_str());
	}
	if let Some(var_32) = &input.groups {
		object.key("groups").string(var_32.as_str());
	}
	Ok(())
}

pub fn serialize_union_crate_model_join_party_invite(
	object_11: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::JoinPartyInvite,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	match input {
		crate::model::JoinPartyInvite::PartyId(inner) => {
			object_11.key("party_id").string(inner.as_str());
		}
		crate::model::JoinPartyInvite::Token(inner) => {
			object_11.key("token").string(inner.as_str());
		}
		crate::model::JoinPartyInvite::Alias(inner) => {
			object_11.key("alias").string(inner.as_str());
		}
		crate::model::JoinPartyInvite::Unknown => {
			return Err(
				aws_smithy_http::operation::SerializationError::unknown_variant("JoinPartyInvite"),
			)
		}
	}
	Ok(())
}

pub fn serialize_union_crate_model_captcha_config(
	object_18: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CaptchaConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	match input {
		crate::model::CaptchaConfig::Hcaptcha(inner) => {
			let mut object_33 = object_18.key("hcaptcha").start_object();
			crate::json_ser::serialize_structure_crate_model_captcha_config_hcaptcha(
				&mut object_33,
				inner,
			)?;
			object_33.finish();
		}
		crate::model::CaptchaConfig::Turnstile(inner) => {
			let mut object_34 = object_18.key("turnstile").start_object();
			crate::json_ser::serialize_structure_crate_model_captcha_config_turnstile(
				&mut object_34,
				inner,
			)?;
			object_34.finish();
		}
		crate::model::CaptchaConfig::Unknown => {
			return Err(
				aws_smithy_http::operation::SerializationError::unknown_variant("CaptchaConfig"),
			)
		}
	}
	Ok(())
}

pub fn serialize_structure_crate_model_captcha_config_hcaptcha(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CaptchaConfigHcaptcha,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_35) = &input.client_response {
		object.key("client_response").string(var_35.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_captcha_config_turnstile(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CaptchaConfigTurnstile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_36) = &input.client_response {
		object.key("client_response").string(var_36.as_str());
	}
	Ok(())
}
