// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use std::fmt::Write;
/// See [`CleanupInput`](crate::input::CleanupInput)
pub mod cleanup_input {
	/// A builder for [`CleanupInput`](crate::input::CleanupInput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`CleanupInput`](crate::input::CleanupInput)
		pub fn build(
			self,
		) -> std::result::Result<crate::input::CleanupInput, aws_smithy_http::operation::BuildError>
		{
			Ok(crate::input::CleanupInput {})
		}
	}
}
#[doc(hidden)]
pub type CleanupInputOperationOutputAlias = crate::operation::Cleanup;
#[doc(hidden)]
pub type CleanupInputOperationRetryAlias = ();
impl CleanupInput {
	/// Consumes the builder and constructs an Operation<[`Cleanup`](crate::operation::Cleanup)>
	#[allow(unused_mut)]
	#[allow(clippy::let_and_return)]
	#[allow(clippy::needless_borrow)]
	pub async fn make_operation(
		&self,
		_config: &crate::config::Config,
	) -> std::result::Result<
		aws_smithy_http::operation::Operation<crate::operation::Cleanup, ()>,
		aws_smithy_http::operation::BuildError,
	> {
		let mut request = {
			fn uri_base(
				_input: &crate::input::CleanupInput,
				output: &mut String,
			) -> Result<(), aws_smithy_http::operation::BuildError> {
				write!(output, "/runs/cleanup").expect("formatting should succeed");
				Ok(())
			}
			#[allow(clippy::unnecessary_wraps)]
			fn update_http_builder(
				input: &crate::input::CleanupInput,
				_config: &crate::config::Config,
				builder: http::request::Builder,
			) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError>
			{
				let mut _uri = String::new();
				_uri = format!("{}{}", _config.uri.clone(), _uri);
				uri_base(input, &mut _uri)?;
				Ok(builder.method("POST").uri(_uri))
			}
			let mut builder = update_http_builder(&self, _config, http::request::Builder::new())?;
			let mut builder = if let Some(auth) = &_config.auth {
				builder.header(http::header::AUTHORIZATION, auth.clone())
			} else {
				builder
			};
			builder
		};
		let mut properties = aws_smithy_http::property_bag::SharedPropertyBag::new();
		#[allow(clippy::useless_conversion)]
		let body = aws_smithy_http::body::SdkBody::from("{}");
		let request = request.body(body).expect("should be valid request");
		let mut request = aws_smithy_http::operation::Request::from_parts(request, properties);
		request
			.properties_mut()
			.insert(aws_smithy_http::http_versions::DEFAULT_HTTP_VERSION_LIST.clone());
		let op =
			aws_smithy_http::operation::Operation::new(request, crate::operation::Cleanup::new())
				.with_metadata(aws_smithy_http::operation::Metadata::new(
					"Cleanup",
					"JobService",
				));
		Ok(op)
	}
	/// Creates a new builder-style object to manufacture [`CleanupInput`](crate::input::CleanupInput)
	pub fn builder() -> crate::input::cleanup_input::Builder {
		crate::input::cleanup_input::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CleanupInput {}
impl std::fmt::Debug for CleanupInput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CleanupInput");
		formatter.finish()
	}
}
