// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_register_notifications_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::RegisterNotificationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_1) = &input.service {
		let mut object_2 = object.key("service").start_object();
		crate::json_ser::serialize_union_crate_model_notification_register_service(
			&mut object_2,
			var_1,
		)?;
		object_2.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_resolve_beta_join_request_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ResolveBetaJoinRequestInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_3) = &input.resolution {
		object.key("resolution").boolean(*var_3);
	}
	Ok(())
}

pub fn serialize_union_crate_model_notification_register_service(
	object_2: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::NotificationRegisterService,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	match input {
		crate::model::NotificationRegisterService::Firebase(inner) => {
			let mut object_4 = object_2.key("firebase").start_object();
			crate::json_ser::serialize_structure_crate_model_notification_register_firebase_service(&mut object_4, inner)?;
			object_4.finish();
		}
		crate::model::NotificationRegisterService::Unknown => {
			return Err(
				aws_smithy_http::operation::SerializationError::unknown_variant(
					"NotificationRegisterService",
				),
			)
		}
	}
	Ok(())
}

pub fn serialize_structure_crate_model_notification_register_firebase_service(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::NotificationRegisterFirebaseService,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_5) = &input.access_key {
		object.key("access_key").string(var_5.as_str());
	}
	Ok(())
}
