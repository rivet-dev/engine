// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `GetGameProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_game_profile`](crate::client::Client::get_game_profile).
///
/// See [`crate::client::fluent_builders::GetGameProfile`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGameProfile {
	_private: (),
}
impl GetGameProfile {
	/// Creates a new builder-style object to manufacture [`GetGameProfileInput`](crate::input::GetGameProfileInput)
	pub fn builder() -> crate::input::get_game_profile_input::Builder {
		crate::input::get_game_profile_input::Builder::default()
	}
	/// Creates a new `GetGameProfile` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGameProfile {
	type Output =
		std::result::Result<crate::output::GetGameProfileOutput, crate::error::GetGameProfileError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_game_profile_error(response)
		} else {
			crate::operation_deser::parse_get_game_profile_response(response)
		}
	}
}

/// Operation shape for `GetSuggestedGames`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_suggested_games`](crate::client::Client::get_suggested_games).
///
/// See [`crate::client::fluent_builders::GetSuggestedGames`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSuggestedGames {
	_private: (),
}
impl GetSuggestedGames {
	/// Creates a new builder-style object to manufacture [`GetSuggestedGamesInput`](crate::input::GetSuggestedGamesInput)
	pub fn builder() -> crate::input::get_suggested_games_input::Builder {
		crate::input::get_suggested_games_input::Builder::default()
	}
	/// Creates a new `GetSuggestedGames` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetSuggestedGames {
	type Output = std::result::Result<
		crate::output::GetSuggestedGamesOutput,
		crate::error::GetSuggestedGamesError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_suggested_games_error(response)
		} else {
			crate::operation_deser::parse_get_suggested_games_response(response)
		}
	}
}

/// Operation shape for `RegisterNotifications`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`register_notifications`](crate::client::Client::register_notifications).
///
/// See [`crate::client::fluent_builders::RegisterNotifications`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterNotifications {
	_private: (),
}
impl RegisterNotifications {
	/// Creates a new builder-style object to manufacture [`RegisterNotificationsInput`](crate::input::RegisterNotificationsInput)
	pub fn builder() -> crate::input::register_notifications_input::Builder {
		crate::input::register_notifications_input::Builder::default()
	}
	/// Creates a new `RegisterNotifications` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for RegisterNotifications {
	type Output = std::result::Result<
		crate::output::RegisterNotificationsOutput,
		crate::error::RegisterNotificationsError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_register_notifications_error(response)
		} else {
			crate::operation_deser::parse_register_notifications_response(response)
		}
	}
}

/// Operation shape for `ResolveBetaJoinRequest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`resolve_beta_join_request`](crate::client::Client::resolve_beta_join_request).
///
/// See [`crate::client::fluent_builders::ResolveBetaJoinRequest`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResolveBetaJoinRequest {
	_private: (),
}
impl ResolveBetaJoinRequest {
	/// Creates a new builder-style object to manufacture [`ResolveBetaJoinRequestInput`](crate::input::ResolveBetaJoinRequestInput)
	pub fn builder() -> crate::input::resolve_beta_join_request_input::Builder {
		crate::input::resolve_beta_join_request_input::Builder::default()
	}
	/// Creates a new `ResolveBetaJoinRequest` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ResolveBetaJoinRequest {
	type Output = std::result::Result<
		crate::output::ResolveBetaJoinRequestOutput,
		crate::error::ResolveBetaJoinRequestError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_resolve_beta_join_request_error(response)
		} else {
			crate::operation_deser::parse_resolve_beta_join_request_response(response)
		}
	}
}

/// Operation shape for `UnregisterNotifications`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`unregister_notifications`](crate::client::Client::unregister_notifications).
///
/// See [`crate::client::fluent_builders::UnregisterNotifications`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnregisterNotifications {
	_private: (),
}
impl UnregisterNotifications {
	/// Creates a new builder-style object to manufacture [`UnregisterNotificationsInput`](crate::input::UnregisterNotificationsInput)
	pub fn builder() -> crate::input::unregister_notifications_input::Builder {
		crate::input::unregister_notifications_input::Builder::default()
	}
	/// Creates a new `UnregisterNotifications` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for UnregisterNotifications {
	type Output = std::result::Result<
		crate::output::UnregisterNotificationsOutput,
		crate::error::UnregisterNotificationsError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_unregister_notifications_error(response)
		} else {
			crate::operation_deser::parse_unregister_notifications_response(response)
		}
	}
}
