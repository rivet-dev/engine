// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Represents a value for which notification service to unregister.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum NotificationUnregisterService {
	/// Firebase service.
	Firebase,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for NotificationUnregisterService {
	fn from(s: &str) -> Self {
		match s {
			"firebase" => NotificationUnregisterService::Firebase,
			other => NotificationUnregisterService::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for NotificationUnregisterService {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(NotificationUnregisterService::from(s))
	}
}
impl NotificationUnregisterService {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			NotificationUnregisterService::Firebase => "firebase",
			NotificationUnregisterService::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["firebase"]
	}
}
impl AsRef<str> for NotificationUnregisterService {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// A union representing which notification service to register.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum NotificationRegisterService {
	/// Represents push notification configuration for Firebase.
	Firebase(crate::model::NotificationRegisterFirebaseService),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl NotificationRegisterService {
	#[allow(irrefutable_let_patterns)]
	/// Tries to convert the enum instance into [`Firebase`](crate::model::NotificationRegisterService::Firebase), extracting the inner [`NotificationRegisterFirebaseService`](crate::model::NotificationRegisterFirebaseService).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_firebase(
		&self,
	) -> std::result::Result<&crate::model::NotificationRegisterFirebaseService, &Self> {
		if let NotificationRegisterService::Firebase(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Firebase`](crate::model::NotificationRegisterService::Firebase).
	pub fn is_firebase(&self) -> bool {
		self.as_firebase().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// Represents push notification configuration for Firebase.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NotificationRegisterFirebaseService {
	#[allow(missing_docs)] // documentation missing in model
	pub access_key: std::option::Option<std::string::String>,
}
impl NotificationRegisterFirebaseService {
	#[allow(missing_docs)] // documentation missing in model
	pub fn access_key(&self) -> std::option::Option<&str> {
		self.access_key.as_deref()
	}
}
impl std::fmt::Debug for NotificationRegisterFirebaseService {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("NotificationRegisterFirebaseService");
		formatter.field("access_key", &self.access_key);
		formatter.finish()
	}
}
/// See [`NotificationRegisterFirebaseService`](crate::model::NotificationRegisterFirebaseService)
pub mod notification_register_firebase_service {
	/// A builder for [`NotificationRegisterFirebaseService`](crate::model::NotificationRegisterFirebaseService)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) access_key: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn access_key(mut self, input: impl Into<std::string::String>) -> Self {
			self.access_key = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_access_key(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.access_key = input;
			self
		}
		/// Consumes the builder and constructs a [`NotificationRegisterFirebaseService`](crate::model::NotificationRegisterFirebaseService)
		pub fn build(self) -> crate::model::NotificationRegisterFirebaseService {
			crate::model::NotificationRegisterFirebaseService {
				access_key: self.access_key,
			}
		}
	}
}
impl NotificationRegisterFirebaseService {
	/// Creates a new builder-style object to manufacture [`NotificationRegisterFirebaseService`](crate::model::NotificationRegisterFirebaseService)
	pub fn builder() -> crate::model::notification_register_firebase_service::Builder {
		crate::model::notification_register_firebase_service::Builder::default()
	}
}

/// Provided by watchable endpoints used in blocking loops.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct WatchResponse {
	/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
	pub index: std::option::Option<std::string::String>,
}
impl WatchResponse {
	/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
	pub fn index(&self) -> std::option::Option<&str> {
		self.index.as_deref()
	}
}
impl std::fmt::Debug for WatchResponse {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("WatchResponse");
		formatter.field("index", &self.index);
		formatter.finish()
	}
}
/// See [`WatchResponse`](crate::model::WatchResponse)
pub mod watch_response {
	/// A builder for [`WatchResponse`](crate::model::WatchResponse)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) index: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
		pub fn index(mut self, input: impl Into<std::string::String>) -> Self {
			self.index = Some(input.into());
			self
		}
		/// Index indicating the version of the data responded. Pas this to `rivet.common#WatchQuery` to block and wait for the next response.
		pub fn set_index(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.index = input;
			self
		}
		/// Consumes the builder and constructs a [`WatchResponse`](crate::model::WatchResponse)
		pub fn build(self) -> crate::model::WatchResponse {
			crate::model::WatchResponse { index: self.index }
		}
	}
}
impl WatchResponse {
	/// Creates a new builder-style object to manufacture [`WatchResponse`](crate::model::WatchResponse)
	pub fn builder() -> crate::model::watch_response::Builder {
		crate::model::watch_response::Builder::default()
	}
}

/// A game profile.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameProfile {
	/// A universally unique identifier.
	pub game_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub name_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// The URL of this game's logo image.
	pub logo_url: std::option::Option<std::string::String>,
	/// The URL of this game's banner image.
	pub banner_url: std::option::Option<std::string::String>,
	/// The URL to this game's website.
	pub url: std::option::Option<std::string::String>,
	/// A group summary.
	pub developer: std::option::Option<crate::model::GroupSummary>,
	/// A list of game tags.
	pub tags: std::option::Option<std::vec::Vec<std::string::String>>,
	/// A description of the given game.
	pub description: std::option::Option<std::string::String>,
	/// A list of platform links.
	pub platforms: std::option::Option<std::vec::Vec<crate::model::GamePlatformLink>>,
	/// A list of group summaries.
	pub recommended_groups: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
	/// A list of game leaderboard categories.
	pub identity_leaderboard_categories:
		std::option::Option<std::vec::Vec<crate::model::GameLeaderboardCategory>>,
	/// A list of game leaderboard categories.
	pub group_leaderboard_categories:
		std::option::Option<std::vec::Vec<crate::model::GameLeaderboardCategory>>,
}
impl GameProfile {
	/// A universally unique identifier.
	pub fn game_id(&self) -> std::option::Option<&str> {
		self.game_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn name_id(&self) -> std::option::Option<&str> {
		self.name_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// The URL of this game's logo image.
	pub fn logo_url(&self) -> std::option::Option<&str> {
		self.logo_url.as_deref()
	}
	/// The URL of this game's banner image.
	pub fn banner_url(&self) -> std::option::Option<&str> {
		self.banner_url.as_deref()
	}
	/// The URL to this game's website.
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
	/// A group summary.
	pub fn developer(&self) -> std::option::Option<&crate::model::GroupSummary> {
		self.developer.as_ref()
	}
	/// A list of game tags.
	pub fn tags(&self) -> std::option::Option<&[std::string::String]> {
		self.tags.as_deref()
	}
	/// A description of the given game.
	pub fn description(&self) -> std::option::Option<&str> {
		self.description.as_deref()
	}
	/// A list of platform links.
	pub fn platforms(&self) -> std::option::Option<&[crate::model::GamePlatformLink]> {
		self.platforms.as_deref()
	}
	/// A list of group summaries.
	pub fn recommended_groups(&self) -> std::option::Option<&[crate::model::GroupSummary]> {
		self.recommended_groups.as_deref()
	}
	/// A list of game leaderboard categories.
	pub fn identity_leaderboard_categories(
		&self,
	) -> std::option::Option<&[crate::model::GameLeaderboardCategory]> {
		self.identity_leaderboard_categories.as_deref()
	}
	/// A list of game leaderboard categories.
	pub fn group_leaderboard_categories(
		&self,
	) -> std::option::Option<&[crate::model::GameLeaderboardCategory]> {
		self.group_leaderboard_categories.as_deref()
	}
}
impl std::fmt::Debug for GameProfile {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameProfile");
		formatter.field("game_id", &self.game_id);
		formatter.field("name_id", &self.name_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("logo_url", &self.logo_url);
		formatter.field("banner_url", &self.banner_url);
		formatter.field("url", &self.url);
		formatter.field("developer", &self.developer);
		formatter.field("tags", &self.tags);
		formatter.field("description", &self.description);
		formatter.field("platforms", &self.platforms);
		formatter.field("recommended_groups", &self.recommended_groups);
		formatter.field(
			"identity_leaderboard_categories",
			&self.identity_leaderboard_categories,
		);
		formatter.field(
			"group_leaderboard_categories",
			&self.group_leaderboard_categories,
		);
		formatter.finish()
	}
}
/// See [`GameProfile`](crate::model::GameProfile)
pub mod game_profile {
	/// A builder for [`GameProfile`](crate::model::GameProfile)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_id: std::option::Option<std::string::String>,
		pub(crate) name_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) logo_url: std::option::Option<std::string::String>,
		pub(crate) banner_url: std::option::Option<std::string::String>,
		pub(crate) url: std::option::Option<std::string::String>,
		pub(crate) developer: std::option::Option<crate::model::GroupSummary>,
		pub(crate) tags: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) description: std::option::Option<std::string::String>,
		pub(crate) platforms: std::option::Option<std::vec::Vec<crate::model::GamePlatformLink>>,
		pub(crate) recommended_groups:
			std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
		pub(crate) identity_leaderboard_categories:
			std::option::Option<std::vec::Vec<crate::model::GameLeaderboardCategory>>,
		pub(crate) group_leaderboard_categories:
			std::option::Option<std::vec::Vec<crate::model::GameLeaderboardCategory>>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn game_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_game_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// The URL of this game's logo image.
		pub fn logo_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.logo_url = Some(input.into());
			self
		}
		/// The URL of this game's logo image.
		pub fn set_logo_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.logo_url = input;
			self
		}
		/// The URL of this game's banner image.
		pub fn banner_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.banner_url = Some(input.into());
			self
		}
		/// The URL of this game's banner image.
		pub fn set_banner_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.banner_url = input;
			self
		}
		/// The URL to this game's website.
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		/// The URL to this game's website.
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// A group summary.
		pub fn developer(mut self, input: crate::model::GroupSummary) -> Self {
			self.developer = Some(input);
			self
		}
		/// A group summary.
		pub fn set_developer(
			mut self,
			input: std::option::Option<crate::model::GroupSummary>,
		) -> Self {
			self.developer = input;
			self
		}
		/// Appends an item to `tags`.
		///
		/// To override the contents of this collection use [`set_tags`](Self::set_tags).
		///
		/// A list of game tags.
		pub fn tags(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.tags.unwrap_or_default();
			v.push(input.into());
			self.tags = Some(v);
			self
		}
		/// A list of game tags.
		pub fn set_tags(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.tags = input;
			self
		}
		/// A description of the given game.
		pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
			self.description = Some(input.into());
			self
		}
		/// A description of the given game.
		pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.description = input;
			self
		}
		/// Appends an item to `platforms`.
		///
		/// To override the contents of this collection use [`set_platforms`](Self::set_platforms).
		///
		/// A list of platform links.
		pub fn platforms(mut self, input: crate::model::GamePlatformLink) -> Self {
			let mut v = self.platforms.unwrap_or_default();
			v.push(input);
			self.platforms = Some(v);
			self
		}
		/// A list of platform links.
		pub fn set_platforms(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GamePlatformLink>>,
		) -> Self {
			self.platforms = input;
			self
		}
		/// Appends an item to `recommended_groups`.
		///
		/// To override the contents of this collection use [`set_recommended_groups`](Self::set_recommended_groups).
		///
		/// A list of group summaries.
		pub fn recommended_groups(mut self, input: crate::model::GroupSummary) -> Self {
			let mut v = self.recommended_groups.unwrap_or_default();
			v.push(input);
			self.recommended_groups = Some(v);
			self
		}
		/// A list of group summaries.
		pub fn set_recommended_groups(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GroupSummary>>,
		) -> Self {
			self.recommended_groups = input;
			self
		}
		/// Appends an item to `identity_leaderboard_categories`.
		///
		/// To override the contents of this collection use [`set_identity_leaderboard_categories`](Self::set_identity_leaderboard_categories).
		///
		/// A list of game leaderboard categories.
		pub fn identity_leaderboard_categories(
			mut self,
			input: crate::model::GameLeaderboardCategory,
		) -> Self {
			let mut v = self.identity_leaderboard_categories.unwrap_or_default();
			v.push(input);
			self.identity_leaderboard_categories = Some(v);
			self
		}
		/// A list of game leaderboard categories.
		pub fn set_identity_leaderboard_categories(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GameLeaderboardCategory>>,
		) -> Self {
			self.identity_leaderboard_categories = input;
			self
		}
		/// Appends an item to `group_leaderboard_categories`.
		///
		/// To override the contents of this collection use [`set_group_leaderboard_categories`](Self::set_group_leaderboard_categories).
		///
		/// A list of game leaderboard categories.
		pub fn group_leaderboard_categories(
			mut self,
			input: crate::model::GameLeaderboardCategory,
		) -> Self {
			let mut v = self.group_leaderboard_categories.unwrap_or_default();
			v.push(input);
			self.group_leaderboard_categories = Some(v);
			self
		}
		/// A list of game leaderboard categories.
		pub fn set_group_leaderboard_categories(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GameLeaderboardCategory>>,
		) -> Self {
			self.group_leaderboard_categories = input;
			self
		}
		/// Consumes the builder and constructs a [`GameProfile`](crate::model::GameProfile)
		pub fn build(self) -> crate::model::GameProfile {
			crate::model::GameProfile {
				game_id: self.game_id,
				name_id: self.name_id,
				display_name: self.display_name,
				logo_url: self.logo_url,
				banner_url: self.banner_url,
				url: self.url,
				developer: self.developer,
				tags: self.tags,
				description: self.description,
				platforms: self.platforms,
				recommended_groups: self.recommended_groups,
				identity_leaderboard_categories: self.identity_leaderboard_categories,
				group_leaderboard_categories: self.group_leaderboard_categories,
			}
		}
	}
}
impl GameProfile {
	/// Creates a new builder-style object to manufacture [`GameProfile`](crate::model::GameProfile)
	pub fn builder() -> crate::model::game_profile::Builder {
		crate::model::game_profile::Builder::default()
	}
}

/// A game leaderboard category.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameLeaderboardCategory {
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
}
impl GameLeaderboardCategory {
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
}
impl std::fmt::Debug for GameLeaderboardCategory {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameLeaderboardCategory");
		formatter.field("display_name", &self.display_name);
		formatter.finish()
	}
}
/// See [`GameLeaderboardCategory`](crate::model::GameLeaderboardCategory)
pub mod game_leaderboard_category {
	/// A builder for [`GameLeaderboardCategory`](crate::model::GameLeaderboardCategory)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) display_name: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// Consumes the builder and constructs a [`GameLeaderboardCategory`](crate::model::GameLeaderboardCategory)
		pub fn build(self) -> crate::model::GameLeaderboardCategory {
			crate::model::GameLeaderboardCategory {
				display_name: self.display_name,
			}
		}
	}
}
impl GameLeaderboardCategory {
	/// Creates a new builder-style object to manufacture [`GameLeaderboardCategory`](crate::model::GameLeaderboardCategory)
	pub fn builder() -> crate::model::game_leaderboard_category::Builder {
		crate::model::game_leaderboard_category::Builder::default()
	}
}

/// A group summary.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GroupSummary {
	/// A universally unique identifier.
	pub group_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// The URL of this group's avatar image.
	pub avatar_url: std::option::Option<std::string::String>,
	/// External links for this group.
	pub external: std::option::Option<crate::model::GroupExternalLinks>,
	/// Whether or not this group is a developer.
	pub is_developer: std::option::Option<bool>,
	/// Detailed information about a profile.
	pub bio: std::option::Option<std::string::String>,
	/// Whether or not the current identity is a member of this group.
	pub is_current_identity_member: std::option::Option<bool>,
	/// The current publicity value for the given group.
	pub publicity: std::option::Option<crate::model::GroupPublicity>,
	/// Unsigned 32 bit integer.
	pub member_count: std::option::Option<i32>,
	/// A universally unique identifier.
	pub owner_identity_id: std::option::Option<std::string::String>,
}
impl GroupSummary {
	/// A universally unique identifier.
	pub fn group_id(&self) -> std::option::Option<&str> {
		self.group_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// The URL of this group's avatar image.
	pub fn avatar_url(&self) -> std::option::Option<&str> {
		self.avatar_url.as_deref()
	}
	/// External links for this group.
	pub fn external(&self) -> std::option::Option<&crate::model::GroupExternalLinks> {
		self.external.as_ref()
	}
	/// Whether or not this group is a developer.
	pub fn is_developer(&self) -> std::option::Option<bool> {
		self.is_developer
	}
	/// Detailed information about a profile.
	pub fn bio(&self) -> std::option::Option<&str> {
		self.bio.as_deref()
	}
	/// Whether or not the current identity is a member of this group.
	pub fn is_current_identity_member(&self) -> std::option::Option<bool> {
		self.is_current_identity_member
	}
	/// The current publicity value for the given group.
	pub fn publicity(&self) -> std::option::Option<&crate::model::GroupPublicity> {
		self.publicity.as_ref()
	}
	/// Unsigned 32 bit integer.
	pub fn member_count(&self) -> std::option::Option<i32> {
		self.member_count
	}
	/// A universally unique identifier.
	pub fn owner_identity_id(&self) -> std::option::Option<&str> {
		self.owner_identity_id.as_deref()
	}
}
impl std::fmt::Debug for GroupSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GroupSummary");
		formatter.field("group_id", &self.group_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("avatar_url", &self.avatar_url);
		formatter.field("external", &self.external);
		formatter.field("is_developer", &self.is_developer);
		formatter.field("bio", &self.bio);
		formatter.field(
			"is_current_identity_member",
			&self.is_current_identity_member,
		);
		formatter.field("publicity", &self.publicity);
		formatter.field("member_count", &self.member_count);
		formatter.field("owner_identity_id", &self.owner_identity_id);
		formatter.finish()
	}
}
/// See [`GroupSummary`](crate::model::GroupSummary)
pub mod group_summary {
	/// A builder for [`GroupSummary`](crate::model::GroupSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) avatar_url: std::option::Option<std::string::String>,
		pub(crate) external: std::option::Option<crate::model::GroupExternalLinks>,
		pub(crate) is_developer: std::option::Option<bool>,
		pub(crate) bio: std::option::Option<std::string::String>,
		pub(crate) is_current_identity_member: std::option::Option<bool>,
		pub(crate) publicity: std::option::Option<crate::model::GroupPublicity>,
		pub(crate) member_count: std::option::Option<i32>,
		pub(crate) owner_identity_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.group_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.group_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// The URL of this group's avatar image.
		pub fn avatar_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.avatar_url = Some(input.into());
			self
		}
		/// The URL of this group's avatar image.
		pub fn set_avatar_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.avatar_url = input;
			self
		}
		/// External links for this group.
		pub fn external(mut self, input: crate::model::GroupExternalLinks) -> Self {
			self.external = Some(input);
			self
		}
		/// External links for this group.
		pub fn set_external(
			mut self,
			input: std::option::Option<crate::model::GroupExternalLinks>,
		) -> Self {
			self.external = input;
			self
		}
		/// Whether or not this group is a developer.
		pub fn is_developer(mut self, input: bool) -> Self {
			self.is_developer = Some(input);
			self
		}
		/// Whether or not this group is a developer.
		pub fn set_is_developer(mut self, input: std::option::Option<bool>) -> Self {
			self.is_developer = input;
			self
		}
		/// Detailed information about a profile.
		pub fn bio(mut self, input: impl Into<std::string::String>) -> Self {
			self.bio = Some(input.into());
			self
		}
		/// Detailed information about a profile.
		pub fn set_bio(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.bio = input;
			self
		}
		/// Whether or not the current identity is a member of this group.
		pub fn is_current_identity_member(mut self, input: bool) -> Self {
			self.is_current_identity_member = Some(input);
			self
		}
		/// Whether or not the current identity is a member of this group.
		pub fn set_is_current_identity_member(mut self, input: std::option::Option<bool>) -> Self {
			self.is_current_identity_member = input;
			self
		}
		/// The current publicity value for the given group.
		pub fn publicity(mut self, input: crate::model::GroupPublicity) -> Self {
			self.publicity = Some(input);
			self
		}
		/// The current publicity value for the given group.
		pub fn set_publicity(
			mut self,
			input: std::option::Option<crate::model::GroupPublicity>,
		) -> Self {
			self.publicity = input;
			self
		}
		/// Unsigned 32 bit integer.
		pub fn member_count(mut self, input: i32) -> Self {
			self.member_count = Some(input);
			self
		}
		/// Unsigned 32 bit integer.
		pub fn set_member_count(mut self, input: std::option::Option<i32>) -> Self {
			self.member_count = input;
			self
		}
		/// A universally unique identifier.
		pub fn owner_identity_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.owner_identity_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_owner_identity_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.owner_identity_id = input;
			self
		}
		/// Consumes the builder and constructs a [`GroupSummary`](crate::model::GroupSummary)
		pub fn build(self) -> crate::model::GroupSummary {
			crate::model::GroupSummary {
				group_id: self.group_id,
				display_name: self.display_name,
				avatar_url: self.avatar_url,
				external: self.external,
				is_developer: self.is_developer,
				bio: self.bio,
				is_current_identity_member: self.is_current_identity_member,
				publicity: self.publicity,
				member_count: self.member_count,
				owner_identity_id: self.owner_identity_id,
			}
		}
	}
}
impl GroupSummary {
	/// Creates a new builder-style object to manufacture [`GroupSummary`](crate::model::GroupSummary)
	pub fn builder() -> crate::model::group_summary::Builder {
		crate::model::group_summary::Builder::default()
	}
}

/// The current publicity value for the given group.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum GroupPublicity {
	#[allow(missing_docs)] // documentation missing in model
	Closed,
	#[allow(missing_docs)] // documentation missing in model
	Open,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for GroupPublicity {
	fn from(s: &str) -> Self {
		match s {
			"closed" => GroupPublicity::Closed,
			"open" => GroupPublicity::Open,
			other => GroupPublicity::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for GroupPublicity {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(GroupPublicity::from(s))
	}
}
impl GroupPublicity {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			GroupPublicity::Closed => "closed",
			GroupPublicity::Open => "open",
			GroupPublicity::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&["closed", "open"]
	}
}
impl AsRef<str> for GroupPublicity {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// External links for this group.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GroupExternalLinks {
	/// A link to this group's profile page.
	pub profile: std::option::Option<std::string::String>,
	/// A link to this group's chat page.
	pub chat: std::option::Option<std::string::String>,
}
impl GroupExternalLinks {
	/// A link to this group's profile page.
	pub fn profile(&self) -> std::option::Option<&str> {
		self.profile.as_deref()
	}
	/// A link to this group's chat page.
	pub fn chat(&self) -> std::option::Option<&str> {
		self.chat.as_deref()
	}
}
impl std::fmt::Debug for GroupExternalLinks {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GroupExternalLinks");
		formatter.field("profile", &self.profile);
		formatter.field("chat", &self.chat);
		formatter.finish()
	}
}
/// See [`GroupExternalLinks`](crate::model::GroupExternalLinks)
pub mod group_external_links {
	/// A builder for [`GroupExternalLinks`](crate::model::GroupExternalLinks)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) profile: std::option::Option<std::string::String>,
		pub(crate) chat: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A link to this group's profile page.
		pub fn profile(mut self, input: impl Into<std::string::String>) -> Self {
			self.profile = Some(input.into());
			self
		}
		/// A link to this group's profile page.
		pub fn set_profile(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.profile = input;
			self
		}
		/// A link to this group's chat page.
		pub fn chat(mut self, input: impl Into<std::string::String>) -> Self {
			self.chat = Some(input.into());
			self
		}
		/// A link to this group's chat page.
		pub fn set_chat(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.chat = input;
			self
		}
		/// Consumes the builder and constructs a [`GroupExternalLinks`](crate::model::GroupExternalLinks)
		pub fn build(self) -> crate::model::GroupExternalLinks {
			crate::model::GroupExternalLinks {
				profile: self.profile,
				chat: self.chat,
			}
		}
	}
}
impl GroupExternalLinks {
	/// Creates a new builder-style object to manufacture [`GroupExternalLinks`](crate::model::GroupExternalLinks)
	pub fn builder() -> crate::model::group_external_links::Builder {
		crate::model::group_external_links::Builder::default()
	}
}

/// A platform link denoting a supported platform.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GamePlatformLink {
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// The URL to the given game's method of distribution on this platform.
	pub url: std::option::Option<std::string::String>,
}
impl GamePlatformLink {
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// The URL to the given game's method of distribution on this platform.
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
}
impl std::fmt::Debug for GamePlatformLink {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GamePlatformLink");
		formatter.field("display_name", &self.display_name);
		formatter.field("url", &self.url);
		formatter.finish()
	}
}
/// See [`GamePlatformLink`](crate::model::GamePlatformLink)
pub mod game_platform_link {
	/// A builder for [`GamePlatformLink`](crate::model::GamePlatformLink)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) url: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// The URL to the given game's method of distribution on this platform.
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		/// The URL to the given game's method of distribution on this platform.
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// Consumes the builder and constructs a [`GamePlatformLink`](crate::model::GamePlatformLink)
		pub fn build(self) -> crate::model::GamePlatformLink {
			crate::model::GamePlatformLink {
				display_name: self.display_name,
				url: self.url,
			}
		}
	}
}
impl GamePlatformLink {
	/// Creates a new builder-style object to manufacture [`GamePlatformLink`](crate::model::GamePlatformLink)
	pub fn builder() -> crate::model::game_platform_link::Builder {
		crate::model::game_platform_link::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GameSummary {
	/// A universally unique identifier.
	pub game_id: std::option::Option<std::string::String>,
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub name_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// The URL of this game's logo image.
	pub logo_url: std::option::Option<std::string::String>,
	/// The URL of this game's banner image.
	pub banner_url: std::option::Option<std::string::String>,
	/// The URL to this game's website.
	pub url: std::option::Option<std::string::String>,
	/// A group handle.
	pub developer: std::option::Option<crate::model::GroupHandle>,
	/// A list of game tags.
	pub tags: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GameSummary {
	/// A universally unique identifier.
	pub fn game_id(&self) -> std::option::Option<&str> {
		self.game_id.as_deref()
	}
	/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	pub fn name_id(&self) -> std::option::Option<&str> {
		self.name_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// The URL of this game's logo image.
	pub fn logo_url(&self) -> std::option::Option<&str> {
		self.logo_url.as_deref()
	}
	/// The URL of this game's banner image.
	pub fn banner_url(&self) -> std::option::Option<&str> {
		self.banner_url.as_deref()
	}
	/// The URL to this game's website.
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
	/// A group handle.
	pub fn developer(&self) -> std::option::Option<&crate::model::GroupHandle> {
		self.developer.as_ref()
	}
	/// A list of game tags.
	pub fn tags(&self) -> std::option::Option<&[std::string::String]> {
		self.tags.as_deref()
	}
}
impl std::fmt::Debug for GameSummary {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GameSummary");
		formatter.field("game_id", &self.game_id);
		formatter.field("name_id", &self.name_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("logo_url", &self.logo_url);
		formatter.field("banner_url", &self.banner_url);
		formatter.field("url", &self.url);
		formatter.field("developer", &self.developer);
		formatter.field("tags", &self.tags);
		formatter.finish()
	}
}
/// See [`GameSummary`](crate::model::GameSummary)
pub mod game_summary {
	/// A builder for [`GameSummary`](crate::model::GameSummary)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_id: std::option::Option<std::string::String>,
		pub(crate) name_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) logo_url: std::option::Option<std::string::String>,
		pub(crate) banner_url: std::option::Option<std::string::String>,
		pub(crate) url: std::option::Option<std::string::String>,
		pub(crate) developer: std::option::Option<crate::model::GroupHandle>,
		pub(crate) tags: std::option::Option<std::vec::Vec<std::string::String>>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn game_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_game_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_id = input;
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn name_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.name_id = Some(input.into());
			self
		}
		/// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
		pub fn set_name_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.name_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// The URL of this game's logo image.
		pub fn logo_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.logo_url = Some(input.into());
			self
		}
		/// The URL of this game's logo image.
		pub fn set_logo_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.logo_url = input;
			self
		}
		/// The URL of this game's banner image.
		pub fn banner_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.banner_url = Some(input.into());
			self
		}
		/// The URL of this game's banner image.
		pub fn set_banner_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.banner_url = input;
			self
		}
		/// The URL to this game's website.
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		/// The URL to this game's website.
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// A group handle.
		pub fn developer(mut self, input: crate::model::GroupHandle) -> Self {
			self.developer = Some(input);
			self
		}
		/// A group handle.
		pub fn set_developer(
			mut self,
			input: std::option::Option<crate::model::GroupHandle>,
		) -> Self {
			self.developer = input;
			self
		}
		/// Appends an item to `tags`.
		///
		/// To override the contents of this collection use [`set_tags`](Self::set_tags).
		///
		/// A list of game tags.
		pub fn tags(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.tags.unwrap_or_default();
			v.push(input.into());
			self.tags = Some(v);
			self
		}
		/// A list of game tags.
		pub fn set_tags(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.tags = input;
			self
		}
		/// Consumes the builder and constructs a [`GameSummary`](crate::model::GameSummary)
		pub fn build(self) -> crate::model::GameSummary {
			crate::model::GameSummary {
				game_id: self.game_id,
				name_id: self.name_id,
				display_name: self.display_name,
				logo_url: self.logo_url,
				banner_url: self.banner_url,
				url: self.url,
				developer: self.developer,
				tags: self.tags,
			}
		}
	}
}
impl GameSummary {
	/// Creates a new builder-style object to manufacture [`GameSummary`](crate::model::GameSummary)
	pub fn builder() -> crate::model::game_summary::Builder {
		crate::model::game_summary::Builder::default()
	}
}

/// A group handle.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GroupHandle {
	/// A universally unique identifier.
	pub group_id: std::option::Option<std::string::String>,
	/// Represent a resource's readable display name.
	pub display_name: std::option::Option<std::string::String>,
	/// The URL of this group's avatar image.
	pub avatar_url: std::option::Option<std::string::String>,
	/// External links for this group.
	pub external: std::option::Option<crate::model::GroupExternalLinks>,
	/// Whether or not this group is a developer group.
	pub is_developer: std::option::Option<bool>,
}
impl GroupHandle {
	/// A universally unique identifier.
	pub fn group_id(&self) -> std::option::Option<&str> {
		self.group_id.as_deref()
	}
	/// Represent a resource's readable display name.
	pub fn display_name(&self) -> std::option::Option<&str> {
		self.display_name.as_deref()
	}
	/// The URL of this group's avatar image.
	pub fn avatar_url(&self) -> std::option::Option<&str> {
		self.avatar_url.as_deref()
	}
	/// External links for this group.
	pub fn external(&self) -> std::option::Option<&crate::model::GroupExternalLinks> {
		self.external.as_ref()
	}
	/// Whether or not this group is a developer group.
	pub fn is_developer(&self) -> std::option::Option<bool> {
		self.is_developer
	}
}
impl std::fmt::Debug for GroupHandle {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GroupHandle");
		formatter.field("group_id", &self.group_id);
		formatter.field("display_name", &self.display_name);
		formatter.field("avatar_url", &self.avatar_url);
		formatter.field("external", &self.external);
		formatter.field("is_developer", &self.is_developer);
		formatter.finish()
	}
}
/// See [`GroupHandle`](crate::model::GroupHandle)
pub mod group_handle {
	/// A builder for [`GroupHandle`](crate::model::GroupHandle)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) group_id: std::option::Option<std::string::String>,
		pub(crate) display_name: std::option::Option<std::string::String>,
		pub(crate) avatar_url: std::option::Option<std::string::String>,
		pub(crate) external: std::option::Option<crate::model::GroupExternalLinks>,
		pub(crate) is_developer: std::option::Option<bool>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.group_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.group_id = input;
			self
		}
		/// Represent a resource's readable display name.
		pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
			self.display_name = Some(input.into());
			self
		}
		/// Represent a resource's readable display name.
		pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.display_name = input;
			self
		}
		/// The URL of this group's avatar image.
		pub fn avatar_url(mut self, input: impl Into<std::string::String>) -> Self {
			self.avatar_url = Some(input.into());
			self
		}
		/// The URL of this group's avatar image.
		pub fn set_avatar_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.avatar_url = input;
			self
		}
		/// External links for this group.
		pub fn external(mut self, input: crate::model::GroupExternalLinks) -> Self {
			self.external = Some(input);
			self
		}
		/// External links for this group.
		pub fn set_external(
			mut self,
			input: std::option::Option<crate::model::GroupExternalLinks>,
		) -> Self {
			self.external = input;
			self
		}
		/// Whether or not this group is a developer group.
		pub fn is_developer(mut self, input: bool) -> Self {
			self.is_developer = Some(input);
			self
		}
		/// Whether or not this group is a developer group.
		pub fn set_is_developer(mut self, input: std::option::Option<bool>) -> Self {
			self.is_developer = input;
			self
		}
		/// Consumes the builder and constructs a [`GroupHandle`](crate::model::GroupHandle)
		pub fn build(self) -> crate::model::GroupHandle {
			crate::model::GroupHandle {
				group_id: self.group_id,
				display_name: self.display_name,
				avatar_url: self.avatar_url,
				external: self.external,
				is_developer: self.is_developer,
			}
		}
	}
}
impl GroupHandle {
	/// Creates a new builder-style object to manufacture [`GroupHandle`](crate::model::GroupHandle)
	pub fn builder() -> crate::model::group_handle::Builder {
		crate::model::group_handle::Builder::default()
	}
}
