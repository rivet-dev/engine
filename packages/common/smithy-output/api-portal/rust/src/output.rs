// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnregisterNotificationsOutput {}
impl std::fmt::Debug for UnregisterNotificationsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UnregisterNotificationsOutput");
		formatter.finish()
	}
}
/// See [`UnregisterNotificationsOutput`](crate::output::UnregisterNotificationsOutput)
pub mod unregister_notifications_output {
	/// A builder for [`UnregisterNotificationsOutput`](crate::output::UnregisterNotificationsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UnregisterNotificationsOutput`](crate::output::UnregisterNotificationsOutput)
		pub fn build(self) -> crate::output::UnregisterNotificationsOutput {
			crate::output::UnregisterNotificationsOutput {}
		}
	}
}
impl UnregisterNotificationsOutput {
	/// Creates a new builder-style object to manufacture [`UnregisterNotificationsOutput`](crate::output::UnregisterNotificationsOutput)
	pub fn builder() -> crate::output::unregister_notifications_output::Builder {
		crate::output::unregister_notifications_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterNotificationsOutput {}
impl std::fmt::Debug for RegisterNotificationsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RegisterNotificationsOutput");
		formatter.finish()
	}
}
/// See [`RegisterNotificationsOutput`](crate::output::RegisterNotificationsOutput)
pub mod register_notifications_output {
	/// A builder for [`RegisterNotificationsOutput`](crate::output::RegisterNotificationsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`RegisterNotificationsOutput`](crate::output::RegisterNotificationsOutput)
		pub fn build(self) -> crate::output::RegisterNotificationsOutput {
			crate::output::RegisterNotificationsOutput {}
		}
	}
}
impl RegisterNotificationsOutput {
	/// Creates a new builder-style object to manufacture [`RegisterNotificationsOutput`](crate::output::RegisterNotificationsOutput)
	pub fn builder() -> crate::output::register_notifications_output::Builder {
		crate::output::register_notifications_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResolveBetaJoinRequestOutput {}
impl std::fmt::Debug for ResolveBetaJoinRequestOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ResolveBetaJoinRequestOutput");
		formatter.finish()
	}
}
/// See [`ResolveBetaJoinRequestOutput`](crate::output::ResolveBetaJoinRequestOutput)
pub mod resolve_beta_join_request_output {
	/// A builder for [`ResolveBetaJoinRequestOutput`](crate::output::ResolveBetaJoinRequestOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`ResolveBetaJoinRequestOutput`](crate::output::ResolveBetaJoinRequestOutput)
		pub fn build(self) -> crate::output::ResolveBetaJoinRequestOutput {
			crate::output::ResolveBetaJoinRequestOutput {}
		}
	}
}
impl ResolveBetaJoinRequestOutput {
	/// Creates a new builder-style object to manufacture [`ResolveBetaJoinRequestOutput`](crate::output::ResolveBetaJoinRequestOutput)
	pub fn builder() -> crate::output::resolve_beta_join_request_output::Builder {
		crate::output::resolve_beta_join_request_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameProfileOutput {
	/// A game profile.
	pub game: std::option::Option<crate::model::GameProfile>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetGameProfileOutput {
	/// A game profile.
	pub fn game(&self) -> std::option::Option<&crate::model::GameProfile> {
		self.game.as_ref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetGameProfileOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameProfileOutput");
		formatter.field("game", &self.game);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetGameProfileOutput`](crate::output::GetGameProfileOutput)
pub mod get_game_profile_output {
	/// A builder for [`GetGameProfileOutput`](crate::output::GetGameProfileOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game: std::option::Option<crate::model::GameProfile>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// A game profile.
		pub fn game(mut self, input: crate::model::GameProfile) -> Self {
			self.game = Some(input);
			self
		}
		/// A game profile.
		pub fn set_game(mut self, input: std::option::Option<crate::model::GameProfile>) -> Self {
			self.game = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameProfileOutput`](crate::output::GetGameProfileOutput)
		pub fn build(self) -> crate::output::GetGameProfileOutput {
			crate::output::GetGameProfileOutput {
				game: self.game,
				watch: self.watch,
			}
		}
	}
}
impl GetGameProfileOutput {
	/// Creates a new builder-style object to manufacture [`GetGameProfileOutput`](crate::output::GetGameProfileOutput)
	pub fn builder() -> crate::output::get_game_profile_output::Builder {
		crate::output::get_game_profile_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSuggestedGamesOutput {
	/// A list of game summaries.
	pub games: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
	/// Provided by watchable endpoints used in blocking loops.
	pub watch: std::option::Option<crate::model::WatchResponse>,
}
impl GetSuggestedGamesOutput {
	/// A list of game summaries.
	pub fn games(&self) -> std::option::Option<&[crate::model::GameSummary]> {
		self.games.as_deref()
	}
	/// Provided by watchable endpoints used in blocking loops.
	pub fn watch(&self) -> std::option::Option<&crate::model::WatchResponse> {
		self.watch.as_ref()
	}
}
impl std::fmt::Debug for GetSuggestedGamesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetSuggestedGamesOutput");
		formatter.field("games", &self.games);
		formatter.field("watch", &self.watch);
		formatter.finish()
	}
}
/// See [`GetSuggestedGamesOutput`](crate::output::GetSuggestedGamesOutput)
pub mod get_suggested_games_output {
	/// A builder for [`GetSuggestedGamesOutput`](crate::output::GetSuggestedGamesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) games: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
		pub(crate) watch: std::option::Option<crate::model::WatchResponse>,
	}
	impl Builder {
		/// Appends an item to `games`.
		///
		/// To override the contents of this collection use [`set_games`](Self::set_games).
		///
		/// A list of game summaries.
		pub fn games(mut self, input: crate::model::GameSummary) -> Self {
			let mut v = self.games.unwrap_or_default();
			v.push(input);
			self.games = Some(v);
			self
		}
		/// A list of game summaries.
		pub fn set_games(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
		) -> Self {
			self.games = input;
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn watch(mut self, input: crate::model::WatchResponse) -> Self {
			self.watch = Some(input);
			self
		}
		/// Provided by watchable endpoints used in blocking loops.
		pub fn set_watch(
			mut self,
			input: std::option::Option<crate::model::WatchResponse>,
		) -> Self {
			self.watch = input;
			self
		}
		/// Consumes the builder and constructs a [`GetSuggestedGamesOutput`](crate::output::GetSuggestedGamesOutput)
		pub fn build(self) -> crate::output::GetSuggestedGamesOutput {
			crate::output::GetSuggestedGamesOutput {
				games: self.games,
				watch: self.watch,
			}
		}
	}
}
impl GetSuggestedGamesOutput {
	/// Creates a new builder-style object to manufacture [`GetSuggestedGamesOutput`](crate::output::GetSuggestedGamesOutput)
	pub fn builder() -> crate::output::get_suggested_games_output::Builder {
		crate::output::get_suggested_games_output::Builder::default()
	}
}
