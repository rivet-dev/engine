// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CompleteEmailVerificationOutput {
	/// Represents the state of an external account linking process.
	pub status: std::option::Option<crate::model::CompleteStatus>,
}
impl CompleteEmailVerificationOutput {
	/// Represents the state of an external account linking process.
	pub fn status(&self) -> std::option::Option<&crate::model::CompleteStatus> {
		self.status.as_ref()
	}
}
impl std::fmt::Debug for CompleteEmailVerificationOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CompleteEmailVerificationOutput");
		formatter.field("status", &self.status);
		formatter.finish()
	}
}
/// See [`CompleteEmailVerificationOutput`](crate::output::CompleteEmailVerificationOutput)
pub mod complete_email_verification_output {
	/// A builder for [`CompleteEmailVerificationOutput`](crate::output::CompleteEmailVerificationOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) status: std::option::Option<crate::model::CompleteStatus>,
	}
	impl Builder {
		/// Represents the state of an external account linking process.
		pub fn status(mut self, input: crate::model::CompleteStatus) -> Self {
			self.status = Some(input);
			self
		}
		/// Represents the state of an external account linking process.
		pub fn set_status(
			mut self,
			input: std::option::Option<crate::model::CompleteStatus>,
		) -> Self {
			self.status = input;
			self
		}
		/// Consumes the builder and constructs a [`CompleteEmailVerificationOutput`](crate::output::CompleteEmailVerificationOutput)
		pub fn build(self) -> crate::output::CompleteEmailVerificationOutput {
			crate::output::CompleteEmailVerificationOutput {
				status: self.status,
			}
		}
	}
}
impl CompleteEmailVerificationOutput {
	/// Creates a new builder-style object to manufacture [`CompleteEmailVerificationOutput`](crate::output::CompleteEmailVerificationOutput)
	pub fn builder() -> crate::output::complete_email_verification_output::Builder {
		crate::output::complete_email_verification_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartEmailVerificationOutput {
	/// A universally unique identifier.
	pub verification_id: std::option::Option<std::string::String>,
}
impl StartEmailVerificationOutput {
	/// A universally unique identifier.
	pub fn verification_id(&self) -> std::option::Option<&str> {
		self.verification_id.as_deref()
	}
}
impl std::fmt::Debug for StartEmailVerificationOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("StartEmailVerificationOutput");
		formatter.field("verification_id", &self.verification_id);
		formatter.finish()
	}
}
/// See [`StartEmailVerificationOutput`](crate::output::StartEmailVerificationOutput)
pub mod start_email_verification_output {
	/// A builder for [`StartEmailVerificationOutput`](crate::output::StartEmailVerificationOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) verification_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// A universally unique identifier.
		pub fn verification_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.verification_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_verification_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.verification_id = input;
			self
		}
		/// Consumes the builder and constructs a [`StartEmailVerificationOutput`](crate::output::StartEmailVerificationOutput)
		pub fn build(self) -> crate::output::StartEmailVerificationOutput {
			crate::output::StartEmailVerificationOutput {
				verification_id: self.verification_id,
			}
		}
	}
}
impl StartEmailVerificationOutput {
	/// Creates a new builder-style object to manufacture [`StartEmailVerificationOutput`](crate::output::StartEmailVerificationOutput)
	pub fn builder() -> crate::output::start_email_verification_output::Builder {
		crate::output::start_email_verification_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RefreshIdentityTokenOutput {
	/// Server-set cookie values.
	pub set_cookie: std::option::Option<std::vec::Vec<std::string::String>>,
	/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
	pub token: std::option::Option<std::string::String>,
	/// Token expiration time (in milliseconds).
	pub exp: std::option::Option<aws_smithy_types::DateTime>,
	/// A universally unique identifier.
	pub identity_id: std::option::Option<std::string::String>,
}
impl RefreshIdentityTokenOutput {
	/// Server-set cookie values.
	pub fn set_cookie(&self) -> std::option::Option<&[std::string::String]> {
		self.set_cookie.as_deref()
	}
	/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
	pub fn token(&self) -> std::option::Option<&str> {
		self.token.as_deref()
	}
	/// Token expiration time (in milliseconds).
	pub fn exp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
		self.exp.as_ref()
	}
	/// A universally unique identifier.
	pub fn identity_id(&self) -> std::option::Option<&str> {
		self.identity_id.as_deref()
	}
}
impl std::fmt::Debug for RefreshIdentityTokenOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RefreshIdentityTokenOutput");
		formatter.field("set_cookie", &self.set_cookie);
		formatter.field("token", &"*** Sensitive Data Redacted ***");
		formatter.field("exp", &self.exp);
		formatter.field("identity_id", &self.identity_id);
		formatter.finish()
	}
}
/// See [`RefreshIdentityTokenOutput`](crate::output::RefreshIdentityTokenOutput)
pub mod refresh_identity_token_output {
	/// A builder for [`RefreshIdentityTokenOutput`](crate::output::RefreshIdentityTokenOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) set_cookie: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) token: std::option::Option<std::string::String>,
		pub(crate) exp: std::option::Option<aws_smithy_types::DateTime>,
		pub(crate) identity_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Appends an item to `set_cookie`.
		///
		/// To override the contents of this collection use [`set_set_cookie`](Self::set_set_cookie).
		///
		/// Server-set cookie values.
		pub fn set_cookie(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.set_cookie.unwrap_or_default();
			v.push(input.into());
			self.set_cookie = Some(v);
			self
		}
		/// Server-set cookie values.
		pub fn set_set_cookie(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.set_cookie = input;
			self
		}
		/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
		pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
			self.token = Some(input.into());
			self
		}
		/// A JSON Web Token. Slightly modified to include a description prefix and use Protobufs of JSON.
		pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.token = input;
			self
		}
		/// Token expiration time (in milliseconds).
		pub fn exp(mut self, input: aws_smithy_types::DateTime) -> Self {
			self.exp = Some(input);
			self
		}
		/// Token expiration time (in milliseconds).
		pub fn set_exp(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
			self.exp = input;
			self
		}
		/// A universally unique identifier.
		pub fn identity_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.identity_id = Some(input.into());
			self
		}
		/// A universally unique identifier.
		pub fn set_identity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.identity_id = input;
			self
		}
		/// Consumes the builder and constructs a [`RefreshIdentityTokenOutput`](crate::output::RefreshIdentityTokenOutput)
		pub fn build(self) -> crate::output::RefreshIdentityTokenOutput {
			crate::output::RefreshIdentityTokenOutput {
				set_cookie: self.set_cookie,
				token: self.token,
				exp: self.exp,
				identity_id: self.identity_id,
			}
		}
	}
}
impl RefreshIdentityTokenOutput {
	/// Creates a new builder-style object to manufacture [`RefreshIdentityTokenOutput`](crate::output::RefreshIdentityTokenOutput)
	pub fn builder() -> crate::output::refresh_identity_token_output::Builder {
		crate::output::refresh_identity_token_output::Builder::default()
	}
}
