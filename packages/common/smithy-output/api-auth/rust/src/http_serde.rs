// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn add_headers_refresh_identity_token(
	input: &crate::input::RefreshIdentityTokenInput,
	mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
	if let Some(inner_1) = &input.cookie {
		for inner_2 in inner_1 {
			let formatted_3 =
				aws_smithy_http::header::quote_header_value(AsRef::<str>::as_ref(inner_2));
			if !formatted_3.is_empty() {
				let header_value = formatted_3;
				let header_value =
					http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
						aws_smithy_http::operation::BuildError::InvalidField {
							field: "cookie",
							details: format!(
								"`{}` cannot be used as a header value: {}",
								&header_value, err
							),
						}
					})?;
				builder = builder.header("cookie", header_value);
			}
		}
	}
	Ok(builder)
}

pub fn deser_header_refresh_identity_token_refresh_identity_token_output_set_cookie(
	header_map: &http::HeaderMap,
) -> std::result::Result<
	std::option::Option<std::vec::Vec<std::string::String>>,
	aws_smithy_http::header::ParseError,
> {
	let headers = header_map.get_all("set-cookie").iter();
	let var_4: Vec<std::string::String> = aws_smithy_http::header::read_many_from_str(headers)?;
	Ok(if !var_4.is_empty() { Some(var_4) } else { None })
}
