// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CompleteEmailVerification`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`complete_email_verification`](crate::client::Client::complete_email_verification).
///
/// See [`crate::client::fluent_builders::CompleteEmailVerification`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CompleteEmailVerification {
	_private: (),
}
impl CompleteEmailVerification {
	/// Creates a new builder-style object to manufacture [`CompleteEmailVerificationInput`](crate::input::CompleteEmailVerificationInput)
	pub fn builder() -> crate::input::complete_email_verification_input::Builder {
		crate::input::complete_email_verification_input::Builder::default()
	}
	/// Creates a new `CompleteEmailVerification` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CompleteEmailVerification {
	type Output = std::result::Result<
		crate::output::CompleteEmailVerificationOutput,
		crate::error::CompleteEmailVerificationError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_complete_email_verification_error(response)
		} else {
			crate::operation_deser::parse_complete_email_verification_response(response)
		}
	}
}

/// Operation shape for `RefreshIdentityToken`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`refresh_identity_token`](crate::client::Client::refresh_identity_token).
///
/// See [`crate::client::fluent_builders::RefreshIdentityToken`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RefreshIdentityToken {
	_private: (),
}
impl RefreshIdentityToken {
	/// Creates a new builder-style object to manufacture [`RefreshIdentityTokenInput`](crate::input::RefreshIdentityTokenInput)
	pub fn builder() -> crate::input::refresh_identity_token_input::Builder {
		crate::input::refresh_identity_token_input::Builder::default()
	}
	/// Creates a new `RefreshIdentityToken` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for RefreshIdentityToken {
	type Output = std::result::Result<
		crate::output::RefreshIdentityTokenOutput,
		crate::error::RefreshIdentityTokenError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_refresh_identity_token_error(response)
		} else {
			crate::operation_deser::parse_refresh_identity_token_response(response)
		}
	}
}

/// Operation shape for `StartEmailVerification`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_email_verification`](crate::client::Client::start_email_verification).
///
/// See [`crate::client::fluent_builders::StartEmailVerification`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartEmailVerification {
	_private: (),
}
impl StartEmailVerification {
	/// Creates a new builder-style object to manufacture [`StartEmailVerificationInput`](crate::input::StartEmailVerificationInput)
	pub fn builder() -> crate::input::start_email_verification_input::Builder {
		crate::input::start_email_verification_input::Builder::default()
	}
	/// Creates a new `StartEmailVerification` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for StartEmailVerification {
	type Output = std::result::Result<
		crate::output::StartEmailVerificationOutput,
		crate::error::StartEmailVerificationError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_start_email_verification_error(response)
		} else {
			crate::operation_deser::parse_start_email_verification_response(response)
		}
	}
}
