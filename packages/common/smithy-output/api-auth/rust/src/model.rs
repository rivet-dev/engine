// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Represents the state of an external account linking process.
#[non_exhaustive]
#[derive(
	std::clone::Clone,
	std::cmp::Eq,
	std::cmp::Ord,
	std::cmp::PartialEq,
	std::cmp::PartialOrd,
	std::fmt::Debug,
	std::hash::Hash,
)]
pub enum CompleteStatus {
	/// The current linking process has already completed.
	AlreadyComplete,
	/// The current linking process has expired.
	Expired,
	/// The code given to the current linking process is incorrect.
	Incorrect,
	/// The linking process succeeded and the new account is now added.
	LinkedAccountAdded,
	/// The linking process succeeded and will now switch identities.
	SwitchIdentity,
	/// The current linking process has been tried too many times.
	TooManyAttempts,
	/// Unknown contains new variants that have been added since this code was generated.
	Unknown(String),
}
impl std::convert::From<&str> for CompleteStatus {
	fn from(s: &str) -> Self {
		match s {
			"already_complete" => CompleteStatus::AlreadyComplete,
			"expired" => CompleteStatus::Expired,
			"incorrect" => CompleteStatus::Incorrect,
			"linked_account_added" => CompleteStatus::LinkedAccountAdded,
			"switch_identity" => CompleteStatus::SwitchIdentity,
			"too_many_attempts" => CompleteStatus::TooManyAttempts,
			other => CompleteStatus::Unknown(other.to_owned()),
		}
	}
}
impl std::str::FromStr for CompleteStatus {
	type Err = std::convert::Infallible;

	fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
		Ok(CompleteStatus::from(s))
	}
}
impl CompleteStatus {
	/// Returns the `&str` value of the enum member.
	pub fn as_str(&self) -> &str {
		match self {
			CompleteStatus::AlreadyComplete => "already_complete",
			CompleteStatus::Expired => "expired",
			CompleteStatus::Incorrect => "incorrect",
			CompleteStatus::LinkedAccountAdded => "linked_account_added",
			CompleteStatus::SwitchIdentity => "switch_identity",
			CompleteStatus::TooManyAttempts => "too_many_attempts",
			CompleteStatus::Unknown(s) => s.as_ref(),
		}
	}
	/// Returns all the `&str` values of the enum members.
	pub fn values() -> &'static [&'static str] {
		&[
			"already_complete",
			"expired",
			"incorrect",
			"linked_account_added",
			"switch_identity",
			"too_many_attempts",
		]
	}
}
impl AsRef<str> for CompleteStatus {
	fn as_ref(&self) -> &str {
		self.as_str()
	}
}

/// Methods to verify a captcha.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum CaptchaConfig {
	/// hCaptcha configuration.
	Hcaptcha(crate::model::CaptchaConfigHcaptcha),
	/// Cloudflare Turnstile configuration.
	Turnstile(crate::model::CaptchaConfigTurnstile),
	/// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
	/// An unknown enum variant
	///
	/// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
	/// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
	/// by the client. This can happen when the server adds new functionality, but the client has not been updated.
	/// To investigate this, consider turning on debug logging to print the raw HTTP response.
	#[non_exhaustive]
	Unknown,
}
impl CaptchaConfig {
	/// Tries to convert the enum instance into [`Hcaptcha`](crate::model::CaptchaConfig::Hcaptcha), extracting the inner [`CaptchaConfigHcaptcha`](crate::model::CaptchaConfigHcaptcha).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_hcaptcha(&self) -> std::result::Result<&crate::model::CaptchaConfigHcaptcha, &Self> {
		if let CaptchaConfig::Hcaptcha(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Hcaptcha`](crate::model::CaptchaConfig::Hcaptcha).
	pub fn is_hcaptcha(&self) -> bool {
		self.as_hcaptcha().is_ok()
	}
	/// Tries to convert the enum instance into [`Turnstile`](crate::model::CaptchaConfig::Turnstile), extracting the inner [`CaptchaConfigTurnstile`](crate::model::CaptchaConfigTurnstile).
	/// Returns `Err(&Self)` if it can't be converted.
	pub fn as_turnstile(
		&self,
	) -> std::result::Result<&crate::model::CaptchaConfigTurnstile, &Self> {
		if let CaptchaConfig::Turnstile(val) = &self {
			Ok(val)
		} else {
			Err(self)
		}
	}
	/// Returns true if this is a [`Turnstile`](crate::model::CaptchaConfig::Turnstile).
	pub fn is_turnstile(&self) -> bool {
		self.as_turnstile().is_ok()
	}
	/// Returns true if the enum instance is the `Unknown` variant.
	pub fn is_unknown(&self) -> bool {
		matches!(self, Self::Unknown)
	}
}

/// Cloudflare Turnstile configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CaptchaConfigTurnstile {
	#[allow(missing_docs)] // documentation missing in model
	pub client_response: std::option::Option<std::string::String>,
}
impl CaptchaConfigTurnstile {
	#[allow(missing_docs)] // documentation missing in model
	pub fn client_response(&self) -> std::option::Option<&str> {
		self.client_response.as_deref()
	}
}
impl std::fmt::Debug for CaptchaConfigTurnstile {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CaptchaConfigTurnstile");
		formatter.field("client_response", &self.client_response);
		formatter.finish()
	}
}
/// See [`CaptchaConfigTurnstile`](crate::model::CaptchaConfigTurnstile)
pub mod captcha_config_turnstile {
	/// A builder for [`CaptchaConfigTurnstile`](crate::model::CaptchaConfigTurnstile)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) client_response: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn client_response(mut self, input: impl Into<std::string::String>) -> Self {
			self.client_response = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_client_response(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.client_response = input;
			self
		}
		/// Consumes the builder and constructs a [`CaptchaConfigTurnstile`](crate::model::CaptchaConfigTurnstile)
		pub fn build(self) -> crate::model::CaptchaConfigTurnstile {
			crate::model::CaptchaConfigTurnstile {
				client_response: self.client_response,
			}
		}
	}
}
impl CaptchaConfigTurnstile {
	/// Creates a new builder-style object to manufacture [`CaptchaConfigTurnstile`](crate::model::CaptchaConfigTurnstile)
	pub fn builder() -> crate::model::captcha_config_turnstile::Builder {
		crate::model::captcha_config_turnstile::Builder::default()
	}
}

/// hCaptcha configuration.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CaptchaConfigHcaptcha {
	#[allow(missing_docs)] // documentation missing in model
	pub client_response: std::option::Option<std::string::String>,
}
impl CaptchaConfigHcaptcha {
	#[allow(missing_docs)] // documentation missing in model
	pub fn client_response(&self) -> std::option::Option<&str> {
		self.client_response.as_deref()
	}
}
impl std::fmt::Debug for CaptchaConfigHcaptcha {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CaptchaConfigHcaptcha");
		formatter.field("client_response", &self.client_response);
		formatter.finish()
	}
}
/// See [`CaptchaConfigHcaptcha`](crate::model::CaptchaConfigHcaptcha)
pub mod captcha_config_hcaptcha {
	/// A builder for [`CaptchaConfigHcaptcha`](crate::model::CaptchaConfigHcaptcha)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) client_response: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn client_response(mut self, input: impl Into<std::string::String>) -> Self {
			self.client_response = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_client_response(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.client_response = input;
			self
		}
		/// Consumes the builder and constructs a [`CaptchaConfigHcaptcha`](crate::model::CaptchaConfigHcaptcha)
		pub fn build(self) -> crate::model::CaptchaConfigHcaptcha {
			crate::model::CaptchaConfigHcaptcha {
				client_response: self.client_response,
			}
		}
	}
}
impl CaptchaConfigHcaptcha {
	/// Creates a new builder-style object to manufacture [`CaptchaConfigHcaptcha`](crate::model::CaptchaConfigHcaptcha)
	pub fn builder() -> crate::model::captcha_config_hcaptcha::Builder {
		crate::model::captcha_config_hcaptcha::Builder::default()
	}
}
