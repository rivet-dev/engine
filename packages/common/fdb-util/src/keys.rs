pub const RIVET: usize = 0;
pub const CHIRP_WORKFLOW: usize = 1;
pub const FDB_SQLITE_NATS: usize = 2;
pub const PEGBOARD: usize = 3;
pub const DATA: usize = 4;
pub const WORKFLOW: usize = 5;
pub const SIGNAL: usize = 6;
pub const BODY: usize = 7;
pub const LEASE: usize = 8;
pub const TAG: usize = 9;
pub const INPUT: usize = 10;
pub const OUTPUT: usize = 11;
pub const WAKE_SIGNAL: usize = 12;
pub const WAKE_DEADLINE: usize = 13;
pub const ACK_TS: usize = 14;
pub const CREATE_TS: usize = 15;
pub const SILENCE_TS: usize = 16;
pub const PENDING: usize = 17;
pub const RAY_ID: usize = 18;
pub const NAME: usize = 19;
pub const WORKFLOW_ID: usize = 20;
pub const WAKE: usize = 21;
pub const SUB_WORKFLOW: usize = 22;
pub const WORKER_INSTANCE: usize = 23;
pub const LAST_PING_TS: usize = 24;
pub const METRICS_LOCK: usize = 25;
pub const ERROR: usize = 26;
pub const WAKE_SUB_WORKFLOW_ID: usize = 27;
pub const BY_NAME_AND_TAG: usize = 28;
pub const HAS_WAKE_CONDITION: usize = 29;
pub const WORKER_INSTANCE_ID: usize = 30;
pub const DBS: usize = 31;
pub const ACTOR: usize = 32;
pub const CLIENT: usize = 33;
pub const DATACENTER: usize = 34;
pub const REMAINING_MEMORY: usize = 35;
pub const REMAINING_CPU: usize = 36;
pub const TOTAL_MEMORY: usize = 37;
pub const TOTAL_CPU: usize = 38;
pub const ENV: usize = 39;
pub const PORT: usize = 40;
pub const INGRESS: usize = 41;
pub const PROXIED: usize = 42;
pub const CLIENTS_BY_REMAINING_MEM: usize = 43;
pub const SQLITE: usize = 44;
pub const INTERNAL: usize = 45;
pub const METADATA: usize = 46;

// Directories with fdbrs must use string paths instead of tuples
pub mod dir {
	pub const PEGBOARD: &str = "p";
	pub const ACTOR: &str = "a";
	pub const KV: &str = "k";
}

pub fn key_from_str(key: &str) -> Option<usize> {
	match key {
		"rivet" => Some(RIVET),
		"chirp_workflow" => Some(CHIRP_WORKFLOW),
		"fdb_sqlite_nats" => Some(FDB_SQLITE_NATS),
		"pegboard" => Some(PEGBOARD),
		"data" => Some(DATA),
		"workflow" => Some(WORKFLOW),
		"signal" => Some(SIGNAL),
		"body" => Some(BODY),
		"lease" => Some(LEASE),
		"tag" => Some(TAG),
		"input" => Some(INPUT),
		"output" => Some(OUTPUT),
		"wake_signal" => Some(WAKE_SIGNAL),
		"wake_deadline" => Some(WAKE_DEADLINE),
		"ack_ts" => Some(ACK_TS),
		"create_ts" => Some(CREATE_TS),
		"silence_ts" => Some(SILENCE_TS),
		"pending" => Some(PENDING),
		"ray_id" => Some(RAY_ID),
		"name" => Some(NAME),
		"workflow_id" => Some(WORKFLOW_ID),
		"wake" => Some(WAKE),
		"sub_workflow" => Some(SUB_WORKFLOW),
		"worker_instance" => Some(WORKER_INSTANCE),
		"last_ping_ts" => Some(LAST_PING_TS),
		"metrics_lock" => Some(METRICS_LOCK),
		"error" => Some(ERROR),
		"wake_sub_workflow_id" => Some(WAKE_SUB_WORKFLOW_ID),
		"by_name_and_tag" => Some(BY_NAME_AND_TAG),
		"has_wake_condition" => Some(HAS_WAKE_CONDITION),
		"worker_instance_id" => Some(WORKER_INSTANCE_ID),
		"dbs" => Some(DBS),
		"actor" => Some(ACTOR),
		"client" => Some(CLIENT),
		"datacenter" => Some(DATACENTER),
		"remaining_memory" => Some(REMAINING_MEMORY),
		"remaining_cpu" => Some(REMAINING_CPU),
		"total_memory" => Some(TOTAL_MEMORY),
		"total_cpu" => Some(TOTAL_CPU),
		"env" => Some(ENV),
		"port" => Some(PORT),
		"ingress" => Some(INGRESS),
		"proxied" => Some(PROXIED),
		"clients_by_remaining_mem" => Some(CLIENTS_BY_REMAINING_MEM),
		"sqlite" => Some(SQLITE),
		"internal" => Some(INTERNAL),
		"metadata" => Some(METADATA),
		_ => None,
	}
}
