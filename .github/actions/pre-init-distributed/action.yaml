name: pre-init-distributed
description: Set up Nix and Bolt

# TODO: Composite actions don't support defaults
# defaults:
#   run:
#     # Enable fail-fast behavior
#     shell: bash -e {0}

inputs:
  DOCKER_CI_ACCESS_TOKEN:
    required: true

runs:
  using: composite

  steps:
    # MARK: Cache
    - name: Nix Cache
      uses: actions/cache@v3.3.1
      with:
        key: ${{ runner.os }}-nix-${{ hashfiles('./shell.nix', './nix/**/*.nix') }}
        path: ${{ env.store }}
        restore-keys: |
          ${{ runner.os }}-nix-${{ hashfiles('./shell.nix', './nix/**/*.nix') }}
          ${{ runner.os }}-nix-

    # Cache generated Bolt files in order to prevent needless rebuilding
    - name: Bolt Cache
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-bolt-gen
        path: |
          packages/services/region/ops/config-get/gen

    # MARK: Nix
    - uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-23.05
        extra_nix_config: "store = ${{ env.store }}\n"

    # Build initial shell, all future calls to nix-shell will be fast
    - name: Build Shell
      shell: bash -e {0}
      run: nix-shell --pure --run "echo 'Built shell'"

    # MARK: Bolt
    - name: Write Configs
      shell: bash -e {0}
      run: |
        cat << 'EOF' > Bolt.local.toml
        namespace = "ci"
        EOF

        cat << 'EOF' > namespaces/ci.toml
        # To appease bolt; these won't be used
        [dns.domain]
        main = ""
        cdn = ""
        job = ""

        [cluster.distributed]

        [docker]
        authenticate_all_docker_hub_pulls = false
        repository = "docker.io/rivetgg/"
        EOF

        cat << EOF > secrets/ci.toml
        [docker.registry."docker.io".write]
        username = "rivetggci"
        password = "${{ inputs.DOCKER_CI_ACCESS_TOKEN }}"
        EOF

    # Delete old Bolt binaries in order to fall back to the Nix-built binary
    - name: Remove Old Bolt Builds
      shell: bash -e {0}
      run: rm -f target/debug/bolt target/release/bolt

    - name: Generate Bolt Config
      shell: bash -e {0}
      run: nix-shell --pure --run "bolt config generate ci"
