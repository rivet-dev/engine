name: "Pre-Init"
description: "Set up Nix and Bolt"

# TODO: Composite actions don't support defaults
# defaults:
#   run:
#     # Enable fail-fast behavior
#     shell: bash -e {0}

inputs:
  sccache_aws_secret_access_key:
    required: true
  sccache_aws_access_key_id:
    required: true

runs:
  using: composite

  steps:
    # MARK: Cache
    - name: Nix Cache
      uses: actions/cache@v3.3.1
      with:
        key: ${{ runner.os }}-nix-${{ hashfiles('./shell.nix', './nix/**/*.nix') }}
        path: ${{ env.store }}
        restore-keys: |
          ${{ runner.os }}-nix-${{ hashfiles('./shell.nix', './nix/**/*.nix') }}
          ${{ runner.os }}-nix-

    - name: Enable sccache
      shell: bash -e {0}
      run: |
        if [[ -n "${{ inputs.sccache_aws_secret_access_key }}" && -n "${{ inputs.sccache_aws_access_key_id }}" ]]; then
          # Expose sccache config for all future calls of nix-shell, which configures sccache respectively
          echo 'USE_SCCACHE=1' >> $GITHUB_ENV
          echo 'SCCACHE_BUCKET=rivet-sccache' >> $GITHUB_ENV
          echo 'SCCACHE_ENDPOINT=https://2a94c6a0ced8d35ea63cddc86c2681e7.r2.cloudflarestorage.com/rivet-sccache' >> $GITHUB_ENV
          echo 'SCCACHE_REGION=auto' >> $GITHUB_ENV
          echo 'AWS_SECRET_ACCESS_KEY=${{ inputs.sccache_aws_secret_access_key }}' >> $GITHUB_ENV
          echo 'AWS_ACCESS_KEY_ID=${{ inputs.sccache_aws_access_key_id }}' >> $GITHUB_ENV
        fi

    - name: Debug GITHUB_ENV
      shell: bash -e {0}
      run: |
        whoami
        # stat /home/runner
        # mkdir -m 0755 /nix && chown runner /nix
        # stat /home/runner
        # echo "TEST=TEST" >> $GITHUB_ENV
        # echo "GITHUB_ENV:"
        # cat $GITHUB_ENV

    # Cache generated Bolt files in order to prevent needless rebuilding
    - name: Bolt Cache
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-bolt-gen
        path: |
          svc/pkg/region/ops/config-get/gen

    # MARK: Nix
    - uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-23.05
        extra_nix_config: "store = ${{ env.store }}\n"

    # Build initial shell, all future calls to nix-shell will be fast
    - name: Build Shell
      shell: bash -e {0}
      run: nix-shell --pure --run "echo 'Built shell'"

    - name: Write Configs
      shell: bash -e {0}
      run: |
        cat <<'EOF' > Bolt.local.toml
        namespace = "ci"
        EOF

        cat <<'EOF' > namespaces/ci.toml
        [rivet]
        test = {}

        # We set the public IP to localhost because we are running inside of a github action, therefore
        # it is not reachable from the public.
        [cluster.single_node]
        public_ip = "127.0.0.1"
        EOF

        # Write secrets so they're not prompted in `bolt init`
        cat <<'EOF' > secrets/ci.toml
        [sendgrid]
        key = "TODO"
        EOF

    # MARK: Bolt
    # Delete old Bolt binaries in order to fall back to the Nix-built binary
    - name: Remove Old Bolt Builds
      shell: bash -e {0}
      run: rm -f target/debug/bolt target/release/bolt

    # Run `bolt config generate` so that the `Check` job can start working sooner
    - name: Generate Bolt Config
      shell: bash -e {0}
      run: nix-shell --pure --run "bolt config generate ci"
