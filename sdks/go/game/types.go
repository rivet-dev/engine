// This file was auto-generated by Fern from our API Definition.

package game

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	group "sdk/common/group"
	core "sdk/core"
)

// A game leaderboard category.
type LeaderboardCategory struct {
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`

	_rawJSON json.RawMessage
}

func (l *LeaderboardCategory) UnmarshalJSON(data []byte) error {
	type unmarshaler LeaderboardCategory
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LeaderboardCategory(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LeaderboardCategory) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// A platform link denoting a supported platform.
type PlatformLink struct {
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`
	// The URL to the given game's method of distribution on this platform.
	Url string `json:"url"`

	_rawJSON json.RawMessage
}

func (p *PlatformLink) UnmarshalJSON(data []byte) error {
	type unmarshaler PlatformLink
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PlatformLink(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlatformLink) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A game profile.
type Profile struct {
	GameId uuid.UUID `json:"game_id"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	NameId string `json:"name_id"`
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`
	// The URL of this game's logo image.
	LogoUrl *string `json:"logo_url,omitempty"`
	// The URL of this game's banner image.
	BannerUrl *string `json:"banner_url,omitempty"`
	// The URL to this game's website.
	Url       string         `json:"url"`
	Developer *group.Summary `json:"developer,omitempty"`
	// A list of game tags.
	Tags []string `json:"tags,omitempty"`
	// A description of the given game.
	Description string `json:"description"`
	// A list of platform links.
	Platforms []*PlatformLink `json:"platforms,omitempty"`
	// A list of group summaries.
	RecommendedGroups []*group.Summary `json:"recommended_groups,omitempty"`
	// A list of game leaderboard categories.
	IdentityLeaderboardCategories []*LeaderboardCategory `json:"identity_leaderboard_categories,omitempty"`
	// A list of game leaderboard categories.
	GroupLeaderboardCategories []*LeaderboardCategory `json:"group_leaderboard_categories,omitempty"`

	_rawJSON json.RawMessage
}

func (p *Profile) UnmarshalJSON(data []byte) error {
	type unmarshaler Profile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Profile(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Profile) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
