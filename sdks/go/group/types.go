// This file was auto-generated by Fern from our API Definition.

package group

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	group "sdk/common/group"
	identity "sdk/common/identity"
	core "sdk/core"
	time "time"
)

type GetBansRequest struct {
	// The pagination anchor. Set to the returned anchor of this endpoint to receive the next set of items.
	Anchor *string `json:"-"`
	// Amount of bans to return.
	Count *float64 `json:"-"`
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type GetJoinRequestsRequest struct {
	// The pagination anchor. Set to the returned anchor of this endpoint to receive the next set of items.
	Anchor *string `json:"-"`
	// Amount of join requests to return.
	Count *float64 `json:"-"`
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type GetMembersRequest struct {
	// The pagination anchor. Set to the returned anchor of this endpoint to receive the next set of items.
	Anchor *string `json:"-"`
	// Amount of members to return.
	Count *float64 `json:"-"`
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type GetProfileRequest struct {
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type ListSuggestedRequest struct {
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type SearchRequest struct {
	// The query to match group display names against.
	Query  string  `json:"-"`
	Anchor *string `json:"-"`
	// Unsigned 32 bit integer.
	Limit *float64 `json:"-"`
}

// A banned identity.
type BannedIdentity struct {
	Identity *identity.Handle `json:"identity,omitempty"`
	// RFC3339 timestamp.
	BanTs time.Time `json:"ban_ts"`

	_rawJSON json.RawMessage
}

func (b *BannedIdentity) UnmarshalJSON(data []byte) error {
	type unmarshaler BannedIdentity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BannedIdentity(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BannedIdentity) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// A group join request.
type JoinRequest struct {
	Identity *identity.Handle `json:"identity,omitempty"`
	// RFC3339 timestamp.
	Ts time.Time `json:"ts"`

	_rawJSON json.RawMessage
}

func (j *JoinRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler JoinRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JoinRequest(value)
	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JoinRequest) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// A group member.
type Member struct {
	Identity *identity.Handle `json:"identity,omitempty"`

	_rawJSON json.RawMessage
}

func (m *Member) UnmarshalJSON(data []byte) error {
	type unmarshaler Member
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = Member(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *Member) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// A list of group profiles.
type Profile struct {
	GroupId uuid.UUID `json:"group_id"`
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`
	// The URL of this group's avatar image.
	AvatarUrl *string              `json:"avatar_url,omitempty"`
	External  *group.ExternalLinks `json:"external,omitempty"`
	// Whether or not this group is a developer.
	IsDeveloper *bool `json:"is_developer,omitempty"`
	// Detailed information about a profile.
	Bio string `json:"bio"`
	// Whether or not the current identity is a member of this group.
	IsCurrentIdentityMember *bool           `json:"is_current_identity_member,omitempty"`
	Publicity               group.Publicity `json:"publicity,omitempty"`
	// Unsigned 32 bit integer.
	MemberCount *int `json:"member_count,omitempty"`
	// A list of group members.
	Members []*Member `json:"members,omitempty"`
	// A list of group join requests.
	JoinRequests []*JoinRequest `json:"join_requests,omitempty"`
	// Whether or not the current identity is currently requesting to join this group.
	IsCurrentIdentityRequestingJoin *bool     `json:"is_current_identity_requesting_join,omitempty"`
	OwnerIdentityId                 uuid.UUID `json:"owner_identity_id"`

	_rawJSON json.RawMessage
}

func (p *Profile) UnmarshalJSON(data []byte) error {
	type unmarshaler Profile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Profile(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Profile) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
