// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
)

type ActorsCreateRequest struct {
	Namespace          string      `json:"-"`
	Datacenter         *string     `json:"-"`
	CrashPolicy        CrashPolicy `json:"crash_policy,omitempty"`
	Input              *string     `json:"input,omitempty"`
	Key                *string     `json:"key,omitempty"`
	Name               string      `json:"name"`
	RunnerNameSelector string      `json:"runner_name_selector"`
}

type ActorsDeleteRequest struct {
	Namespace *string `json:"-"`
}

type ActorsGetRequest struct {
	Namespace *string `json:"-"`
}

type ActorsGetByIdRequest struct {
	Namespace string `json:"-"`
	Name      string `json:"-"`
	Key       string `json:"-"`
}

type ActorsGetOrCreateRequest struct {
	Namespace          string      `json:"-"`
	Datacenter         *string     `json:"-"`
	CrashPolicy        CrashPolicy `json:"crash_policy,omitempty"`
	Input              *string     `json:"input,omitempty"`
	Key                string      `json:"key"`
	Name               string      `json:"name"`
	RunnerNameSelector string      `json:"runner_name_selector"`
}

type ActorsGetOrCreateByIdRequest struct {
	Namespace          string      `json:"-"`
	Datacenter         *string     `json:"-"`
	CrashPolicy        CrashPolicy `json:"crash_policy,omitempty"`
	Input              *string     `json:"input,omitempty"`
	Key                string      `json:"key"`
	Name               string      `json:"name"`
	RunnerNameSelector string      `json:"runner_name_selector"`
}

type ActorsListRequest struct {
	Namespace        string  `json:"-"`
	Name             *string `json:"-"`
	Key              *string `json:"-"`
	ActorIds         *string `json:"-"`
	IncludeDestroyed *bool   `json:"-"`
	Limit            *int    `json:"-"`
	Cursor           *string `json:"-"`
}

type ActorsListNamesRequest struct {
	Namespace string  `json:"-"`
	Limit     *int    `json:"-"`
	Cursor    *string `json:"-"`
}

type Actor struct {
	ActorId             RivetId     `json:"actor_id"`
	ConnectableTs       *int64      `json:"connectable_ts,omitempty"`
	CrashPolicy         CrashPolicy `json:"crash_policy,omitempty"`
	CreateTs            int64       `json:"create_ts"`
	Datacenter          string      `json:"datacenter"`
	DestroyTs           *int64      `json:"destroy_ts,omitempty"`
	Key                 *string     `json:"key,omitempty"`
	Name                string      `json:"name"`
	NamespaceId         RivetId     `json:"namespace_id"`
	PendingAllocationTs *int64      `json:"pending_allocation_ts,omitempty"`
	RunnerNameSelector  string      `json:"runner_name_selector"`
	SleepTs             *int64      `json:"sleep_ts,omitempty"`
	StartTs             *int64      `json:"start_ts,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Actor) UnmarshalJSON(data []byte) error {
	type unmarshaler Actor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Actor(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Actor) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorName struct {
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActorName) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorName
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorName(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorName) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorsCreateResponse struct {
	Actor *Actor `json:"actor,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActorsCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorsCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorsCreateResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorsCreateResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorsDeleteResponse = map[string]interface{}

type ActorsGetByIdResponse struct {
	ActorId *RivetId `json:"actor_id,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActorsGetByIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorsGetByIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorsGetByIdResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorsGetByIdResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorsGetOrCreateByIdResponse struct {
	ActorId RivetId `json:"actor_id"`
	Created bool    `json:"created"`

	_rawJSON json.RawMessage
}

func (a *ActorsGetOrCreateByIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorsGetOrCreateByIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorsGetOrCreateByIdResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorsGetOrCreateByIdResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorsGetOrCreateResponse struct {
	Actor   *Actor `json:"actor,omitempty"`
	Created bool   `json:"created"`

	_rawJSON json.RawMessage
}

func (a *ActorsGetOrCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorsGetOrCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorsGetOrCreateResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorsGetOrCreateResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorsGetResponse struct {
	Actor *Actor `json:"actor,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActorsGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorsGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorsGetResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorsGetResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorsListNamesResponse struct {
	Names      map[string]*ActorName `json:"names,omitempty"`
	Pagination *Pagination           `json:"pagination,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActorsListNamesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorsListNamesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorsListNamesResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorsListNamesResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorsListResponse struct {
	Actors     []*Actor    `json:"actors,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActorsListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorsListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorsListResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorsListResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CrashPolicy string

const (
	CrashPolicyRestart CrashPolicy = "restart"
	CrashPolicySleep   CrashPolicy = "sleep"
	CrashPolicyDestroy CrashPolicy = "destroy"
)

func NewCrashPolicyFromString(s string) (CrashPolicy, error) {
	switch s {
	case "restart":
		return CrashPolicyRestart, nil
	case "sleep":
		return CrashPolicySleep, nil
	case "destroy":
		return CrashPolicyDestroy, nil
	}
	var t CrashPolicy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CrashPolicy) Ptr() *CrashPolicy {
	return &c
}

type Datacenter struct {
	DatacenterLabel int    `json:"datacenter_label"`
	Name            string `json:"name"`
	Url             string `json:"url"`

	_rawJSON json.RawMessage
}

func (d *Datacenter) UnmarshalJSON(data []byte) error {
	type unmarshaler Datacenter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Datacenter(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *Datacenter) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DatacentersListResponse struct {
	Datacenters []*Datacenter `json:"datacenters,omitempty"`
	Pagination  *Pagination   `json:"pagination,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DatacentersListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DatacentersListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DatacentersListResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DatacentersListResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type Namespace struct {
	CreateTs    int64   `json:"create_ts"`
	DisplayName string  `json:"display_name"`
	Name        string  `json:"name"`
	NamespaceId RivetId `json:"namespace_id"`

	_rawJSON json.RawMessage
}

func (n *Namespace) UnmarshalJSON(data []byte) error {
	type unmarshaler Namespace
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = Namespace(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *Namespace) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamespacesCreateResponse struct {
	Namespace *Namespace `json:"namespace,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NamespacesCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NamespacesCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamespacesCreateResponse(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamespacesCreateResponse) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamespacesGetResponse struct {
	Namespace *Namespace `json:"namespace,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NamespacesGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NamespacesGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamespacesGetResponse(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamespacesGetResponse) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamespacesListResponse struct {
	Namespaces []*Namespace `json:"namespaces,omitempty"`
	Pagination *Pagination  `json:"pagination,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NamespacesListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NamespacesListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamespacesListResponse(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamespacesListResponse) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type Pagination struct {
	Cursor *string `json:"cursor,omitempty"`

	_rawJSON json.RawMessage
}

func (p *Pagination) UnmarshalJSON(data []byte) error {
	type unmarshaler Pagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Pagination(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Pagination) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type RivetId = string

type Runner struct {
	AddressesHttp   StringHttpAddressHashableMap `json:"addresses_http,omitempty"`
	AddressesTcp    StringTcpAddressHashableMap  `json:"addresses_tcp,omitempty"`
	AddressesUdp    StringUdpAddressHashableMap  `json:"addresses_udp,omitempty"`
	CreateTs        int64                        `json:"create_ts"`
	Datacenter      string                       `json:"datacenter"`
	DrainTs         *int64                       `json:"drain_ts,omitempty"`
	Key             string                       `json:"key"`
	LastConnectedTs *int64                       `json:"last_connected_ts,omitempty"`
	LastPingTs      int64                        `json:"last_ping_ts"`
	LastRtt         int                          `json:"last_rtt"`
	Metadata        map[string]interface{}       `json:"metadata,omitempty"`
	Name            string                       `json:"name"`
	NamespaceId     RivetId                      `json:"namespace_id"`
	RemainingSlots  int                          `json:"remaining_slots"`
	RunnerId        RivetId                      `json:"runner_id"`
	StopTs          *int64                       `json:"stop_ts,omitempty"`
	TotalSlots      int                          `json:"total_slots"`
	Version         int                          `json:"version"`

	_rawJSON json.RawMessage
}

func (r *Runner) UnmarshalJSON(data []byte) error {
	type unmarshaler Runner
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Runner(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *Runner) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnersGetResponse struct {
	Runner *Runner `json:"runner,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnersGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnersGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnersGetResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnersGetResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnersListNamesResponse struct {
	Names      []string    `json:"names,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnersListNamesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnersListNamesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnersListNamesResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnersListNamesResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnersListResponse struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	Runners    []*Runner   `json:"runners,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnersListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnersListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnersListResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnersListResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type StringHttpAddressHashableMap = map[string]*StringHttpAddressHashableMapValue

type StringHttpAddressHashableMapValue struct {
	Hostname string `json:"hostname"`
	Port     int    `json:"port"`

	_rawJSON json.RawMessage
}

func (s *StringHttpAddressHashableMapValue) UnmarshalJSON(data []byte) error {
	type unmarshaler StringHttpAddressHashableMapValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringHttpAddressHashableMapValue(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringHttpAddressHashableMapValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StringTcpAddressHashableMap = map[string]*StringTcpAddressHashableMapValue

type StringTcpAddressHashableMapValue struct {
	Hostname string `json:"hostname"`
	Port     int    `json:"port"`

	_rawJSON json.RawMessage
}

func (s *StringTcpAddressHashableMapValue) UnmarshalJSON(data []byte) error {
	type unmarshaler StringTcpAddressHashableMapValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringTcpAddressHashableMapValue(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringTcpAddressHashableMapValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StringUdpAddressHashableMap = map[string]*StringUdpAddressHashableMapValue

type StringUdpAddressHashableMapValue struct {
	Hostname string `json:"hostname"`
	Port     int    `json:"port"`

	_rawJSON json.RawMessage
}

func (s *StringUdpAddressHashableMapValue) UnmarshalJSON(data []byte) error {
	type unmarshaler StringUdpAddressHashableMapValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringUdpAddressHashableMapValue(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringUdpAddressHashableMapValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
