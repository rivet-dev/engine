// This file was auto-generated by Fern from our API Definition.

package matchmaker

import (
	json "encoding/json"
	fmt "fmt"
	captcha "sdk/captcha"
	core "sdk/core"
)

type CreateLobbyRequest struct {
	GameMode         string                `json:"game_mode"`
	Region           *string               `json:"region,omitempty"`
	Publicity        *CustomLobbyPublicity `json:"publicity,omitempty"`
	Tags             map[string]string     `json:"tags,omitempty"`
	MaxPlayers       *int                  `json:"max_players,omitempty"`
	LobbyConfig      interface{}           `json:"lobby_config,omitempty"`
	Captcha          *captcha.Config       `json:"captcha,omitempty"`
	VerificationData interface{}           `json:"verification_data,omitempty"`
}

type FindLobbyRequest struct {
	Origin                 *string           `json:"-"`
	GameModes              []string          `json:"game_modes,omitempty"`
	Regions                []string          `json:"regions,omitempty"`
	PreventAutoCreateLobby *bool             `json:"prevent_auto_create_lobby,omitempty"`
	Tags                   map[string]string `json:"tags,omitempty"`
	MaxPlayers             *int              `json:"max_players,omitempty"`
	Captcha                *captcha.Config   `json:"captcha,omitempty"`
	VerificationData       interface{}       `json:"verification_data,omitempty"`
}

type JoinLobbyRequest struct {
	LobbyId          string          `json:"lobby_id"`
	Captcha          *captcha.Config `json:"captcha,omitempty"`
	VerificationData interface{}     `json:"verification_data,omitempty"`
}

type ListLobbiesRequest struct {
	IncludeState *bool `json:"-"`
}

type SetLobbyClosedRequest struct {
	IsClosed bool `json:"is_closed"`
}

type CustomLobbyPublicity string

const (
	CustomLobbyPublicityPublic  CustomLobbyPublicity = "public"
	CustomLobbyPublicityPrivate CustomLobbyPublicity = "private"
)

func NewCustomLobbyPublicityFromString(s string) (CustomLobbyPublicity, error) {
	switch s {
	case "public":
		return CustomLobbyPublicityPublic, nil
	case "private":
		return CustomLobbyPublicityPrivate, nil
	}
	var t CustomLobbyPublicity
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CustomLobbyPublicity) Ptr() *CustomLobbyPublicity {
	return &c
}

type CreateLobbyResponse struct {
	Lobby  *JoinLobby           `json:"lobby,omitempty"`
	Ports  map[string]*JoinPort `json:"ports,omitempty"`
	Player *JoinPlayer          `json:"player,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateLobbyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateLobbyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateLobbyResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateLobbyResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type FindLobbyResponse struct {
	Lobby  *JoinLobby           `json:"lobby,omitempty"`
	Ports  map[string]*JoinPort `json:"ports,omitempty"`
	Player *JoinPlayer          `json:"player,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FindLobbyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FindLobbyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FindLobbyResponse(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FindLobbyResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type JoinLobbyResponse struct {
	Lobby  *JoinLobby           `json:"lobby,omitempty"`
	Ports  map[string]*JoinPort `json:"ports,omitempty"`
	Player *JoinPlayer          `json:"player,omitempty"`

	_rawJSON json.RawMessage
}

func (j *JoinLobbyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler JoinLobbyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JoinLobbyResponse(value)
	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JoinLobbyResponse) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type ListLobbiesResponse struct {
	GameModes []*GameModeInfo `json:"game_modes,omitempty"`
	Regions   []*RegionInfo   `json:"regions,omitempty"`
	Lobbies   []*LobbyInfo    `json:"lobbies,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListLobbiesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListLobbiesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListLobbiesResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListLobbiesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
