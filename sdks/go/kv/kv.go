// This file was auto-generated by Fern from our API Definition.

package kv

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	sdk "sdk"
	core "sdk/core"
)

type GetBatchResponse struct {
	Entries []*Entry           `json:"entries,omitempty"`
	Watch   *sdk.WatchResponse `json:"watch,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetBatchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetBatchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetBatchResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetBatchResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetResponse struct {
	Value Value `json:"value,omitempty"`
	// Whether or not the entry has been deleted. Only set when watching this endpoint.
	Deleted *bool              `json:"deleted,omitempty"`
	Watch   *sdk.WatchResponse `json:"watch,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListResponse struct {
	Entries []*Entry `json:"entries,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type PutBatchRequest struct {
	NamespaceId *uuid.UUID  `json:"namespace_id,omitempty"`
	Entries     []*PutEntry `json:"entries,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PutBatchRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PutBatchRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PutBatchRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PutBatchRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PutRequest struct {
	NamespaceId *uuid.UUID `json:"namespace_id,omitempty"`
	Key         Key        `json:"key"`
	Value       Value      `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PutRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PutRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PutRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PutRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
