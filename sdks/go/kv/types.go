// This file was auto-generated by Fern from our API Definition.

package kv

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	core "sdk/core"
)

type DeleteOperationRequest struct {
	Key         Key        `json:"-"`
	NamespaceId *uuid.UUID `json:"-"`
}

type DeleteBatchRequest struct {
	Keys        []Key      `json:"-"`
	NamespaceId *uuid.UUID `json:"-"`
}

type GetOperationRequest struct {
	Key Key `json:"-"`
	// A query parameter denoting the requests watch index.
	WatchIndex  *string    `json:"-"`
	NamespaceId *uuid.UUID `json:"-"`
}

type GetBatchRequest struct {
	Keys []Key `json:"-"`
	// A query parameter denoting the requests watch index.
	WatchIndex  *string    `json:"-"`
	NamespaceId *uuid.UUID `json:"-"`
}

type ListOperationRequest struct {
	Directory   Directory `json:"-"`
	NamespaceId uuid.UUID `json:"-"`
}

type Directory = string

// A key-value entry.
type Entry struct {
	Key     Key   `json:"key"`
	Value   Value `json:"value,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	_rawJSON json.RawMessage
}

func (e *Entry) UnmarshalJSON(data []byte) error {
	type unmarshaler Entry
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Entry(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *Entry) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A string representing a key in the key-value database.
// Maximum length of 512 characters.
// _Recommended Key Path Format_
// Key path components are split by a slash (e.g. `a/b/c` has the path components `["a", "b", "c"]`). Slashes can be escaped by using a backslash (e.g. `a/b\/c/d` has the path components `["a", "b/c", "d"]`).
// This format is not enforced by Rivet, but the tools built around Rivet KV work better if this format is used.
type Key = string

// A new entry to insert into the key-value database.
type PutEntry struct {
	Key   Key   `json:"key"`
	Value Value `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PutEntry) UnmarshalJSON(data []byte) error {
	type unmarshaler PutEntry
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PutEntry(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PutEntry) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A JSON object stored in the KV database.
// A `null` value indicates the entry is deleted.
// Maximum length of 262,144 bytes when encoded.
type Value = interface{}
