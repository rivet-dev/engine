// This file was auto-generated by Fern from our API Definition.

package games

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	cloud "sdk/cloud"
	core "sdk/core"
	upload "sdk/upload"
)

type CreateGameBuildRequest struct {
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`
	// A tag given to the game build.
	ImageTag        string              `json:"image_tag"`
	ImageFile       *upload.PrepareFile `json:"image_file,omitempty"`
	MultipartUpload *bool               `json:"multipart_upload,omitempty"`
	Kind            *BuildKind          `json:"kind,omitempty"`
	Compression     *BuildCompression   `json:"compression,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateGameBuildRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateGameBuildRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateGameBuildRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateGameBuildRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateGameBuildResponse struct {
	BuildId                uuid.UUID                  `json:"build_id"`
	UploadId               uuid.UUID                  `json:"upload_id"`
	ImagePresignedRequest  *upload.PresignedRequest   `json:"image_presigned_request,omitempty"`
	ImagePresignedRequests []*upload.PresignedRequest `json:"image_presigned_requests,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateGameBuildResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateGameBuildResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateGameBuildResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateGameBuildResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ListGameBuildsResponse struct {
	// A list of build summaries.
	Builds []*cloud.BuildSummary `json:"builds,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListGameBuildsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListGameBuildsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListGameBuildsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListGameBuildsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
