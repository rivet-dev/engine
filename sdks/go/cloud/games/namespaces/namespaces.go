// This file was auto-generated by Fern from our API Definition.

package namespaces

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	sdk "sdk"
	cloud "sdk/cloud"
	matchmaker "sdk/cloud/version/matchmaker"
	core "sdk/core"
)

type AddNamespaceDomainRequest struct {
	// A valid domain name (no protocol).
	Domain string `json:"domain"`

	_rawJSON json.RawMessage
}

func (a *AddNamespaceDomainRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler AddNamespaceDomainRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddNamespaceDomainRequest(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddNamespaceDomainRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CreateGameNamespaceRequest struct {
	// Represent a resource's readable display name.
	DisplayName string    `json:"display_name"`
	VersionId   uuid.UUID `json:"version_id"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	NameId string `json:"name_id"`

	_rawJSON json.RawMessage
}

func (c *CreateGameNamespaceRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateGameNamespaceRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateGameNamespaceRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateGameNamespaceRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateGameNamespaceResponse struct {
	NamespaceId uuid.UUID `json:"namespace_id"`

	_rawJSON json.RawMessage
}

func (c *CreateGameNamespaceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateGameNamespaceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateGameNamespaceResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateGameNamespaceResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateGameNamespaceTokenDevelopmentRequest struct {
	// The hostname used for the token.
	Hostname string                                      `json:"hostname"`
	Ports    map[string]*cloud.MatchmakerDevelopmentPort `json:"ports,omitempty"`
	// **Deprecated**
	// A list of docker ports.
	LobbyPorts []*matchmaker.LobbyGroupRuntimeDockerPort `json:"lobby_ports,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateGameNamespaceTokenDevelopmentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateGameNamespaceTokenDevelopmentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateGameNamespaceTokenDevelopmentRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateGameNamespaceTokenDevelopmentRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateGameNamespaceTokenDevelopmentResponse struct {
	// A JSON Web Token.
	// Slightly modified to include a description prefix and use Protobufs of
	// JSON.
	Token string `json:"token"`

	_rawJSON json.RawMessage
}

func (c *CreateGameNamespaceTokenDevelopmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateGameNamespaceTokenDevelopmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateGameNamespaceTokenDevelopmentResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateGameNamespaceTokenDevelopmentResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateGameNamespaceTokenPublicResponse struct {
	// A JSON Web Token.
	// Slightly modified to include a description prefix and use Protobufs of
	// JSON.
	Token string `json:"token"`

	_rawJSON json.RawMessage
}

func (c *CreateGameNamespaceTokenPublicResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateGameNamespaceTokenPublicResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateGameNamespaceTokenPublicResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateGameNamespaceTokenPublicResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetGameNamespaceByIdResponse struct {
	Namespace *cloud.NamespaceFull `json:"namespace,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetGameNamespaceByIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGameNamespaceByIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGameNamespaceByIdResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGameNamespaceByIdResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGameNamespaceVersionHistoryResponse struct {
	// A list of previously deployed namespace versions.
	Versions []*cloud.NamespaceVersion `json:"versions,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetGameNamespaceVersionHistoryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGameNamespaceVersionHistoryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGameNamespaceVersionHistoryResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGameNamespaceVersionHistoryResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type SetNamespaceCdnAuthTypeRequest struct {
	AuthType cloud.CdnAuthType `json:"auth_type,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SetNamespaceCdnAuthTypeRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SetNamespaceCdnAuthTypeRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SetNamespaceCdnAuthTypeRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SetNamespaceCdnAuthTypeRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ToggleNamespaceDomainPublicAuthRequest struct {
	// Whether or not to enable authentication based on domain.
	Enabled bool `json:"enabled"`

	_rawJSON json.RawMessage
}

func (t *ToggleNamespaceDomainPublicAuthRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ToggleNamespaceDomainPublicAuthRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ToggleNamespaceDomainPublicAuthRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ToggleNamespaceDomainPublicAuthRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpdateGameNamespaceMatchmakerConfigRequest struct {
	// Unsigned 32 bit integer.
	LobbyCountMax int `json:"lobby_count_max"`
	// Unsigned 32 bit integer.
	MaxPlayers int `json:"max_players"`

	_rawJSON json.RawMessage
}

func (u *UpdateGameNamespaceMatchmakerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateGameNamespaceMatchmakerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateGameNamespaceMatchmakerConfigRequest(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateGameNamespaceMatchmakerConfigRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateGameNamespaceVersionRequest struct {
	VersionId uuid.UUID `json:"version_id"`

	_rawJSON json.RawMessage
}

func (u *UpdateGameNamespaceVersionRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateGameNamespaceVersionRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateGameNamespaceVersionRequest(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateGameNamespaceVersionRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateNamespaceCdnAuthUserRequest struct {
	// A user name.
	User string `json:"user"`
	// A bcrypt encrypted password. An error is returned if the given string is not properly encrypted.
	Password string `json:"password"`

	_rawJSON json.RawMessage
}

func (u *UpdateNamespaceCdnAuthUserRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateNamespaceCdnAuthUserRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateNamespaceCdnAuthUserRequest(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateNamespaceCdnAuthUserRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type ValidateGameNamespaceMatchmakerConfigRequest struct {
	// Unsigned 32 bit integer.
	LobbyCountMax int `json:"lobby_count_max"`
	// Unsigned 32 bit integer.
	MaxPlayers int `json:"max_players"`

	_rawJSON json.RawMessage
}

func (v *ValidateGameNamespaceMatchmakerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidateGameNamespaceMatchmakerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidateGameNamespaceMatchmakerConfigRequest(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidateGameNamespaceMatchmakerConfigRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidateGameNamespaceMatchmakerConfigResponse struct {
	// A list of validation errors.
	Errors []*sdk.ValidationError `json:"errors,omitempty"`

	_rawJSON json.RawMessage
}

func (v *ValidateGameNamespaceMatchmakerConfigResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidateGameNamespaceMatchmakerConfigResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidateGameNamespaceMatchmakerConfigResponse(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidateGameNamespaceMatchmakerConfigResponse) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidateGameNamespaceRequest struct {
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	NameId string `json:"name_id"`

	_rawJSON json.RawMessage
}

func (v *ValidateGameNamespaceRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidateGameNamespaceRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidateGameNamespaceRequest(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidateGameNamespaceRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidateGameNamespaceResponse struct {
	// A list of validation errors.
	Errors []*sdk.ValidationError `json:"errors,omitempty"`

	_rawJSON json.RawMessage
}

func (v *ValidateGameNamespaceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidateGameNamespaceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidateGameNamespaceResponse(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidateGameNamespaceResponse) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidateGameNamespaceTokenDevelopmentRequest struct {
	Hostname string `json:"hostname"`
	// A list of docker ports.
	LobbyPorts []*matchmaker.LobbyGroupRuntimeDockerPort `json:"lobby_ports,omitempty"`

	_rawJSON json.RawMessage
}

func (v *ValidateGameNamespaceTokenDevelopmentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidateGameNamespaceTokenDevelopmentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidateGameNamespaceTokenDevelopmentRequest(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidateGameNamespaceTokenDevelopmentRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidateGameNamespaceTokenDevelopmentResponse struct {
	// A list of validation errors.
	Errors []*sdk.ValidationError `json:"errors,omitempty"`

	_rawJSON json.RawMessage
}

func (v *ValidateGameNamespaceTokenDevelopmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidateGameNamespaceTokenDevelopmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidateGameNamespaceTokenDevelopmentResponse(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidateGameNamespaceTokenDevelopmentResponse) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
