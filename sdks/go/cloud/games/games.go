// This file was auto-generated by Fern from our API Definition.

package games

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	sdk "sdk"
	cloud "sdk/cloud"
	game "sdk/common/game"
	group "sdk/common/group"
	core "sdk/core"
	upload "sdk/upload"
)

type GetGameByIdRequest struct {
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type GetGamesRequest struct {
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type CreateGameRequest struct {
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	NameId string `json:"name_id"`
	// Represent a resource's readable display name.
	DisplayName      string    `json:"display_name"`
	DeveloperGroupId uuid.UUID `json:"developer_group_id"`

	_rawJSON json.RawMessage
}

func (c *CreateGameRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateGameRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateGameRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateGameRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateGameResponse struct {
	GameId uuid.UUID `json:"game_id"`

	_rawJSON json.RawMessage
}

func (c *CreateGameResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateGameResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateGameResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateGameResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GameBannerUploadPrepareRequest struct {
	// The path/filename of the game banner.
	Path string `json:"path"`
	// The MIME type of the game banner.
	Mime *string `json:"mime,omitempty"`
	// Unsigned 64 bit integer.
	ContentLength int64 `json:"content_length"`

	_rawJSON json.RawMessage
}

func (g *GameBannerUploadPrepareRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GameBannerUploadPrepareRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GameBannerUploadPrepareRequest(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GameBannerUploadPrepareRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GameBannerUploadPrepareResponse struct {
	UploadId         uuid.UUID                `json:"upload_id"`
	PresignedRequest *upload.PresignedRequest `json:"presigned_request,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GameBannerUploadPrepareResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GameBannerUploadPrepareResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GameBannerUploadPrepareResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GameBannerUploadPrepareResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GameLogoUploadPrepareRequest struct {
	// The path/filename of the game logo.
	Path string `json:"path"`
	// The MIME type of the game logo.
	Mime *string `json:"mime,omitempty"`
	// Unsigned 64 bit integer.
	ContentLength int64 `json:"content_length"`

	_rawJSON json.RawMessage
}

func (g *GameLogoUploadPrepareRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GameLogoUploadPrepareRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GameLogoUploadPrepareRequest(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GameLogoUploadPrepareRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GameLogoUploadPrepareResponse struct {
	UploadId         uuid.UUID                `json:"upload_id"`
	PresignedRequest *upload.PresignedRequest `json:"presigned_request,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GameLogoUploadPrepareResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GameLogoUploadPrepareResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GameLogoUploadPrepareResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GameLogoUploadPrepareResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGameByIdResponse struct {
	Game  *cloud.GameFull    `json:"game,omitempty"`
	Watch *sdk.WatchResponse `json:"watch,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetGameByIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGameByIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGameByIdResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGameByIdResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetGamesResponse struct {
	// A list of game summaries.
	Games []*game.Summary `json:"games,omitempty"`
	// A list of group summaries.
	Groups []*group.Summary   `json:"groups,omitempty"`
	Watch  *sdk.WatchResponse `json:"watch,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetGamesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGamesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGamesResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGamesResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ValidateGameRequest struct {
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	NameId string `json:"name_id"`

	_rawJSON json.RawMessage
}

func (v *ValidateGameRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidateGameRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidateGameRequest(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidateGameRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type ValidateGameResponse struct {
	// A list of validation errors.
	Errors []*sdk.ValidationError `json:"errors,omitempty"`

	_rawJSON json.RawMessage
}

func (v *ValidateGameResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ValidateGameResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = ValidateGameResponse(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValidateGameResponse) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
