// This file was auto-generated by Fern from our API Definition.

package engine

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
)

type CustomConfig struct {
	_rawJSON json.RawMessage
}

func (c *CustomConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomConfig(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomConfig) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GodotConfig struct {
	_rawJSON json.RawMessage
}

func (g *GodotConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler GodotConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GodotConfig(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GodotConfig) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type Html5Config struct {
	_rawJSON json.RawMessage
}

func (h *Html5Config) UnmarshalJSON(data []byte) error {
	type unmarshaler Html5Config
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = Html5Config(value)
	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *Html5Config) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type UnityConfig struct {
	_rawJSON json.RawMessage
}

func (u *UnityConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler UnityConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnityConfig(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnityConfig) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnrealConfig struct {
	// Name of the Unreal module that holds the game code.
	// This is usually the value of `$.Modules[0].Name` in the file `MyProject.unproject`.
	// _Configures Rivet CLI behavior. Has no effect on server behavior._
	GameModule string `json:"game_module"`

	_rawJSON json.RawMessage
}

func (u *UnrealConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler UnrealConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnrealConfig(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnrealConfig) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type Config struct {
	Unity  *UnityConfig  `json:"unity,omitempty"`
	Unreal *UnrealConfig `json:"unreal,omitempty"`
	Godot  *GodotConfig  `json:"godot,omitempty"`
	Html5  *Html5Config  `json:"html5,omitempty"`
	Custom *CustomConfig `json:"custom,omitempty"`

	_rawJSON json.RawMessage
}

func (c *Config) UnmarshalJSON(data []byte) error {
	type unmarshaler Config
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Config(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Config) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}
