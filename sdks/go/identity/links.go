// This file was auto-generated by Fern from our API Definition.

package identity

import (
	json "encoding/json"
	fmt "fmt"
	sdk "sdk"
	game "sdk/common/game"
	identity "sdk/common/identity"
	core "sdk/core"
	time "time"
)

type GetGameLinkRequest struct {
	IdentityLinkToken sdk.Jwt        `json:"-"`
	WatchIndex        sdk.WatchQuery `json:"-"`
}

type CancelGameLinkRequest struct {
	IdentityLinkToken sdk.Jwt `json:"identity_link_token"`

	_rawJSON json.RawMessage
}

func (c *CancelGameLinkRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CancelGameLinkRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CancelGameLinkRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CancelGameLinkRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompleteGameLinkRequest struct {
	IdentityLinkToken sdk.Jwt `json:"identity_link_token"`

	_rawJSON json.RawMessage
}

func (c *CompleteGameLinkRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CompleteGameLinkRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompleteGameLinkRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompleteGameLinkRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetGameLinkResponse struct {
	Status          GameLinkStatus          `json:"status,omitempty"`
	Game            *game.Handle            `json:"game,omitempty"`
	CurrentIdentity *identity.Handle        `json:"current_identity,omitempty"`
	NewIdentity     *GetGameLinkNewIdentity `json:"new_identity,omitempty"`
	Watch           *sdk.WatchResponse      `json:"watch,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetGameLinkResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetGameLinkResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetGameLinkResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetGameLinkResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type PrepareGameLinkResponse struct {
	// Pass this to `GetGameLink` to get the linking status. Valid for 15 minutes.
	IdentityLinkToken string    `json:"identity_link_token"`
	IdentityLinkUrl   string    `json:"identity_link_url"`
	ExpireTs          time.Time `json:"expire_ts"`

	_rawJSON json.RawMessage
}

func (p *PrepareGameLinkResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PrepareGameLinkResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PrepareGameLinkResponse(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PrepareGameLinkResponse) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
