# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: ../../common.yml
  localCommons: common.yml

types:
  GameMode:
    docs: A game mode.
    properties:
      regions:
        type: optional<map<string, GameModeRegion>>
      max_players:
        type: optional<integer>
      max_players_direct:
        type: optional<integer>
      max_players_party:
        type: optional<integer>
      docker:
        type: optional<GameModeRuntimeDocker>
      listable:
        type: optional<boolean>
      taggable:
        type: optional<boolean>
      allow_dynamic_max_players:
        type: optional<boolean>

      actions:
        type: optional<GameModeActions>

      # Region overrides
      tier:
        type: optional<string>
      idle_lobbies:
        type: optional<GameModeIdleLobbiesConfig>

  GameModeRegion:
    docs: A game mode region.
    properties:
      tier:
        type: optional<string>
      idle_lobbies:
        type: optional<GameModeIdleLobbiesConfig>

  GameModeRuntimeDocker:
    docs: A game mode runtime running through Docker.
    properties:
      dockerfile:
        docs: _Configures Rivet CLI behavior. Has no effect on server behavior._
        type: optional<string>
      build_args:
        docs: _Configures Rivet CLI behavior. Has no effect on server behavior._
        type: optional<map<string, string>>
      image:
        docs: _Configures Rivet CLI behavior. Has no effect on server behavior._
        type: optional<string>
      image_id: optional<uuid>
      args: optional<list<string>>
      env: optional<map<string, string>>
      network_mode: optional<localCommons.NetworkMode>
      ports: optional<map<string, GameModeRuntimeDockerPort>>

  GameModeRuntimeDockerPort:
    docs: |
      Port config for a docker build.
    properties:
      port:
        docs: >-
          The port number to connect to.

          ### Related
          - cloud.version.matchmaker.PortProtocol
          - cloud.version.matchmaker.ProxyKind

        type: optional<integer>
      port_range: optional<localCommons.PortRange>
      protocol: optional<localCommons.PortProtocol>
      proxy:
        docs: How this port should be proxied. Defaults to 'game-guard`.
        type: optional<localCommons.ProxyKind>

      # _Configures Rivet CLI behavior. Has no effect on server behavior._
      dev_port:
        docs: _Configures Rivet CLI behavior. Has no effect on server behavior._
        type: optional<integer>
      dev_port_range:
        docs: _Configures Rivet CLI behavior. Has no effect on server behavior._
        type: optional<localCommons.PortRange>
      dev_protocol:
        docs: _Configures Rivet CLI behavior. Has no effect on server behavior._
        type: optional<localCommons.PortProtocol>

  GameModeIdleLobbiesConfig:
    docs: Configuration for how many idle lobbies a game version should have.
    properties:
      min: integer
      max: integer

  GameModeActions:
    docs: Configuration for the connection types allowed for a game mode.
    properties:
      find: optional<GameModeFindConfig>
      join: optional<GameModeJoinConfig>
      create: optional<GameModeCreateConfig>

  GameModeIdentityRequirement:
    docs: >-
      **Deprecated**

      The registration requirement for a user when joining/finding/creating a
      lobby. "None" allows for connections without an identity.
    enum:
      - none
      - guest
      - registered

  GameModeVerificationConfig:
    # TODO: Add link to tutorial in docs
    docs: >-
      Configuration that tells Rivet where to send validation requests and with
      what headers. When set, Rivet will send the `verification_data` property
      (given by the user in the find/join/create endpoint) to the given url
      along with the headers provided and some information about the requested
      lobby. The response of this request will determine if the user can join
      that lobby or not.
    properties:
      url: string
      headers: map<string, string>

  GameModeFindConfig:
    docs: >-
      Configures the requirements and authentication for the /find endpoint.
      If this value is not set in the config, the /find endpoint is still enabled.
    properties:
      enabled:
        docs: Sets whether or not the /find endpoint is enabled.
        type: boolean
      identity_requirement: optional<GameModeIdentityRequirement>
      verification: optional<GameModeVerificationConfig>

  GameModeJoinConfig:
    docs: >-
      Configures the requirements and authentication for the /join endpoint.
      If this value is not set in the config, the /join endpoint is still enabled.
    properties:
      enabled:
        docs: Sets whether or not the /join endpoint is enabled.
        type: boolean
      identity_requirement: optional<GameModeIdentityRequirement>
      verification: optional<GameModeVerificationConfig>

  GameModeCreateConfig:
    docs: >-
      Configures the requirements and authentication for the /create endpoint.
      If this value is not set in the config, the /create endpoint is NOT enabled.
    properties:
      enabled:
        docs: Sets whether or not the /create endpoint is enabled.
        type: boolean
      identity_requirement: optional<GameModeIdentityRequirement>
      verification: optional<GameModeVerificationConfig>
      enable_public:
        docs: Defaults to false when unset.
        type: optional<boolean>
      enable_private:
        docs: Defaults to true when unset.
        type: optional<boolean>
      max_lobbies_per_identity:
        docs: >-
          **Deprecated**

        type: optional<integer>
