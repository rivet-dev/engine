/*
 * rivet-api-public
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: developer@rivet.gg
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`create_actor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateActorError {
	UnknownValue(serde_json::Value),
}

pub async fn create_actor(
	configuration: &configuration::Configuration,
	actors_create_request: models::ActorsCreateRequest,
) -> Result<models::ActorsCreateResponse, Error<CreateActorError>> {
	// add a prefix to parameters to efficiently prevent name collisions
	let p_actors_create_request = actors_create_request;

	let uri_str = format!("{}/actors", configuration.base_path);
	let mut req_builder = configuration
		.client
		.request(reqwest::Method::POST, &uri_str);

	if let Some(ref user_agent) = configuration.user_agent {
		req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
	}
	req_builder = req_builder.json(&p_actors_create_request);

	let req = req_builder.build()?;
	let resp = configuration.client.execute(req).await?;

	let status = resp.status();
	let content_type = resp
		.headers()
		.get("content-type")
		.and_then(|v| v.to_str().ok())
		.unwrap_or("application/octet-stream");
	let content_type = super::ContentType::from(content_type);

	if !status.is_client_error() && !status.is_server_error() {
		let content = resp.text().await?;
		match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActorsCreateResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActorsCreateResponse`")))),
        }
	} else {
		let content = resp.text().await?;
		let entity: Option<CreateActorError> = serde_json::from_str(&content).ok();
		Err(Error::ResponseError(ResponseContent {
			status,
			content,
			entity,
		}))
	}
}
