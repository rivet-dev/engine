/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: runner_protocol.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./kv";
import * as pb_1 from "google-protobuf";
export namespace rivet.pegboard.runner_protocol {
    export enum GameGuardProtocol {
        GG_HTTP = 0,
        GG_HTTPS = 1,
        GG_TCP = 2,
        GG_TCP_TLS = 3,
        GG_UDP = 4
    }
    export enum HostProtocol {
        HOST_TCP = 0,
        HOST_UDP = 1
    }
    export class ToManager extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            actor_state_update?: ToManager.ActorStateUpdate;
            ping?: never;
            kv?: never;
        } | {
            actor_state_update?: never;
            ping?: ToManager.Ping;
            kv?: never;
        } | {
            actor_state_update?: never;
            ping?: never;
            kv?: dependency_1.rivet.pegboard.kv.Request;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("actor_state_update" in data && data.actor_state_update != undefined) {
                    this.actor_state_update = data.actor_state_update;
                }
                if ("ping" in data && data.ping != undefined) {
                    this.ping = data.ping;
                }
                if ("kv" in data && data.kv != undefined) {
                    this.kv = data.kv;
                }
            }
        }
        get actor_state_update() {
            return pb_1.Message.getWrapperField(this, ToManager.ActorStateUpdate, 1) as ToManager.ActorStateUpdate;
        }
        set actor_state_update(value: ToManager.ActorStateUpdate) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_actor_state_update() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ping() {
            return pb_1.Message.getWrapperField(this, ToManager.Ping, 2) as ToManager.Ping;
        }
        set ping(value: ToManager.Ping) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_ping() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get kv() {
            return pb_1.Message.getWrapperField(this, dependency_1.rivet.pegboard.kv.Request, 3) as dependency_1.rivet.pegboard.kv.Request;
        }
        set kv(value: dependency_1.rivet.pegboard.kv.Request) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_kv() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get message() {
            const cases: {
                [index: number]: "none" | "actor_state_update" | "ping" | "kv";
            } = {
                0: "none",
                1: "actor_state_update",
                2: "ping",
                3: "kv"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            actor_state_update?: ReturnType<typeof ToManager.ActorStateUpdate.prototype.toObject>;
            ping?: ReturnType<typeof ToManager.Ping.prototype.toObject>;
            kv?: ReturnType<typeof dependency_1.rivet.pegboard.kv.Request.prototype.toObject>;
        }): ToManager {
            const message = new ToManager({});
            if (data.actor_state_update != null) {
                message.actor_state_update = ToManager.ActorStateUpdate.fromObject(data.actor_state_update);
            }
            if (data.ping != null) {
                message.ping = ToManager.Ping.fromObject(data.ping);
            }
            if (data.kv != null) {
                message.kv = dependency_1.rivet.pegboard.kv.Request.fromObject(data.kv);
            }
            return message;
        }
        toObject() {
            const data: {
                actor_state_update?: ReturnType<typeof ToManager.ActorStateUpdate.prototype.toObject>;
                ping?: ReturnType<typeof ToManager.Ping.prototype.toObject>;
                kv?: ReturnType<typeof dependency_1.rivet.pegboard.kv.Request.prototype.toObject>;
            } = {};
            if (this.actor_state_update != null) {
                data.actor_state_update = this.actor_state_update.toObject();
            }
            if (this.ping != null) {
                data.ping = this.ping.toObject();
            }
            if (this.kv != null) {
                data.kv = this.kv.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_actor_state_update)
                writer.writeMessage(1, this.actor_state_update, () => this.actor_state_update.serialize(writer));
            if (this.has_ping)
                writer.writeMessage(2, this.ping, () => this.ping.serialize(writer));
            if (this.has_kv)
                writer.writeMessage(3, this.kv, () => this.kv.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToManager {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToManager();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.actor_state_update, () => message.actor_state_update = ToManager.ActorStateUpdate.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.ping, () => message.ping = ToManager.Ping.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.kv, () => message.kv = dependency_1.rivet.pegboard.kv.Request.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToManager {
            return ToManager.deserialize(bytes);
        }
    }
    export namespace ToManager {
        export class ActorStateUpdate extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                actor_id?: string;
                generation?: number;
                state?: ActorState;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("actor_id" in data && data.actor_id != undefined) {
                        this.actor_id = data.actor_id;
                    }
                    if ("generation" in data && data.generation != undefined) {
                        this.generation = data.generation;
                    }
                    if ("state" in data && data.state != undefined) {
                        this.state = data.state;
                    }
                }
            }
            get actor_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set actor_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get generation() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set generation(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get state() {
                return pb_1.Message.getWrapperField(this, ActorState, 3) as ActorState;
            }
            set state(value: ActorState) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_state() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                actor_id?: string;
                generation?: number;
                state?: ReturnType<typeof ActorState.prototype.toObject>;
            }): ActorStateUpdate {
                const message = new ActorStateUpdate({});
                if (data.actor_id != null) {
                    message.actor_id = data.actor_id;
                }
                if (data.generation != null) {
                    message.generation = data.generation;
                }
                if (data.state != null) {
                    message.state = ActorState.fromObject(data.state);
                }
                return message;
            }
            toObject() {
                const data: {
                    actor_id?: string;
                    generation?: number;
                    state?: ReturnType<typeof ActorState.prototype.toObject>;
                } = {};
                if (this.actor_id != null) {
                    data.actor_id = this.actor_id;
                }
                if (this.generation != null) {
                    data.generation = this.generation;
                }
                if (this.state != null) {
                    data.state = this.state.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.actor_id.length)
                    writer.writeString(1, this.actor_id);
                if (this.generation != 0)
                    writer.writeUint32(2, this.generation);
                if (this.has_state)
                    writer.writeMessage(3, this.state, () => this.state.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActorStateUpdate {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActorStateUpdate();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.actor_id = reader.readString();
                            break;
                        case 2:
                            message.generation = reader.readUint32();
                            break;
                        case 3:
                            reader.readMessage(message.state, () => message.state = ActorState.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ActorStateUpdate {
                return ActorStateUpdate.deserialize(bytes);
            }
        }
        export class Ping extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Ping {
                const message = new Ping({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ping {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ping();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Ping {
                return Ping.deserialize(bytes);
            }
        }
    }
    export class ToRunner extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6]];
        constructor(data?: any[] | ({} & (({
            init?: ToRunner.Init;
            pong?: never;
            close?: never;
            start_actor?: never;
            signal_actor?: never;
            kv?: never;
        } | {
            init?: never;
            pong?: ToRunner.Pong;
            close?: never;
            start_actor?: never;
            signal_actor?: never;
            kv?: never;
        } | {
            init?: never;
            pong?: never;
            close?: ToRunner.Close;
            start_actor?: never;
            signal_actor?: never;
            kv?: never;
        } | {
            init?: never;
            pong?: never;
            close?: never;
            start_actor?: ToRunner.StartActor;
            signal_actor?: never;
            kv?: never;
        } | {
            init?: never;
            pong?: never;
            close?: never;
            start_actor?: never;
            signal_actor?: ToRunner.SignalActor;
            kv?: never;
        } | {
            init?: never;
            pong?: never;
            close?: never;
            start_actor?: never;
            signal_actor?: never;
            kv?: dependency_1.rivet.pegboard.kv.Response;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("init" in data && data.init != undefined) {
                    this.init = data.init;
                }
                if ("pong" in data && data.pong != undefined) {
                    this.pong = data.pong;
                }
                if ("close" in data && data.close != undefined) {
                    this.close = data.close;
                }
                if ("start_actor" in data && data.start_actor != undefined) {
                    this.start_actor = data.start_actor;
                }
                if ("signal_actor" in data && data.signal_actor != undefined) {
                    this.signal_actor = data.signal_actor;
                }
                if ("kv" in data && data.kv != undefined) {
                    this.kv = data.kv;
                }
            }
        }
        get init() {
            return pb_1.Message.getWrapperField(this, ToRunner.Init, 1) as ToRunner.Init;
        }
        set init(value: ToRunner.Init) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_init() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get pong() {
            return pb_1.Message.getWrapperField(this, ToRunner.Pong, 2) as ToRunner.Pong;
        }
        set pong(value: ToRunner.Pong) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_pong() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get close() {
            return pb_1.Message.getWrapperField(this, ToRunner.Close, 3) as ToRunner.Close;
        }
        set close(value: ToRunner.Close) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_close() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get start_actor() {
            return pb_1.Message.getWrapperField(this, ToRunner.StartActor, 4) as ToRunner.StartActor;
        }
        set start_actor(value: ToRunner.StartActor) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_start_actor() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get signal_actor() {
            return pb_1.Message.getWrapperField(this, ToRunner.SignalActor, 5) as ToRunner.SignalActor;
        }
        set signal_actor(value: ToRunner.SignalActor) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_signal_actor() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get kv() {
            return pb_1.Message.getWrapperField(this, dependency_1.rivet.pegboard.kv.Response, 6) as dependency_1.rivet.pegboard.kv.Response;
        }
        set kv(value: dependency_1.rivet.pegboard.kv.Response) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_kv() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get message() {
            const cases: {
                [index: number]: "none" | "init" | "pong" | "close" | "start_actor" | "signal_actor" | "kv";
            } = {
                0: "none",
                1: "init",
                2: "pong",
                3: "close",
                4: "start_actor",
                5: "signal_actor",
                6: "kv"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6])];
        }
        static fromObject(data: {
            init?: ReturnType<typeof ToRunner.Init.prototype.toObject>;
            pong?: ReturnType<typeof ToRunner.Pong.prototype.toObject>;
            close?: ReturnType<typeof ToRunner.Close.prototype.toObject>;
            start_actor?: ReturnType<typeof ToRunner.StartActor.prototype.toObject>;
            signal_actor?: ReturnType<typeof ToRunner.SignalActor.prototype.toObject>;
            kv?: ReturnType<typeof dependency_1.rivet.pegboard.kv.Response.prototype.toObject>;
        }): ToRunner {
            const message = new ToRunner({});
            if (data.init != null) {
                message.init = ToRunner.Init.fromObject(data.init);
            }
            if (data.pong != null) {
                message.pong = ToRunner.Pong.fromObject(data.pong);
            }
            if (data.close != null) {
                message.close = ToRunner.Close.fromObject(data.close);
            }
            if (data.start_actor != null) {
                message.start_actor = ToRunner.StartActor.fromObject(data.start_actor);
            }
            if (data.signal_actor != null) {
                message.signal_actor = ToRunner.SignalActor.fromObject(data.signal_actor);
            }
            if (data.kv != null) {
                message.kv = dependency_1.rivet.pegboard.kv.Response.fromObject(data.kv);
            }
            return message;
        }
        toObject() {
            const data: {
                init?: ReturnType<typeof ToRunner.Init.prototype.toObject>;
                pong?: ReturnType<typeof ToRunner.Pong.prototype.toObject>;
                close?: ReturnType<typeof ToRunner.Close.prototype.toObject>;
                start_actor?: ReturnType<typeof ToRunner.StartActor.prototype.toObject>;
                signal_actor?: ReturnType<typeof ToRunner.SignalActor.prototype.toObject>;
                kv?: ReturnType<typeof dependency_1.rivet.pegboard.kv.Response.prototype.toObject>;
            } = {};
            if (this.init != null) {
                data.init = this.init.toObject();
            }
            if (this.pong != null) {
                data.pong = this.pong.toObject();
            }
            if (this.close != null) {
                data.close = this.close.toObject();
            }
            if (this.start_actor != null) {
                data.start_actor = this.start_actor.toObject();
            }
            if (this.signal_actor != null) {
                data.signal_actor = this.signal_actor.toObject();
            }
            if (this.kv != null) {
                data.kv = this.kv.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_init)
                writer.writeMessage(1, this.init, () => this.init.serialize(writer));
            if (this.has_pong)
                writer.writeMessage(2, this.pong, () => this.pong.serialize(writer));
            if (this.has_close)
                writer.writeMessage(3, this.close, () => this.close.serialize(writer));
            if (this.has_start_actor)
                writer.writeMessage(4, this.start_actor, () => this.start_actor.serialize(writer));
            if (this.has_signal_actor)
                writer.writeMessage(5, this.signal_actor, () => this.signal_actor.serialize(writer));
            if (this.has_kv)
                writer.writeMessage(6, this.kv, () => this.kv.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToRunner {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToRunner();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.init, () => message.init = ToRunner.Init.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.pong, () => message.pong = ToRunner.Pong.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.close, () => message.close = ToRunner.Close.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.start_actor, () => message.start_actor = ToRunner.StartActor.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.signal_actor, () => message.signal_actor = ToRunner.SignalActor.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.kv, () => message.kv = dependency_1.rivet.pegboard.kv.Response.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToRunner {
            return ToRunner.deserialize(bytes);
        }
    }
    export namespace ToRunner {
        export class Init extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                input?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("input" in data && data.input != undefined) {
                        this.input = data.input;
                    }
                }
            }
            get input() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set input(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                input?: Uint8Array;
            }): Init {
                const message = new Init({});
                if (data.input != null) {
                    message.input = data.input;
                }
                return message;
            }
            toObject() {
                const data: {
                    input?: Uint8Array;
                } = {};
                if (this.input != null) {
                    data.input = this.input;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.input.length)
                    writer.writeBytes(1, this.input);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Init {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Init();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.input = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Init {
                return Init.deserialize(bytes);
            }
        }
        export class Pong extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Pong {
                const message = new Pong({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pong {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pong();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Pong {
                return Pong.deserialize(bytes);
            }
        }
        export class Close extends pb_1.Message {
            #one_of_decls: number[][] = [[1]];
            constructor(data?: any[] | ({} & (({
                reason?: string;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("reason" in data && data.reason != undefined) {
                        this.reason = data.reason;
                    }
                }
            }
            get reason() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set reason(value: string) {
                pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
            }
            get has_reason() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get _reason() {
                const cases: {
                    [index: number]: "none" | "reason";
                } = {
                    0: "none",
                    1: "reason"
                };
                return cases[pb_1.Message.computeOneofCase(this, [1])];
            }
            static fromObject(data: {
                reason?: string;
            }): Close {
                const message = new Close({});
                if (data.reason != null) {
                    message.reason = data.reason;
                }
                return message;
            }
            toObject() {
                const data: {
                    reason?: string;
                } = {};
                if (this.reason != null) {
                    data.reason = this.reason;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_reason)
                    writer.writeString(1, this.reason);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Close {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Close();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.reason = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Close {
                return Close.deserialize(bytes);
            }
        }
        export class StartActor extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                actor_id?: string;
                generation?: number;
                env?: Map<string, string>;
                metadata?: ActorMetadata;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("actor_id" in data && data.actor_id != undefined) {
                        this.actor_id = data.actor_id;
                    }
                    if ("generation" in data && data.generation != undefined) {
                        this.generation = data.generation;
                    }
                    if ("env" in data && data.env != undefined) {
                        this.env = data.env;
                    }
                    if ("metadata" in data && data.metadata != undefined) {
                        this.metadata = data.metadata;
                    }
                }
                if (!this.env)
                    this.env = new Map();
            }
            get actor_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set actor_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get generation() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set generation(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get env() {
                return pb_1.Message.getField(this, 3) as any as Map<string, string>;
            }
            set env(value: Map<string, string>) {
                pb_1.Message.setField(this, 3, value as any);
            }
            get metadata() {
                return pb_1.Message.getWrapperField(this, ActorMetadata, 4) as ActorMetadata;
            }
            set metadata(value: ActorMetadata) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_metadata() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                actor_id?: string;
                generation?: number;
                env?: {
                    [key: string]: string;
                };
                metadata?: ReturnType<typeof ActorMetadata.prototype.toObject>;
            }): StartActor {
                const message = new StartActor({});
                if (data.actor_id != null) {
                    message.actor_id = data.actor_id;
                }
                if (data.generation != null) {
                    message.generation = data.generation;
                }
                if (typeof data.env == "object") {
                    message.env = new Map(Object.entries(data.env));
                }
                if (data.metadata != null) {
                    message.metadata = ActorMetadata.fromObject(data.metadata);
                }
                return message;
            }
            toObject() {
                const data: {
                    actor_id?: string;
                    generation?: number;
                    env?: {
                        [key: string]: string;
                    };
                    metadata?: ReturnType<typeof ActorMetadata.prototype.toObject>;
                } = {};
                if (this.actor_id != null) {
                    data.actor_id = this.actor_id;
                }
                if (this.generation != null) {
                    data.generation = this.generation;
                }
                if (this.env != null) {
                    data.env = (Object.fromEntries)(this.env);
                }
                if (this.metadata != null) {
                    data.metadata = this.metadata.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.actor_id.length)
                    writer.writeString(1, this.actor_id);
                if (this.generation != 0)
                    writer.writeUint32(2, this.generation);
                for (const [key, value] of this.env) {
                    writer.writeMessage(3, this.env, () => {
                        writer.writeString(1, key);
                        writer.writeString(2, value);
                    });
                }
                if (this.has_metadata)
                    writer.writeMessage(4, this.metadata, () => this.metadata.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartActor {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartActor();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.actor_id = reader.readString();
                            break;
                        case 2:
                            message.generation = reader.readUint32();
                            break;
                        case 3:
                            reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.env as any, reader, reader.readString, reader.readString));
                            break;
                        case 4:
                            reader.readMessage(message.metadata, () => message.metadata = ActorMetadata.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): StartActor {
                return StartActor.deserialize(bytes);
            }
        }
        export class SignalActor extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                actor_id?: string;
                generation?: number;
                signal?: number;
                persist_storage?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("actor_id" in data && data.actor_id != undefined) {
                        this.actor_id = data.actor_id;
                    }
                    if ("generation" in data && data.generation != undefined) {
                        this.generation = data.generation;
                    }
                    if ("signal" in data && data.signal != undefined) {
                        this.signal = data.signal;
                    }
                    if ("persist_storage" in data && data.persist_storage != undefined) {
                        this.persist_storage = data.persist_storage;
                    }
                }
            }
            get actor_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set actor_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get generation() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set generation(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get signal() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set signal(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get persist_storage() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set persist_storage(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                actor_id?: string;
                generation?: number;
                signal?: number;
                persist_storage?: boolean;
            }): SignalActor {
                const message = new SignalActor({});
                if (data.actor_id != null) {
                    message.actor_id = data.actor_id;
                }
                if (data.generation != null) {
                    message.generation = data.generation;
                }
                if (data.signal != null) {
                    message.signal = data.signal;
                }
                if (data.persist_storage != null) {
                    message.persist_storage = data.persist_storage;
                }
                return message;
            }
            toObject() {
                const data: {
                    actor_id?: string;
                    generation?: number;
                    signal?: number;
                    persist_storage?: boolean;
                } = {};
                if (this.actor_id != null) {
                    data.actor_id = this.actor_id;
                }
                if (this.generation != null) {
                    data.generation = this.generation;
                }
                if (this.signal != null) {
                    data.signal = this.signal;
                }
                if (this.persist_storage != null) {
                    data.persist_storage = this.persist_storage;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.actor_id.length)
                    writer.writeString(1, this.actor_id);
                if (this.generation != 0)
                    writer.writeUint32(2, this.generation);
                if (this.signal != 0)
                    writer.writeInt32(3, this.signal);
                if (this.persist_storage != false)
                    writer.writeBool(4, this.persist_storage);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignalActor {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignalActor();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.actor_id = reader.readString();
                            break;
                        case 2:
                            message.generation = reader.readUint32();
                            break;
                        case 3:
                            message.signal = reader.readInt32();
                            break;
                        case 4:
                            message.persist_storage = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SignalActor {
                return SignalActor.deserialize(bytes);
            }
        }
    }
    export class ActorMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            actor?: ActorMetadata.Actor;
            network?: ActorMetadata.Network;
            project?: ActorMetadata.Project;
            environment?: ActorMetadata.Environment;
            datacenter?: ActorMetadata.Datacenter;
            cluster?: ActorMetadata.Cluster;
            build?: ActorMetadata.Build;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("actor" in data && data.actor != undefined) {
                    this.actor = data.actor;
                }
                if ("network" in data && data.network != undefined) {
                    this.network = data.network;
                }
                if ("project" in data && data.project != undefined) {
                    this.project = data.project;
                }
                if ("environment" in data && data.environment != undefined) {
                    this.environment = data.environment;
                }
                if ("datacenter" in data && data.datacenter != undefined) {
                    this.datacenter = data.datacenter;
                }
                if ("cluster" in data && data.cluster != undefined) {
                    this.cluster = data.cluster;
                }
                if ("build" in data && data.build != undefined) {
                    this.build = data.build;
                }
            }
        }
        get actor() {
            return pb_1.Message.getWrapperField(this, ActorMetadata.Actor, 1) as ActorMetadata.Actor;
        }
        set actor(value: ActorMetadata.Actor) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_actor() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get network() {
            return pb_1.Message.getWrapperField(this, ActorMetadata.Network, 2) as ActorMetadata.Network;
        }
        set network(value: ActorMetadata.Network) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_network() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get project() {
            return pb_1.Message.getWrapperField(this, ActorMetadata.Project, 3) as ActorMetadata.Project;
        }
        set project(value: ActorMetadata.Project) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_project() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get environment() {
            return pb_1.Message.getWrapperField(this, ActorMetadata.Environment, 4) as ActorMetadata.Environment;
        }
        set environment(value: ActorMetadata.Environment) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_environment() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get datacenter() {
            return pb_1.Message.getWrapperField(this, ActorMetadata.Datacenter, 5) as ActorMetadata.Datacenter;
        }
        set datacenter(value: ActorMetadata.Datacenter) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_datacenter() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get cluster() {
            return pb_1.Message.getWrapperField(this, ActorMetadata.Cluster, 6) as ActorMetadata.Cluster;
        }
        set cluster(value: ActorMetadata.Cluster) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_cluster() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get build() {
            return pb_1.Message.getWrapperField(this, ActorMetadata.Build, 7) as ActorMetadata.Build;
        }
        set build(value: ActorMetadata.Build) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_build() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            actor?: ReturnType<typeof ActorMetadata.Actor.prototype.toObject>;
            network?: ReturnType<typeof ActorMetadata.Network.prototype.toObject>;
            project?: ReturnType<typeof ActorMetadata.Project.prototype.toObject>;
            environment?: ReturnType<typeof ActorMetadata.Environment.prototype.toObject>;
            datacenter?: ReturnType<typeof ActorMetadata.Datacenter.prototype.toObject>;
            cluster?: ReturnType<typeof ActorMetadata.Cluster.prototype.toObject>;
            build?: ReturnType<typeof ActorMetadata.Build.prototype.toObject>;
        }): ActorMetadata {
            const message = new ActorMetadata({});
            if (data.actor != null) {
                message.actor = ActorMetadata.Actor.fromObject(data.actor);
            }
            if (data.network != null) {
                message.network = ActorMetadata.Network.fromObject(data.network);
            }
            if (data.project != null) {
                message.project = ActorMetadata.Project.fromObject(data.project);
            }
            if (data.environment != null) {
                message.environment = ActorMetadata.Environment.fromObject(data.environment);
            }
            if (data.datacenter != null) {
                message.datacenter = ActorMetadata.Datacenter.fromObject(data.datacenter);
            }
            if (data.cluster != null) {
                message.cluster = ActorMetadata.Cluster.fromObject(data.cluster);
            }
            if (data.build != null) {
                message.build = ActorMetadata.Build.fromObject(data.build);
            }
            return message;
        }
        toObject() {
            const data: {
                actor?: ReturnType<typeof ActorMetadata.Actor.prototype.toObject>;
                network?: ReturnType<typeof ActorMetadata.Network.prototype.toObject>;
                project?: ReturnType<typeof ActorMetadata.Project.prototype.toObject>;
                environment?: ReturnType<typeof ActorMetadata.Environment.prototype.toObject>;
                datacenter?: ReturnType<typeof ActorMetadata.Datacenter.prototype.toObject>;
                cluster?: ReturnType<typeof ActorMetadata.Cluster.prototype.toObject>;
                build?: ReturnType<typeof ActorMetadata.Build.prototype.toObject>;
            } = {};
            if (this.actor != null) {
                data.actor = this.actor.toObject();
            }
            if (this.network != null) {
                data.network = this.network.toObject();
            }
            if (this.project != null) {
                data.project = this.project.toObject();
            }
            if (this.environment != null) {
                data.environment = this.environment.toObject();
            }
            if (this.datacenter != null) {
                data.datacenter = this.datacenter.toObject();
            }
            if (this.cluster != null) {
                data.cluster = this.cluster.toObject();
            }
            if (this.build != null) {
                data.build = this.build.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_actor)
                writer.writeMessage(1, this.actor, () => this.actor.serialize(writer));
            if (this.has_network)
                writer.writeMessage(2, this.network, () => this.network.serialize(writer));
            if (this.has_project)
                writer.writeMessage(3, this.project, () => this.project.serialize(writer));
            if (this.has_environment)
                writer.writeMessage(4, this.environment, () => this.environment.serialize(writer));
            if (this.has_datacenter)
                writer.writeMessage(5, this.datacenter, () => this.datacenter.serialize(writer));
            if (this.has_cluster)
                writer.writeMessage(6, this.cluster, () => this.cluster.serialize(writer));
            if (this.has_build)
                writer.writeMessage(7, this.build, () => this.build.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActorMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActorMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.actor, () => message.actor = ActorMetadata.Actor.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.network, () => message.network = ActorMetadata.Network.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.project, () => message.project = ActorMetadata.Project.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.environment, () => message.environment = ActorMetadata.Environment.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.datacenter, () => message.datacenter = ActorMetadata.Datacenter.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.cluster, () => message.cluster = ActorMetadata.Cluster.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.build, () => message.build = ActorMetadata.Build.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActorMetadata {
            return ActorMetadata.deserialize(bytes);
        }
    }
    export namespace ActorMetadata {
        export class Actor extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                actor_id?: string;
                tags?: Map<string, string>;
                create_ts?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("actor_id" in data && data.actor_id != undefined) {
                        this.actor_id = data.actor_id;
                    }
                    if ("tags" in data && data.tags != undefined) {
                        this.tags = data.tags;
                    }
                    if ("create_ts" in data && data.create_ts != undefined) {
                        this.create_ts = data.create_ts;
                    }
                }
                if (!this.tags)
                    this.tags = new Map();
            }
            get actor_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set actor_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get tags() {
                return pb_1.Message.getField(this, 2) as any as Map<string, string>;
            }
            set tags(value: Map<string, string>) {
                pb_1.Message.setField(this, 2, value as any);
            }
            get create_ts() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set create_ts(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                actor_id?: string;
                tags?: {
                    [key: string]: string;
                };
                create_ts?: number;
            }): Actor {
                const message = new Actor({});
                if (data.actor_id != null) {
                    message.actor_id = data.actor_id;
                }
                if (typeof data.tags == "object") {
                    message.tags = new Map(Object.entries(data.tags));
                }
                if (data.create_ts != null) {
                    message.create_ts = data.create_ts;
                }
                return message;
            }
            toObject() {
                const data: {
                    actor_id?: string;
                    tags?: {
                        [key: string]: string;
                    };
                    create_ts?: number;
                } = {};
                if (this.actor_id != null) {
                    data.actor_id = this.actor_id;
                }
                if (this.tags != null) {
                    data.tags = (Object.fromEntries)(this.tags);
                }
                if (this.create_ts != null) {
                    data.create_ts = this.create_ts;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.actor_id.length)
                    writer.writeString(1, this.actor_id);
                for (const [key, value] of this.tags) {
                    writer.writeMessage(2, this.tags, () => {
                        writer.writeString(1, key);
                        writer.writeString(2, value);
                    });
                }
                if (this.create_ts != 0)
                    writer.writeInt64(3, this.create_ts);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Actor {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Actor();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.actor_id = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tags as any, reader, reader.readString, reader.readString));
                            break;
                        case 3:
                            message.create_ts = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Actor {
                return Actor.deserialize(bytes);
            }
        }
        export class Network extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                ports?: Map<string, Port>;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("ports" in data && data.ports != undefined) {
                        this.ports = data.ports;
                    }
                }
                if (!this.ports)
                    this.ports = new Map();
            }
            get ports() {
                return pb_1.Message.getField(this, 1) as any as Map<string, Port>;
            }
            set ports(value: Map<string, Port>) {
                pb_1.Message.setField(this, 1, value as any);
            }
            static fromObject(data: {
                ports?: {
                    [key: string]: ReturnType<typeof Port.prototype.toObject>;
                };
            }): Network {
                const message = new Network({});
                if (typeof data.ports == "object") {
                    message.ports = new Map(Object.entries(data.ports).map(([key, value]) => [key, Port.fromObject(value)]));
                }
                return message;
            }
            toObject() {
                const data: {
                    ports?: {
                        [key: string]: ReturnType<typeof Port.prototype.toObject>;
                    };
                } = {};
                if (this.ports != null) {
                    data.ports = (Object.fromEntries)((Array.from)(this.ports).map(([key, value]) => [key, value.toObject()]));
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                for (const [key, value] of this.ports) {
                    writer.writeMessage(1, this.ports, () => {
                        writer.writeString(1, key);
                        writer.writeMessage(2, value, () => value.serialize(writer));
                    });
                }
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Network {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Network();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.ports as any, reader, reader.readString, () => {
                                let value;
                                reader.readMessage(message, () => value = Port.deserialize(reader));
                                return value;
                            }));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Network {
                return Network.deserialize(bytes);
            }
        }
        export class Project extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                project_id?: string;
                slug?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("project_id" in data && data.project_id != undefined) {
                        this.project_id = data.project_id;
                    }
                    if ("slug" in data && data.slug != undefined) {
                        this.slug = data.slug;
                    }
                }
            }
            get project_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set project_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get slug() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set slug(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                project_id?: string;
                slug?: string;
            }): Project {
                const message = new Project({});
                if (data.project_id != null) {
                    message.project_id = data.project_id;
                }
                if (data.slug != null) {
                    message.slug = data.slug;
                }
                return message;
            }
            toObject() {
                const data: {
                    project_id?: string;
                    slug?: string;
                } = {};
                if (this.project_id != null) {
                    data.project_id = this.project_id;
                }
                if (this.slug != null) {
                    data.slug = this.slug;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.project_id.length)
                    writer.writeString(1, this.project_id);
                if (this.slug.length)
                    writer.writeString(2, this.slug);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Project {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Project();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.project_id = reader.readString();
                            break;
                        case 2:
                            message.slug = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Project {
                return Project.deserialize(bytes);
            }
        }
        export class Environment extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                env_id?: string;
                slug?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("env_id" in data && data.env_id != undefined) {
                        this.env_id = data.env_id;
                    }
                    if ("slug" in data && data.slug != undefined) {
                        this.slug = data.slug;
                    }
                }
            }
            get env_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set env_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get slug() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set slug(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                env_id?: string;
                slug?: string;
            }): Environment {
                const message = new Environment({});
                if (data.env_id != null) {
                    message.env_id = data.env_id;
                }
                if (data.slug != null) {
                    message.slug = data.slug;
                }
                return message;
            }
            toObject() {
                const data: {
                    env_id?: string;
                    slug?: string;
                } = {};
                if (this.env_id != null) {
                    data.env_id = this.env_id;
                }
                if (this.slug != null) {
                    data.slug = this.slug;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.env_id.length)
                    writer.writeString(1, this.env_id);
                if (this.slug.length)
                    writer.writeString(2, this.slug);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Environment {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Environment();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.env_id = reader.readString();
                            break;
                        case 2:
                            message.slug = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Environment {
                return Environment.deserialize(bytes);
            }
        }
        export class Datacenter extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                name_id?: string;
                display_name?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name_id" in data && data.name_id != undefined) {
                        this.name_id = data.name_id;
                    }
                    if ("display_name" in data && data.display_name != undefined) {
                        this.display_name = data.display_name;
                    }
                }
            }
            get name_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get display_name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set display_name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                name_id?: string;
                display_name?: string;
            }): Datacenter {
                const message = new Datacenter({});
                if (data.name_id != null) {
                    message.name_id = data.name_id;
                }
                if (data.display_name != null) {
                    message.display_name = data.display_name;
                }
                return message;
            }
            toObject() {
                const data: {
                    name_id?: string;
                    display_name?: string;
                } = {};
                if (this.name_id != null) {
                    data.name_id = this.name_id;
                }
                if (this.display_name != null) {
                    data.display_name = this.display_name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name_id.length)
                    writer.writeString(1, this.name_id);
                if (this.display_name.length)
                    writer.writeString(2, this.display_name);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Datacenter {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Datacenter();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name_id = reader.readString();
                            break;
                        case 2:
                            message.display_name = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Datacenter {
                return Datacenter.deserialize(bytes);
            }
        }
        export class Cluster extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                cluster_id?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("cluster_id" in data && data.cluster_id != undefined) {
                        this.cluster_id = data.cluster_id;
                    }
                }
            }
            get cluster_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set cluster_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                cluster_id?: string;
            }): Cluster {
                const message = new Cluster({});
                if (data.cluster_id != null) {
                    message.cluster_id = data.cluster_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    cluster_id?: string;
                } = {};
                if (this.cluster_id != null) {
                    data.cluster_id = this.cluster_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.cluster_id.length)
                    writer.writeString(1, this.cluster_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Cluster {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Cluster();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.cluster_id = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Cluster {
                return Cluster.deserialize(bytes);
            }
        }
        export class Build extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                build_id?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("build_id" in data && data.build_id != undefined) {
                        this.build_id = data.build_id;
                    }
                }
            }
            get build_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set build_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                build_id?: string;
            }): Build {
                const message = new Build({});
                if (data.build_id != null) {
                    message.build_id = data.build_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    build_id?: string;
                } = {};
                if (this.build_id != null) {
                    data.build_id = this.build_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.build_id.length)
                    writer.writeString(1, this.build_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Build {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Build();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.build_id = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Build {
                return Build.deserialize(bytes);
            }
        }
    }
    export class Port extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3], [4]];
        constructor(data?: any[] | ({
            routing?: Routing;
        } & (({
            internal_port?: number;
        }) | ({
            public_hostname?: string;
        }) | ({
            public_port?: number;
        }) | ({
            public_path?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("internal_port" in data && data.internal_port != undefined) {
                    this.internal_port = data.internal_port;
                }
                if ("public_hostname" in data && data.public_hostname != undefined) {
                    this.public_hostname = data.public_hostname;
                }
                if ("public_port" in data && data.public_port != undefined) {
                    this.public_port = data.public_port;
                }
                if ("public_path" in data && data.public_path != undefined) {
                    this.public_path = data.public_path;
                }
                if ("routing" in data && data.routing != undefined) {
                    this.routing = data.routing;
                }
            }
        }
        get internal_port() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set internal_port(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_internal_port() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get public_hostname() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set public_hostname(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_public_hostname() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get public_port() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set public_port(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_public_port() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get public_path() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set public_path(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
        }
        get has_public_path() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get routing() {
            return pb_1.Message.getWrapperField(this, Routing, 5) as Routing;
        }
        set routing(value: Routing) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_routing() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _internal_port() {
            const cases: {
                [index: number]: "none" | "internal_port";
            } = {
                0: "none",
                1: "internal_port"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _public_hostname() {
            const cases: {
                [index: number]: "none" | "public_hostname";
            } = {
                0: "none",
                2: "public_hostname"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _public_port() {
            const cases: {
                [index: number]: "none" | "public_port";
            } = {
                0: "none",
                3: "public_port"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _public_path() {
            const cases: {
                [index: number]: "none" | "public_path";
            } = {
                0: "none",
                4: "public_path"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            internal_port?: number;
            public_hostname?: string;
            public_port?: number;
            public_path?: string;
            routing?: ReturnType<typeof Routing.prototype.toObject>;
        }): Port {
            const message = new Port({});
            if (data.internal_port != null) {
                message.internal_port = data.internal_port;
            }
            if (data.public_hostname != null) {
                message.public_hostname = data.public_hostname;
            }
            if (data.public_port != null) {
                message.public_port = data.public_port;
            }
            if (data.public_path != null) {
                message.public_path = data.public_path;
            }
            if (data.routing != null) {
                message.routing = Routing.fromObject(data.routing);
            }
            return message;
        }
        toObject() {
            const data: {
                internal_port?: number;
                public_hostname?: string;
                public_port?: number;
                public_path?: string;
                routing?: ReturnType<typeof Routing.prototype.toObject>;
            } = {};
            if (this.internal_port != null) {
                data.internal_port = this.internal_port;
            }
            if (this.public_hostname != null) {
                data.public_hostname = this.public_hostname;
            }
            if (this.public_port != null) {
                data.public_port = this.public_port;
            }
            if (this.public_path != null) {
                data.public_path = this.public_path;
            }
            if (this.routing != null) {
                data.routing = this.routing.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_internal_port)
                writer.writeInt32(1, this.internal_port);
            if (this.has_public_hostname)
                writer.writeString(2, this.public_hostname);
            if (this.has_public_port)
                writer.writeInt32(3, this.public_port);
            if (this.has_public_path)
                writer.writeString(4, this.public_path);
            if (this.has_routing)
                writer.writeMessage(5, this.routing, () => this.routing.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Port {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Port();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.internal_port = reader.readInt32();
                        break;
                    case 2:
                        message.public_hostname = reader.readString();
                        break;
                    case 3:
                        message.public_port = reader.readInt32();
                        break;
                    case 4:
                        message.public_path = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.routing, () => message.routing = Routing.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Port {
            return Port.deserialize(bytes);
        }
    }
    export class Routing extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            game_guard?: Routing.GameGuard;
            host?: never;
        } | {
            game_guard?: never;
            host?: Routing.Host;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("game_guard" in data && data.game_guard != undefined) {
                    this.game_guard = data.game_guard;
                }
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
            }
        }
        get game_guard() {
            return pb_1.Message.getWrapperField(this, Routing.GameGuard, 1) as Routing.GameGuard;
        }
        set game_guard(value: Routing.GameGuard) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_game_guard() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get host() {
            return pb_1.Message.getWrapperField(this, Routing.Host, 2) as Routing.Host;
        }
        set host(value: Routing.Host) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_host() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get routing() {
            const cases: {
                [index: number]: "none" | "game_guard" | "host";
            } = {
                0: "none",
                1: "game_guard",
                2: "host"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            game_guard?: ReturnType<typeof Routing.GameGuard.prototype.toObject>;
            host?: ReturnType<typeof Routing.Host.prototype.toObject>;
        }): Routing {
            const message = new Routing({});
            if (data.game_guard != null) {
                message.game_guard = Routing.GameGuard.fromObject(data.game_guard);
            }
            if (data.host != null) {
                message.host = Routing.Host.fromObject(data.host);
            }
            return message;
        }
        toObject() {
            const data: {
                game_guard?: ReturnType<typeof Routing.GameGuard.prototype.toObject>;
                host?: ReturnType<typeof Routing.Host.prototype.toObject>;
            } = {};
            if (this.game_guard != null) {
                data.game_guard = this.game_guard.toObject();
            }
            if (this.host != null) {
                data.host = this.host.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_game_guard)
                writer.writeMessage(1, this.game_guard, () => this.game_guard.serialize(writer));
            if (this.has_host)
                writer.writeMessage(2, this.host, () => this.host.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Routing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Routing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.game_guard, () => message.game_guard = Routing.GameGuard.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.host, () => message.host = Routing.Host.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Routing {
            return Routing.deserialize(bytes);
        }
    }
    export namespace Routing {
        export class GameGuard extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                protocol?: GameGuardProtocol;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("protocol" in data && data.protocol != undefined) {
                        this.protocol = data.protocol;
                    }
                }
            }
            get protocol() {
                return pb_1.Message.getFieldWithDefault(this, 1, GameGuardProtocol.GG_HTTP) as GameGuardProtocol;
            }
            set protocol(value: GameGuardProtocol) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                protocol?: GameGuardProtocol;
            }): GameGuard {
                const message = new GameGuard({});
                if (data.protocol != null) {
                    message.protocol = data.protocol;
                }
                return message;
            }
            toObject() {
                const data: {
                    protocol?: GameGuardProtocol;
                } = {};
                if (this.protocol != null) {
                    data.protocol = this.protocol;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.protocol != GameGuardProtocol.GG_HTTP)
                    writer.writeEnum(1, this.protocol);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameGuard {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameGuard();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.protocol = reader.readEnum();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): GameGuard {
                return GameGuard.deserialize(bytes);
            }
        }
        export class Host extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                protocol?: HostProtocol;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("protocol" in data && data.protocol != undefined) {
                        this.protocol = data.protocol;
                    }
                }
            }
            get protocol() {
                return pb_1.Message.getFieldWithDefault(this, 1, HostProtocol.HOST_TCP) as HostProtocol;
            }
            set protocol(value: HostProtocol) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                protocol?: HostProtocol;
            }): Host {
                const message = new Host({});
                if (data.protocol != null) {
                    message.protocol = data.protocol;
                }
                return message;
            }
            toObject() {
                const data: {
                    protocol?: HostProtocol;
                } = {};
                if (this.protocol != null) {
                    data.protocol = this.protocol;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.protocol != HostProtocol.HOST_TCP)
                    writer.writeEnum(1, this.protocol);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Host {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Host();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.protocol = reader.readEnum();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Host {
                return Host.deserialize(bytes);
            }
        }
    }
    export class ActorState extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            running?: ActorState.Running;
            exited?: never;
        } | {
            running?: never;
            exited?: ActorState.Exited;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("running" in data && data.running != undefined) {
                    this.running = data.running;
                }
                if ("exited" in data && data.exited != undefined) {
                    this.exited = data.exited;
                }
            }
        }
        get running() {
            return pb_1.Message.getWrapperField(this, ActorState.Running, 1) as ActorState.Running;
        }
        set running(value: ActorState.Running) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_running() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get exited() {
            return pb_1.Message.getWrapperField(this, ActorState.Exited, 2) as ActorState.Exited;
        }
        set exited(value: ActorState.Exited) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_exited() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get state() {
            const cases: {
                [index: number]: "none" | "running" | "exited";
            } = {
                0: "none",
                1: "running",
                2: "exited"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            running?: ReturnType<typeof ActorState.Running.prototype.toObject>;
            exited?: ReturnType<typeof ActorState.Exited.prototype.toObject>;
        }): ActorState {
            const message = new ActorState({});
            if (data.running != null) {
                message.running = ActorState.Running.fromObject(data.running);
            }
            if (data.exited != null) {
                message.exited = ActorState.Exited.fromObject(data.exited);
            }
            return message;
        }
        toObject() {
            const data: {
                running?: ReturnType<typeof ActorState.Running.prototype.toObject>;
                exited?: ReturnType<typeof ActorState.Exited.prototype.toObject>;
            } = {};
            if (this.running != null) {
                data.running = this.running.toObject();
            }
            if (this.exited != null) {
                data.exited = this.exited.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_running)
                writer.writeMessage(1, this.running, () => this.running.serialize(writer));
            if (this.has_exited)
                writer.writeMessage(2, this.exited, () => this.exited.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActorState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActorState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.running, () => message.running = ActorState.Running.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.exited, () => message.exited = ActorState.Exited.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActorState {
            return ActorState.deserialize(bytes);
        }
    }
    export namespace ActorState {
        export class Running extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Running {
                const message = new Running({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Running {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Running();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Running {
                return Running.deserialize(bytes);
            }
        }
        export class Exited extends pb_1.Message {
            #one_of_decls: number[][] = [[1]];
            constructor(data?: any[] | ({} & (({
                exit_code?: number;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("exit_code" in data && data.exit_code != undefined) {
                        this.exit_code = data.exit_code;
                    }
                }
            }
            get exit_code() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set exit_code(value: number) {
                pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
            }
            get has_exit_code() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get _exit_code() {
                const cases: {
                    [index: number]: "none" | "exit_code";
                } = {
                    0: "none",
                    1: "exit_code"
                };
                return cases[pb_1.Message.computeOneofCase(this, [1])];
            }
            static fromObject(data: {
                exit_code?: number;
            }): Exited {
                const message = new Exited({});
                if (data.exit_code != null) {
                    message.exit_code = data.exit_code;
                }
                return message;
            }
            toObject() {
                const data: {
                    exit_code?: number;
                } = {};
                if (this.exit_code != null) {
                    data.exit_code = this.exit_code;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_exit_code)
                    writer.writeInt32(1, this.exit_code);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Exited {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Exited();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.exit_code = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Exited {
                return Exited.deserialize(bytes);
            }
        }
    }
}
