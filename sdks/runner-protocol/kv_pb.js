// source: kv.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.rivet.pegboard.kv.Entry', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Key', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.ListQuery', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.ListQuery.All', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.ListQuery.KindCase', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.ListQuery.Prefix', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.ListQuery.Range', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Metadata', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Request', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Request.DataCase', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Request.Delete', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Request.Drop', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Request.Get', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Request.List', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Request.Put', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Response', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Response.DataCase', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Response.Delete', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Response.Drop', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Response.Error', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Response.Get', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Response.List', null, global);
goog.exportSymbol('proto.rivet.pegboard.kv.Response.Put', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rivet.pegboard.kv.Request.oneofGroups_);
};
goog.inherits(proto.rivet.pegboard.kv.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Request.displayName = 'proto.rivet.pegboard.kv.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Request.Get = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rivet.pegboard.kv.Request.Get.repeatedFields_, null);
};
goog.inherits(proto.rivet.pegboard.kv.Request.Get, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Request.Get.displayName = 'proto.rivet.pegboard.kv.Request.Get';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Request.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.kv.Request.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Request.List.displayName = 'proto.rivet.pegboard.kv.Request.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Request.Put = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rivet.pegboard.kv.Request.Put.repeatedFields_, null);
};
goog.inherits(proto.rivet.pegboard.kv.Request.Put, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Request.Put.displayName = 'proto.rivet.pegboard.kv.Request.Put';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Request.Delete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rivet.pegboard.kv.Request.Delete.repeatedFields_, null);
};
goog.inherits(proto.rivet.pegboard.kv.Request.Delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Request.Delete.displayName = 'proto.rivet.pegboard.kv.Request.Delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Request.Drop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.kv.Request.Drop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Request.Drop.displayName = 'proto.rivet.pegboard.kv.Request.Drop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rivet.pegboard.kv.Response.oneofGroups_);
};
goog.inherits(proto.rivet.pegboard.kv.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Response.displayName = 'proto.rivet.pegboard.kv.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Response.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.kv.Response.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Response.Error.displayName = 'proto.rivet.pegboard.kv.Response.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Response.Get = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rivet.pegboard.kv.Response.Get.repeatedFields_, null);
};
goog.inherits(proto.rivet.pegboard.kv.Response.Get, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Response.Get.displayName = 'proto.rivet.pegboard.kv.Response.Get';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Response.List = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rivet.pegboard.kv.Response.List.repeatedFields_, null);
};
goog.inherits(proto.rivet.pegboard.kv.Response.List, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Response.List.displayName = 'proto.rivet.pegboard.kv.Response.List';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Response.Put = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.kv.Response.Put, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Response.Put.displayName = 'proto.rivet.pegboard.kv.Response.Put';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Response.Delete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.kv.Response.Delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Response.Delete.displayName = 'proto.rivet.pegboard.kv.Response.Delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Response.Drop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.kv.Response.Drop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Response.Drop.displayName = 'proto.rivet.pegboard.kv.Response.Drop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rivet.pegboard.kv.Key.repeatedFields_, null);
};
goog.inherits(proto.rivet.pegboard.kv.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Key.displayName = 'proto.rivet.pegboard.kv.Key';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.kv.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Entry.displayName = 'proto.rivet.pegboard.kv.Entry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.kv.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.Metadata.displayName = 'proto.rivet.pegboard.kv.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.ListQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rivet.pegboard.kv.ListQuery.oneofGroups_);
};
goog.inherits(proto.rivet.pegboard.kv.ListQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.ListQuery.displayName = 'proto.rivet.pegboard.kv.ListQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.ListQuery.All = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.kv.ListQuery.All, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.ListQuery.All.displayName = 'proto.rivet.pegboard.kv.ListQuery.All';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.ListQuery.Range = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.kv.ListQuery.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.ListQuery.Range.displayName = 'proto.rivet.pegboard.kv.ListQuery.Range';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.kv.ListQuery.Prefix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.kv.ListQuery.Prefix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.kv.ListQuery.Prefix.displayName = 'proto.rivet.pegboard.kv.ListQuery.Prefix';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rivet.pegboard.kv.Request.oneofGroups_ = [[4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.rivet.pegboard.kv.Request.DataCase = {
  DATA_NOT_SET: 0,
  GET: 4,
  LIST: 5,
  PUT: 6,
  DELETE: 7,
  DROP: 8
};

/**
 * @return {proto.rivet.pegboard.kv.Request.DataCase}
 */
proto.rivet.pegboard.kv.Request.prototype.getDataCase = function() {
  return /** @type {proto.rivet.pegboard.kv.Request.DataCase} */(jspb.Message.computeOneofCase(this, proto.rivet.pegboard.kv.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
actorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
generation: jspb.Message.getFieldWithDefault(msg, 2, 0),
requestId: jspb.Message.getFieldWithDefault(msg, 3, 0),
get: (f = msg.getGet()) && proto.rivet.pegboard.kv.Request.Get.toObject(includeInstance, f),
list: (f = msg.getList()) && proto.rivet.pegboard.kv.Request.List.toObject(includeInstance, f),
put: (f = msg.getPut()) && proto.rivet.pegboard.kv.Request.Put.toObject(includeInstance, f),
pb_delete: (f = msg.getDelete()) && proto.rivet.pegboard.kv.Request.Delete.toObject(includeInstance, f),
drop: (f = msg.getDrop()) && proto.rivet.pegboard.kv.Request.Drop.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Request}
 */
proto.rivet.pegboard.kv.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Request;
  return proto.rivet.pegboard.kv.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Request}
 */
proto.rivet.pegboard.kv.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGeneration(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 4:
      var value = new proto.rivet.pegboard.kv.Request.Get;
      reader.readMessage(value,proto.rivet.pegboard.kv.Request.Get.deserializeBinaryFromReader);
      msg.setGet(value);
      break;
    case 5:
      var value = new proto.rivet.pegboard.kv.Request.List;
      reader.readMessage(value,proto.rivet.pegboard.kv.Request.List.deserializeBinaryFromReader);
      msg.setList(value);
      break;
    case 6:
      var value = new proto.rivet.pegboard.kv.Request.Put;
      reader.readMessage(value,proto.rivet.pegboard.kv.Request.Put.deserializeBinaryFromReader);
      msg.setPut(value);
      break;
    case 7:
      var value = new proto.rivet.pegboard.kv.Request.Delete;
      reader.readMessage(value,proto.rivet.pegboard.kv.Request.Delete.deserializeBinaryFromReader);
      msg.setDelete(value);
      break;
    case 8:
      var value = new proto.rivet.pegboard.kv.Request.Drop;
      reader.readMessage(value,proto.rivet.pegboard.kv.Request.Drop.deserializeBinaryFromReader);
      msg.setDrop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeneration();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getGet();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rivet.pegboard.kv.Request.Get.serializeBinaryToWriter
    );
  }
  f = message.getList();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rivet.pegboard.kv.Request.List.serializeBinaryToWriter
    );
  }
  f = message.getPut();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rivet.pegboard.kv.Request.Put.serializeBinaryToWriter
    );
  }
  f = message.getDelete();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rivet.pegboard.kv.Request.Delete.serializeBinaryToWriter
    );
  }
  f = message.getDrop();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rivet.pegboard.kv.Request.Drop.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rivet.pegboard.kv.Request.Get.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Request.Get.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Request.Get.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Request.Get} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.Get.toObject = function(includeInstance, msg) {
  var f, obj = {
keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.rivet.pegboard.kv.Key.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Request.Get}
 */
proto.rivet.pegboard.kv.Request.Get.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Request.Get;
  return proto.rivet.pegboard.kv.Request.Get.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Request.Get} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Request.Get}
 */
proto.rivet.pegboard.kv.Request.Get.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.kv.Key;
      reader.readMessage(value,proto.rivet.pegboard.kv.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Request.Get.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Request.Get.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Request.Get} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.Get.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rivet.pegboard.kv.Key.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Key keys = 1;
 * @return {!Array<!proto.rivet.pegboard.kv.Key>}
 */
proto.rivet.pegboard.kv.Request.Get.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.rivet.pegboard.kv.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rivet.pegboard.kv.Key, 1));
};


/**
 * @param {!Array<!proto.rivet.pegboard.kv.Key>} value
 * @return {!proto.rivet.pegboard.kv.Request.Get} returns this
*/
proto.rivet.pegboard.kv.Request.Get.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rivet.pegboard.kv.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rivet.pegboard.kv.Key}
 */
proto.rivet.pegboard.kv.Request.Get.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rivet.pegboard.kv.Key, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rivet.pegboard.kv.Request.Get} returns this
 */
proto.rivet.pegboard.kv.Request.Get.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Request.List.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Request.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Request.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.List.toObject = function(includeInstance, msg) {
  var f, obj = {
query: (f = msg.getQuery()) && proto.rivet.pegboard.kv.ListQuery.toObject(includeInstance, f),
reverse: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
limit: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Request.List}
 */
proto.rivet.pegboard.kv.Request.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Request.List;
  return proto.rivet.pegboard.kv.Request.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Request.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Request.List}
 */
proto.rivet.pegboard.kv.Request.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.kv.ListQuery;
      reader.readMessage(value,proto.rivet.pegboard.kv.ListQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverse(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Request.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Request.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Request.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rivet.pegboard.kv.ListQuery.serializeBinaryToWriter
    );
  }
  f = message.getReverse();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional ListQuery query = 1;
 * @return {?proto.rivet.pegboard.kv.ListQuery}
 */
proto.rivet.pegboard.kv.Request.List.prototype.getQuery = function() {
  return /** @type{?proto.rivet.pegboard.kv.ListQuery} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.ListQuery, 1));
};


/**
 * @param {?proto.rivet.pegboard.kv.ListQuery|undefined} value
 * @return {!proto.rivet.pegboard.kv.Request.List} returns this
*/
proto.rivet.pegboard.kv.Request.List.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Request.List} returns this
 */
proto.rivet.pegboard.kv.Request.List.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Request.List.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool reverse = 2;
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Request.List.prototype.getReverse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rivet.pegboard.kv.Request.List} returns this
 */
proto.rivet.pegboard.kv.Request.List.prototype.setReverse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint64 limit = 3;
 * @return {number}
 */
proto.rivet.pegboard.kv.Request.List.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.kv.Request.List} returns this
 */
proto.rivet.pegboard.kv.Request.List.prototype.setLimit = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Request.List} returns this
 */
proto.rivet.pegboard.kv.Request.List.prototype.clearLimit = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Request.List.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rivet.pegboard.kv.Request.Put.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Request.Put.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Request.Put.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Request.Put} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.Put.toObject = function(includeInstance, msg) {
  var f, obj = {
keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.rivet.pegboard.kv.Key.toObject, includeInstance),
valuesList: msg.getValuesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Request.Put}
 */
proto.rivet.pegboard.kv.Request.Put.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Request.Put;
  return proto.rivet.pegboard.kv.Request.Put.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Request.Put} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Request.Put}
 */
proto.rivet.pegboard.kv.Request.Put.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.kv.Key;
      reader.readMessage(value,proto.rivet.pegboard.kv.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Request.Put.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Request.Put.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Request.Put} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.Put.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rivet.pegboard.kv.Key.serializeBinaryToWriter
    );
  }
  f = message.getValuesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * repeated Key keys = 1;
 * @return {!Array<!proto.rivet.pegboard.kv.Key>}
 */
proto.rivet.pegboard.kv.Request.Put.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.rivet.pegboard.kv.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rivet.pegboard.kv.Key, 1));
};


/**
 * @param {!Array<!proto.rivet.pegboard.kv.Key>} value
 * @return {!proto.rivet.pegboard.kv.Request.Put} returns this
*/
proto.rivet.pegboard.kv.Request.Put.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rivet.pegboard.kv.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rivet.pegboard.kv.Key}
 */
proto.rivet.pegboard.kv.Request.Put.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rivet.pegboard.kv.Key, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rivet.pegboard.kv.Request.Put} returns this
 */
proto.rivet.pegboard.kv.Request.Put.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * repeated bytes values = 2;
 * @return {!Array<string>}
 */
proto.rivet.pegboard.kv.Request.Put.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes values = 2;
 * This is a type-conversion wrapper around `getValuesList()`
 * @return {!Array<string>}
 */
proto.rivet.pegboard.kv.Request.Put.prototype.getValuesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getValuesList()));
};


/**
 * repeated bytes values = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValuesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.rivet.pegboard.kv.Request.Put.prototype.getValuesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getValuesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.rivet.pegboard.kv.Request.Put} returns this
 */
proto.rivet.pegboard.kv.Request.Put.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.rivet.pegboard.kv.Request.Put} returns this
 */
proto.rivet.pegboard.kv.Request.Put.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rivet.pegboard.kv.Request.Put} returns this
 */
proto.rivet.pegboard.kv.Request.Put.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rivet.pegboard.kv.Request.Delete.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Request.Delete.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Request.Delete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Request.Delete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.Delete.toObject = function(includeInstance, msg) {
  var f, obj = {
keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.rivet.pegboard.kv.Key.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Request.Delete}
 */
proto.rivet.pegboard.kv.Request.Delete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Request.Delete;
  return proto.rivet.pegboard.kv.Request.Delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Request.Delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Request.Delete}
 */
proto.rivet.pegboard.kv.Request.Delete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.kv.Key;
      reader.readMessage(value,proto.rivet.pegboard.kv.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Request.Delete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Request.Delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Request.Delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.Delete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rivet.pegboard.kv.Key.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Key keys = 1;
 * @return {!Array<!proto.rivet.pegboard.kv.Key>}
 */
proto.rivet.pegboard.kv.Request.Delete.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.rivet.pegboard.kv.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rivet.pegboard.kv.Key, 1));
};


/**
 * @param {!Array<!proto.rivet.pegboard.kv.Key>} value
 * @return {!proto.rivet.pegboard.kv.Request.Delete} returns this
*/
proto.rivet.pegboard.kv.Request.Delete.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rivet.pegboard.kv.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rivet.pegboard.kv.Key}
 */
proto.rivet.pegboard.kv.Request.Delete.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rivet.pegboard.kv.Key, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rivet.pegboard.kv.Request.Delete} returns this
 */
proto.rivet.pegboard.kv.Request.Delete.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Request.Drop.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Request.Drop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Request.Drop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.Drop.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Request.Drop}
 */
proto.rivet.pegboard.kv.Request.Drop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Request.Drop;
  return proto.rivet.pegboard.kv.Request.Drop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Request.Drop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Request.Drop}
 */
proto.rivet.pegboard.kv.Request.Drop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Request.Drop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Request.Drop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Request.Drop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Request.Drop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional string actor_id = 1;
 * @return {string}
 */
proto.rivet.pegboard.kv.Request.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.kv.Request} returns this
 */
proto.rivet.pegboard.kv.Request.prototype.setActorId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 generation = 2;
 * @return {number}
 */
proto.rivet.pegboard.kv.Request.prototype.getGeneration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.kv.Request} returns this
 */
proto.rivet.pegboard.kv.Request.prototype.setGeneration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 request_id = 3;
 * @return {number}
 */
proto.rivet.pegboard.kv.Request.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.kv.Request} returns this
 */
proto.rivet.pegboard.kv.Request.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Get get = 4;
 * @return {?proto.rivet.pegboard.kv.Request.Get}
 */
proto.rivet.pegboard.kv.Request.prototype.getGet = function() {
  return /** @type{?proto.rivet.pegboard.kv.Request.Get} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Request.Get, 4));
};


/**
 * @param {?proto.rivet.pegboard.kv.Request.Get|undefined} value
 * @return {!proto.rivet.pegboard.kv.Request} returns this
*/
proto.rivet.pegboard.kv.Request.prototype.setGet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rivet.pegboard.kv.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Request} returns this
 */
proto.rivet.pegboard.kv.Request.prototype.clearGet = function() {
  return this.setGet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Request.prototype.hasGet = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional List list = 5;
 * @return {?proto.rivet.pegboard.kv.Request.List}
 */
proto.rivet.pegboard.kv.Request.prototype.getList = function() {
  return /** @type{?proto.rivet.pegboard.kv.Request.List} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Request.List, 5));
};


/**
 * @param {?proto.rivet.pegboard.kv.Request.List|undefined} value
 * @return {!proto.rivet.pegboard.kv.Request} returns this
*/
proto.rivet.pegboard.kv.Request.prototype.setList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rivet.pegboard.kv.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Request} returns this
 */
proto.rivet.pegboard.kv.Request.prototype.clearList = function() {
  return this.setList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Request.prototype.hasList = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Put put = 6;
 * @return {?proto.rivet.pegboard.kv.Request.Put}
 */
proto.rivet.pegboard.kv.Request.prototype.getPut = function() {
  return /** @type{?proto.rivet.pegboard.kv.Request.Put} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Request.Put, 6));
};


/**
 * @param {?proto.rivet.pegboard.kv.Request.Put|undefined} value
 * @return {!proto.rivet.pegboard.kv.Request} returns this
*/
proto.rivet.pegboard.kv.Request.prototype.setPut = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rivet.pegboard.kv.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Request} returns this
 */
proto.rivet.pegboard.kv.Request.prototype.clearPut = function() {
  return this.setPut(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Request.prototype.hasPut = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Delete delete = 7;
 * @return {?proto.rivet.pegboard.kv.Request.Delete}
 */
proto.rivet.pegboard.kv.Request.prototype.getDelete = function() {
  return /** @type{?proto.rivet.pegboard.kv.Request.Delete} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Request.Delete, 7));
};


/**
 * @param {?proto.rivet.pegboard.kv.Request.Delete|undefined} value
 * @return {!proto.rivet.pegboard.kv.Request} returns this
*/
proto.rivet.pegboard.kv.Request.prototype.setDelete = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rivet.pegboard.kv.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Request} returns this
 */
proto.rivet.pegboard.kv.Request.prototype.clearDelete = function() {
  return this.setDelete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Request.prototype.hasDelete = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Drop drop = 8;
 * @return {?proto.rivet.pegboard.kv.Request.Drop}
 */
proto.rivet.pegboard.kv.Request.prototype.getDrop = function() {
  return /** @type{?proto.rivet.pegboard.kv.Request.Drop} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Request.Drop, 8));
};


/**
 * @param {?proto.rivet.pegboard.kv.Request.Drop|undefined} value
 * @return {!proto.rivet.pegboard.kv.Request} returns this
*/
proto.rivet.pegboard.kv.Request.prototype.setDrop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rivet.pegboard.kv.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Request} returns this
 */
proto.rivet.pegboard.kv.Request.prototype.clearDrop = function() {
  return this.setDrop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Request.prototype.hasDrop = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rivet.pegboard.kv.Response.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.rivet.pegboard.kv.Response.DataCase = {
  DATA_NOT_SET: 0,
  ERROR: 2,
  GET: 3,
  LIST: 4,
  PUT: 5,
  DELETE: 6,
  DROP: 7
};

/**
 * @return {proto.rivet.pegboard.kv.Response.DataCase}
 */
proto.rivet.pegboard.kv.Response.prototype.getDataCase = function() {
  return /** @type {proto.rivet.pegboard.kv.Response.DataCase} */(jspb.Message.computeOneofCase(this, proto.rivet.pegboard.kv.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
error: (f = msg.getError()) && proto.rivet.pegboard.kv.Response.Error.toObject(includeInstance, f),
get: (f = msg.getGet()) && proto.rivet.pegboard.kv.Response.Get.toObject(includeInstance, f),
list: (f = msg.getList()) && proto.rivet.pegboard.kv.Response.List.toObject(includeInstance, f),
put: (f = msg.getPut()) && proto.rivet.pegboard.kv.Response.Put.toObject(includeInstance, f),
pb_delete: (f = msg.getDelete()) && proto.rivet.pegboard.kv.Response.Delete.toObject(includeInstance, f),
drop: (f = msg.getDrop()) && proto.rivet.pegboard.kv.Response.Drop.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Response}
 */
proto.rivet.pegboard.kv.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Response;
  return proto.rivet.pegboard.kv.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Response}
 */
proto.rivet.pegboard.kv.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = new proto.rivet.pegboard.kv.Response.Error;
      reader.readMessage(value,proto.rivet.pegboard.kv.Response.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.rivet.pegboard.kv.Response.Get;
      reader.readMessage(value,proto.rivet.pegboard.kv.Response.Get.deserializeBinaryFromReader);
      msg.setGet(value);
      break;
    case 4:
      var value = new proto.rivet.pegboard.kv.Response.List;
      reader.readMessage(value,proto.rivet.pegboard.kv.Response.List.deserializeBinaryFromReader);
      msg.setList(value);
      break;
    case 5:
      var value = new proto.rivet.pegboard.kv.Response.Put;
      reader.readMessage(value,proto.rivet.pegboard.kv.Response.Put.deserializeBinaryFromReader);
      msg.setPut(value);
      break;
    case 6:
      var value = new proto.rivet.pegboard.kv.Response.Delete;
      reader.readMessage(value,proto.rivet.pegboard.kv.Response.Delete.deserializeBinaryFromReader);
      msg.setDelete(value);
      break;
    case 7:
      var value = new proto.rivet.pegboard.kv.Response.Drop;
      reader.readMessage(value,proto.rivet.pegboard.kv.Response.Drop.deserializeBinaryFromReader);
      msg.setDrop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rivet.pegboard.kv.Response.Error.serializeBinaryToWriter
    );
  }
  f = message.getGet();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rivet.pegboard.kv.Response.Get.serializeBinaryToWriter
    );
  }
  f = message.getList();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rivet.pegboard.kv.Response.List.serializeBinaryToWriter
    );
  }
  f = message.getPut();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rivet.pegboard.kv.Response.Put.serializeBinaryToWriter
    );
  }
  f = message.getDelete();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rivet.pegboard.kv.Response.Delete.serializeBinaryToWriter
    );
  }
  f = message.getDrop();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rivet.pegboard.kv.Response.Drop.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Response.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Response.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Response.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Response.Error}
 */
proto.rivet.pegboard.kv.Response.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Response.Error;
  return proto.rivet.pegboard.kv.Response.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Response.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Response.Error}
 */
proto.rivet.pegboard.kv.Response.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Response.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Response.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Response.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.rivet.pegboard.kv.Response.Error.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.kv.Response.Error} returns this
 */
proto.rivet.pegboard.kv.Response.Error.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rivet.pegboard.kv.Response.Get.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Response.Get.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Response.Get.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Response.Get} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.Get.toObject = function(includeInstance, msg) {
  var f, obj = {
keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.rivet.pegboard.kv.Key.toObject, includeInstance),
valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.rivet.pegboard.kv.Entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Response.Get}
 */
proto.rivet.pegboard.kv.Response.Get.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Response.Get;
  return proto.rivet.pegboard.kv.Response.Get.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Response.Get} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Response.Get}
 */
proto.rivet.pegboard.kv.Response.Get.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.kv.Key;
      reader.readMessage(value,proto.rivet.pegboard.kv.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 2:
      var value = new proto.rivet.pegboard.kv.Entry;
      reader.readMessage(value,proto.rivet.pegboard.kv.Entry.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Response.Get.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Response.Get.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Response.Get} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.Get.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rivet.pegboard.kv.Key.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rivet.pegboard.kv.Entry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Key keys = 1;
 * @return {!Array<!proto.rivet.pegboard.kv.Key>}
 */
proto.rivet.pegboard.kv.Response.Get.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.rivet.pegboard.kv.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rivet.pegboard.kv.Key, 1));
};


/**
 * @param {!Array<!proto.rivet.pegboard.kv.Key>} value
 * @return {!proto.rivet.pegboard.kv.Response.Get} returns this
*/
proto.rivet.pegboard.kv.Response.Get.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rivet.pegboard.kv.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rivet.pegboard.kv.Key}
 */
proto.rivet.pegboard.kv.Response.Get.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rivet.pegboard.kv.Key, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rivet.pegboard.kv.Response.Get} returns this
 */
proto.rivet.pegboard.kv.Response.Get.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * repeated Entry values = 2;
 * @return {!Array<!proto.rivet.pegboard.kv.Entry>}
 */
proto.rivet.pegboard.kv.Response.Get.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.rivet.pegboard.kv.Entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rivet.pegboard.kv.Entry, 2));
};


/**
 * @param {!Array<!proto.rivet.pegboard.kv.Entry>} value
 * @return {!proto.rivet.pegboard.kv.Response.Get} returns this
*/
proto.rivet.pegboard.kv.Response.Get.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rivet.pegboard.kv.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rivet.pegboard.kv.Entry}
 */
proto.rivet.pegboard.kv.Response.Get.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rivet.pegboard.kv.Entry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rivet.pegboard.kv.Response.Get} returns this
 */
proto.rivet.pegboard.kv.Response.Get.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rivet.pegboard.kv.Response.List.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Response.List.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Response.List.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Response.List} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.List.toObject = function(includeInstance, msg) {
  var f, obj = {
keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.rivet.pegboard.kv.Key.toObject, includeInstance),
valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.rivet.pegboard.kv.Entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Response.List}
 */
proto.rivet.pegboard.kv.Response.List.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Response.List;
  return proto.rivet.pegboard.kv.Response.List.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Response.List} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Response.List}
 */
proto.rivet.pegboard.kv.Response.List.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.kv.Key;
      reader.readMessage(value,proto.rivet.pegboard.kv.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 2:
      var value = new proto.rivet.pegboard.kv.Entry;
      reader.readMessage(value,proto.rivet.pegboard.kv.Entry.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Response.List.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Response.List.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Response.List} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.List.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rivet.pegboard.kv.Key.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rivet.pegboard.kv.Entry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Key keys = 1;
 * @return {!Array<!proto.rivet.pegboard.kv.Key>}
 */
proto.rivet.pegboard.kv.Response.List.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.rivet.pegboard.kv.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rivet.pegboard.kv.Key, 1));
};


/**
 * @param {!Array<!proto.rivet.pegboard.kv.Key>} value
 * @return {!proto.rivet.pegboard.kv.Response.List} returns this
*/
proto.rivet.pegboard.kv.Response.List.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rivet.pegboard.kv.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rivet.pegboard.kv.Key}
 */
proto.rivet.pegboard.kv.Response.List.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rivet.pegboard.kv.Key, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rivet.pegboard.kv.Response.List} returns this
 */
proto.rivet.pegboard.kv.Response.List.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * repeated Entry values = 2;
 * @return {!Array<!proto.rivet.pegboard.kv.Entry>}
 */
proto.rivet.pegboard.kv.Response.List.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.rivet.pegboard.kv.Entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rivet.pegboard.kv.Entry, 2));
};


/**
 * @param {!Array<!proto.rivet.pegboard.kv.Entry>} value
 * @return {!proto.rivet.pegboard.kv.Response.List} returns this
*/
proto.rivet.pegboard.kv.Response.List.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rivet.pegboard.kv.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rivet.pegboard.kv.Entry}
 */
proto.rivet.pegboard.kv.Response.List.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rivet.pegboard.kv.Entry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rivet.pegboard.kv.Response.List} returns this
 */
proto.rivet.pegboard.kv.Response.List.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Response.Put.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Response.Put.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Response.Put} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.Put.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Response.Put}
 */
proto.rivet.pegboard.kv.Response.Put.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Response.Put;
  return proto.rivet.pegboard.kv.Response.Put.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Response.Put} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Response.Put}
 */
proto.rivet.pegboard.kv.Response.Put.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Response.Put.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Response.Put.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Response.Put} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.Put.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Response.Delete.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Response.Delete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Response.Delete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.Delete.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Response.Delete}
 */
proto.rivet.pegboard.kv.Response.Delete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Response.Delete;
  return proto.rivet.pegboard.kv.Response.Delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Response.Delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Response.Delete}
 */
proto.rivet.pegboard.kv.Response.Delete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Response.Delete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Response.Delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Response.Delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.Delete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Response.Drop.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Response.Drop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Response.Drop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.Drop.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Response.Drop}
 */
proto.rivet.pegboard.kv.Response.Drop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Response.Drop;
  return proto.rivet.pegboard.kv.Response.Drop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Response.Drop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Response.Drop}
 */
proto.rivet.pegboard.kv.Response.Drop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Response.Drop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Response.Drop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Response.Drop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Response.Drop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.rivet.pegboard.kv.Response.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.kv.Response} returns this
 */
proto.rivet.pegboard.kv.Response.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.rivet.pegboard.kv.Response.Error}
 */
proto.rivet.pegboard.kv.Response.prototype.getError = function() {
  return /** @type{?proto.rivet.pegboard.kv.Response.Error} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Response.Error, 2));
};


/**
 * @param {?proto.rivet.pegboard.kv.Response.Error|undefined} value
 * @return {!proto.rivet.pegboard.kv.Response} returns this
*/
proto.rivet.pegboard.kv.Response.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rivet.pegboard.kv.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Response} returns this
 */
proto.rivet.pegboard.kv.Response.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Response.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Get get = 3;
 * @return {?proto.rivet.pegboard.kv.Response.Get}
 */
proto.rivet.pegboard.kv.Response.prototype.getGet = function() {
  return /** @type{?proto.rivet.pegboard.kv.Response.Get} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Response.Get, 3));
};


/**
 * @param {?proto.rivet.pegboard.kv.Response.Get|undefined} value
 * @return {!proto.rivet.pegboard.kv.Response} returns this
*/
proto.rivet.pegboard.kv.Response.prototype.setGet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rivet.pegboard.kv.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Response} returns this
 */
proto.rivet.pegboard.kv.Response.prototype.clearGet = function() {
  return this.setGet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Response.prototype.hasGet = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional List list = 4;
 * @return {?proto.rivet.pegboard.kv.Response.List}
 */
proto.rivet.pegboard.kv.Response.prototype.getList = function() {
  return /** @type{?proto.rivet.pegboard.kv.Response.List} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Response.List, 4));
};


/**
 * @param {?proto.rivet.pegboard.kv.Response.List|undefined} value
 * @return {!proto.rivet.pegboard.kv.Response} returns this
*/
proto.rivet.pegboard.kv.Response.prototype.setList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rivet.pegboard.kv.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Response} returns this
 */
proto.rivet.pegboard.kv.Response.prototype.clearList = function() {
  return this.setList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Response.prototype.hasList = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Put put = 5;
 * @return {?proto.rivet.pegboard.kv.Response.Put}
 */
proto.rivet.pegboard.kv.Response.prototype.getPut = function() {
  return /** @type{?proto.rivet.pegboard.kv.Response.Put} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Response.Put, 5));
};


/**
 * @param {?proto.rivet.pegboard.kv.Response.Put|undefined} value
 * @return {!proto.rivet.pegboard.kv.Response} returns this
*/
proto.rivet.pegboard.kv.Response.prototype.setPut = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rivet.pegboard.kv.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Response} returns this
 */
proto.rivet.pegboard.kv.Response.prototype.clearPut = function() {
  return this.setPut(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Response.prototype.hasPut = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Delete delete = 6;
 * @return {?proto.rivet.pegboard.kv.Response.Delete}
 */
proto.rivet.pegboard.kv.Response.prototype.getDelete = function() {
  return /** @type{?proto.rivet.pegboard.kv.Response.Delete} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Response.Delete, 6));
};


/**
 * @param {?proto.rivet.pegboard.kv.Response.Delete|undefined} value
 * @return {!proto.rivet.pegboard.kv.Response} returns this
*/
proto.rivet.pegboard.kv.Response.prototype.setDelete = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rivet.pegboard.kv.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Response} returns this
 */
proto.rivet.pegboard.kv.Response.prototype.clearDelete = function() {
  return this.setDelete(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Response.prototype.hasDelete = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Drop drop = 7;
 * @return {?proto.rivet.pegboard.kv.Response.Drop}
 */
proto.rivet.pegboard.kv.Response.prototype.getDrop = function() {
  return /** @type{?proto.rivet.pegboard.kv.Response.Drop} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Response.Drop, 7));
};


/**
 * @param {?proto.rivet.pegboard.kv.Response.Drop|undefined} value
 * @return {!proto.rivet.pegboard.kv.Response} returns this
*/
proto.rivet.pegboard.kv.Response.prototype.setDrop = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rivet.pegboard.kv.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Response} returns this
 */
proto.rivet.pegboard.kv.Response.prototype.clearDrop = function() {
  return this.setDrop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Response.prototype.hasDrop = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rivet.pegboard.kv.Key.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
segmentsList: msg.getSegmentsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Key}
 */
proto.rivet.pegboard.kv.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Key;
  return proto.rivet.pegboard.kv.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Key}
 */
proto.rivet.pegboard.kv.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSegments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSegmentsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes segments = 1;
 * @return {!Array<string>}
 */
proto.rivet.pegboard.kv.Key.prototype.getSegmentsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes segments = 1;
 * This is a type-conversion wrapper around `getSegmentsList()`
 * @return {!Array<string>}
 */
proto.rivet.pegboard.kv.Key.prototype.getSegmentsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSegmentsList()));
};


/**
 * repeated bytes segments = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSegmentsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.rivet.pegboard.kv.Key.prototype.getSegmentsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSegmentsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.rivet.pegboard.kv.Key} returns this
 */
proto.rivet.pegboard.kv.Key.prototype.setSegmentsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.rivet.pegboard.kv.Key} returns this
 */
proto.rivet.pegboard.kv.Key.prototype.addSegments = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rivet.pegboard.kv.Key} returns this
 */
proto.rivet.pegboard.kv.Key.prototype.clearSegmentsList = function() {
  return this.setSegmentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Entry.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Entry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Entry.toObject = function(includeInstance, msg) {
  var f, obj = {
value: msg.getValue_asB64(),
metadata: (f = msg.getMetadata()) && proto.rivet.pegboard.kv.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Entry}
 */
proto.rivet.pegboard.kv.Entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Entry;
  return proto.rivet.pegboard.kv.Entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Entry}
 */
proto.rivet.pegboard.kv.Entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.rivet.pegboard.kv.Metadata;
      reader.readMessage(value,proto.rivet.pegboard.kv.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Entry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Entry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rivet.pegboard.kv.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {string}
 */
proto.rivet.pegboard.kv.Entry.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.rivet.pegboard.kv.Entry.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Entry.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rivet.pegboard.kv.Entry} returns this
 */
proto.rivet.pegboard.kv.Entry.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Metadata metadata = 2;
 * @return {?proto.rivet.pegboard.kv.Metadata}
 */
proto.rivet.pegboard.kv.Entry.prototype.getMetadata = function() {
  return /** @type{?proto.rivet.pegboard.kv.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Metadata, 2));
};


/**
 * @param {?proto.rivet.pegboard.kv.Metadata|undefined} value
 * @return {!proto.rivet.pegboard.kv.Entry} returns this
*/
proto.rivet.pegboard.kv.Entry.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.Entry} returns this
 */
proto.rivet.pegboard.kv.Entry.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.Entry.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
version: msg.getVersion_asB64(),
createTs: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.Metadata}
 */
proto.rivet.pegboard.kv.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.Metadata;
  return proto.rivet.pegboard.kv.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.Metadata}
 */
proto.rivet.pegboard.kv.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCreateTs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes _version = 1;
 * @return {string}
 */
proto.rivet.pegboard.kv.Metadata.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes _version = 1;
 * This is a type-conversion wrapper around `getVersion()`
 * @return {string}
 */
proto.rivet.pegboard.kv.Metadata.prototype.getVersion_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVersion()));
};


/**
 * optional bytes _version = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVersion()`
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.Metadata.prototype.getVersion_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVersion()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rivet.pegboard.kv.Metadata} returns this
 */
proto.rivet.pegboard.kv.Metadata.prototype.setVersion = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 create_ts = 2;
 * @return {number}
 */
proto.rivet.pegboard.kv.Metadata.prototype.getCreateTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.kv.Metadata} returns this
 */
proto.rivet.pegboard.kv.Metadata.prototype.setCreateTs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rivet.pegboard.kv.ListQuery.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rivet.pegboard.kv.ListQuery.KindCase = {
  KIND_NOT_SET: 0,
  ALL: 1,
  RANGE: 2,
  PREFIX: 3
};

/**
 * @return {proto.rivet.pegboard.kv.ListQuery.KindCase}
 */
proto.rivet.pegboard.kv.ListQuery.prototype.getKindCase = function() {
  return /** @type {proto.rivet.pegboard.kv.ListQuery.KindCase} */(jspb.Message.computeOneofCase(this, proto.rivet.pegboard.kv.ListQuery.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.ListQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.ListQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.ListQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.ListQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
all: (f = msg.getAll()) && proto.rivet.pegboard.kv.ListQuery.All.toObject(includeInstance, f),
range: (f = msg.getRange()) && proto.rivet.pegboard.kv.ListQuery.Range.toObject(includeInstance, f),
prefix: (f = msg.getPrefix()) && proto.rivet.pegboard.kv.ListQuery.Prefix.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.ListQuery}
 */
proto.rivet.pegboard.kv.ListQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.ListQuery;
  return proto.rivet.pegboard.kv.ListQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.ListQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.ListQuery}
 */
proto.rivet.pegboard.kv.ListQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.kv.ListQuery.All;
      reader.readMessage(value,proto.rivet.pegboard.kv.ListQuery.All.deserializeBinaryFromReader);
      msg.setAll(value);
      break;
    case 2:
      var value = new proto.rivet.pegboard.kv.ListQuery.Range;
      reader.readMessage(value,proto.rivet.pegboard.kv.ListQuery.Range.deserializeBinaryFromReader);
      msg.setRange(value);
      break;
    case 3:
      var value = new proto.rivet.pegboard.kv.ListQuery.Prefix;
      reader.readMessage(value,proto.rivet.pegboard.kv.ListQuery.Prefix.deserializeBinaryFromReader);
      msg.setPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.ListQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.ListQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.ListQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.ListQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAll();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rivet.pegboard.kv.ListQuery.All.serializeBinaryToWriter
    );
  }
  f = message.getRange();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rivet.pegboard.kv.ListQuery.Range.serializeBinaryToWriter
    );
  }
  f = message.getPrefix();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rivet.pegboard.kv.ListQuery.Prefix.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.ListQuery.All.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.ListQuery.All.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.ListQuery.All} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.ListQuery.All.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.ListQuery.All}
 */
proto.rivet.pegboard.kv.ListQuery.All.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.ListQuery.All;
  return proto.rivet.pegboard.kv.ListQuery.All.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.ListQuery.All} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.ListQuery.All}
 */
proto.rivet.pegboard.kv.ListQuery.All.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.ListQuery.All.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.ListQuery.All.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.ListQuery.All} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.ListQuery.All.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.ListQuery.Range.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.ListQuery.Range.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.ListQuery.Range} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.ListQuery.Range.toObject = function(includeInstance, msg) {
  var f, obj = {
start: (f = msg.getStart()) && proto.rivet.pegboard.kv.Key.toObject(includeInstance, f),
end: (f = msg.getEnd()) && proto.rivet.pegboard.kv.Key.toObject(includeInstance, f),
exclusive: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.ListQuery.Range}
 */
proto.rivet.pegboard.kv.ListQuery.Range.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.ListQuery.Range;
  return proto.rivet.pegboard.kv.ListQuery.Range.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.ListQuery.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.ListQuery.Range}
 */
proto.rivet.pegboard.kv.ListQuery.Range.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.kv.Key;
      reader.readMessage(value,proto.rivet.pegboard.kv.Key.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new proto.rivet.pegboard.kv.Key;
      reader.readMessage(value,proto.rivet.pegboard.kv.Key.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExclusive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.ListQuery.Range.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.ListQuery.Range.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.ListQuery.Range} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.ListQuery.Range.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rivet.pegboard.kv.Key.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rivet.pegboard.kv.Key.serializeBinaryToWriter
    );
  }
  f = message.getExclusive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Key start = 1;
 * @return {?proto.rivet.pegboard.kv.Key}
 */
proto.rivet.pegboard.kv.ListQuery.Range.prototype.getStart = function() {
  return /** @type{?proto.rivet.pegboard.kv.Key} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Key, 1));
};


/**
 * @param {?proto.rivet.pegboard.kv.Key|undefined} value
 * @return {!proto.rivet.pegboard.kv.ListQuery.Range} returns this
*/
proto.rivet.pegboard.kv.ListQuery.Range.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.ListQuery.Range} returns this
 */
proto.rivet.pegboard.kv.ListQuery.Range.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.ListQuery.Range.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Key end = 2;
 * @return {?proto.rivet.pegboard.kv.Key}
 */
proto.rivet.pegboard.kv.ListQuery.Range.prototype.getEnd = function() {
  return /** @type{?proto.rivet.pegboard.kv.Key} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Key, 2));
};


/**
 * @param {?proto.rivet.pegboard.kv.Key|undefined} value
 * @return {!proto.rivet.pegboard.kv.ListQuery.Range} returns this
*/
proto.rivet.pegboard.kv.ListQuery.Range.prototype.setEnd = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.ListQuery.Range} returns this
 */
proto.rivet.pegboard.kv.ListQuery.Range.prototype.clearEnd = function() {
  return this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.ListQuery.Range.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool exclusive = 3;
 * @return {boolean}
 */
proto.rivet.pegboard.kv.ListQuery.Range.prototype.getExclusive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rivet.pegboard.kv.ListQuery.Range} returns this
 */
proto.rivet.pegboard.kv.ListQuery.Range.prototype.setExclusive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.kv.ListQuery.Prefix.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.kv.ListQuery.Prefix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.kv.ListQuery.Prefix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.ListQuery.Prefix.toObject = function(includeInstance, msg) {
  var f, obj = {
key: (f = msg.getKey()) && proto.rivet.pegboard.kv.Key.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.kv.ListQuery.Prefix}
 */
proto.rivet.pegboard.kv.ListQuery.Prefix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.kv.ListQuery.Prefix;
  return proto.rivet.pegboard.kv.ListQuery.Prefix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.kv.ListQuery.Prefix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.kv.ListQuery.Prefix}
 */
proto.rivet.pegboard.kv.ListQuery.Prefix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.kv.Key;
      reader.readMessage(value,proto.rivet.pegboard.kv.Key.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.kv.ListQuery.Prefix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.kv.ListQuery.Prefix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.kv.ListQuery.Prefix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.kv.ListQuery.Prefix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rivet.pegboard.kv.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional Key key = 1;
 * @return {?proto.rivet.pegboard.kv.Key}
 */
proto.rivet.pegboard.kv.ListQuery.Prefix.prototype.getKey = function() {
  return /** @type{?proto.rivet.pegboard.kv.Key} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.Key, 1));
};


/**
 * @param {?proto.rivet.pegboard.kv.Key|undefined} value
 * @return {!proto.rivet.pegboard.kv.ListQuery.Prefix} returns this
*/
proto.rivet.pegboard.kv.ListQuery.Prefix.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.ListQuery.Prefix} returns this
 */
proto.rivet.pegboard.kv.ListQuery.Prefix.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.ListQuery.Prefix.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional All all = 1;
 * @return {?proto.rivet.pegboard.kv.ListQuery.All}
 */
proto.rivet.pegboard.kv.ListQuery.prototype.getAll = function() {
  return /** @type{?proto.rivet.pegboard.kv.ListQuery.All} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.ListQuery.All, 1));
};


/**
 * @param {?proto.rivet.pegboard.kv.ListQuery.All|undefined} value
 * @return {!proto.rivet.pegboard.kv.ListQuery} returns this
*/
proto.rivet.pegboard.kv.ListQuery.prototype.setAll = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rivet.pegboard.kv.ListQuery.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.ListQuery} returns this
 */
proto.rivet.pegboard.kv.ListQuery.prototype.clearAll = function() {
  return this.setAll(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.ListQuery.prototype.hasAll = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Range range = 2;
 * @return {?proto.rivet.pegboard.kv.ListQuery.Range}
 */
proto.rivet.pegboard.kv.ListQuery.prototype.getRange = function() {
  return /** @type{?proto.rivet.pegboard.kv.ListQuery.Range} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.ListQuery.Range, 2));
};


/**
 * @param {?proto.rivet.pegboard.kv.ListQuery.Range|undefined} value
 * @return {!proto.rivet.pegboard.kv.ListQuery} returns this
*/
proto.rivet.pegboard.kv.ListQuery.prototype.setRange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rivet.pegboard.kv.ListQuery.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.ListQuery} returns this
 */
proto.rivet.pegboard.kv.ListQuery.prototype.clearRange = function() {
  return this.setRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.ListQuery.prototype.hasRange = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Prefix prefix = 3;
 * @return {?proto.rivet.pegboard.kv.ListQuery.Prefix}
 */
proto.rivet.pegboard.kv.ListQuery.prototype.getPrefix = function() {
  return /** @type{?proto.rivet.pegboard.kv.ListQuery.Prefix} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.kv.ListQuery.Prefix, 3));
};


/**
 * @param {?proto.rivet.pegboard.kv.ListQuery.Prefix|undefined} value
 * @return {!proto.rivet.pegboard.kv.ListQuery} returns this
*/
proto.rivet.pegboard.kv.ListQuery.prototype.setPrefix = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rivet.pegboard.kv.ListQuery.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.kv.ListQuery} returns this
 */
proto.rivet.pegboard.kv.ListQuery.prototype.clearPrefix = function() {
  return this.setPrefix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.kv.ListQuery.prototype.hasPrefix = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.rivet.pegboard.kv);
