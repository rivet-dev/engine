// source: runner_protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var kv_pb = require('./kv_pb.js');
goog.object.extend(proto, kv_pb);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorMetadata', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorMetadata.Build', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorMetadata.Network', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorMetadata.Project', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorState', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorState.Exited', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorState.Running', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ActorState.StateCase', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.GameGuardProtocol', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.HostProtocol', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.Port', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.Routing', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.Routing.GameGuard', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.Routing.Host', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.Routing.RoutingCase', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ToManager', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ToManager.MessageCase', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ToManager.Ping', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ToRunner', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ToRunner.Close', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ToRunner.Init', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ToRunner.MessageCase', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ToRunner.Pong', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor', null, global);
goog.exportSymbol('proto.rivet.pegboard.runner_protocol.ToRunner.StartActor', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ToManager = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rivet.pegboard.runner_protocol.ToManager.oneofGroups_);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ToManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ToManager.displayName = 'proto.rivet.pegboard.runner_protocol.ToManager';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.displayName = 'proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ToManager.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ToManager.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ToManager.Ping.displayName = 'proto.rivet.pegboard.runner_protocol.ToManager.Ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ToRunner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rivet.pegboard.runner_protocol.ToRunner.oneofGroups_);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ToRunner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ToRunner.displayName = 'proto.rivet.pegboard.runner_protocol.ToRunner';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Init = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ToRunner.Init, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ToRunner.Init.displayName = 'proto.rivet.pegboard.runner_protocol.ToRunner.Init';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Pong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ToRunner.Pong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ToRunner.Pong.displayName = 'proto.rivet.pegboard.runner_protocol.ToRunner.Pong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Close = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ToRunner.Close, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ToRunner.Close.displayName = 'proto.rivet.pegboard.runner_protocol.ToRunner.Close';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ToRunner.StartActor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.displayName = 'proto.rivet.pegboard.runner_protocol.ToRunner.StartActor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.displayName = 'proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ActorMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ActorMetadata.displayName = 'proto.rivet.pegboard.runner_protocol.ActorMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.displayName = 'proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Network = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ActorMetadata.Network, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.displayName = 'proto.rivet.pegboard.runner_protocol.ActorMetadata.Network';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Project = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ActorMetadata.Project, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.displayName = 'proto.rivet.pegboard.runner_protocol.ActorMetadata.Project';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.displayName = 'proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.displayName = 'proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.displayName = 'proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Build = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ActorMetadata.Build, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.displayName = 'proto.rivet.pegboard.runner_protocol.ActorMetadata.Build';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.Port = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.Port, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.Port.displayName = 'proto.rivet.pegboard.runner_protocol.Port';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.Routing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rivet.pegboard.runner_protocol.Routing.oneofGroups_);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.Routing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.Routing.displayName = 'proto.rivet.pegboard.runner_protocol.Routing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.Routing.GameGuard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.Routing.GameGuard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.Routing.GameGuard.displayName = 'proto.rivet.pegboard.runner_protocol.Routing.GameGuard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.Routing.Host = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.Routing.Host, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.Routing.Host.displayName = 'proto.rivet.pegboard.runner_protocol.Routing.Host';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ActorState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rivet.pegboard.runner_protocol.ActorState.oneofGroups_);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ActorState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ActorState.displayName = 'proto.rivet.pegboard.runner_protocol.ActorState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ActorState.Running = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ActorState.Running, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ActorState.Running.displayName = 'proto.rivet.pegboard.runner_protocol.ActorState.Running';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rivet.pegboard.runner_protocol.ActorState.Exited = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rivet.pegboard.runner_protocol.ActorState.Exited, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rivet.pegboard.runner_protocol.ActorState.Exited.displayName = 'proto.rivet.pegboard.runner_protocol.ActorState.Exited';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rivet.pegboard.runner_protocol.ToManager.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.rivet.pegboard.runner_protocol.ToManager.MessageCase = {
  MESSAGE_NOT_SET: 0,
  ACTOR_STATE_UPDATE: 1,
  PING: 2,
  KV: 3
};

/**
 * @return {proto.rivet.pegboard.runner_protocol.ToManager.MessageCase}
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.getMessageCase = function() {
  return /** @type {proto.rivet.pegboard.runner_protocol.ToManager.MessageCase} */(jspb.Message.computeOneofCase(this, proto.rivet.pegboard.runner_protocol.ToManager.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ToManager.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ToManager} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToManager.toObject = function(includeInstance, msg) {
  var f, obj = {
actorStateUpdate: (f = msg.getActorStateUpdate()) && proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.toObject(includeInstance, f),
ping: (f = msg.getPing()) && proto.rivet.pegboard.runner_protocol.ToManager.Ping.toObject(includeInstance, f),
kv: (f = msg.getKv()) && kv_pb.Request.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager}
 */
proto.rivet.pegboard.runner_protocol.ToManager.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ToManager;
  return proto.rivet.pegboard.runner_protocol.ToManager.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ToManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager}
 */
proto.rivet.pegboard.runner_protocol.ToManager.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.deserializeBinaryFromReader);
      msg.setActorStateUpdate(value);
      break;
    case 2:
      var value = new proto.rivet.pegboard.runner_protocol.ToManager.Ping;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ToManager.Ping.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 3:
      var value = new kv_pb.Request;
      reader.readMessage(value,kv_pb.Request.deserializeBinaryFromReader);
      msg.setKv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ToManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ToManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToManager.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActorStateUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.serializeBinaryToWriter
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rivet.pegboard.runner_protocol.ToManager.Ping.serializeBinaryToWriter
    );
  }
  f = message.getKv();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      kv_pb.Request.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
actorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
generation: jspb.Message.getFieldWithDefault(msg, 2, 0),
state: (f = msg.getState()) && proto.rivet.pegboard.runner_protocol.ActorState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate}
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate;
  return proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate}
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGeneration(value);
      break;
    case 3:
      var value = new proto.rivet.pegboard.runner_protocol.ActorState;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ActorState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeneration();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rivet.pegboard.runner_protocol.ActorState.serializeBinaryToWriter
    );
  }
};


/**
 * optional string actor_id = 1;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate} returns this
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.prototype.setActorId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 generation = 2;
 * @return {number}
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.prototype.getGeneration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate} returns this
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.prototype.setGeneration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ActorState state = 3;
 * @return {?proto.rivet.pegboard.runner_protocol.ActorState}
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.prototype.getState = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ActorState} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ActorState, 3));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ActorState|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate} returns this
*/
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate} returns this
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate.prototype.hasState = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ToManager.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ToManager.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ToManager.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToManager.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager.Ping}
 */
proto.rivet.pegboard.runner_protocol.ToManager.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ToManager.Ping;
  return proto.rivet.pegboard.runner_protocol.ToManager.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ToManager.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager.Ping}
 */
proto.rivet.pegboard.runner_protocol.ToManager.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ToManager.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ToManager.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ToManager.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToManager.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional ActorStateUpdate actor_state_update = 1;
 * @return {?proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate}
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.getActorStateUpdate = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate, 1));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ToManager.ActorStateUpdate|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager} returns this
*/
proto.rivet.pegboard.runner_protocol.ToManager.prototype.setActorStateUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rivet.pegboard.runner_protocol.ToManager.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager} returns this
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.clearActorStateUpdate = function() {
  return this.setActorStateUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.hasActorStateUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Ping ping = 2;
 * @return {?proto.rivet.pegboard.runner_protocol.ToManager.Ping}
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.getPing = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ToManager.Ping} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ToManager.Ping, 2));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ToManager.Ping|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager} returns this
*/
proto.rivet.pegboard.runner_protocol.ToManager.prototype.setPing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rivet.pegboard.runner_protocol.ToManager.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager} returns this
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.clearPing = function() {
  return this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.hasPing = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional rivet.pegboard.kv.Request kv = 3;
 * @return {?proto.rivet.pegboard.kv.Request}
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.getKv = function() {
  return /** @type{?proto.rivet.pegboard.kv.Request} */ (
    jspb.Message.getWrapperField(this, kv_pb.Request, 3));
};


/**
 * @param {?proto.rivet.pegboard.kv.Request|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager} returns this
*/
proto.rivet.pegboard.runner_protocol.ToManager.prototype.setKv = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rivet.pegboard.runner_protocol.ToManager.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToManager} returns this
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.clearKv = function() {
  return this.setKv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToManager.prototype.hasKv = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rivet.pegboard.runner_protocol.ToRunner.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.MessageCase = {
  MESSAGE_NOT_SET: 0,
  INIT: 1,
  PONG: 2,
  CLOSE: 3,
  START_ACTOR: 4,
  SIGNAL_ACTOR: 5,
  KV: 6
};

/**
 * @return {proto.rivet.pegboard.runner_protocol.ToRunner.MessageCase}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.getMessageCase = function() {
  return /** @type {proto.rivet.pegboard.runner_protocol.ToRunner.MessageCase} */(jspb.Message.computeOneofCase(this, proto.rivet.pegboard.runner_protocol.ToRunner.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ToRunner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.toObject = function(includeInstance, msg) {
  var f, obj = {
init: (f = msg.getInit()) && proto.rivet.pegboard.runner_protocol.ToRunner.Init.toObject(includeInstance, f),
pong: (f = msg.getPong()) && proto.rivet.pegboard.runner_protocol.ToRunner.Pong.toObject(includeInstance, f),
close: (f = msg.getClose()) && proto.rivet.pegboard.runner_protocol.ToRunner.Close.toObject(includeInstance, f),
startActor: (f = msg.getStartActor()) && proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.toObject(includeInstance, f),
signalActor: (f = msg.getSignalActor()) && proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.toObject(includeInstance, f),
kv: (f = msg.getKv()) && kv_pb.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ToRunner;
  return proto.rivet.pegboard.runner_protocol.ToRunner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.runner_protocol.ToRunner.Init;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ToRunner.Init.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 2:
      var value = new proto.rivet.pegboard.runner_protocol.ToRunner.Pong;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ToRunner.Pong.deserializeBinaryFromReader);
      msg.setPong(value);
      break;
    case 3:
      var value = new proto.rivet.pegboard.runner_protocol.ToRunner.Close;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ToRunner.Close.deserializeBinaryFromReader);
      msg.setClose(value);
      break;
    case 4:
      var value = new proto.rivet.pegboard.runner_protocol.ToRunner.StartActor;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.deserializeBinaryFromReader);
      msg.setStartActor(value);
      break;
    case 5:
      var value = new proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.deserializeBinaryFromReader);
      msg.setSignalActor(value);
      break;
    case 6:
      var value = new kv_pb.Response;
      reader.readMessage(value,kv_pb.Response.deserializeBinaryFromReader);
      msg.setKv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ToRunner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rivet.pegboard.runner_protocol.ToRunner.Init.serializeBinaryToWriter
    );
  }
  f = message.getPong();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rivet.pegboard.runner_protocol.ToRunner.Pong.serializeBinaryToWriter
    );
  }
  f = message.getClose();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rivet.pegboard.runner_protocol.ToRunner.Close.serializeBinaryToWriter
    );
  }
  f = message.getStartActor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.serializeBinaryToWriter
    );
  }
  f = message.getSignalActor();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.serializeBinaryToWriter
    );
  }
  f = message.getKv();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      kv_pb.Response.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Init.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ToRunner.Init.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.Init} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Init.toObject = function(includeInstance, msg) {
  var f, obj = {
input: msg.getInput_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.Init}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Init.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ToRunner.Init;
  return proto.rivet.pegboard.runner_protocol.ToRunner.Init.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.Init} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.Init}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Init.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Init.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ToRunner.Init.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.Init} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Init.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes input = 1;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Init.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes input = 1;
 * This is a type-conversion wrapper around `getInput()`
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Init.prototype.getInput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInput()));
};


/**
 * optional bytes input = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInput()`
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Init.prototype.getInput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.Init} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Init.prototype.setInput = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Pong.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ToRunner.Pong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.Pong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Pong.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.Pong}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Pong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ToRunner.Pong;
  return proto.rivet.pegboard.runner_protocol.ToRunner.Pong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.Pong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.Pong}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Pong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Pong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ToRunner.Pong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.Pong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Pong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Close.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ToRunner.Close.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.Close} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Close.toObject = function(includeInstance, msg) {
  var f, obj = {
reason: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.Close}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Close.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ToRunner.Close;
  return proto.rivet.pegboard.runner_protocol.ToRunner.Close.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.Close} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.Close}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Close.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Close.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ToRunner.Close.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.Close} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Close.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Close.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.Close} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Close.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.Close} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Close.prototype.clearReason = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.Close.prototype.hasReason = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.StartActor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.toObject = function(includeInstance, msg) {
  var f, obj = {
actorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
generation: jspb.Message.getFieldWithDefault(msg, 2, 0),
envMap: (f = msg.getEnvMap()) ? f.toObject(includeInstance, undefined) : [],
metadata: (f = msg.getMetadata()) && proto.rivet.pegboard.runner_protocol.ActorMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.StartActor}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ToRunner.StartActor;
  return proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.StartActor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.StartActor}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGeneration(value);
      break;
    case 3:
      var value = msg.getEnvMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = new proto.rivet.pegboard.runner_protocol.ActorMetadata;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ActorMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.StartActor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeneration();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEnvMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rivet.pegboard.runner_protocol.ActorMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string actor_id = 1;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.StartActor} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.setActorId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 generation = 2;
 * @return {number}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.getGeneration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.StartActor} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.setGeneration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<string, string> env = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.getEnvMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.StartActor} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.clearEnvMap = function() {
  this.getEnvMap().clear();
  return this;
};


/**
 * optional ActorMetadata metadata = 4;
 * @return {?proto.rivet.pegboard.runner_protocol.ActorMetadata}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.getMetadata = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ActorMetadata} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ActorMetadata, 4));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ActorMetadata|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.StartActor} returns this
*/
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.StartActor} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.StartActor.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.toObject = function(includeInstance, msg) {
  var f, obj = {
actorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
generation: jspb.Message.getFieldWithDefault(msg, 2, 0),
signal: jspb.Message.getFieldWithDefault(msg, 3, 0),
persistStorage: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor;
  return proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGeneration(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSignal(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersistStorage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeneration();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSignal();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPersistStorage();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string actor_id = 1;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.prototype.setActorId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 generation = 2;
 * @return {number}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.prototype.getGeneration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.prototype.setGeneration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 signal = 3;
 * @return {number}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.prototype.getSignal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.prototype.setSignal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool persist_storage = 4;
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.prototype.getPersistStorage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor.prototype.setPersistStorage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Init init = 1;
 * @return {?proto.rivet.pegboard.runner_protocol.ToRunner.Init}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.getInit = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ToRunner.Init} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ToRunner.Init, 1));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ToRunner.Init|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
*/
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.setInit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rivet.pegboard.runner_protocol.ToRunner.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.hasInit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Pong pong = 2;
 * @return {?proto.rivet.pegboard.runner_protocol.ToRunner.Pong}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.getPong = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ToRunner.Pong} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ToRunner.Pong, 2));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ToRunner.Pong|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
*/
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.setPong = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rivet.pegboard.runner_protocol.ToRunner.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.clearPong = function() {
  return this.setPong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.hasPong = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Close close = 3;
 * @return {?proto.rivet.pegboard.runner_protocol.ToRunner.Close}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.getClose = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ToRunner.Close} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ToRunner.Close, 3));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ToRunner.Close|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
*/
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.setClose = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rivet.pegboard.runner_protocol.ToRunner.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.clearClose = function() {
  return this.setClose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.hasClose = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StartActor start_actor = 4;
 * @return {?proto.rivet.pegboard.runner_protocol.ToRunner.StartActor}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.getStartActor = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ToRunner.StartActor} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ToRunner.StartActor, 4));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ToRunner.StartActor|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
*/
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.setStartActor = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rivet.pegboard.runner_protocol.ToRunner.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.clearStartActor = function() {
  return this.setStartActor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.hasStartActor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SignalActor signal_actor = 5;
 * @return {?proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.getSignalActor = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor, 5));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ToRunner.SignalActor|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
*/
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.setSignalActor = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rivet.pegboard.runner_protocol.ToRunner.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.clearSignalActor = function() {
  return this.setSignalActor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.hasSignalActor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional rivet.pegboard.kv.Response kv = 6;
 * @return {?proto.rivet.pegboard.kv.Response}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.getKv = function() {
  return /** @type{?proto.rivet.pegboard.kv.Response} */ (
    jspb.Message.getWrapperField(this, kv_pb.Response, 6));
};


/**
 * @param {?proto.rivet.pegboard.kv.Response|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
*/
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.setKv = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rivet.pegboard.runner_protocol.ToRunner.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ToRunner} returns this
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.clearKv = function() {
  return this.setKv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ToRunner.prototype.hasKv = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
actor: (f = msg.getActor()) && proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.toObject(includeInstance, f),
network: (f = msg.getNetwork()) && proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.toObject(includeInstance, f),
project: (f = msg.getProject()) && proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.toObject(includeInstance, f),
environment: (f = msg.getEnvironment()) && proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.toObject(includeInstance, f),
datacenter: (f = msg.getDatacenter()) && proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.toObject(includeInstance, f),
cluster: (f = msg.getCluster()) && proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.toObject(includeInstance, f),
build: (f = msg.getBuild()) && proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ActorMetadata;
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.deserializeBinaryFromReader);
      msg.setActor(value);
      break;
    case 2:
      var value = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Network;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.deserializeBinaryFromReader);
      msg.setNetwork(value);
      break;
    case 3:
      var value = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Project;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.deserializeBinaryFromReader);
      msg.setProject(value);
      break;
    case 4:
      var value = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.deserializeBinaryFromReader);
      msg.setEnvironment(value);
      break;
    case 5:
      var value = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.deserializeBinaryFromReader);
      msg.setDatacenter(value);
      break;
    case 6:
      var value = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.deserializeBinaryFromReader);
      msg.setCluster(value);
      break;
    case 7:
      var value = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Build;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.deserializeBinaryFromReader);
      msg.setBuild(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ActorMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.serializeBinaryToWriter
    );
  }
  f = message.getNetwork();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.serializeBinaryToWriter
    );
  }
  f = message.getProject();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.serializeBinaryToWriter
    );
  }
  f = message.getEnvironment();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.serializeBinaryToWriter
    );
  }
  f = message.getDatacenter();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.serializeBinaryToWriter
    );
  }
  f = message.getCluster();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.serializeBinaryToWriter
    );
  }
  f = message.getBuild();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.toObject = function(includeInstance, msg) {
  var f, obj = {
actorId: jspb.Message.getFieldWithDefault(msg, 1, ""),
tagsMap: (f = msg.getTagsMap()) ? f.toObject(includeInstance, undefined) : [],
createTs: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor;
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorId(value);
      break;
    case 2:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActorId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getCreateTs();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string actor_id = 1;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.prototype.getActorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.prototype.setActorId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, string> tags = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
  return this;
};


/**
 * optional int64 create_ts = 3;
 * @return {number}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.prototype.getCreateTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor.prototype.setCreateTs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Network} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.toObject = function(includeInstance, msg) {
  var f, obj = {
portsMap: (f = msg.getPortsMap()) ? f.toObject(includeInstance, proto.rivet.pegboard.runner_protocol.Port.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Network}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Network;
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Network} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Network}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPortsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.rivet.pegboard.runner_protocol.Port.deserializeBinaryFromReader, "", new proto.rivet.pegboard.runner_protocol.Port());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Network} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.rivet.pegboard.runner_protocol.Port.serializeBinaryToWriter);
  }
};


/**
 * map<string, Port> ports = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.rivet.pegboard.runner_protocol.Port>}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.prototype.getPortsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.rivet.pegboard.runner_protocol.Port>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.rivet.pegboard.runner_protocol.Port));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Network} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Network.prototype.clearPortsMap = function() {
  this.getPortsMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Project} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.toObject = function(includeInstance, msg) {
  var f, obj = {
projectId: jspb.Message.getFieldWithDefault(msg, 1, ""),
slug: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Project}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Project;
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Project} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Project}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Project} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string project_id = 1;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.prototype.getProjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Project} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.prototype.setProjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Project} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Project.prototype.setSlug = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.toObject = function(includeInstance, msg) {
  var f, obj = {
envId: jspb.Message.getFieldWithDefault(msg, 1, ""),
slug: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment;
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnvId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string env_id = 1;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.prototype.getEnvId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.prototype.setEnvId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment.prototype.setSlug = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.toObject = function(includeInstance, msg) {
  var f, obj = {
nameId: jspb.Message.getFieldWithDefault(msg, 1, ""),
displayName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter;
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNameId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name_id = 1;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.prototype.getNameId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.prototype.setNameId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.toObject = function(includeInstance, msg) {
  var f, obj = {
clusterId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster;
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClusterId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClusterId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cluster_id = 1;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.prototype.getClusterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster.prototype.setClusterId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Build} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.toObject = function(includeInstance, msg) {
  var f, obj = {
buildId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Build}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ActorMetadata.Build;
  return proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Build} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Build}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Build} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBuildId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string build_id = 1;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.prototype.getBuildId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata.Build} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.Build.prototype.setBuildId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Actor actor = 1;
 * @return {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.getActor = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor, 1));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Actor|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
*/
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.setActor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.clearActor = function() {
  return this.setActor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.hasActor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Network network = 2;
 * @return {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Network}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.getNetwork = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ActorMetadata.Network} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ActorMetadata.Network, 2));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Network|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
*/
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.setNetwork = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.clearNetwork = function() {
  return this.setNetwork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.hasNetwork = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Project project = 3;
 * @return {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Project}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.getProject = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ActorMetadata.Project} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ActorMetadata.Project, 3));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Project|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
*/
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.setProject = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.clearProject = function() {
  return this.setProject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.hasProject = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Environment environment = 4;
 * @return {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.getEnvironment = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment, 4));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Environment|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
*/
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.setEnvironment = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.clearEnvironment = function() {
  return this.setEnvironment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.hasEnvironment = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Datacenter datacenter = 5;
 * @return {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.getDatacenter = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter, 5));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Datacenter|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
*/
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.setDatacenter = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.clearDatacenter = function() {
  return this.setDatacenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.hasDatacenter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Cluster cluster = 6;
 * @return {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.getCluster = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster, 6));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Cluster|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
*/
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.setCluster = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.clearCluster = function() {
  return this.setCluster(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.hasCluster = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Build build = 7;
 * @return {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Build}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.getBuild = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ActorMetadata.Build} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ActorMetadata.Build, 7));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ActorMetadata.Build|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
*/
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.setBuild = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorMetadata} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.clearBuild = function() {
  return this.setBuild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ActorMetadata.prototype.hasBuild = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.Port.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.Port} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.Port.toObject = function(includeInstance, msg) {
  var f, obj = {
internalPort: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
publicHostname: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
publicPort: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
publicPath: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
routing: (f = msg.getRouting()) && proto.rivet.pegboard.runner_protocol.Routing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.Port}
 */
proto.rivet.pegboard.runner_protocol.Port.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.Port;
  return proto.rivet.pegboard.runner_protocol.Port.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.Port} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.Port}
 */
proto.rivet.pegboard.runner_protocol.Port.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInternalPort(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicHostname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPublicPort(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicPath(value);
      break;
    case 5:
      var value = new proto.rivet.pegboard.runner_protocol.Routing;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.Routing.deserializeBinaryFromReader);
      msg.setRouting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.Port.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.Port} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.Port.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRouting();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rivet.pegboard.runner_protocol.Routing.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 internal_port = 1;
 * @return {number}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.getInternalPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.runner_protocol.Port} returns this
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.setInternalPort = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.Port} returns this
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.clearInternalPort = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.hasInternalPort = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string public_hostname = 2;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.getPublicHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.Port} returns this
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.setPublicHostname = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.Port} returns this
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.clearPublicHostname = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.hasPublicHostname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 public_port = 3;
 * @return {number}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.getPublicPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.runner_protocol.Port} returns this
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.setPublicPort = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.Port} returns this
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.clearPublicPort = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.hasPublicPort = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string public_path = 4;
 * @return {string}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.getPublicPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rivet.pegboard.runner_protocol.Port} returns this
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.setPublicPath = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.Port} returns this
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.clearPublicPath = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.hasPublicPath = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Routing routing = 5;
 * @return {?proto.rivet.pegboard.runner_protocol.Routing}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.getRouting = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.Routing} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.Routing, 5));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.Routing|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.Port} returns this
*/
proto.rivet.pegboard.runner_protocol.Port.prototype.setRouting = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.Port} returns this
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.clearRouting = function() {
  return this.setRouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.Port.prototype.hasRouting = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rivet.pegboard.runner_protocol.Routing.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.rivet.pegboard.runner_protocol.Routing.RoutingCase = {
  ROUTING_NOT_SET: 0,
  GAME_GUARD: 1,
  HOST: 2
};

/**
 * @return {proto.rivet.pegboard.runner_protocol.Routing.RoutingCase}
 */
proto.rivet.pegboard.runner_protocol.Routing.prototype.getRoutingCase = function() {
  return /** @type {proto.rivet.pegboard.runner_protocol.Routing.RoutingCase} */(jspb.Message.computeOneofCase(this, proto.rivet.pegboard.runner_protocol.Routing.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.Routing.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.Routing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.Routing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.Routing.toObject = function(includeInstance, msg) {
  var f, obj = {
gameGuard: (f = msg.getGameGuard()) && proto.rivet.pegboard.runner_protocol.Routing.GameGuard.toObject(includeInstance, f),
host: (f = msg.getHost()) && proto.rivet.pegboard.runner_protocol.Routing.Host.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.Routing}
 */
proto.rivet.pegboard.runner_protocol.Routing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.Routing;
  return proto.rivet.pegboard.runner_protocol.Routing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.Routing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.Routing}
 */
proto.rivet.pegboard.runner_protocol.Routing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.runner_protocol.Routing.GameGuard;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.Routing.GameGuard.deserializeBinaryFromReader);
      msg.setGameGuard(value);
      break;
    case 2:
      var value = new proto.rivet.pegboard.runner_protocol.Routing.Host;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.Routing.Host.deserializeBinaryFromReader);
      msg.setHost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.Routing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.Routing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.Routing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.Routing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameGuard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rivet.pegboard.runner_protocol.Routing.GameGuard.serializeBinaryToWriter
    );
  }
  f = message.getHost();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rivet.pegboard.runner_protocol.Routing.Host.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.Routing.GameGuard.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.Routing.GameGuard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.Routing.GameGuard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.Routing.GameGuard.toObject = function(includeInstance, msg) {
  var f, obj = {
protocol: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.Routing.GameGuard}
 */
proto.rivet.pegboard.runner_protocol.Routing.GameGuard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.Routing.GameGuard;
  return proto.rivet.pegboard.runner_protocol.Routing.GameGuard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.Routing.GameGuard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.Routing.GameGuard}
 */
proto.rivet.pegboard.runner_protocol.Routing.GameGuard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rivet.pegboard.runner_protocol.GameGuardProtocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.Routing.GameGuard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.Routing.GameGuard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.Routing.GameGuard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.Routing.GameGuard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional GameGuardProtocol protocol = 1;
 * @return {!proto.rivet.pegboard.runner_protocol.GameGuardProtocol}
 */
proto.rivet.pegboard.runner_protocol.Routing.GameGuard.prototype.getProtocol = function() {
  return /** @type {!proto.rivet.pegboard.runner_protocol.GameGuardProtocol} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rivet.pegboard.runner_protocol.GameGuardProtocol} value
 * @return {!proto.rivet.pegboard.runner_protocol.Routing.GameGuard} returns this
 */
proto.rivet.pegboard.runner_protocol.Routing.GameGuard.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.Routing.Host.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.Routing.Host.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.Routing.Host} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.Routing.Host.toObject = function(includeInstance, msg) {
  var f, obj = {
protocol: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.Routing.Host}
 */
proto.rivet.pegboard.runner_protocol.Routing.Host.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.Routing.Host;
  return proto.rivet.pegboard.runner_protocol.Routing.Host.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.Routing.Host} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.Routing.Host}
 */
proto.rivet.pegboard.runner_protocol.Routing.Host.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rivet.pegboard.runner_protocol.HostProtocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.Routing.Host.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.Routing.Host.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.Routing.Host} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.Routing.Host.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional HostProtocol protocol = 1;
 * @return {!proto.rivet.pegboard.runner_protocol.HostProtocol}
 */
proto.rivet.pegboard.runner_protocol.Routing.Host.prototype.getProtocol = function() {
  return /** @type {!proto.rivet.pegboard.runner_protocol.HostProtocol} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rivet.pegboard.runner_protocol.HostProtocol} value
 * @return {!proto.rivet.pegboard.runner_protocol.Routing.Host} returns this
 */
proto.rivet.pegboard.runner_protocol.Routing.Host.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional GameGuard game_guard = 1;
 * @return {?proto.rivet.pegboard.runner_protocol.Routing.GameGuard}
 */
proto.rivet.pegboard.runner_protocol.Routing.prototype.getGameGuard = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.Routing.GameGuard} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.Routing.GameGuard, 1));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.Routing.GameGuard|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.Routing} returns this
*/
proto.rivet.pegboard.runner_protocol.Routing.prototype.setGameGuard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rivet.pegboard.runner_protocol.Routing.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.Routing} returns this
 */
proto.rivet.pegboard.runner_protocol.Routing.prototype.clearGameGuard = function() {
  return this.setGameGuard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.Routing.prototype.hasGameGuard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Host host = 2;
 * @return {?proto.rivet.pegboard.runner_protocol.Routing.Host}
 */
proto.rivet.pegboard.runner_protocol.Routing.prototype.getHost = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.Routing.Host} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.Routing.Host, 2));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.Routing.Host|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.Routing} returns this
*/
proto.rivet.pegboard.runner_protocol.Routing.prototype.setHost = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rivet.pegboard.runner_protocol.Routing.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.Routing} returns this
 */
proto.rivet.pegboard.runner_protocol.Routing.prototype.clearHost = function() {
  return this.setHost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.Routing.prototype.hasHost = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rivet.pegboard.runner_protocol.ActorState.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.rivet.pegboard.runner_protocol.ActorState.StateCase = {
  STATE_NOT_SET: 0,
  RUNNING: 1,
  EXITED: 2
};

/**
 * @return {proto.rivet.pegboard.runner_protocol.ActorState.StateCase}
 */
proto.rivet.pegboard.runner_protocol.ActorState.prototype.getStateCase = function() {
  return /** @type {proto.rivet.pegboard.runner_protocol.ActorState.StateCase} */(jspb.Message.computeOneofCase(this, proto.rivet.pegboard.runner_protocol.ActorState.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ActorState.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ActorState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ActorState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorState.toObject = function(includeInstance, msg) {
  var f, obj = {
running: (f = msg.getRunning()) && proto.rivet.pegboard.runner_protocol.ActorState.Running.toObject(includeInstance, f),
exited: (f = msg.getExited()) && proto.rivet.pegboard.runner_protocol.ActorState.Exited.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState}
 */
proto.rivet.pegboard.runner_protocol.ActorState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ActorState;
  return proto.rivet.pegboard.runner_protocol.ActorState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState}
 */
proto.rivet.pegboard.runner_protocol.ActorState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rivet.pegboard.runner_protocol.ActorState.Running;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ActorState.Running.deserializeBinaryFromReader);
      msg.setRunning(value);
      break;
    case 2:
      var value = new proto.rivet.pegboard.runner_protocol.ActorState.Exited;
      reader.readMessage(value,proto.rivet.pegboard.runner_protocol.ActorState.Exited.deserializeBinaryFromReader);
      msg.setExited(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ActorState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ActorState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunning();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rivet.pegboard.runner_protocol.ActorState.Running.serializeBinaryToWriter
    );
  }
  f = message.getExited();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rivet.pegboard.runner_protocol.ActorState.Exited.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ActorState.Running.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ActorState.Running.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ActorState.Running} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorState.Running.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState.Running}
 */
proto.rivet.pegboard.runner_protocol.ActorState.Running.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ActorState.Running;
  return proto.rivet.pegboard.runner_protocol.ActorState.Running.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorState.Running} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState.Running}
 */
proto.rivet.pegboard.runner_protocol.ActorState.Running.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ActorState.Running.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ActorState.Running.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorState.Running} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorState.Running.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rivet.pegboard.runner_protocol.ActorState.Exited.prototype.toObject = function(opt_includeInstance) {
  return proto.rivet.pegboard.runner_protocol.ActorState.Exited.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rivet.pegboard.runner_protocol.ActorState.Exited} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorState.Exited.toObject = function(includeInstance, msg) {
  var f, obj = {
exitCode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState.Exited}
 */
proto.rivet.pegboard.runner_protocol.ActorState.Exited.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rivet.pegboard.runner_protocol.ActorState.Exited;
  return proto.rivet.pegboard.runner_protocol.ActorState.Exited.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorState.Exited} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState.Exited}
 */
proto.rivet.pegboard.runner_protocol.ActorState.Exited.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExitCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rivet.pegboard.runner_protocol.ActorState.Exited.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rivet.pegboard.runner_protocol.ActorState.Exited.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rivet.pegboard.runner_protocol.ActorState.Exited} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rivet.pegboard.runner_protocol.ActorState.Exited.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 exit_code = 1;
 * @return {number}
 */
proto.rivet.pegboard.runner_protocol.ActorState.Exited.prototype.getExitCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState.Exited} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorState.Exited.prototype.setExitCode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState.Exited} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorState.Exited.prototype.clearExitCode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ActorState.Exited.prototype.hasExitCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Running running = 1;
 * @return {?proto.rivet.pegboard.runner_protocol.ActorState.Running}
 */
proto.rivet.pegboard.runner_protocol.ActorState.prototype.getRunning = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ActorState.Running} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ActorState.Running, 1));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ActorState.Running|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState} returns this
*/
proto.rivet.pegboard.runner_protocol.ActorState.prototype.setRunning = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rivet.pegboard.runner_protocol.ActorState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorState.prototype.clearRunning = function() {
  return this.setRunning(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ActorState.prototype.hasRunning = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Exited exited = 2;
 * @return {?proto.rivet.pegboard.runner_protocol.ActorState.Exited}
 */
proto.rivet.pegboard.runner_protocol.ActorState.prototype.getExited = function() {
  return /** @type{?proto.rivet.pegboard.runner_protocol.ActorState.Exited} */ (
    jspb.Message.getWrapperField(this, proto.rivet.pegboard.runner_protocol.ActorState.Exited, 2));
};


/**
 * @param {?proto.rivet.pegboard.runner_protocol.ActorState.Exited|undefined} value
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState} returns this
*/
proto.rivet.pegboard.runner_protocol.ActorState.prototype.setExited = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rivet.pegboard.runner_protocol.ActorState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rivet.pegboard.runner_protocol.ActorState} returns this
 */
proto.rivet.pegboard.runner_protocol.ActorState.prototype.clearExited = function() {
  return this.setExited(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rivet.pegboard.runner_protocol.ActorState.prototype.hasExited = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.rivet.pegboard.runner_protocol.GameGuardProtocol = {
  GG_HTTP: 0,
  GG_HTTPS: 1,
  GG_TCP: 2,
  GG_TCP_TLS: 3,
  GG_UDP: 4
};

/**
 * @enum {number}
 */
proto.rivet.pegboard.runner_protocol.HostProtocol = {
  HOST_TCP: 0,
  HOST_UDP: 1
};

goog.object.extend(exports, proto.rivet.pegboard.runner_protocol);
