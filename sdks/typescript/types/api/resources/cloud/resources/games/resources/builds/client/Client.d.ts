/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as Rivet from "../../../../../../..";
export declare namespace Builds {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Builds {
    protected readonly _options: Builds.Options;
    constructor(_options?: Builds.Options);
    /**
     * Lists game builds for the given game.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    listGameBuilds(gameId: string, requestOptions?: Builds.RequestOptions): Promise<Rivet.cloud.games.ListGameBuildsResponse>;
    /**
     * Creates a new game build for the given game.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    createGameBuild(gameId: string, request: Rivet.cloud.games.CreateGameBuildRequest, requestOptions?: Builds.RequestOptions): Promise<Rivet.cloud.games.CreateGameBuildResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
