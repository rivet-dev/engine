/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as Rivet from "../../../../../../..";
export declare namespace Avatars {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Avatars {
    protected readonly _options: Avatars.Options;
    constructor(_options?: Avatars.Options);
    /**
     * Lists custom avatars for the given game.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    listGameCustomAvatars(gameId: string, requestOptions?: Avatars.RequestOptions): Promise<Rivet.cloud.games.ListGameCustomAvatarsResponse>;
    /**
     * Prepares a custom avatar image upload.
     * Complete upload with `rivet.api.cloud#CompleteCustomAvatarUpload`.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    prepareCustomAvatarUpload(gameId: string, request: Rivet.cloud.games.PrepareCustomAvatarUploadRequest, requestOptions?: Avatars.RequestOptions): Promise<Rivet.cloud.games.PrepareCustomAvatarUploadResponse>;
    /**
     * Completes a custom avatar image upload. Must be called after the file upload process completes.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    completeCustomAvatarUpload(gameId: string, uploadId: string, requestOptions?: Avatars.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
