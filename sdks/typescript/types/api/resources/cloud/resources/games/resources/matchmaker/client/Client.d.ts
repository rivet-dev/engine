/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as Rivet from "../../../../../../..";
export declare namespace Matchmaker {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Matchmaker {
    protected readonly _options: Matchmaker.Options;
    constructor(_options?: Matchmaker.Options);
    /**
     * Exports lobby history over a given query time span.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    exportMatchmakerLobbyHistory(gameId: string, request: Rivet.cloud.games.ExportMatchmakerLobbyHistoryRequest, requestOptions?: Matchmaker.RequestOptions): Promise<Rivet.cloud.games.ExportMatchmakerLobbyHistoryResponse>;
    /**
     * Deletes a matchmaker lobby, stopping it immediately.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    deleteMatchmakerLobby(gameId: string, lobbyId: string, requestOptions?: Matchmaker.RequestOptions): Promise<Rivet.cloud.games.DeleteMatchmakerLobbyResponse>;
    /**
     * Returns the logs for a given lobby.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    getLobbyLogs(gameId: string, lobbyId: string, request: Rivet.cloud.games.GetLobbyLogsRequest, requestOptions?: Matchmaker.RequestOptions): Promise<Rivet.cloud.games.GetLobbyLogsResponse>;
    /**
     * Generates a download URL for logs.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    exportLobbyLogs(gameId: string, lobbyId: string, request: Rivet.cloud.games.ExportLobbyLogsRequest, requestOptions?: Matchmaker.RequestOptions): Promise<Rivet.cloud.games.ExportLobbyLogsResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
