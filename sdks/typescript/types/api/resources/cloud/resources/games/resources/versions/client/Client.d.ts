/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as Rivet from "../../../../../../..";
export declare namespace Versions {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Versions {
    protected readonly _options: Versions.Options;
    constructor(_options?: Versions.Options);
    /**
     * Creates a new game version.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    createGameVersion(gameId: string, request: Rivet.cloud.games.CreateGameVersionRequest, requestOptions?: Versions.RequestOptions): Promise<Rivet.cloud.games.CreateGameVersionResponse>;
    /**
     * Reserves a display name for the next version. Used to generate a monotomically increasing build number without causing a race condition with multiple versions getting created at the same time.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    reserveVersionName(gameId: string, requestOptions?: Versions.RequestOptions): Promise<Rivet.cloud.games.ReserveVersionNameResponse>;
    /**
     * Validates information used to create a new game version.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    validateGameVersion(gameId: string, request: Rivet.cloud.games.ValidateGameVersionRequest, requestOptions?: Versions.RequestOptions): Promise<Rivet.cloud.games.ValidateGameVersionResponse>;
    /**
     * Returns a game version by its version ID.
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    getGameVersionById(gameId: string, versionId: string, requestOptions?: Versions.RequestOptions): Promise<Rivet.cloud.games.GetGameVersionByIdResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
