/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Identity } from "../resources/identity/client/Client";
import { Tokens } from "../resources/tokens/client/Client";

export declare namespace Auth {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class Auth {
    constructor(protected readonly _options: Auth.Options = {}) {}

    protected _identity: Identity | undefined;

    public get identity(): Identity {
        return (this._identity ??= new Identity(this._options));
    }

    protected _tokens: Tokens | undefined;

    public get tokens(): Tokens {
        return (this._tokens ??= new Tokens(this._options));
    }
}
