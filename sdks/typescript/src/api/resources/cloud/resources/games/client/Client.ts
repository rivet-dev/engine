/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { Namespaces } from "../resources/namespaces/client/Client";
import { Avatars } from "../resources/avatars/client/Client";
import { Builds } from "../resources/builds/client/Client";
import { Cdn } from "../resources/cdn/client/Client";
import { Games as Games_ } from "../resources/games/client/Client";
import { Matchmaker } from "../resources/matchmaker/client/Client";
import { Tokens } from "../resources/tokens/client/Client";
import { Versions } from "../resources/versions/client/Client";

export declare namespace Games {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class Games {
    constructor(protected readonly _options: Games.Options = {}) {}

    protected _namespaces: Namespaces | undefined;

    public get namespaces(): Namespaces {
        return (this._namespaces ??= new Namespaces(this._options));
    }

    protected _avatars: Avatars | undefined;

    public get avatars(): Avatars {
        return (this._avatars ??= new Avatars(this._options));
    }

    protected _builds: Builds | undefined;

    public get builds(): Builds {
        return (this._builds ??= new Builds(this._options));
    }

    protected _cdn: Cdn | undefined;

    public get cdn(): Cdn {
        return (this._cdn ??= new Cdn(this._options));
    }

    protected _games: Games_ | undefined;

    public get games(): Games_ {
        return (this._games ??= new Games_(this._options));
    }

    protected _matchmaker: Matchmaker | undefined;

    public get matchmaker(): Matchmaker {
        return (this._matchmaker ??= new Matchmaker(this._options));
    }

    protected _tokens: Tokens | undefined;

    public get tokens(): Tokens {
        return (this._tokens ??= new Tokens(this._options));
    }

    protected _versions: Versions | undefined;

    public get versions(): Versions {
        return (this._versions ??= new Versions(this._options));
    }
}
