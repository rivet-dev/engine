/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Rivet from "../../../../../../api";
import * as core from "../../../../../../core";

export const Profile: core.serialization.ObjectSchema<serializers.identity.Profile.Raw, Rivet.identity.Profile> =
    core.serialization.object({
        identityId: core.serialization.property("identity_id", core.serialization.string()),
        displayName: core.serialization.property(
            "display_name",
            core.serialization.lazy(async () => (await import("../../../../..")).DisplayName)
        ),
        accountNumber: core.serialization.property(
            "account_number",
            core.serialization.lazy(async () => (await import("../../../../..")).AccountNumber)
        ),
        avatarUrl: core.serialization.property("avatar_url", core.serialization.string()),
        presence: core.serialization
            .lazyObject(async () => (await import("../../../../..")).identity.Presence)
            .optional(),
        isRegistered: core.serialization.property("is_registered", core.serialization.boolean()),
        external: core.serialization.lazyObject(async () => (await import("../../../../..")).identity.ExternalLinks),
        isAdmin: core.serialization.property("is_admin", core.serialization.boolean()),
        isGameLinked: core.serialization.property("is_game_linked", core.serialization.boolean().optional()),
        devState: core.serialization.property(
            "dev_state",
            core.serialization.lazy(async () => (await import("../../../../..")).identity.DevState).optional()
        ),
        followerCount: core.serialization.property("follower_count", core.serialization.number()),
        followingCount: core.serialization.property("following_count", core.serialization.number()),
        following: core.serialization.boolean(),
        isFollowingMe: core.serialization.property("is_following_me", core.serialization.boolean()),
        isMutualFollowing: core.serialization.property("is_mutual_following", core.serialization.boolean()),
        joinTs: core.serialization.property("join_ts", core.serialization.date()),
        bio: core.serialization.lazy(async () => (await import("../../../../..")).Bio),
        linkedAccounts: core.serialization.property(
            "linked_accounts",
            core.serialization.list(
                core.serialization.lazyObject(async () => (await import("../../../../..")).identity.LinkedAccount)
            )
        ),
        groups: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../../../..")).identity.Group)
        ),
        games: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../../../..")).game.StatSummary)
        ),
        awaitingDeletion: core.serialization.property("awaiting_deletion", core.serialization.boolean().optional()),
    });

export declare namespace Profile {
    interface Raw {
        identity_id: string;
        display_name: serializers.DisplayName.Raw;
        account_number: serializers.AccountNumber.Raw;
        avatar_url: string;
        presence?: serializers.identity.Presence.Raw | null;
        is_registered: boolean;
        external: serializers.identity.ExternalLinks.Raw;
        is_admin: boolean;
        is_game_linked?: boolean | null;
        dev_state?: serializers.identity.DevState.Raw | null;
        follower_count: number;
        following_count: number;
        following: boolean;
        is_following_me: boolean;
        is_mutual_following: boolean;
        join_ts: string;
        bio: serializers.Bio.Raw;
        linked_accounts: serializers.identity.LinkedAccount.Raw[];
        groups: serializers.identity.Group.Raw[];
        games: serializers.game.StatSummary.Raw[];
        awaiting_deletion?: boolean | null;
    }
}
