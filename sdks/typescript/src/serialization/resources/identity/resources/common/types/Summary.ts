/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Rivet from "../../../../../../api";
import * as core from "../../../../../../core";

export const Summary: core.serialization.ObjectSchema<serializers.identity.Summary.Raw, Rivet.identity.Summary> =
    core.serialization.object({
        identityId: core.serialization.property("identity_id", core.serialization.string()),
        displayName: core.serialization.property(
            "display_name",
            core.serialization.lazy(async () => (await import("../../../../..")).DisplayName)
        ),
        accountNumber: core.serialization.property(
            "account_number",
            core.serialization.lazy(async () => (await import("../../../../..")).AccountNumber)
        ),
        avatarUrl: core.serialization.property("avatar_url", core.serialization.string()),
        presence: core.serialization
            .lazyObject(async () => (await import("../../../../..")).identity.Presence)
            .optional(),
        isRegistered: core.serialization.property("is_registered", core.serialization.boolean()),
        external: core.serialization.lazyObject(async () => (await import("../../../../..")).identity.ExternalLinks),
        following: core.serialization.boolean(),
        isFollowingMe: core.serialization.property("is_following_me", core.serialization.boolean()),
        isMutualFollowing: core.serialization.property("is_mutual_following", core.serialization.boolean()),
    });

export declare namespace Summary {
    interface Raw {
        identity_id: string;
        display_name: serializers.DisplayName.Raw;
        account_number: serializers.AccountNumber.Raw;
        avatar_url: string;
        presence?: serializers.identity.Presence.Raw | null;
        is_registered: boolean;
        external: serializers.identity.ExternalLinks.Raw;
        following: boolean;
        is_following_me: boolean;
        is_mutual_following: boolean;
    }
}
