/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Rivet from "../../../../../../api";
import * as core from "../../../../../../core";

export const GlobalEvent: core.serialization.ObjectSchema<
    serializers.identity.GlobalEvent.Raw,
    Rivet.identity.GlobalEvent
> = core.serialization.object({
    ts: core.serialization.date(),
    kind: core.serialization.lazyObject(async () => (await import("../../../../..")).identity.GlobalEventKind),
    notification: core.serialization
        .lazyObject(async () => (await import("../../../../..")).identity.GlobalEventNotification)
        .optional(),
});

export declare namespace GlobalEvent {
    interface Raw {
        ts: string;
        kind: serializers.identity.GlobalEventKind.Raw;
        notification?: serializers.identity.GlobalEventNotification.Raw | null;
    }
}
