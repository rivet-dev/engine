/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Rivet from "../../../../../../api";
import * as core from "../../../../../../core";

export const ListActivitiesResponse: core.serialization.ObjectSchema<
    serializers.identity.ListActivitiesResponse.Raw,
    Rivet.identity.ListActivitiesResponse
> = core.serialization.object({
    identities: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../../../..")).identity.Handle)
    ),
    games: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../../../..")).game.Summary)
    ),
    suggestedGroups: core.serialization.property(
        "suggested_groups",
        core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../../../..")).group.Summary)
        )
    ),
    suggestedPlayers: core.serialization.property(
        "suggested_players",
        core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../../../..")).identity.Handle)
        )
    ),
    watch: core.serialization.lazyObject(async () => (await import("../../../../..")).WatchResponse),
});

export declare namespace ListActivitiesResponse {
    interface Raw {
        identities: serializers.identity.Handle.Raw[];
        games: serializers.game.Summary.Raw[];
        suggested_groups: serializers.group.Summary.Raw[];
        suggested_players: serializers.identity.Handle.Raw[];
        watch: serializers.WatchResponse.Raw;
    }
}
