/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Rivet from "../../../../../../api";
import * as core from "../../../../../../core";

export const GetGameLinkResponse: core.serialization.ObjectSchema<
    serializers.identity.GetGameLinkResponse.Raw,
    Rivet.identity.GetGameLinkResponse
> = core.serialization.object({
    status: core.serialization.lazy(async () => (await import("../../../../..")).identity.GameLinkStatus),
    game: core.serialization.lazyObject(async () => (await import("../../../../..")).game.Handle),
    currentIdentity: core.serialization.property(
        "current_identity",
        core.serialization.lazyObject(async () => (await import("../../../../..")).identity.Handle)
    ),
    newIdentity: core.serialization.property(
        "new_identity",
        core.serialization
            .lazyObject(async () => (await import("../../../../..")).identity.GetGameLinkNewIdentity)
            .optional()
    ),
    watch: core.serialization.lazyObject(async () => (await import("../../../../..")).WatchResponse),
});

export declare namespace GetGameLinkResponse {
    interface Raw {
        status: serializers.identity.GameLinkStatus.Raw;
        game: serializers.game.Handle.Raw;
        current_identity: serializers.identity.Handle.Raw;
        new_identity?: serializers.identity.GetGameLinkNewIdentity.Raw | null;
        watch: serializers.WatchResponse.Raw;
    }
}
