/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Rivet from "../../../../../../api";
import * as core from "../../../../../../core";

export const Handle: core.serialization.ObjectSchema<serializers.game.Handle.Raw, Rivet.game.Handle> =
    core.serialization.object({
        gameId: core.serialization.property("game_id", core.serialization.string()),
        nameId: core.serialization.property(
            "name_id",
            core.serialization.lazy(async () => (await import("../../../../..")).Identifier)
        ),
        displayName: core.serialization.property(
            "display_name",
            core.serialization.lazy(async () => (await import("../../../../..")).DisplayName)
        ),
        logoUrl: core.serialization.property("logo_url", core.serialization.string().optional()),
        bannerUrl: core.serialization.property("banner_url", core.serialization.string().optional()),
    });

export declare namespace Handle {
    interface Raw {
        game_id: string;
        name_id: serializers.Identifier.Raw;
        display_name: serializers.DisplayName.Raw;
        logo_url?: string | null;
        banner_url?: string | null;
    }
}
