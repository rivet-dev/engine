/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Rivet from "../../../../../../api";
import * as core from "../../../../../../core";

export const Summary: core.serialization.ObjectSchema<serializers.group.Summary.Raw, Rivet.group.Summary> =
    core.serialization.object({
        groupId: core.serialization.property("group_id", core.serialization.string()),
        displayName: core.serialization.property(
            "display_name",
            core.serialization.lazy(async () => (await import("../../../../..")).DisplayName)
        ),
        avatarUrl: core.serialization.property("avatar_url", core.serialization.string().optional()),
        external: core.serialization.lazyObject(async () => (await import("../../../../..")).group.ExternalLinks),
        isDeveloper: core.serialization.property("is_developer", core.serialization.boolean()),
        bio: core.serialization.lazy(async () => (await import("../../../../..")).Bio),
        isCurrentIdentityMember: core.serialization.property(
            "is_current_identity_member",
            core.serialization.boolean()
        ),
        publicity: core.serialization.lazy(async () => (await import("../../../../..")).group.Publicity),
        memberCount: core.serialization.property("member_count", core.serialization.number()),
        ownerIdentityId: core.serialization.property("owner_identity_id", core.serialization.string()),
    });

export declare namespace Summary {
    interface Raw {
        group_id: string;
        display_name: serializers.DisplayName.Raw;
        avatar_url?: string | null;
        external: serializers.group.ExternalLinks.Raw;
        is_developer: boolean;
        bio: serializers.Bio.Raw;
        is_current_identity_member: boolean;
        publicity: serializers.group.Publicity.Raw;
        member_count: number;
        owner_identity_id: string;
    }
}
