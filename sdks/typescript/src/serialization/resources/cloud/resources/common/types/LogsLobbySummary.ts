/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Rivet from "../../../../../../api";
import * as core from "../../../../../../core";

export const LogsLobbySummary: core.serialization.ObjectSchema<
    serializers.cloud.LogsLobbySummary.Raw,
    Rivet.cloud.LogsLobbySummary
> = core.serialization.object({
    lobbyId: core.serialization.property("lobby_id", core.serialization.string()),
    namespaceId: core.serialization.property("namespace_id", core.serialization.string()),
    lobbyGroupNameId: core.serialization.property("lobby_group_name_id", core.serialization.string()),
    regionId: core.serialization.property("region_id", core.serialization.string()),
    createTs: core.serialization.property("create_ts", core.serialization.date()),
    startTs: core.serialization.property("start_ts", core.serialization.date().optional()),
    readyTs: core.serialization.property("ready_ts", core.serialization.date().optional()),
    status: core.serialization.lazyObject(async () => (await import("../../../../..")).cloud.LogsLobbyStatus),
});

export declare namespace LogsLobbySummary {
    interface Raw {
        lobby_id: string;
        namespace_id: string;
        lobby_group_name_id: string;
        region_id: string;
        create_ts: string;
        start_ts?: string | null;
        ready_ts?: string | null;
        status: serializers.cloud.LogsLobbyStatus.Raw;
    }
}
