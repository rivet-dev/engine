/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../../../..";
import * as Rivet from "../../../../../../../../../../api";
import * as core from "../../../../../../../../../../core";

export const LobbyGroupRuntimeDockerPort: core.serialization.ObjectSchema<
    serializers.cloud.version.matchmaker.LobbyGroupRuntimeDockerPort.Raw,
    Rivet.cloud.version.matchmaker.LobbyGroupRuntimeDockerPort
> = core.serialization.object({
    label: core.serialization.string(),
    targetPort: core.serialization.property("target_port", core.serialization.number().optional()),
    portRange: core.serialization.property(
        "port_range",
        core.serialization
            .lazyObject(async () => (await import("../../../../../../../../..")).cloud.version.matchmaker.PortRange)
            .optional()
    ),
    proxyProtocol: core.serialization.property(
        "proxy_protocol",
        core.serialization.lazy(
            async () => (await import("../../../../../../../../..")).cloud.version.matchmaker.PortProtocol
        )
    ),
});

export declare namespace LobbyGroupRuntimeDockerPort {
    interface Raw {
        label: string;
        target_port?: number | null;
        port_range?: serializers.cloud.version.matchmaker.PortRange.Raw | null;
        proxy_protocol: serializers.cloud.version.matchmaker.PortProtocol.Raw;
    }
}
