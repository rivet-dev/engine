/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../../../..";
import * as Rivet from "../../../../../../../../../../api";
import * as core from "../../../../../../../../../../core";

export const GameModeFindConfig: core.serialization.ObjectSchema<
    serializers.cloud.version.matchmaker.GameModeFindConfig.Raw,
    Rivet.cloud.version.matchmaker.GameModeFindConfig
> = core.serialization.object({
    enabled: core.serialization.boolean(),
    identityRequirement: core.serialization.property(
        "identity_requirement",
        core.serialization
            .lazy(
                async () =>
                    (await import("../../../../../../../../..")).cloud.version.matchmaker.GameModeIdentityRequirement
            )
            .optional()
    ),
    verification: core.serialization
        .lazyObject(
            async () => (await import("../../../../../../../../..")).cloud.version.matchmaker.GameModeVerificationConfig
        )
        .optional(),
});

export declare namespace GameModeFindConfig {
    interface Raw {
        enabled: boolean;
        identity_requirement?: serializers.cloud.version.matchmaker.GameModeIdentityRequirement.Raw | null;
        verification?: serializers.cloud.version.matchmaker.GameModeVerificationConfig.Raw | null;
    }
}
