/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../..";
import * as Rivet from "../../../../../../../../api";
import * as core from "../../../../../../../../core";

export const Config: core.serialization.ObjectSchema<
    serializers.cloud.version.matchmaker.Config.Raw,
    Rivet.cloud.version.matchmaker.Config
> = core.serialization.object({
    gameModes: core.serialization.property(
        "game_modes",
        core.serialization
            .record(
                core.serialization.string(),
                core.serialization.lazyObject(
                    async () => (await import("../../../../../../..")).cloud.version.matchmaker.GameMode
                )
            )
            .optional()
    ),
    captcha: core.serialization
        .lazyObject(async () => (await import("../../../../../../..")).cloud.version.matchmaker.Captcha)
        .optional(),
    devHostname: core.serialization.property("dev_hostname", core.serialization.string().optional()),
    regions: core.serialization
        .record(
            core.serialization.string(),
            core.serialization.lazyObject(
                async () => (await import("../../../../../../..")).cloud.version.matchmaker.GameModeRegion
            )
        )
        .optional(),
    maxPlayers: core.serialization.property("max_players", core.serialization.number().optional()),
    maxPlayersDirect: core.serialization.property("max_players_direct", core.serialization.number().optional()),
    maxPlayersParty: core.serialization.property("max_players_party", core.serialization.number().optional()),
    docker: core.serialization
        .lazyObject(async () => (await import("../../../../../../..")).cloud.version.matchmaker.GameModeRuntimeDocker)
        .optional(),
    tier: core.serialization.string().optional(),
    idleLobbies: core.serialization.property(
        "idle_lobbies",
        core.serialization
            .lazyObject(
                async () => (await import("../../../../../../..")).cloud.version.matchmaker.GameModeIdleLobbiesConfig
            )
            .optional()
    ),
    lobbyGroups: core.serialization.property(
        "lobby_groups",
        core.serialization
            .list(
                core.serialization.lazyObject(
                    async () => (await import("../../../../../../..")).cloud.version.matchmaker.LobbyGroup
                )
            )
            .optional()
    ),
});

export declare namespace Config {
    interface Raw {
        game_modes?: Record<string, serializers.cloud.version.matchmaker.GameMode.Raw> | null;
        captcha?: serializers.cloud.version.matchmaker.Captcha.Raw | null;
        dev_hostname?: string | null;
        regions?: Record<string, serializers.cloud.version.matchmaker.GameModeRegion.Raw> | null;
        max_players?: number | null;
        max_players_direct?: number | null;
        max_players_party?: number | null;
        docker?: serializers.cloud.version.matchmaker.GameModeRuntimeDocker.Raw | null;
        tier?: string | null;
        idle_lobbies?: serializers.cloud.version.matchmaker.GameModeIdleLobbiesConfig.Raw | null;
        lobby_groups?: serializers.cloud.version.matchmaker.LobbyGroup.Raw[] | null;
    }
}
