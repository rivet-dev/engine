/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../../../..";
import * as Rivet from "../../../../../../../../../../api";
import * as core from "../../../../../../../../../../core";

export const LobbyGroupRuntimeDocker: core.serialization.ObjectSchema<
    serializers.cloud.version.matchmaker.LobbyGroupRuntimeDocker.Raw,
    Rivet.cloud.version.matchmaker.LobbyGroupRuntimeDocker
> = core.serialization.object({
    buildId: core.serialization.property("build_id", core.serialization.string().optional()),
    args: core.serialization.list(core.serialization.string()),
    envVars: core.serialization.property(
        "env_vars",
        core.serialization.list(
            core.serialization.lazyObject(
                async () =>
                    (await import("../../../../../../../../..")).cloud.version.matchmaker.LobbyGroupRuntimeDockerEnvVar
            )
        )
    ),
    networkMode: core.serialization.property(
        "network_mode",
        core.serialization
            .lazy(async () => (await import("../../../../../../../../..")).cloud.version.matchmaker.NetworkMode)
            .optional()
    ),
    ports: core.serialization.list(
        core.serialization.lazyObject(
            async () =>
                (await import("../../../../../../../../..")).cloud.version.matchmaker.LobbyGroupRuntimeDockerPort
        )
    ),
});

export declare namespace LobbyGroupRuntimeDocker {
    interface Raw {
        build_id?: string | null;
        args: string[];
        env_vars: serializers.cloud.version.matchmaker.LobbyGroupRuntimeDockerEnvVar.Raw[];
        network_mode?: serializers.cloud.version.matchmaker.NetworkMode.Raw | null;
        ports: serializers.cloud.version.matchmaker.LobbyGroupRuntimeDockerPort.Raw[];
    }
}
