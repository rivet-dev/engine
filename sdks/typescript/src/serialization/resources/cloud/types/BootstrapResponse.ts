/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as Rivet from "../../../../api";
import * as core from "../../../../core";

export const BootstrapResponse: core.serialization.ObjectSchema<
    serializers.cloud.BootstrapResponse.Raw,
    Rivet.cloud.BootstrapResponse
> = core.serialization.object({
    cluster: core.serialization.lazy(async () => (await import("../../..")).cloud.BootstrapCluster),
    domains: core.serialization.lazyObject(async () => (await import("../../..")).cloud.BootstrapDomains).optional(),
    origins: core.serialization.lazyObject(async () => (await import("../../..")).cloud.BootstrapOrigins),
    captcha: core.serialization.lazyObject(async () => (await import("../../..")).cloud.BootstrapCaptcha),
});

export declare namespace BootstrapResponse {
    interface Raw {
        cluster: serializers.cloud.BootstrapCluster.Raw;
        domains?: serializers.cloud.BootstrapDomains.Raw | null;
        origins: serializers.cloud.BootstrapOrigins.Raw;
        captcha: serializers.cloud.BootstrapCaptcha.Raw;
    }
}
