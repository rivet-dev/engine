/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as Rivet from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace RunnerConfigs {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class RunnerConfigs {
    constructor(protected readonly _options: RunnerConfigs.Options) {}

    /**
     * @param {Rivet.RunnerConfigsListRequest} request
     * @param {RunnerConfigs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.runnerConfigs.list({
     *         namespace: "namespace"
     *     })
     */
    public async list(
        request: Rivet.RunnerConfigsListRequest,
        requestOptions?: RunnerConfigs.RequestOptions,
    ): Promise<Rivet.RunnerConfigsListResponse> {
        const { namespace, limit, cursor, variant, runnerNames } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["namespace"] = namespace;
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (variant != null) {
            _queryParams["variant"] = serializers.RunnerConfigVariant.jsonOrThrow(variant, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (runnerNames != null) {
            _queryParams["runner_names"] = runnerNames;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "runner-configs",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 180000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.RunnerConfigsListResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError("Timeout exceeded when calling GET /runner-configs.");
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {Rivet.RunnerConfigsServerlessHealthCheckRequest} request
     * @param {RunnerConfigs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.runnerConfigs.serverlessHealthCheck({
     *         namespace: "namespace",
     *         url: "url"
     *     })
     */
    public async serverlessHealthCheck(
        request: Rivet.RunnerConfigsServerlessHealthCheckRequest,
        requestOptions?: RunnerConfigs.RequestOptions,
    ): Promise<Rivet.RunnerConfigsServerlessHealthCheckResponse> {
        const { namespace, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["namespace"] = namespace;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "runner-configs/serverless-health-check",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.RunnerConfigsServerlessHealthCheckRequest.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 180000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.RunnerConfigsServerlessHealthCheckResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError(
                    "Timeout exceeded when calling POST /runner-configs/serverless-health-check.",
                );
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} runnerName
     * @param {Rivet.RunnerConfigsUpsertRequestBody} request
     * @param {RunnerConfigs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.runnerConfigs.upsert("runner_name", {
     *         namespace: "namespace",
     *         datacenters: {
     *             "key": {}
     *         }
     *     })
     */
    public async upsert(
        runnerName: string,
        request: Rivet.RunnerConfigsUpsertRequestBody,
        requestOptions?: RunnerConfigs.RequestOptions,
    ): Promise<Rivet.RunnerConfigsUpsertResponse> {
        const { namespace, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["namespace"] = namespace;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `runner-configs/${encodeURIComponent(runnerName)}`,
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.RunnerConfigsUpsertRequestBody.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 180000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.RunnerConfigsUpsertResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError("Timeout exceeded when calling PUT /runner-configs/{runner_name}.");
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} runnerName
     * @param {Rivet.RunnerConfigsDeleteRequest} request
     * @param {RunnerConfigs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.runnerConfigs.delete("runner_name", {
     *         namespace: "namespace"
     *     })
     */
    public async delete(
        runnerName: string,
        request: Rivet.RunnerConfigsDeleteRequest,
        requestOptions?: RunnerConfigs.RequestOptions,
    ): Promise<Rivet.RunnerConfigsDeleteResponse> {
        const { namespace } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["namespace"] = namespace;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `runner-configs/${encodeURIComponent(runnerName)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 180000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.RunnerConfigsDeleteResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.RivetError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError(
                    "Timeout exceeded when calling DELETE /runner-configs/{runner_name}.",
                );
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
