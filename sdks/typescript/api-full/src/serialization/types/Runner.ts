/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Rivet from "../../api/index";
import * as core from "../../core";
import { StringHttpAddressHashableMap } from "./StringHttpAddressHashableMap";
import { StringTcpAddressHashableMap } from "./StringTcpAddressHashableMap";
import { StringUdpAddressHashableMap } from "./StringUdpAddressHashableMap";
import { RivetId } from "./RivetId";
import { StringHttpAddressHashableMapValue } from "./StringHttpAddressHashableMapValue";
import { StringTcpAddressHashableMapValue } from "./StringTcpAddressHashableMapValue";
import { StringUdpAddressHashableMapValue } from "./StringUdpAddressHashableMapValue";

export const Runner: core.serialization.ObjectSchema<serializers.Runner.Raw, Rivet.Runner> = core.serialization.object({
    addressesHttp: core.serialization.property("addresses_http", StringHttpAddressHashableMap),
    addressesTcp: core.serialization.property("addresses_tcp", StringTcpAddressHashableMap),
    addressesUdp: core.serialization.property("addresses_udp", StringUdpAddressHashableMap),
    createTs: core.serialization.property("create_ts", core.serialization.number()),
    datacenter: core.serialization.string(),
    drainTs: core.serialization.property("drain_ts", core.serialization.number().optional()),
    key: core.serialization.string(),
    lastConnectedTs: core.serialization.property("last_connected_ts", core.serialization.number().optional()),
    lastPingTs: core.serialization.property("last_ping_ts", core.serialization.number()),
    lastRtt: core.serialization.property("last_rtt", core.serialization.number()),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    name: core.serialization.string(),
    namespaceId: core.serialization.property("namespace_id", RivetId),
    remainingSlots: core.serialization.property("remaining_slots", core.serialization.number()),
    runnerId: core.serialization.property("runner_id", RivetId),
    stopTs: core.serialization.property("stop_ts", core.serialization.number().optional()),
    totalSlots: core.serialization.property("total_slots", core.serialization.number()),
    version: core.serialization.number(),
});

export declare namespace Runner {
    export interface Raw {
        addresses_http: StringHttpAddressHashableMap.Raw;
        addresses_tcp: StringTcpAddressHashableMap.Raw;
        addresses_udp: StringUdpAddressHashableMap.Raw;
        create_ts: number;
        datacenter: string;
        drain_ts?: number | null;
        key: string;
        last_connected_ts?: number | null;
        last_ping_ts: number;
        last_rtt: number;
        metadata?: Record<string, unknown> | null;
        name: string;
        namespace_id: RivetId.Raw;
        remaining_slots: number;
        runner_id: RivetId.Raw;
        stop_ts?: number | null;
        total_slots: number;
        version: number;
    }
}
