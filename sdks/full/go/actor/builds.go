// This file was auto-generated by Fern from our API Definition.

package actor

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	core "sdk/core"
	upload "sdk/upload"
)

type GetBuildRequest struct {
	TagsJson *string `json:"-"`
}

type ListBuildsRequest struct {
	TagsJson *string `json:"-"`
}

type CreateBuildRequest struct {
	Name string `json:"name"`
	// A tag given to the game build.
	ImageTag           string              `json:"image_tag"`
	ImageFile          *upload.PrepareFile `json:"image_file,omitempty"`
	MultipartUpload    *bool               `json:"multipart_upload,omitempty"`
	Kind               *BuildKind          `json:"kind,omitempty"`
	Compression        *BuildCompression   `json:"compression,omitempty"`
	PrewarmDatacenters []uuid.UUID         `json:"prewarm_datacenters,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateBuildRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateBuildRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateBuildRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateBuildRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateBuildResponse struct {
	Build                  uuid.UUID                  `json:"build"`
	ImagePresignedRequest  *upload.PresignedRequest   `json:"image_presigned_request,omitempty"`
	ImagePresignedRequests []*upload.PresignedRequest `json:"image_presigned_requests,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateBuildResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateBuildResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateBuildResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateBuildResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetBuildResponse struct {
	Build *Build `json:"build,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetBuildResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetBuildResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetBuildResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetBuildResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListBuildsResponse struct {
	// A list of builds for the game associated with the token.
	Builds []*Build `json:"builds,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListBuildsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListBuildsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListBuildsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListBuildsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type PatchBuildTagsRequest struct {
	Tags interface{} `json:"tags,omitempty"`
	// Removes the given tag keys from all other builds.
	ExclusiveTags []string `json:"exclusive_tags,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PatchBuildTagsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchBuildTagsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatchBuildTagsRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchBuildTagsRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PatchBuildTagsResponse struct {
	_rawJSON json.RawMessage
}

func (p *PatchBuildTagsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PatchBuildTagsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PatchBuildTagsResponse(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PatchBuildTagsResponse) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
