// This file was auto-generated by Fern from our API Definition.

package clusters

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
)

type DestroyServersRequest struct {
	ServerId   *string   `json:"-"`
	Datacenter *string   `json:"-"`
	Pool       *PoolType `json:"-"`
	PublicIp   *string   `json:"-"`
}

type ListServersRequest struct {
	ServerId   *string   `json:"-"`
	Datacenter *string   `json:"-"`
	Pool       *PoolType `json:"-"`
	PublicIp   *string   `json:"-"`
}

type ListLostServersRequest struct {
	ServerId   *string   `json:"-"`
	Datacenter *string   `json:"-"`
	Pool       *PoolType `json:"-"`
	PublicIp   *string   `json:"-"`
}

type PruneServersRequest struct {
	ServerId   *string   `json:"-"`
	Datacenter *string   `json:"-"`
	Pool       *PoolType `json:"-"`
	PublicIp   *string   `json:"-"`
}

type TaintServersRequest struct {
	ServerId   *string   `json:"-"`
	Datacenter *string   `json:"-"`
	Pool       *PoolType `json:"-"`
	PublicIp   *string   `json:"-"`
}

type PoolType string

const (
	PoolTypeJob             PoolType = "job"
	PoolTypeGg              PoolType = "gg"
	PoolTypeAts             PoolType = "ats"
	PoolTypePegboard        PoolType = "pegboard"
	PoolTypePegboardIsolate PoolType = "pegboard_isolate"
)

func NewPoolTypeFromString(s string) (PoolType, error) {
	switch s {
	case "job":
		return PoolTypeJob, nil
	case "gg":
		return PoolTypeGg, nil
	case "ats":
		return PoolTypeAts, nil
	case "pegboard":
		return PoolTypePegboard, nil
	case "pegboard_isolate":
		return PoolTypePegboardIsolate, nil
	}
	var t PoolType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PoolType) Ptr() *PoolType {
	return &p
}

type ListServersResponse struct {
	Servers []*Server `json:"servers,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListServersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListServersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListServersResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListServersResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
