// This file was auto-generated by Fern from our API Definition.

package clusters

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	core "sdk/core"
)

type CreateClusterRequest struct {
	NameId      string     `json:"name_id"`
	OwnerTeamId *uuid.UUID `json:"owner_team_id,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateClusterRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateClusterRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateClusterRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateClusterRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateClusterResponse struct {
	ClusterId uuid.UUID `json:"cluster_id"`

	_rawJSON json.RawMessage
}

func (c *CreateClusterResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateClusterResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateClusterResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateClusterResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ListClustersResponse struct {
	Clusters []*Cluster `json:"clusters,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListClustersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListClustersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListClustersResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListClustersResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
