// This file was auto-generated by Fern from our API Definition.

package clusters

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	core "sdk/core"
)

type CreateDatacenterRequest struct {
	DisplayName          string              `json:"display_name"`
	NameId               string              `json:"name_id"`
	Provider             Provider            `json:"provider,omitempty"`
	ProviderDatacenterId string              `json:"provider_datacenter_id"`
	BuildDeliveryMethod  BuildDeliveryMethod `json:"build_delivery_method,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateDatacenterRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateDatacenterRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateDatacenterRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateDatacenterRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateDatacenterResponse struct {
	DatacenterId uuid.UUID `json:"datacenter_id"`

	_rawJSON json.RawMessage
}

func (c *CreateDatacenterResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateDatacenterResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateDatacenterResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateDatacenterResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ListDatacentersResponse struct {
	Datacenters []*Datacenter `json:"datacenters,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListDatacentersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListDatacentersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListDatacentersResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListDatacentersResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateDatacenterRequest struct {
	PoolType     PoolType    `json:"pool_type,omitempty"`
	Hardware     []*Hardware `json:"hardware,omitempty"`
	DesiredCount *int        `json:"desired_count,omitempty"`
	MaxCount     *int        `json:"max_count,omitempty"`
	DrainTimeout *int64      `json:"drain_timeout,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UpdateDatacenterRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateDatacenterRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateDatacenterRequest(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateDatacenterRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
