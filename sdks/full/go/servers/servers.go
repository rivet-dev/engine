// This file was auto-generated by Fern from our API Definition.

package servers

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	core "sdk/core"
)

type DestroyServerRequest struct {
	// The duration to wait for in milliseconds before killing the server. This should be used to override the default kill timeout if a faster time is needed, say for ignoring a graceful shutdown.
	OverrideKillTimeout *int64 `json:"-"`
}

type CreateServerRequest struct {
	// The name ID of the datacenter
	Datacenter string      `json:"datacenter"`
	Metadata   interface{} `json:"metadata,omitempty"`
	Resources  *Resources  `json:"resources,omitempty"`
	// The duration to wait for in milliseconds before killing the server. This should be set to a safe default, and can be overridden during a DELETE request if needed.
	KillTimeout *int64   `json:"kill_timeout,omitempty"`
	Runtime     *Runtime `json:"runtime,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateServerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateServerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateServerRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateServerRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateServerResponse struct {
	// The server that was created
	Server *Server `json:"server,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateServerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateServerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateServerResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateServerResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DestroyServerResponse struct {
	ServerId uuid.UUID `json:"server_id"`

	_rawJSON json.RawMessage
}

func (d *DestroyServerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DestroyServerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestroyServerResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestroyServerResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}
