/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Rivet from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { DisplayName } from "../../../../common/types/DisplayName";
import { ExternalLinks } from "./ExternalLinks";
import { Bio } from "../../../../common/types/Bio";
import { Publicity } from "./Publicity";

export const Summary: core.serialization.ObjectSchema<serializers.group.Summary.Raw, Rivet.group.Summary> =
    core.serialization.object({
        groupId: core.serialization.property("group_id", core.serialization.string()),
        displayName: core.serialization.property("display_name", DisplayName),
        avatarUrl: core.serialization.property("avatar_url", core.serialization.string().optional()),
        external: ExternalLinks,
        isDeveloper: core.serialization.property("is_developer", core.serialization.boolean()),
        bio: Bio,
        isCurrentIdentityMember: core.serialization.property(
            "is_current_identity_member",
            core.serialization.boolean()
        ),
        publicity: Publicity,
        memberCount: core.serialization.property("member_count", core.serialization.number()),
        ownerIdentityId: core.serialization.property("owner_identity_id", core.serialization.string()),
    });

export declare namespace Summary {
    interface Raw {
        group_id: string;
        display_name: DisplayName.Raw;
        avatar_url?: string | null;
        external: ExternalLinks.Raw;
        is_developer: boolean;
        bio: Bio.Raw;
        is_current_identity_member: boolean;
        publicity: Publicity.Raw;
        member_count: number;
        owner_identity_id: string;
    }
}
