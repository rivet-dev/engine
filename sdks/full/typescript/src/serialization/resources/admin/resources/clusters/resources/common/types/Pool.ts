/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../..";
import * as Rivet from "../../../../../../../../api";
import * as core from "../../../../../../../../core";

export const Pool: core.serialization.ObjectSchema<serializers.admin.clusters.Pool.Raw, Rivet.admin.clusters.Pool> =
    core.serialization.object({
        poolType: core.serialization.property(
            "pool_type",
            core.serialization.lazy(async () => (await import("../../../../../../..")).admin.clusters.PoolType)
        ),
        hardware: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../../../../../..")).admin.clusters.Hardware)
        ),
        desiredCount: core.serialization.property("desired_count", core.serialization.number()),
        minCount: core.serialization.property("min_count", core.serialization.number()),
        maxCount: core.serialization.property("max_count", core.serialization.number()),
        drainTimeout: core.serialization.property("drain_timeout", core.serialization.number()),
    });

export declare namespace Pool {
    interface Raw {
        pool_type: serializers.admin.clusters.PoolType.Raw;
        hardware: serializers.admin.clusters.Hardware.Raw[];
        desired_count: number;
        min_count: number;
        max_count: number;
        drain_timeout: number;
    }
}
