/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../../index";
import * as Rivet from "../../../../../../../../api/index";
import * as core from "../../../../../../../../core";
import { Provider as admin_clusters_common$$provider } from "../../common/types/Provider";
import { BuildDeliveryMethod as admin_clusters_common$$buildDeliveryMethod } from "../../common/types/BuildDeliveryMethod";
import { admin } from "../../../../../../index";

export const CreateDatacenterRequest: core.serialization.ObjectSchema<
    serializers.admin.clusters.CreateDatacenterRequest.Raw,
    Rivet.admin.clusters.CreateDatacenterRequest
> = core.serialization.object({
    displayName: core.serialization.property("display_name", core.serialization.string()),
    nameId: core.serialization.property("name_id", core.serialization.string()),
    provider: admin_clusters_common$$provider,
    providerDatacenterId: core.serialization.property("provider_datacenter_id", core.serialization.string()),
    buildDeliveryMethod: core.serialization.property(
        "build_delivery_method",
        admin_clusters_common$$buildDeliveryMethod
    ),
    prebakesEnabled: core.serialization.property("prebakes_enabled", core.serialization.boolean()),
});

export declare namespace CreateDatacenterRequest {
    interface Raw {
        display_name: string;
        name_id: string;
        provider: admin.clusters.Provider.Raw;
        provider_datacenter_id: string;
        build_delivery_method: admin.clusters.BuildDeliveryMethod.Raw;
        prebakes_enabled: boolean;
    }
}
