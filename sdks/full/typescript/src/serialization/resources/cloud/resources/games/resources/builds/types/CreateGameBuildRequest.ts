/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../../index";
import * as Rivet from "../../../../../../../../api/index";
import * as core from "../../../../../../../../core";
import { DisplayName } from "../../../../../../common/types/DisplayName";
import { PrepareFile } from "../../../../../../upload/resources/common/types/PrepareFile";
import { BuildKind } from "./BuildKind";
import { BuildCompression } from "./BuildCompression";

export const CreateGameBuildRequest: core.serialization.ObjectSchema<
    serializers.cloud.games.CreateGameBuildRequest.Raw,
    Rivet.cloud.games.CreateGameBuildRequest
> = core.serialization.object({
    displayName: core.serialization.property("display_name", DisplayName),
    imageTag: core.serialization.property("image_tag", core.serialization.string()),
    imageFile: core.serialization.property("image_file", PrepareFile),
    multipartUpload: core.serialization.property("multipart_upload", core.serialization.boolean().optional()),
    kind: BuildKind.optional(),
    compression: BuildCompression.optional(),
});

export declare namespace CreateGameBuildRequest {
    interface Raw {
        display_name: DisplayName.Raw;
        image_tag: string;
        image_file: PrepareFile.Raw;
        multipart_upload?: boolean | null;
        kind?: BuildKind.Raw | null;
        compression?: BuildCompression.Raw | null;
    }
}
