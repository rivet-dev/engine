/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Rivet from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { PrepareFile as upload_common$$prepareFile } from "../../../../upload/resources/common/types/PrepareFile";
import { BuildKind as actor_builds$$buildKind } from "./BuildKind";
import { BuildCompression as actor_builds$$buildCompression } from "./BuildCompression";
import { upload, actor } from "../../../../index";

export const CreateBuildRequest: core.serialization.ObjectSchema<
    serializers.actor.CreateBuildRequest.Raw,
    Rivet.actor.CreateBuildRequest
> = core.serialization.object({
    name: core.serialization.string(),
    imageTag: core.serialization.property("image_tag", core.serialization.string()),
    imageFile: core.serialization.property("image_file", upload_common$$prepareFile),
    multipartUpload: core.serialization.property("multipart_upload", core.serialization.boolean().optional()),
    kind: actor_builds$$buildKind.optional(),
    compression: actor_builds$$buildCompression.optional(),
    prewarmDatacenters: core.serialization.property(
        "prewarm_datacenters",
        core.serialization.list(core.serialization.string()).optional()
    ),
});

export declare namespace CreateBuildRequest {
    interface Raw {
        name: string;
        image_tag: string;
        image_file: upload.PrepareFile.Raw;
        multipart_upload?: boolean | null;
        kind?: actor.BuildKind.Raw | null;
        compression?: actor.BuildCompression.Raw | null;
        prewarm_datacenters?: string[] | null;
    }
}
