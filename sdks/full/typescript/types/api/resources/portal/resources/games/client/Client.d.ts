/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Rivet from "../../../../../index";
export declare namespace Games {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Games {
    protected readonly _options: Games.Options;
    constructor(_options?: Games.Options);
    /**
     * Returns a game profile.
     *
     * @param {string} gameNameId - A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
     * @param {Rivet.portal.GetGameProfileRequest} request
     * @param {Games.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.portal.games.getGameProfile("string", {
     *         watchIndex: "string"
     *     })
     */
    getGameProfile(gameNameId: string, request?: Rivet.portal.GetGameProfileRequest, requestOptions?: Games.RequestOptions): Promise<Rivet.portal.GetGameProfileResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
