/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Rivet from "../../../../../index";
export declare namespace JoinRequests {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class JoinRequests {
    protected readonly _options: JoinRequests.Options;
    constructor(_options?: JoinRequests.Options);
    /**
     * Requests to join a group.
     *
     * @param {string} groupId
     * @param {JoinRequests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.group.joinRequests.createJoinRequest("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    createJoinRequest(groupId: string, requestOptions?: JoinRequests.RequestOptions): Promise<void>;
    /**
     * Resolves a join request for a given group.
     *
     * @param {string} groupId
     * @param {string} identityId
     * @param {Rivet.group.ResolveJoinRequestRequest} request
     * @param {JoinRequests.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.group.joinRequests.resolveJoinRequest("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         resolution: true
     *     })
     */
    resolveJoinRequest(groupId: string, identityId: string, request: Rivet.group.ResolveJoinRequestRequest, requestOptions?: JoinRequests.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
