/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Rivet from "../../../../../index";
import { Datacenters } from "../resources/datacenters/client/Client";
import { Servers } from "../resources/servers/client/Client";
export declare namespace Clusters {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Clusters {
    protected readonly _options: Clusters.Options;
    constructor(_options?: Clusters.Options);
    /**
     * Get clusters
     *
     * @param {Clusters.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.admin.clusters.list()
     */
    list(requestOptions?: Clusters.RequestOptions): Promise<Rivet.admin.clusters.ListClustersResponse>;
    /**
     * Create a new cluster
     *
     * @param {Rivet.admin.clusters.CreateClusterRequest} request
     * @param {Clusters.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.admin.clusters.create({
     *         nameId: "string",
     *         ownerTeamId: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"
     *     })
     */
    create(request: Rivet.admin.clusters.CreateClusterRequest, requestOptions?: Clusters.RequestOptions): Promise<Rivet.admin.clusters.CreateClusterResponse>;
    protected _datacenters: Datacenters | undefined;
    get datacenters(): Datacenters;
    protected _servers: Servers | undefined;
    get servers(): Servers;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
