/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Rivet from "../../../../../index";
export declare namespace Builds {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Builds {
    protected readonly _options: Builds.Options;
    constructor(_options?: Builds.Options);
    /**
     * Get a build.
     *
     * @param {string} build
     * @param {Rivet.actor.GetBuildRequestQuery} request
     * @param {Builds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.actor.builds.get("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         project: "string",
     *         environment: "string"
     *     })
     */
    get(build: string, request?: Rivet.actor.GetBuildRequestQuery, requestOptions?: Builds.RequestOptions): Promise<Rivet.actor.GetBuildResponse>;
    /**
     * Lists all builds of the project associated with the token used. Can be filtered by tags in the query string.
     *
     * @param {Rivet.actor.ListBuildsRequestQuery} request
     * @param {Builds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.actor.builds.list({
     *         project: "string",
     *         environment: "string",
     *         tagsJson: "string"
     *     })
     */
    list(request?: Rivet.actor.ListBuildsRequestQuery, requestOptions?: Builds.RequestOptions): Promise<Rivet.actor.ListBuildsResponse>;
    /**
     * @param {string} build
     * @param {Rivet.actor.PatchBuildTagsRequestQuery} request
     * @param {Builds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.actor.builds.patchTags("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         project: "string",
     *         environment: "string",
     *         body: {
     *             tags: {
     *                 "key": "value"
     *             },
     *             exclusiveTags: ["string"]
     *         }
     *     })
     */
    patchTags(build: string, request: Rivet.actor.PatchBuildTagsRequestQuery, requestOptions?: Builds.RequestOptions): Promise<Rivet.actor.PatchBuildTagsResponse>;
    /**
     * Creates a new project build for the given project.
     *
     * @param {Rivet.actor.PrepareBuildRequestQuery} request
     * @param {Builds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.actor.builds.prepare({
     *         project: "string",
     *         environment: "string",
     *         body: {
     *             name: "string",
     *             tags: {
     *                 "key": "value"
     *             },
     *             imageTag: "string",
     *             imageFile: {
     *                 path: "string",
     *                 contentType: "string",
     *                 contentLength: 1000000
     *             },
     *             multipartUpload: true,
     *             kind: "docker_image",
     *             compression: "none",
     *             prewarmRegions: ["string"]
     *         }
     *     })
     */
    prepare(request: Rivet.actor.PrepareBuildRequestQuery, requestOptions?: Builds.RequestOptions): Promise<Rivet.actor.PrepareBuildResponse>;
    /**
     * Marks an upload as complete.
     *
     * @param {string} build
     * @param {Rivet.actor.CompleteBuildRequestQuery} request
     * @param {Builds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.actor.builds.complete("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         project: "string",
     *         environment: "string"
     *     })
     */
    complete(build: string, request?: Rivet.actor.CompleteBuildRequestQuery, requestOptions?: Builds.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
