/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Rivet from "../../../index";
import { Builds } from "../resources/builds/client/Client";
import { Datacenters } from "../resources/datacenters/client/Client";
import { Logs } from "../resources/logs/client/Client";
export declare namespace Actor {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Actor {
    protected readonly _options: Actor.Options;
    constructor(_options?: Actor.Options);
    /**
     * Gets a dynamic actor.
     *
     * @param {string} gameId
     * @param {string} environmentId
     * @param {string} actorId - The id of the actor to destroy
     * @param {Actor.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.actor.get("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    get(gameId: string, environmentId: string, actorId: string, requestOptions?: Actor.RequestOptions): Promise<Rivet.actor.GetActorResponse>;
    /**
     * Lists all actors associated with the token used. Can be filtered by tags in the query string.
     *
     * @param {string} gameId
     * @param {string} environmentId
     * @param {Rivet.actor.GetActorsRequest} request
     * @param {Actor.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.actor.list("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         tagsJson: "string",
     *         includeDestroyed: true,
     *         cursor: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"
     *     })
     */
    list(gameId: string, environmentId: string, request?: Rivet.actor.GetActorsRequest, requestOptions?: Actor.RequestOptions): Promise<Rivet.actor.ListActorsResponse>;
    /**
     * Create a new dynamic actor.
     *
     * @param {string} gameId
     * @param {string} environmentId
     * @param {Rivet.actor.CreateActorRequest} request
     * @param {Actor.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.actor.create("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         datacenter: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *         tags: {
     *             "key": "value"
     *         },
     *         runtime: {
     *             build: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *             arguments: ["string"],
     *             environment: {
     *                 "string": "string"
     *             }
     *         },
     *         network: {
     *             mode: Rivet.actor.NetworkMode.Bridge,
     *             ports: {
     *                 "string": {
     *                     protocol: Rivet.actor.PortProtocol.Http,
     *                     internalPort: 1,
     *                     routing: {
     *                         gameGuard: {
     *                             authorization: undefined
     *                         },
     *                         host: {}
     *                     }
     *                 }
     *             }
     *         },
     *         resources: {
     *             cpu: 1,
     *             memory: 1
     *         },
     *         lifecycle: {
     *             killTimeout: 1000000
     *         }
     *     })
     */
    create(gameId: string, environmentId: string, request: Rivet.actor.CreateActorRequest, requestOptions?: Actor.RequestOptions): Promise<Rivet.actor.CreateActorResponse>;
    /**
     * Destroy a dynamic actor.
     *
     * @param {string} gameId
     * @param {string} environmentId
     * @param {string} actorId - The id of the actor to destroy
     * @param {Rivet.actor.DestroyActorRequest} request
     * @param {Actor.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.actor.destroy("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         overrideKillTimeout: 1000000
     *     })
     */
    destroy(gameId: string, environmentId: string, actorId: string, request?: Rivet.actor.DestroyActorRequest, requestOptions?: Actor.RequestOptions): Promise<Rivet.actor.DestroyActorResponse>;
    protected _builds: Builds | undefined;
    get builds(): Builds;
    protected _datacenters: Datacenters | undefined;
    get datacenters(): Datacenters;
    protected _logs: Logs | undefined;
    get logs(): Logs;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
