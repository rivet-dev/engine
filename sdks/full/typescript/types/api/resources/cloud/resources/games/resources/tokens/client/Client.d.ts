/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as Rivet from "../../../../../../../index";
export declare namespace Tokens {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Tokens {
    protected readonly _options: Tokens.Options;
    constructor(_options?: Tokens.Options);
    /**
     * Creates a new game cloud token.
     *
     * @param {string} gameId
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.cloud.games.tokens.createCloudToken("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    createCloudToken(gameId: string, requestOptions?: Tokens.RequestOptions): Promise<Rivet.cloud.games.CreateCloudTokenResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
