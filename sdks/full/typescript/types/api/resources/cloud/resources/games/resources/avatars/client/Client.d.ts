/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as Rivet from "../../../../../../../index";
export declare namespace Avatars {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Avatars {
    protected readonly _options: Avatars.Options;
    constructor(_options?: Avatars.Options);
    /**
     * Lists custom avatars for the given game.
     *
     * @param {string} gameId
     * @param {Avatars.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.cloud.games.avatars.listGameCustomAvatars("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    listGameCustomAvatars(gameId: string, requestOptions?: Avatars.RequestOptions): Promise<Rivet.cloud.games.ListGameCustomAvatarsResponse>;
    /**
     * Prepares a custom avatar image upload.
     * Complete upload with `rivet.api.cloud#CompleteCustomAvatarUpload`.
     *
     * @param {string} gameId
     * @param {Rivet.cloud.games.PrepareCustomAvatarUploadRequest} request
     * @param {Avatars.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.cloud.games.avatars.prepareCustomAvatarUpload("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         path: "string",
     *         mime: "string",
     *         contentLength: 1000000
     *     })
     */
    prepareCustomAvatarUpload(gameId: string, request: Rivet.cloud.games.PrepareCustomAvatarUploadRequest, requestOptions?: Avatars.RequestOptions): Promise<Rivet.cloud.games.PrepareCustomAvatarUploadResponse>;
    /**
     * Completes a custom avatar image upload. Must be called after the file upload process completes.
     *
     * @param {string} gameId
     * @param {string} uploadId
     * @param {Avatars.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.cloud.games.avatars.completeCustomAvatarUpload("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    completeCustomAvatarUpload(gameId: string, uploadId: string, requestOptions?: Avatars.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
