/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ServersCreateServerRequest {
    /// The name ID of the datacenter
    #[serde(rename = "datacenter")]
    pub datacenter: String,
    /// The duration to wait for in milliseconds before killing the server. This should be set to a safe default, and can be overridden during a DELETE request if needed.
    #[serde(rename = "kill_timeout", skip_serializing_if = "Option::is_none")]
    pub kill_timeout: Option<i64>,
    #[serde(rename = "metadata", deserialize_with = "Option::deserialize")]
    pub metadata: Option<serde_json::Value>,
    #[serde(rename = "resources")]
    pub resources: Box<crate::models::ServersResources>,
    #[serde(rename = "runtime")]
    pub runtime: Box<crate::models::ServersRuntime>,
}

impl ServersCreateServerRequest {
    pub fn new(datacenter: String, metadata: Option<serde_json::Value>, resources: crate::models::ServersResources, runtime: crate::models::ServersRuntime) -> ServersCreateServerRequest {
        ServersCreateServerRequest {
            datacenter,
            kill_timeout: None,
            metadata,
            resources: Box::new(resources),
            runtime: Box::new(runtime),
        }
    }
}


