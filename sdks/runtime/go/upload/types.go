// This file was auto-generated by Fern from our API Definition.

package upload

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
)

// A file being prepared to upload.
type PrepareFile struct {
	// The path/filename of the file.
	Path string `json:"path"`
	// The MIME type of the file.
	ContentType *string `json:"content_type,omitempty"`
	// Unsigned 64 bit integer.
	ContentLength int64 `json:"content_length"`

	_rawJSON json.RawMessage
}

func (p *PrepareFile) UnmarshalJSON(data []byte) error {
	type unmarshaler PrepareFile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PrepareFile(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PrepareFile) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A presigned request used to upload files. Upload your file to the given URL via a PUT request.
type PresignedRequest struct {
	// The name of the file to upload. This is the same as the one given in the upload prepare file.
	Path string `json:"path"`
	// The URL of the presigned request for which to upload your file to.
	Url string `json:"url"`
	// The byte offset for this multipart chunk. Always 0 if not a multipart upload.
	ByteOffset int64 `json:"byte_offset"`
	// Expected size of this upload.
	ContentLength int64 `json:"content_length"`

	_rawJSON json.RawMessage
}

func (p *PresignedRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PresignedRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PresignedRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PresignedRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
