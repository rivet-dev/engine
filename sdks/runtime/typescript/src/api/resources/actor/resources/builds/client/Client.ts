/**
 * This file was auto-generated by Fern from our API Definition.
 */

<<<<<<< HEAD
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Rivet from "../../../../../index";
import urlJoin from "url-join";
=======
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Rivet from "../../../index";
import urlJoin from "url-join";
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";
import { Builds } from "../resources/builds/client/Client";
import { Logs } from "../resources/logs/client/Client";
import { Regions } from "../resources/regions/client/Client";

export declare namespace Actor {
========
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
import * as serializers from "../../../../../../serialization/index";
import * as errors from "../../../../../../errors/index";

export declare namespace Builds {
<<<<<<< HEAD
=======
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

<<<<<<< HEAD
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
export class Actor {
    constructor(protected readonly _options: Actor.Options) {}

    /**
     * Gets a dynamic actor.
     *
     * @param {string} actor - The id of the actor to destroy
     * @param {Rivet.actor.ListActorsRequestQuery} request
     * @param {Actor.RequestOptions} requestOptions - Request-specific configuration.
========
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
export class Builds {
    constructor(protected readonly _options: Builds.Options) {}

    /**
     * Get a build.
     *
     * @param {string} build
     * @param {Rivet.actor.GetBuildRequestQuery} request
     * @param {Builds.RequestOptions} requestOptions - Request-specific configuration.
<<<<<<< HEAD
=======
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
<<<<<<< HEAD
     *     await client.actor.builds.get("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
     *     await client.actor.get("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
========
     *     await client.actor.builds.get("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
     *         project: "string",
     *         environment: "string"
     *     })
     */
    public async get(
<<<<<<< HEAD
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
        actor: string,
        request: Rivet.actor.ListActorsRequestQuery = {},
        requestOptions?: Actor.RequestOptions
    ): Promise<Rivet.actor.GetActorResponse> {
========
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
        build: string,
        request: Rivet.actor.GetBuildRequestQuery = {},
        requestOptions?: Builds.RequestOptions
    ): Promise<Rivet.actor.GetBuildResponse> {
<<<<<<< HEAD
=======
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
        const { project, environment } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        if (environment != null) {
            _queryParams["environment"] = environment;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.RivetEnvironment.Production,
<<<<<<< HEAD
                `/builds/${encodeURIComponent(build)}`
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
                `/actors/${encodeURIComponent(actor)}`
========
                `/builds/${encodeURIComponent(build)}`
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 180000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
<<<<<<< HEAD
            return serializers.actor.GetBuildResponse.parseOrThrow(_response.body, {
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
            return serializers.actor.GetActorResponse.parseOrThrow(_response.body, {
========
            return serializers.actor.GetBuildResponse.parseOrThrow(_response.body, {
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new Rivet.InternalError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Rivet.RateLimitError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new Rivet.ForbiddenError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 408:
                    throw new Rivet.UnauthorizedError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Rivet.NotFoundError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 400:
                    throw new Rivet.BadRequestError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.RivetError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
<<<<<<< HEAD
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
     * Lists all actors associated with the token used. Can be filtered by tags in the query string.
     *
     * @param {Rivet.actor.GetActorsRequestQuery} request
     * @param {Actor.RequestOptions} requestOptions - Request-specific configuration.
========
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
     * Lists all builds of the project associated with the token used. Can be filtered by tags in the query string.
     *
     * @param {Rivet.actor.ListBuildsRequestQuery} request
     * @param {Builds.RequestOptions} requestOptions - Request-specific configuration.
<<<<<<< HEAD
=======
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
<<<<<<< HEAD
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
     *     await client.actor.list({
     *         project: "string",
     *         environment: "string",
     *         tagsJson: "string",
     *         includeDestroyed: true,
     *         cursor: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"
     *     })
     */
    public async list(
        request: Rivet.actor.GetActorsRequestQuery = {},
        requestOptions?: Actor.RequestOptions
    ): Promise<Rivet.actor.ListActorsResponse> {
        const { project, environment, tagsJson, includeDestroyed, cursor } = request;
========
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
     *     await client.actor.builds.list({
     *         project: "string",
     *         environment: "string",
     *         tagsJson: "string"
     *     })
     */
    public async list(
        request: Rivet.actor.ListBuildsRequestQuery = {},
        requestOptions?: Builds.RequestOptions
    ): Promise<Rivet.actor.ListBuildsResponse> {
        const { project, environment, tagsJson } = request;
<<<<<<< HEAD
=======
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        if (environment != null) {
            _queryParams["environment"] = environment;
        }

        if (tagsJson != null) {
            _queryParams["tags_json"] = tagsJson;
        }

<<<<<<< HEAD
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
        if (includeDestroyed != null) {
            _queryParams["include_destroyed"] = includeDestroyed.toString();
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.RivetEnvironment.Production,
                "/actors"
========
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.RivetEnvironment.Production,
                "/builds"
<<<<<<< HEAD
=======
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 180000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
<<<<<<< HEAD
            return serializers.actor.ListBuildsResponse.parseOrThrow(_response.body, {
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
            return serializers.actor.ListActorsResponse.parseOrThrow(_response.body, {
========
            return serializers.actor.ListBuildsResponse.parseOrThrow(_response.body, {
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new Rivet.InternalError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Rivet.RateLimitError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new Rivet.ForbiddenError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 408:
                    throw new Rivet.UnauthorizedError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Rivet.NotFoundError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 400:
                    throw new Rivet.BadRequestError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.RivetError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
<<<<<<< HEAD
     * @param {string} build
     * @param {Rivet.actor.PatchBuildTagsRequestQuery} request
     * @param {Builds.RequestOptions} requestOptions - Request-specific configuration.
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
     * Create a new dynamic actor.
     *
     * @param {Rivet.actor.CreateActorRequestQuery} request
     * @param {Actor.RequestOptions} requestOptions - Request-specific configuration.
========
     * @param {string} build
     * @param {Rivet.actor.PatchBuildTagsRequestQuery} request
     * @param {Builds.RequestOptions} requestOptions - Request-specific configuration.
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
<<<<<<< HEAD
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
     *     await client.actor.create({
     *         project: "string",
     *         environment: "string",
     *         body: {
     *             region: "string",
     *             tags: {
     *                 "key": "value"
     *             },
     *             build: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *             buildTags: {
     *                 "key": "value"
     *             },
     *             runtime: {
     *                 arguments: ["string"],
     *                 environment: {
     *                     "string": "string"
     *                 }
     *             },
     *             network: {
     *                 mode: "bridge",
     *                 ports: {}
     *             },
     *             resources: {
     *                 cpu: 1,
     *                 memory: 1
     *             },
     *             lifecycle: {
     *                 killTimeout: 1000000,
     *                 durable: true
     *             }
     *         }
     *     })
     */
    public async create(
        request: Rivet.actor.CreateActorRequestQuery,
        requestOptions?: Actor.RequestOptions
    ): Promise<Rivet.actor.CreateActorResponse> {
========
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
     *     await client.actor.builds.patchTags("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         project: "string",
     *         environment: "string",
     *         body: {
     *             tags: {
     *                 "key": "value"
     *             },
     *             exclusiveTags: ["string"]
     *         }
     *     })
     */
    public async patchTags(
        build: string,
        request: Rivet.actor.PatchBuildTagsRequestQuery,
        requestOptions?: Builds.RequestOptions
    ): Promise<Rivet.actor.PatchBuildTagsResponse> {
<<<<<<< HEAD
=======
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
        const { project, environment, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        if (environment != null) {
            _queryParams["environment"] = environment;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.RivetEnvironment.Production,
<<<<<<< HEAD
                `/builds/${encodeURIComponent(build)}/tags`
            ),
            method: "PATCH",
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
                "/actors"
            ),
            method: "POST",
========
                `/builds/${encodeURIComponent(build)}/tags`
            ),
            method: "PATCH",
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
<<<<<<< HEAD
            body: serializers.actor.PatchBuildTagsRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
            body: serializers.actor.CreateActorRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
========
            body: serializers.actor.PatchBuildTagsRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 180000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
<<<<<<< HEAD
            return serializers.actor.PatchBuildTagsResponse.parseOrThrow(_response.body, {
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
            return serializers.actor.CreateActorResponse.parseOrThrow(_response.body, {
========
            return serializers.actor.PatchBuildTagsResponse.parseOrThrow(_response.body, {
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new Rivet.InternalError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Rivet.RateLimitError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new Rivet.ForbiddenError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 408:
                    throw new Rivet.UnauthorizedError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Rivet.NotFoundError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 400:
                    throw new Rivet.BadRequestError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.RivetError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
<<<<<<< HEAD
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
     * Destroy a dynamic actor.
     *
     * @param {string} actor - The id of the actor to destroy
     * @param {Rivet.actor.DestroyActorRequestQuery} request
     * @param {Actor.RequestOptions} requestOptions - Request-specific configuration.
========
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
     * Creates a new project build for the given project.
     *
     * @param {Rivet.actor.PrepareBuildRequestQuery} request
     * @param {Builds.RequestOptions} requestOptions - Request-specific configuration.
<<<<<<< HEAD
=======
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
<<<<<<< HEAD
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
     *     await client.actor.destroy("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         project: "string",
     *         environment: "string",
     *         overrideKillTimeout: 1000000
     *     })
     */
    public async destroy(
        actor: string,
        request: Rivet.actor.DestroyActorRequestQuery = {},
        requestOptions?: Actor.RequestOptions
    ): Promise<Rivet.actor.DestroyActorResponse> {
        const { project, environment, overrideKillTimeout } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        if (environment != null) {
            _queryParams["environment"] = environment;
        }

        if (overrideKillTimeout != null) {
            _queryParams["override_kill_timeout"] = overrideKillTimeout.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.RivetEnvironment.Production,
                `/actors/${encodeURIComponent(actor)}`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 180000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.actor.DestroyActorResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new Rivet.InternalError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Rivet.RateLimitError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new Rivet.ForbiddenError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 408:
                    throw new Rivet.UnauthorizedError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Rivet.NotFoundError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 400:
                    throw new Rivet.BadRequestError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.RivetError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Upgrades a dynamic actor.
     *
     * @param {string} actor - The id of the actor to upgrade
     * @param {Rivet.actor.UpgradeActorRequestQuery} request
     * @param {Actor.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.actor.upgrade("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         project: "string",
     *         environment: "string",
     *         body: {
     *             build: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *             buildTags: {
     *                 "key": "value"
     *             }
     *         }
     *     })
     */
    public async upgrade(
        actor: string,
        request: Rivet.actor.UpgradeActorRequestQuery,
        requestOptions?: Actor.RequestOptions
    ): Promise<Rivet.actor.UpgradeActorResponse> {
========
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
     *     await client.actor.builds.prepare({
     *         project: "string",
     *         environment: "string",
     *         body: {
     *             name: "string",
<<<<<<< HEAD
=======
     *             tags: {
     *                 "key": "value"
     *             },
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
     *             imageTag: "string",
     *             imageFile: {
     *                 path: "string",
     *                 contentType: "string",
     *                 contentLength: 1000000
     *             },
     *             multipartUpload: true,
     *             kind: "docker_image",
     *             compression: "none",
     *             prewarmRegions: ["string"]
     *         }
     *     })
     */
    public async prepare(
        request: Rivet.actor.PrepareBuildRequestQuery,
        requestOptions?: Builds.RequestOptions
    ): Promise<Rivet.actor.PrepareBuildResponse> {
<<<<<<< HEAD
=======
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
        const { project, environment, body: _body } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        if (environment != null) {
            _queryParams["environment"] = environment;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.RivetEnvironment.Production,
<<<<<<< HEAD
                "/builds/prepare"
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
                `/actors/${encodeURIComponent(actor)}/upgrade`
========
                "/builds/prepare"
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
<<<<<<< HEAD
            body: serializers.actor.PrepareBuildRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
            body: serializers.actor.UpgradeActorRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
========
            body: serializers.actor.PrepareBuildRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 180000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
<<<<<<< HEAD
            return serializers.actor.PrepareBuildResponse.parseOrThrow(_response.body, {
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
            return serializers.actor.UpgradeActorResponse.parseOrThrow(_response.body, {
========
            return serializers.actor.PrepareBuildResponse.parseOrThrow(_response.body, {
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new Rivet.InternalError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Rivet.RateLimitError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new Rivet.ForbiddenError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 408:
                    throw new Rivet.UnauthorizedError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Rivet.NotFoundError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 400:
                    throw new Rivet.BadRequestError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.RivetError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
    }

<<<<<<< HEAD
=======
<<<<<<<< HEAD:sdks/runtime/typescript/src/api/resources/actor/client/Client.ts
    protected _builds: Builds | undefined;

    public get builds(): Builds {
        return (this._builds ??= new Builds(this._options));
    }

    protected _logs: Logs | undefined;

    public get logs(): Logs {
        return (this._logs ??= new Logs(this._options));
    }

    protected _regions: Regions | undefined;

    public get regions(): Regions {
        return (this._regions ??= new Regions(this._options));
========
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
    /**
     * Marks an upload as complete.
     *
     * @param {string} build
     * @param {Rivet.actor.CompleteBuildRequestQuery} request
     * @param {Builds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     *
     * @example
     *     await client.actor.builds.complete("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         project: "string",
     *         environment: "string"
     *     })
     */
    public async complete(
        build: string,
        request: Rivet.actor.CompleteBuildRequestQuery = {},
        requestOptions?: Builds.RequestOptions
    ): Promise<void> {
        const { project, environment } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (project != null) {
            _queryParams["project"] = project;
        }

        if (environment != null) {
            _queryParams["environment"] = environment;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.RivetEnvironment.Production,
                `/builds/${encodeURIComponent(build)}/complete`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 180000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new Rivet.InternalError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new Rivet.RateLimitError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new Rivet.ForbiddenError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 408:
                    throw new Rivet.UnauthorizedError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Rivet.NotFoundError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 400:
                    throw new Rivet.BadRequestError(
                        serializers.ErrorBody.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.RivetError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RivetError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RivetTimeoutError();
            case "unknown":
                throw new errors.RivetError({
                    message: _response.error.errorMessage,
                });
        }
<<<<<<< HEAD
=======
>>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar):sdks/runtime/typescript/src/api/resources/actor/resources/builds/client/Client.ts
>>>>>>> 73a068837 (feat: revamp actor build endpoint, js builds -> tar)
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
