// This file was auto-generated by Fern from our API Definition.

package actor

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	core "sdk/core"
)

type CreateActorRequest struct {
	Region    *string                    `json:"region,omitempty"`
	Tags      interface{}                `json:"tags,omitempty"`
	Build     *uuid.UUID                 `json:"build,omitempty"`
	BuildTags interface{}                `json:"buildTags,omitempty"`
	Runtime   *CreateActorRuntimeRequest `json:"runtime,omitempty"`
	Network   *CreateActorNetworkRequest `json:"network,omitempty"`
	Resources *Resources                 `json:"resources,omitempty"`
	Lifecycle *Lifecycle                 `json:"lifecycle,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateActorRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateActorRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateActorRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateActorRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateActorResponse struct {
	// The actor that was created
	Actor *Actor `json:"actor,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateActorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateActorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateActorResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateActorResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DestroyActorResponse struct {
	_rawJSON json.RawMessage
}

func (d *DestroyActorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DestroyActorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestroyActorResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestroyActorResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetActorResponse struct {
	Actor *Actor `json:"actor,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetActorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetActorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetActorResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActorResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListActorsResponse struct {
	// A list of actors for the project associated with the token.
	Actors []*Actor `json:"actors,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListActorsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListActorsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListActorsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListActorsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpgradeActorRequest struct {
	Build     *uuid.UUID  `json:"build,omitempty"`
	BuildTags interface{} `json:"buildTags,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UpgradeActorRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpgradeActorRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpgradeActorRequest(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpgradeActorRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpgradeActorResponse struct {
	_rawJSON json.RawMessage
}

func (u *UpgradeActorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpgradeActorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpgradeActorResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpgradeActorResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpgradeAllActorsRequest struct {
	Tags      interface{} `json:"tags,omitempty"`
	Build     *uuid.UUID  `json:"build,omitempty"`
	BuildTags interface{} `json:"buildTags,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UpgradeAllActorsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpgradeAllActorsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpgradeAllActorsRequest(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpgradeAllActorsRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpgradeAllActorsResponse struct {
	Count int64 `json:"count"`

	_rawJSON json.RawMessage
}

func (u *UpgradeAllActorsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpgradeAllActorsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpgradeAllActorsResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpgradeAllActorsResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
