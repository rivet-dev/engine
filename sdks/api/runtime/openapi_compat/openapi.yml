openapi: 3.0.1
info:
  title: Rivet API
  version: 0.0.1
paths:
  '/v2/actors/{actor}':
    get:
      description: Gets a actor.
      operationId: actors_get
      tags:
        - Actors
      parameters:
        - name: actor
          in: path
          description: The id of the actor to destroy
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: endpoint_type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ActorsEndpointType'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorsGetActorResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: &ref_0
        - BearerAuth: []
    delete:
      description: Destroy a actor.
      operationId: actors_destroy
      tags:
        - Actors
      parameters:
        - name: actor
          in: path
          description: The id of the actor to destroy
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: override_kill_timeout
          in: query
          description: >-
            The duration to wait for in milliseconds before killing the actor.
            This should be used to override the default kill timeout if a faster
            time is needed, say for ignoring a graceful shutdown.
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorsDestroyActorResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
  /v2/actors:
    get:
      description: >-
        Lists all actors associated with the token used. Can be filtered by tags
        in the query string.
      operationId: actors_list
      tags:
        - Actors
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: endpoint_type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ActorsEndpointType'
        - name: tags_json
          in: query
          required: false
          schema:
            type: string
        - name: include_destroyed
          in: query
          required: false
          schema:
            type: boolean
        - name: cursor
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorsListActorsResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
    post:
      description: Create a new actor.
      operationId: actors_create
      tags:
        - Actors
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: endpoint_type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ActorsEndpointType'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorsCreateActorResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorsCreateActorRequest'
  '/v2/actors/{actor}/upgrade':
    post:
      description: Upgrades a actor.
      operationId: actors_upgrade
      tags:
        - Actors
      parameters:
        - name: actor
          in: path
          description: The id of the actor to upgrade
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorsUpgradeActorResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorsUpgradeActorRequest'
  /v2/actors/upgrade:
    post:
      description: Upgrades all actors matching the given tags.
      operationId: actors_upgradeAll
      tags:
        - Actors
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorsUpgradeAllActorsResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorsUpgradeAllActorsRequest'
  /actors/usage:
    get:
      description: >-
        Returns time series data for actor usage metrics. Allows filtering and
        grouping by various actor properties.
      operationId: actors_usage
      tags:
        - Actors
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: start
          in: query
          description: Start timestamp in milliseconds
          required: true
          schema:
            type: integer
        - name: end
          in: query
          description: End timestamp in milliseconds
          required: true
          schema:
            type: integer
        - name: interval
          in: query
          description: Time bucket interval in milliseconds
          required: true
          schema:
            type: integer
        - name: group_by
          in: query
          description: >-
            JSON-encoded KeyPath for grouping results (e.g.
            {"property":"datacenter_id"} or
            {"property":"tags","map_key":"region"})
          required: false
          schema:
            type: string
        - name: query_json
          in: query
          description: JSON-encoded query expression for filtering actors
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorsGetActorUsageResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
  /actors/query:
    get:
      description: >-
        Queries actors using a JSON-encoded query expression. Supports
        pagination with cursor-based navigation.
      operationId: actors_query
      tags:
        - Actors
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: query_json
          in: query
          description: JSON-encoded query expression for filtering actors
          required: false
          schema:
            type: string
        - name: cursor
          in: query
          description: Cursor for pagination
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorsQueryActorsResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
  '/builds/{build}':
    get:
      description: Get a build.
      operationId: builds_get
      tags:
        - Builds
      parameters:
        - name: build
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildsGetBuildResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
  /builds:
    get:
      description: >-
        Lists all builds of the project associated with the token used. Can be
        filtered by tags in the query string.
      operationId: builds_list
      tags:
        - Builds
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: tags_json
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildsListBuildsResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
  '/builds/{build}/tags':
    patch:
      operationId: builds_patchTags
      tags:
        - Builds
      parameters:
        - name: build
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildsPatchBuildTagsResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildsPatchBuildTagsRequest'
  /builds/prepare:
    post:
      description: Creates a new project build for the given project.
      operationId: builds_prepare
      tags:
        - Builds
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildsPrepareBuildResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildsPrepareBuildRequest'
  '/builds/{build}/complete':
    post:
      description: Marks an upload as complete.
      operationId: builds_complete
      tags:
        - Builds
      parameters:
        - name: build
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
  '/v1/containers/{container}':
    get:
      description: Gets a container.
      operationId: containers_get
      tags:
        - Containers
      parameters:
        - name: container
          in: path
          description: The id of the container to destroy
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: endpoint_type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ContainersEndpointType'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainersGetContainerResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
    delete:
      description: Destroy a container.
      operationId: containers_destroy
      tags:
        - Containers
      parameters:
        - name: container
          in: path
          description: The id of the container to destroy
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: override_kill_timeout
          in: query
          description: >-
            The duration to wait for in milliseconds before killing the
            container. This should be used to override the default kill timeout
            if a faster time is needed, say for ignoring a graceful shutdown.
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainersDestroyContainerResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
  /v1/containers:
    get:
      description: >-
        Lists all containers associated with the token used. Can be filtered by
        tags in the query string.
      operationId: containers_list
      tags:
        - Containers
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: endpoint_type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ContainersEndpointType'
        - name: tags_json
          in: query
          required: false
          schema:
            type: string
        - name: include_destroyed
          in: query
          required: false
          schema:
            type: boolean
        - name: cursor
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainersListContainersResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
    post:
      description: Create a new container.
      operationId: containers_create
      tags:
        - Containers
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: endpoint_type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ContainersEndpointType'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainersCreateContainerResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainersCreateContainerRequest'
  '/v1/containers/{container}/upgrade':
    post:
      description: Upgrades a container.
      operationId: containers_upgrade
      tags:
        - Containers
      parameters:
        - name: container
          in: path
          description: The id of the container to upgrade
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainersUpgradeContainerResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainersUpgradeContainerRequest'
  /v1/containers/upgrade:
    post:
      description: Upgrades all containers matching the given tags.
      operationId: containers_upgradeAll
      tags:
        - Containers
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainersUpgradeAllContainersResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainersUpgradeAllContainersRequest'
  /regions:
    get:
      operationId: regions_list
      tags:
        - Regions
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionsListRegionsResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /regions/recommend:
    get:
      operationId: regions_recommend
      tags:
        - Regions
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: lat
          in: query
          required: false
          schema:
            type: number
            format: double
        - name: long
          in: query
          required: false
          schema:
            type: number
            format: double
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionsRecommendRegionResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /routes:
    get:
      description: Lists all routes of the given environment.
      operationId: routes_list
      tags:
        - Routes
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesListRoutesResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
  '/routes/{id}':
    put:
      description: Creates or updates a route.
      operationId: routes_update
      tags:
        - Routes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesUpdateRouteResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutesUpdateRouteBody'
    delete:
      description: Deletes a route.
      operationId: routes_delete
      tags:
        - Routes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesDeleteRouteResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
<<<<<<< HEAD
  /routes/history:
    get:
      description: >-
        Returns time series data for HTTP requests routed to actors. Allows
        filtering and grouping by various request properties.
      operationId: routes_history
      tags:
        - Routes
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: start
          in: query
          description: Start timestamp in milliseconds
          required: true
          schema:
            type: integer
        - name: end
          in: query
          description: End timestamp in milliseconds
          required: true
          schema:
            type: integer
        - name: interval
          in: query
          description: Time bucket interval in milliseconds
          required: true
          schema:
            type: integer
        - name: query_json
          in: query
          description: JSON-encoded query expression for filtering requests
          required: false
          schema:
            type: string
        - name: group_by
          in: query
          description: >-
            JSON-encoded KeyPath for grouping results (e.g.
            {"property":"client_request_host"} or
            {"property":"tags","map_key":"version"})
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesHistoryResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
  /actors/logs:
=======
  /v2/actors/logs:
>>>>>>> 43e5048bc (fix: api changes)
    get:
      description: Returns the logs for a given actor.
      operationId: actors_logs_get
      tags:
        - ActorsLogs
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: query_json
          in: query
          description: JSON-encoded query expression for filtering logs
          required: false
          schema:
            type: string
        - name: watch_index
          in: query
          description: A query parameter denoting the requests watch index.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorsGetActorLogsResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
<<<<<<< HEAD
  /actors/logs/export:
    post:
      description: >-
        Exports logs for the given actors to an S3 bucket and returns a
        presigned URL to download.
      operationId: actors_logs_export
      tags:
        - ActorsLogs
      parameters: []
=======
  '/v2/actors/{actor}/metrics/history':
    get:
      description: Returns the metrics for a given actor.
      operationId: actors_metrics_get
      tags:
        - ActorsMetrics
      parameters:
        - name: actor
          in: path
          description: The id of the actor to destroy
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: start
          in: query
          required: true
          schema:
            type: integer
        - name: end
          in: query
          required: true
          schema:
            type: integer
        - name: interval
          in: query
          required: true
          schema:
            type: integer
>>>>>>> 43e5048bc (fix: api changes)
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
<<<<<<< HEAD
                $ref: '#/components/schemas/ActorsExportActorLogsResponse'
=======
                $ref: '#/components/schemas/ActorsGetActorMetricsResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
  /v1/containers/logs:
    get:
      description: Returns the logs for a given container.
      operationId: containers_logs_get
      tags:
        - ContainersLogs
      parameters:
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: stream
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ContainersQueryLogStream'
        - name: container_ids_json
          in: query
          required: true
          schema:
            type: string
        - name: search_text
          in: query
          required: false
          schema:
            type: string
        - name: search_case_sensitive
          in: query
          required: false
          schema:
            type: boolean
        - name: search_enable_regex
          in: query
          required: false
          schema:
            type: boolean
        - name: watch_index
          in: query
          description: A query parameter denoting the requests watch index.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainersGetContainerLogsResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
  '/v1/containers/{container}/metrics/history':
    get:
      description: Returns the metrics for a given container.
      operationId: containers_metrics_get
      tags:
        - ContainersMetrics
      parameters:
        - name: container
          in: path
          description: The id of the container to destroy
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: project
          in: query
          required: false
          schema:
            type: string
        - name: environment
          in: query
          required: false
          schema:
            type: string
        - name: start
          in: query
          required: true
          schema:
            type: integer
        - name: end
          in: query
          required: true
          schema:
            type: integer
        - name: interval
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainersGetContainerMetricsResponse'
>>>>>>> 43e5048bc (fix: api changes)
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '408':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '429':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: *ref_0
<<<<<<< HEAD
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project:
                  type: string
                environment:
                  type: string
                query_json:
                  type: string
                  description: JSON-encoded query expression for filtering logs
=======
>>>>>>> 43e5048bc (fix: api changes)
components:
  schemas:
    ActorsGetActorResponse:
      type: object
      properties:
        actor:
          $ref: '#/components/schemas/ActorsActor'
      required:
        - actor
    ActorsCreateActorRequest:
      type: object
      properties:
        region:
          type: string
        tags: {}
        build:
          type: string
          format: uuid
        build_tags: {}
        network_endpoint_type:
          $ref: '#/components/schemas/ActorsEndpointType'
        wait_for_network_ready:
          type: boolean
        kill_timeout:
          type: integer
          format: int64
          description: >-
            The duration to wait for in milliseconds before force killing the
            actor after a DELETE request. This gives the actor time to perform a
            shutdown sequence before being killed. This should be set to a safe
            default, and can be overridden during a DELETE request if needed.
        durable:
          type: boolean
          description: >-
            If true, the actor will try to reschedule itself automatically in
            the event of a crash or a datacenter failover. The actor will not
            reschedule if it exits successfully.
      required:
        - tags
    ActorsCreateActorResponse:
      type: object
      properties:
        actor:
          $ref: '#/components/schemas/ActorsActor'
          description: The actor that was created
      required:
        - actor
    ActorsDestroyActorResponse:
      type: object
      properties: {}
    ActorsUpgradeActorRequest:
      type: object
      properties:
        build:
          type: string
          format: uuid
        build_tags: {}
    ActorsUpgradeActorResponse:
      type: object
      properties: {}
    ActorsUpgradeAllActorsRequest:
      type: object
      properties:
        tags: {}
        build:
          type: string
          format: uuid
        build_tags: {}
      required:
        - tags
    ActorsUpgradeAllActorsResponse:
      type: object
      properties:
        count:
          type: integer
          format: int64
      required:
        - count
    ActorsListActorsResponse:
      type: object
      properties:
        actors:
          type: array
          items:
            $ref: '#/components/schemas/ActorsActor'
          description: A list of actors for the project associated with the token.
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - actors
        - pagination
    ActorsGetActorUsageResponse:
      type: object
      properties:
        metric_names:
          type: array
          items:
            type: string
        metric_attributes:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        metric_types:
          type: array
          items:
            type: string
        metric_values:
          type: array
          items:
            type: array
            items:
              type: number
              format: double
      required:
        - metric_names
        - metric_attributes
        - metric_types
        - metric_values
    ActorsQueryActorsResponse:
      type: object
      properties:
        actors:
          type: array
          items:
            $ref: '#/components/schemas/ActorsActor'
          description: A list of actors matching the query
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - actors
        - pagination
    BuildsGetBuildResponse:
      type: object
      properties:
        build:
          $ref: '#/components/schemas/BuildsBuild'
      required:
        - build
    BuildsListBuildsResponse:
      type: object
      properties:
        builds:
          type: array
          items:
            $ref: '#/components/schemas/BuildsBuild'
          description: A list of builds for the project associated with the token.
      required:
        - builds
    BuildsPatchBuildTagsRequest:
      type: object
      properties:
        tags: {}
        exclusive_tags:
          type: array
          items:
            type: string
          description: |-
            **Deprecated**
            Removes the given tag keys from all other builds.
      required:
        - tags
    BuildsPatchBuildTagsResponse:
      type: object
      properties: {}
    BuildsPrepareBuildRequest:
      type: object
      properties:
        image_tag:
          type: string
          description: A tag given to the project build.
        image_file:
          $ref: '#/components/schemas/UploadPrepareFile'
        kind:
          $ref: '#/components/schemas/BuildsKind'
        compression:
          $ref: '#/components/schemas/BuildsCompression'
        runtime:
          $ref: '#/components/schemas/BuildsRuntime'
      required:
        - image_file
    BuildsPrepareBuildResponse:
      type: object
      properties:
        build:
          type: string
          format: uuid
        presigned_requests:
          type: array
          items:
            $ref: '#/components/schemas/UploadPresignedRequest'
      required:
        - build
        - presigned_requests
    ContainersGetContainerResponse:
      type: object
      properties:
        container:
          $ref: '#/components/schemas/ContainersContainer'
      required:
        - container
    ContainersCreateContainerRequest:
      type: object
      properties:
        region:
          type: string
        tags: {}
        build:
          type: string
          format: uuid
        build_tags: {}
        environment:
          type: object
          additionalProperties:
            type: string
        network_endpoint_type:
          $ref: '#/components/schemas/ContainersEndpointType'
        wait_for_network_ready:
          type: boolean
        ports:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BuildsPortRequest'
        resources:
          $ref: '#/components/schemas/BuildsResources'
        kill_timeout:
          type: integer
          format: int64
          description: >-
            The duration to wait for in milliseconds before force killing the
            actor after a DELETE request. This gives the actor time to perform a
            shutdown sequence before being killed. This should be set to a safe
            default, and can be overridden during a DELETE request if needed.
        durable:
          type: boolean
          description: >-
            If true, the actor will try to reschedule itself automatically in
            the event of a crash or a datacenter failover. The actor will not
            reschedule if it exits successfully.
      required:
        - tags
        - resources
    ContainersCreateContainerResponse:
      type: object
      properties:
        container:
          $ref: '#/components/schemas/ContainersContainer'
          description: The container that was created
      required:
        - container
    ContainersDestroyContainerResponse:
      type: object
      properties: {}
    ContainersUpgradeContainerRequest:
      type: object
      properties:
        build:
          type: string
          format: uuid
        build_tags: {}
    ContainersUpgradeContainerResponse:
      type: object
      properties: {}
    ContainersUpgradeAllContainersRequest:
      type: object
      properties:
        tags: {}
        build:
          type: string
          format: uuid
        build_tags: {}
      required:
        - tags
    ContainersUpgradeAllContainersResponse:
      type: object
      properties:
        count:
          type: integer
          format: int64
      required:
        - count
    ContainersListContainersResponse:
      type: object
      properties:
        containers:
          type: array
          items:
            $ref: '#/components/schemas/ContainersContainer'
          description: A list of containers for the project associated with the token.
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - containers
        - pagination
    RegionsListRegionsResponse:
      type: object
      properties:
        regions:
          type: array
          items:
            $ref: '#/components/schemas/RegionsRegion'
      required:
        - regions
    RegionsRecommendRegionResponse:
      type: object
      properties:
        region:
          $ref: '#/components/schemas/RegionsRegion'
      required:
        - region
    RoutesListRoutesResponse:
      type: object
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RoutesRoute'
      required:
        - routes
    RoutesUpdateRouteBody:
      type: object
      properties:
        hostname:
          type: string
        path:
          type: string
        strip_prefix:
          type: boolean
          description: >-
            Whether to remove the path prefix before sending the request to the
            actor.
        route_subpaths:
          type: boolean
          description: Whether to route all subpaths of this path
        target:
          $ref: '#/components/schemas/RoutesRouteTarget'
      required:
        - hostname
        - path
        - strip_prefix
        - route_subpaths
        - target
    RoutesUpdateRouteResponse:
      type: object
      properties: {}
    RoutesDeleteRouteResponse:
      type: object
      properties: {}
    RoutesHistoryResponse:
      type: object
      properties:
        metric_names:
          type: array
          items:
            type: string
        metric_attributes:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        metric_types:
          type: array
          items:
            type: string
        metric_values:
          type: array
          items:
            type: array
            items:
              type: number
              format: double
      required:
        - metric_names
        - metric_attributes
        - metric_types
        - metric_values
    ActorsActor:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        region:
          type: string
        tags: {}
        build:
          type: string
          format: uuid
        ports:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ActorsPort'
        kill_timeout:
          type: integer
          format: int64
          description: >-
            The duration to wait for in milliseconds before force killing the
            actor after a DELETE request. This gives the actor time to perform a
            shutdown sequence before being killed. This should be set to a safe
            default, and can be overridden during a DELETE request if needed.
        durable:
          type: boolean
          description: >-
            If true, the actor will try to reschedule itself automatically in
            the event of a crash or a datacenter failover. The actor will not
            reschedule if it exits successfully.
        created_at:
          $ref: '#/components/schemas/Timestamp'
        started_at:
          $ref: '#/components/schemas/Timestamp'
        destroyed_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - id
        - region
        - tags
        - build
        - ports
        - created_at
    ActorsPort:
      type: object
      properties:
        protocol:
          $ref: '#/components/schemas/BuildsPortProtocol'
        internal_port:
          type: integer
        hostname:
          type: string
        port:
          type: integer
        path:
          type: string
        url:
          type: string
          description: >-
            Fully formed connection URL including protocol, hostname, port, and
            path, if applicable.
        routing:
          $ref: '#/components/schemas/BuildsPortRouting'
      required:
        - protocol
        - routing
    ActorsEndpointType:
      type: string
      enum:
        - hostname
        - path
    ActorsGetActorLogsResponse:
      type: object
      properties:
        actor_ids:
          type: array
          items:
            type: string
          description: >-
            List of actor IDs in these logs. The order of these correspond to
            the index in the log entry.
        lines:
          type: array
          items:
            type: string
          description: Sorted old to new.
        timestamps:
          type: array
          items:
            $ref: '#/components/schemas/Timestamp'
          description: Sorted old to new.
        streams:
          type: array
          items:
            type: integer
          description: |-
            Streams the logs came from.

            0 = stdout
            1 = stderr
        foreigns:
          type: array
          items:
            type: boolean
          description: List of flags denoting if this log is not directly from the actor.
        actor_indices:
          type: array
          items:
            type: integer
          description: >-
            Index of the actor that this log was for. Use this index to look the
            full ID in `actor_ids`.
        watch:
          $ref: '#/components/schemas/WatchResponse'
      required:
        - actor_ids
        - lines
        - timestamps
        - streams
        - foreigns
        - actor_indices
        - watch
<<<<<<< HEAD
    ActorsExportActorLogsResponse:
      type: object
      properties:
        url:
          type: string
          description: Presigned URL to download the exported logs
      required:
        - url
=======
    ActorsQueryLogStream:
      type: string
      enum:
        - std_out
        - std_err
        - all
    ActorsGetActorMetricsResponse:
      type: object
      properties:
        actor_ids:
          type: array
          items:
            type: string
        metric_names:
          type: array
          items:
            type: string
        metric_attributes:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        metric_types:
          type: array
          items:
            type: string
        metric_values:
          type: array
          items:
            type: array
            items:
              type: number
              format: double
      required:
        - actor_ids
        - metric_names
        - metric_attributes
        - metric_types
        - metric_values
>>>>>>> 43e5048bc (fix: api changes)
    BuildsBuild:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          $ref: '#/components/schemas/Timestamp'
        content_length:
          type: integer
          format: int64
          description: Unsigned 64 bit integer.
        tags:
          type: object
          additionalProperties:
            type: string
          description: Tags of this build
        runtime:
          $ref: '#/components/schemas/BuildsRuntime'
      required:
        - id
        - name
        - created_at
        - content_length
        - tags
    BuildsKind:
      type: string
      enum:
        - docker_image
        - oci_bundle
        - javascript
    BuildsCompression:
      type: string
      enum:
        - none
        - lz4
    BuildsRuntime:
      type: object
      properties:
        container:
          $ref: '#/components/schemas/BuildsRuntimeContainer'
        actor:
          $ref: '#/components/schemas/BuildsRuntimeActor'
    BuildsRuntimeContainer:
      type: object
      properties:
        environment:
          type: object
          additionalProperties:
            type: string
        network_mode:
          $ref: '#/components/schemas/BuildsNetworkMode'
        ports:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BuildsPortRequest'
    BuildsRuntimeActor:
      type: object
      properties:
        environment:
          type: object
          additionalProperties:
            type: string
        network_mode:
          $ref: '#/components/schemas/BuildsNetworkMode'
        ports:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BuildsPortRequest'
        resources:
          $ref: '#/components/schemas/BuildsResources'
        slots:
          type: integer
      required:
        - resources
        - slots
    BuildsPortProtocol:
      type: string
      enum:
        - http
        - https
        - tcp
        - tcp_tls
        - udp
    BuildsPortRouting:
      type: object
      properties:
        guard:
          $ref: '#/components/schemas/BuildsGuardRouting'
        host:
          $ref: '#/components/schemas/BuildsHostRouting'
    BuildsGuardRouting:
      type: object
      properties: {}
    BuildsHostRouting:
      type: object
      properties: {}
    BuildsPortRequest:
      type: object
      properties:
        protocol:
          $ref: '#/components/schemas/BuildsPortProtocol'
        internal_port:
          type: integer
        routing:
          $ref: '#/components/schemas/BuildsPortRouting'
      required:
        - protocol
    BuildsResources:
      type: object
      properties:
        cpu:
          type: integer
          description: >-
            The number of CPU cores in millicores, or 1/1000 of a core. For
            example,

            1/8 of a core would be 125 millicores, and 1 core would be 1000

            millicores.
        memory:
          type: integer
          description: The amount of memory in mebibytes
      required:
        - cpu
        - memory
    BuildsNetworkMode:
      type: string
      enum:
        - bridge
        - host
    Id:
      type: string
      description: Can be a UUID or base36 encoded binary data.
    WatchResponse:
      type: object
      description: Provided by watchable endpoints used in blocking loops.
      properties:
        index:
          type: string
          description: |-
            Index indicating the version of the data responded.
            Pass this to `WatchQuery` to block and wait for the next response.
      required:
        - index
    Timestamp:
      type: string
      format: date-time
      description: RFC3339 timestamp
    ErrorMetadata:
      description: Unstructured metadata relating to an error. Must be manually parsed.
    ErrorBody:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        ray_id:
          type: string
        documentation:
          type: string
        metadata:
          $ref: '#/components/schemas/ErrorMetadata'
      required:
        - code
        - message
        - ray_id
    Pagination:
      type: object
      properties:
        cursor:
          type: string
    ContainersContainer:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        region:
          type: string
        tags: {}
        build:
          type: string
          format: uuid
        arguments:
          type: array
          items:
            type: string
        environment:
          type: object
          additionalProperties:
            type: string
        ports:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ContainersPort'
        resources:
          $ref: '#/components/schemas/BuildsResources'
        kill_timeout:
          type: integer
          format: int64
          description: >-
            The duration to wait for in milliseconds before force killing the
            actor after a DELETE request. This gives the actor time to perform a
            shutdown sequence before being killed. This should be set to a safe
            default, and can be overridden during a DELETE request if needed.
        durable:
          type: boolean
          description: >-
            If true, the actor will try to reschedule itself automatically in
            the event of a crash or a datacenter failover. The actor will not
            reschedule if it exits successfully.
        created_at:
          $ref: '#/components/schemas/Timestamp'
        started_at:
          $ref: '#/components/schemas/Timestamp'
        destroyed_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - id
        - region
        - tags
        - build
        - ports
        - resources
        - created_at
    ContainersPort:
      type: object
      properties:
        protocol:
          $ref: '#/components/schemas/BuildsPortProtocol'
        internal_port:
          type: integer
        hostname:
          type: string
        port:
          type: integer
        path:
          type: string
        url:
          type: string
          description: >-
            Fully formed connection URL including protocol, hostname, port, and
            path, if applicable.
        routing:
          $ref: '#/components/schemas/BuildsPortRouting'
      required:
        - protocol
        - routing
    ContainersEndpointType:
      type: string
      enum:
        - hostname
        - path
    ContainersGetContainerLogsResponse:
      type: object
      properties:
        container_ids:
          type: array
          items:
            $ref: '#/components/schemas/Id'
          description: >-
            List of container IDs in these logs. The order of these correspond
            to the index in the log entry.
        lines:
          type: array
          items:
            type: string
          description: Sorted old to new.
        timestamps:
          type: array
          items:
            $ref: '#/components/schemas/Timestamp'
          description: Sorted old to new.
        streams:
          type: array
          items:
            type: integer
          description: |-
            Streams the logs came from.

            0 = stdout
            1 = stderr
        foreigns:
          type: array
          items:
            type: boolean
          description: >-
            List of flags denoting if this log is not directly from the
            container.
        container_indices:
          type: array
          items:
            type: integer
          description: >-
            Index of the container that this log was for. Use this index to look
            the full ID in `container_ids`.
        watch:
          $ref: '#/components/schemas/WatchResponse'
      required:
        - container_ids
        - lines
        - timestamps
        - streams
        - foreigns
        - container_indices
        - watch
    ContainersQueryLogStream:
      type: string
      enum:
        - std_out
        - std_err
        - all
    ContainersGetContainerMetricsResponse:
      type: object
      properties:
        container_ids:
          type: array
          items:
            type: string
        metric_names:
          type: array
          items:
            type: string
        metric_attributes:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        metric_types:
          type: array
          items:
            type: string
        metric_values:
          type: array
          items:
            type: array
            items:
              type: number
              format: double
      required:
        - container_ids
        - metric_names
        - metric_attributes
        - metric_types
        - metric_values
    RegionsRegion:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    RoutesRouteTargetActors:
      type: object
      description: Configuration for targeting actors.
      properties:
        selector_tags:
          type: object
          additionalProperties:
            type: string
          description: Tags of actors to route requests to.
      required:
        - selector_tags
    RoutesRouteTarget:
      type: object
      properties:
        actors:
          $ref: '#/components/schemas/RoutesRouteTargetActors'
          description: Configuration for targeting actors.
    RoutesRoute:
      type: object
      properties:
        id:
          type: string
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
        hostname:
          type: string
        path:
          type: string
        route_subpaths:
          type: boolean
          description: Whether to route all subpaths of this path
        strip_prefix:
          type: boolean
          description: >-
            Whether to remove the path prefix before sending the request to the
            target.
        target:
          $ref: '#/components/schemas/RoutesRouteTarget'
      required:
        - id
        - created_at
        - updated_at
        - hostname
        - path
        - route_subpaths
        - strip_prefix
        - target
    UploadPresignedRequest:
      type: object
      description: >-
        A presigned request used to upload files. Upload your file to the given
        URL via a PUT request.
      properties:
        path:
          type: string
          description: >-
            The name of the file to upload. This is the same as the one given in
            the upload prepare file.
        url:
          type: string
          description: The URL of the presigned request for which to upload your file to.
        byte_offset:
          type: integer
          format: int64
          description: >-
            The byte offset for this multipart chunk. Always 0 if not a
            multipart upload.
        content_length:
          type: integer
          format: int64
          description: Expected size of this upload.
      required:
        - path
        - url
        - byte_offset
        - content_length
    UploadPrepareFile:
      type: object
      description: A file being prepared to upload.
      properties:
        path:
          type: string
          description: The path/filename of the file.
        content_type:
          type: string
          description: The MIME type of the file.
        content_length:
          type: integer
          format: int64
          description: Unsigned 64 bit integer.
      required:
        - path
        - content_length
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: 'https://api.rivet.gg'
    description: Production
