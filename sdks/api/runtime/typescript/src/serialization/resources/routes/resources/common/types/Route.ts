/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Rivet from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { Timestamp } from "../../../../common/types/Timestamp";
import { RouteTarget } from "./RouteTarget";

export const Route: core.serialization.ObjectSchema<serializers.routes.Route.Raw, Rivet.routes.Route> =
    core.serialization.object({
        id: core.serialization.string(),
        createdAt: core.serialization.property("created_at", Timestamp),
        updatedAt: core.serialization.property("updated_at", Timestamp),
        hostname: core.serialization.string(),
        path: core.serialization.string(),
        routeSubpaths: core.serialization.property("route_subpaths", core.serialization.boolean()),
        stripPrefix: core.serialization.property("strip_prefix", core.serialization.boolean()),
        target: RouteTarget,
    });

export declare namespace Route {
    export interface Raw {
        id: string;
        created_at: Timestamp.Raw;
        updated_at: Timestamp.Raw;
        hostname: string;
        path: string;
        route_subpaths: boolean;
        strip_prefix: boolean;
        target: RouteTarget.Raw;
    }
}
