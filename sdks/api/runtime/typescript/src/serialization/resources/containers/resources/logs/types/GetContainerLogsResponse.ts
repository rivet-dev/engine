/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Rivet from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { Id } from "../../../../common/types/Id";
import { Timestamp } from "../../../../common/types/Timestamp";
import { WatchResponse } from "../../../../common/types/WatchResponse";

export const GetContainerLogsResponse: core.serialization.ObjectSchema<
    serializers.containers.GetContainerLogsResponse.Raw,
    Rivet.containers.GetContainerLogsResponse
> = core.serialization.object({
    containerIds: core.serialization.property("container_ids", core.serialization.list(Id)),
    lines: core.serialization.list(core.serialization.string()),
    timestamps: core.serialization.list(Timestamp),
    streams: core.serialization.list(core.serialization.number()),
    foreigns: core.serialization.list(core.serialization.boolean()),
    containerIndices: core.serialization.property(
        "container_indices",
        core.serialization.list(core.serialization.number()),
    ),
    watch: WatchResponse,
});

export declare namespace GetContainerLogsResponse {
    export interface Raw {
        container_ids: Id.Raw[];
        lines: string[];
        timestamps: Timestamp.Raw[];
        streams: number[];
        foreigns: boolean[];
        container_indices: number[];
        watch: WatchResponse.Raw;
    }
}
