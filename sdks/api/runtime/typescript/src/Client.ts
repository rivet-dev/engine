/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { Actors } from "./api/resources/actors/client/Client";
import { Builds } from "./api/resources/builds/client/Client";
import { Regions } from "./api/resources/regions/client/Client";
import { Routes } from "./api/resources/routes/client/Client";

export declare namespace RivetClient {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Version header */
        xApiVersion?: "25.2.2";
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
        /** Override the X-API-Version header */
        xApiVersion?: "25.2.2";
    }
}

export class RivetClient {
    constructor(protected readonly _options: RivetClient.Options = {}) {}

    protected _actors: Actors | undefined;

    public get actors(): Actors {
        return (this._actors ??= new Actors(this._options));
    }

    protected _builds: Builds | undefined;

    public get builds(): Builds {
        return (this._builds ??= new Builds(this._options));
    }

    protected _regions: Regions | undefined;

    public get regions(): Regions {
        return (this._regions ??= new Regions(this._options));
    }

    protected _routes: Routes | undefined;

    public get routes(): Routes {
        return (this._routes ??= new Routes(this._options));
    }
}
