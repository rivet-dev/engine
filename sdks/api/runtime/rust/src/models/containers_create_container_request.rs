/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ContainersCreateContainerRequest {
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(rename = "tags", deserialize_with = "Option::deserialize")]
    pub tags: Option<serde_json::Value>,
    #[serde(rename = "build", skip_serializing_if = "Option::is_none")]
    pub build: Option<uuid::Uuid>,
    #[serde(rename = "build_tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub build_tags: Option<Option<serde_json::Value>>,
    #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
    pub environment: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "network_endpoint_type", skip_serializing_if = "Option::is_none")]
    pub network_endpoint_type: Option<crate::models::ContainersEndpointType>,
    #[serde(rename = "wait_for_network_ready", skip_serializing_if = "Option::is_none")]
    pub wait_for_network_ready: Option<bool>,
    #[serde(rename = "ports", skip_serializing_if = "Option::is_none")]
    pub ports: Option<::std::collections::HashMap<String, crate::models::BuildsPortRequest>>,
    #[serde(rename = "resources")]
    pub resources: Box<crate::models::BuildsResources>,
    /// The duration to wait for in milliseconds before force killing the actor after a DELETE request. This gives the actor time to perform a shutdown sequence before being killed. This should be set to a safe default, and can be overridden during a DELETE request if needed.
    #[serde(rename = "kill_timeout", skip_serializing_if = "Option::is_none")]
    pub kill_timeout: Option<i64>,
    /// If true, the actor will try to reschedule itself automatically in the event of a crash or a datacenter failover. The actor will not reschedule if it exits successfully.
    #[serde(rename = "durable", skip_serializing_if = "Option::is_none")]
    pub durable: Option<bool>,
}

impl ContainersCreateContainerRequest {
    pub fn new(tags: Option<serde_json::Value>, resources: crate::models::BuildsResources) -> ContainersCreateContainerRequest {
        ContainersCreateContainerRequest {
            region: None,
            tags,
            build: None,
            build_tags: None,
            environment: None,
            network_endpoint_type: None,
            wait_for_network_ready: None,
            ports: None,
            resources: Box::new(resources),
            kill_timeout: None,
            durable: None,
        }
    }
}


