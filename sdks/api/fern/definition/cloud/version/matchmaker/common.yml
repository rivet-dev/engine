# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: ../../common.yml
  lobbyGroup: lobby_group.yml

types:
  PortRange:
    docs: >-
      Range of ports that can be connected to.

      If configured, `network_mode` must equal `host`.

      Port ranges may overlap between containers, it is the responsibility of the developer to ensure ports are available before using.

      Read more about host networking [here](https://rivet.gg/docs/dynamic-servers/concepts/host-bridge-networking).

      Only available on Rivet Open Source & Enterprise.

      ### Related
        - cloud.version.matchmaker.PortProtocol
        - cloud.version.matchmaker.ProxyKind
    properties:
      min:
        docs: Unsigned 32 bit integer.
        type: integer
      max:
        docs: Unsigned 32 bit integer.
        type: integer

  PortProtocol:
    docs: >-
      Signifies the protocol of the port.

      Note that when proxying through GameGuard (via `ProxyKind`), the port number returned by `/find`,
      `/join`, and `/create` will not be the same as the port number configured in the config:

      - With HTTP, the port will always be 80. The hostname of the port correctly routes the incoming
        connection to the correct port being used by the game server.
      - With HTTPS, the port will always be 443. The hostname of the port correctly routes the incoming
        connection to the correct port being used by the game server.
      - Using TCP/UDP, the port will be a random number between 26000 and 31999. This gets automatically
        routed to the correct port being used by the game server.

      ### Related
      - cloud.version.matchmaker.GameModeRuntimeDockerPort
      - cloud.version.matchmaker.ProxyKind
      - /docs/dynamic-servers/concepts/game-guard
      - matchmaker.lobbies.find
    enum:
      - http
      - https
      - tcp
      - tcp_tls
      - udp

  ProxyKind:
    docs: >-
      Range of ports that can be connected to.

      `game_guard` (default) proxies all traffic through [Game Guard](https://rivet.gg/docs/dynamic-servers/concepts/game-guard) to mitigate DDoS attacks and provide TLS termination.

      `none` sends traffic directly to the game server. If configured, `network_mode` must equal `host`. Read more about host networking [here](https://rivet.gg/docs/dynamic-servers/concepts/host-bridge-networking). Only available on Rivet Open Source & Enterprise.

      ### Related
      - /docs/dynamic-servers/concepts/game-guard
      - cloud.version.matchmaker.PortProtocol
    enum:
      - none
      - game_guard

  Captcha:
    docs: Matchmaker captcha configuration.
    properties:
      requests_before_reverify:
        docs: >-
          Denotes how many requests a connection can make before it is required
          to reverify a captcha.
        type: integer
      verification_ttl:
        docs: >-
          Denotes how long a connection can continue to reconnect without having
          to reverify a captcha (in milliseconds).
        type: long
      hcaptcha: optional<CaptchaHcaptcha>
      turnstile: optional<CaptchaTurnstile>

  CaptchaHcaptcha:
    docs: hCpatcha configuration.
    properties:
      level:
        docs: |
          **Deprecated**

        type: optional<CaptchaHcaptchaLevel>
      site_key:
        docs: Site key for your hCaptcha application. Must be set.
        type: optional<string>
      secret_key:
        docs: Secret key for your hCaptcha application. Must be set.
        type: optional<string>

  CaptchaHcaptchaLevel:
    docs: |
      **Deprecated**
      How hard a captcha should be.
    enum:
      - easy
      - moderate
      - difficult
      - always_on

  CaptchaTurnstile:
    docs: Turnstile captcha configuration.
    properties:
      site_key: string
      secret_key: string

  NetworkMode:
    docs: >-
      Configures how the container's network is isolated from the host.

      `bridge` (default) networking isolates the container's network from the host & other containers.

      `host` networking removes isolation between the container and the host. Only available in Rivet Open Source & Enterprise.

      Read more about bridge vs host networking [here](https://rivet.gg/docs/dynamic-servers/concepts/host-bridge-networking).
    enum:
      - bridge
      - host
