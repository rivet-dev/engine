# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: ../common.yml
  buildCommons: ../builds/common.yml
  localCommons: common.yml

service:
  auth: true
  base-path: /v1/containers
  audiences:
    - runtime
  endpoints:
    get:
      path: /{container}
      method: GET
      docs: Gets a container.
      path-parameters:
        container:
          docs: The id of the container to destroy
          type: commons.Id
      request:
        name: ListContainersRequestQuery
        query-parameters:
          project: optional<string>
          environment: optional<string>
          endpoint_type: optional<localCommons.EndpointType>
      response: GetContainerResponse

    list:
      path: ""
      method: GET
      docs: >-
        Lists all containers associated with the token used. Can be filtered by
        tags in the query string.
      request:
        name: GetContainersRequestQuery
        query-parameters:
          project: optional<string>
          environment: optional<string>
          endpoint_type: optional<localCommons.EndpointType>
          tags_json: optional<string>
          include_destroyed: optional<boolean>
          cursor: optional<string>
      response: ListContainersResponse

    create:
      path: ""
      method: POST
      docs: Create a new container.
      request:
        name: CreateContainerRequestQuery
        body: CreateContainerRequest
        query-parameters:
          project: optional<string>
          environment: optional<string>
          endpoint_type: optional<localCommons.EndpointType>
      response: CreateContainerResponse

    destroy:
      path: /{container}
      method: DELETE
      docs: Destroy a container.
      path-parameters:
        container:
          docs: The id of the container to destroy
          type: commons.Id
      request:
        name: DestroyContainerRequestQuery
        query-parameters:
          project: optional<string>
          environment: optional<string>
          override_kill_timeout:
            docs: >-
              The duration to wait for in milliseconds before killing the container.
              This should be used to override the default kill timeout if a faster
              time is needed, say for ignoring a graceful shutdown.
            type: optional<long>
      response: DestroyContainerResponse

    upgrade:
      path: /{container}/upgrade
      method: POST
      docs: Upgrades a container.
      path-parameters:
        container:
          docs: The id of the container to upgrade
          type: commons.Id
      request:
        name: UpgradeContainerRequestQuery
        query-parameters:
          project: optional<string>
          environment: optional<string>
        body: UpgradeContainerRequest
      response: UpgradeContainerResponse

    upgradeAll:
      path: /upgrade
      method: POST
      docs: Upgrades all containers matching the given tags.
      request:
        name: UpgradeAllContainersRequestQuery
        query-parameters:
          project: optional<string>
          environment: optional<string>
        body: UpgradeAllContainersRequest
      response: UpgradeAllContainersResponse

types:
  GetContainerResponse:
    properties:
      container: localCommons.Container

  CreateContainerRequest:
    properties:
      region: optional<string>
      tags: unknown
      build: optional<uuid>
      build_tags: optional<unknown>
      # arguments: optional<list<string>>
      environment: optional<map<string, string>>
      network_endpoint_type: optional<localCommons.EndpointType>
      wait_for_network_ready: optional<boolean>
      ports: optional<map<string, buildCommons.PortRequest>>
      resources: buildCommons.Resources
      kill_timeout:
        docs: >-
          The duration to wait for in milliseconds before force killing the actor after a DELETE request.
          This gives the actor time to perform a shutdown sequence before being killed. This should be set to
          a safe default, and can be overridden during a DELETE request if needed.
        type: optional<long>
      durable:
        docs: >-
          If true, the actor will try to reschedule itself automatically in the event of a crash or a
          datacenter failover. The actor will not reschedule if it exits successfully.
        type: optional<boolean>

  CreateContainerResponse:
    properties:
      container:
        docs: The container that was created
        type: localCommons.Container

  DestroyContainerResponse:
    properties: {}

  UpgradeContainerRequest:
    properties:
      build: optional<uuid>
      build_tags: optional<unknown>

  UpgradeContainerResponse:
    properties: {}

  UpgradeAllContainersRequest:
    properties:
      tags: unknown
      build: optional<uuid>
      build_tags: optional<unknown>

  UpgradeAllContainersResponse:
    properties:
      count: long

  ListContainersResponse:
    properties:
      containers:
        docs: A list of containers for the project associated with the token.
        type: list<localCommons.Container>
      pagination: commons.Pagination

