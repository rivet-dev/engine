/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// GroupProfile : A list of group profiles.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GroupProfile {
	#[serde(rename = "group_id")]
	pub group_id: uuid::Uuid,
	/// Represent a resource's readable display name.
	#[serde(rename = "display_name")]
	pub display_name: String,
	/// The URL of this group's avatar image.
	#[serde(rename = "avatar_url", skip_serializing_if = "Option::is_none")]
	pub avatar_url: Option<String>,
	#[serde(rename = "external")]
	pub external: Box<crate::models::GroupExternalLinks>,
	/// Whether or not this group is a developer.
	#[serde(rename = "is_developer", skip_serializing_if = "Option::is_none")]
	pub is_developer: Option<bool>,
	/// Detailed information about a profile.
	#[serde(rename = "bio")]
	pub bio: String,
	/// Whether or not the current identity is a member of this group.
	#[serde(
		rename = "is_current_identity_member",
		skip_serializing_if = "Option::is_none"
	)]
	pub is_current_identity_member: Option<bool>,
	#[serde(rename = "publicity")]
	pub publicity: crate::models::GroupPublicity,
	/// Unsigned 32 bit integer.
	#[serde(rename = "member_count", skip_serializing_if = "Option::is_none")]
	pub member_count: Option<i32>,
	/// A list of group members.
	#[serde(rename = "members")]
	pub members: Vec<crate::models::GroupMember>,
	/// A list of group join requests.
	#[serde(rename = "join_requests")]
	pub join_requests: Vec<crate::models::GroupJoinRequest>,
	/// Whether or not the current identity is currently requesting to join this group.
	#[serde(
		rename = "is_current_identity_requesting_join",
		skip_serializing_if = "Option::is_none"
	)]
	pub is_current_identity_requesting_join: Option<bool>,
	#[serde(rename = "owner_identity_id")]
	pub owner_identity_id: uuid::Uuid,
}

impl GroupProfile {
	/// A list of group profiles.
	pub fn new(
		group_id: uuid::Uuid,
		display_name: String,
		external: crate::models::GroupExternalLinks,
		bio: String,
		publicity: crate::models::GroupPublicity,
		members: Vec<crate::models::GroupMember>,
		join_requests: Vec<crate::models::GroupJoinRequest>,
		owner_identity_id: uuid::Uuid,
	) -> GroupProfile {
		GroupProfile {
			group_id,
			display_name,
			avatar_url: None,
			external: Box::new(external),
			is_developer: None,
			bio,
			is_current_identity_member: None,
			publicity,
			member_count: None,
			members,
			join_requests,
			is_current_identity_requesting_join: None,
			owner_identity_id,
		}
	}
}
