/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// CloudVersionMatchmakerMatchmakerConfig : Matchmaker configuration for a given version.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CloudVersionMatchmakerMatchmakerConfig {
	/// A list of game modes.
	#[serde(rename = "game_modes", skip_serializing_if = "Option::is_none")]
	pub game_modes:
		Option<::std::collections::HashMap<String, crate::models::CloudVersionMatchmakerGameMode>>,
	#[serde(rename = "captcha", skip_serializing_if = "Option::is_none")]
	pub captcha: Option<Box<crate::models::CloudVersionMatchmakerCaptcha>>,
	/// _Configures Rivet CLI behavior. Has no effect on server behavior._
	#[serde(rename = "dev_hostname", skip_serializing_if = "Option::is_none")]
	pub dev_hostname: Option<String>,
	#[serde(rename = "regions", skip_serializing_if = "Option::is_none")]
	pub regions: Option<
		::std::collections::HashMap<String, crate::models::CloudVersionMatchmakerGameModeRegion>,
	>,
	#[serde(rename = "max_players", skip_serializing_if = "Option::is_none")]
	pub max_players: Option<i32>,
	#[serde(rename = "max_players_direct", skip_serializing_if = "Option::is_none")]
	pub max_players_direct: Option<i32>,
	#[serde(rename = "max_players_party", skip_serializing_if = "Option::is_none")]
	pub max_players_party: Option<i32>,
	#[serde(rename = "docker", skip_serializing_if = "Option::is_none")]
	pub docker: Option<Box<crate::models::CloudVersionMatchmakerGameModeRuntimeDocker>>,
	#[serde(rename = "tier", skip_serializing_if = "Option::is_none")]
	pub tier: Option<String>,
	#[serde(rename = "idle_lobbies", skip_serializing_if = "Option::is_none")]
	pub idle_lobbies: Option<Box<crate::models::CloudVersionMatchmakerGameModeIdleLobbiesConfig>>,
	/// **Deprecated: use `game_modes` instead** A list of game modes.
	#[serde(rename = "lobby_groups", skip_serializing_if = "Option::is_none")]
	pub lobby_groups: Option<Vec<crate::models::CloudVersionMatchmakerLobbyGroup>>,
}

impl CloudVersionMatchmakerMatchmakerConfig {
	/// Matchmaker configuration for a given version.
	pub fn new() -> CloudVersionMatchmakerMatchmakerConfig {
		CloudVersionMatchmakerMatchmakerConfig {
			game_modes: None,
			captcha: None,
			dev_hostname: None,
			regions: None,
			max_players: None,
			max_players_direct: None,
			max_players_party: None,
			docker: None,
			tier: None,
			idle_lobbies: None,
			lobby_groups: None,
		}
	}
}
