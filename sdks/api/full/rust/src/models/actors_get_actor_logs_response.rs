/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ActorsGetActorLogsResponse {
	/// List of actor IDs in these logs. The order of these correspond to the index in the log entry.
	#[serde(rename = "actor_ids")]
	pub actor_ids: Vec<String>,
	/// Sorted old to new.
	#[serde(rename = "lines")]
	pub lines: Vec<String>,
	/// Sorted old to new.
	#[serde(rename = "timestamps")]
	pub timestamps: Vec<String>,
	/// Streams the logs came from.  0 = stdout 1 = stderr
	#[serde(rename = "streams")]
	pub streams: Vec<i32>,
	/// Index of the actor that this log was for. Use this index to look the full ID in `actor_ids`.
	#[serde(rename = "actor_indices")]
	pub actor_indices: Vec<i32>,
	#[serde(rename = "watch")]
	pub watch: Box<crate::models::WatchResponse>,
}

impl ActorsGetActorLogsResponse {
	pub fn new(
		actor_ids: Vec<String>,
		lines: Vec<String>,
		timestamps: Vec<String>,
		streams: Vec<i32>,
		actor_indices: Vec<i32>,
		watch: crate::models::WatchResponse,
	) -> ActorsGetActorLogsResponse {
		ActorsGetActorLogsResponse {
			actor_ids,
			lines,
			timestamps,
			streams,
			actor_indices,
			watch: Box::new(watch),
		}
	}
}
