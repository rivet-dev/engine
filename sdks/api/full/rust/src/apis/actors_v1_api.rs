/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`actors_v1_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActorsV1CreateError {
	Status400(crate::models::ErrorBody),
	Status403(crate::models::ErrorBody),
	Status404(crate::models::ErrorBody),
	Status408(crate::models::ErrorBody),
	Status429(crate::models::ErrorBody),
	Status500(crate::models::ErrorBody),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actors_v1_destroy`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActorsV1DestroyError {
	Status400(crate::models::ErrorBody),
	Status403(crate::models::ErrorBody),
	Status404(crate::models::ErrorBody),
	Status408(crate::models::ErrorBody),
	Status429(crate::models::ErrorBody),
	Status500(crate::models::ErrorBody),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actors_v1_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActorsV1GetError {
	Status400(crate::models::ErrorBody),
	Status403(crate::models::ErrorBody),
	Status404(crate::models::ErrorBody),
	Status408(crate::models::ErrorBody),
	Status429(crate::models::ErrorBody),
	Status500(crate::models::ErrorBody),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actors_v1_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActorsV1ListError {
	Status400(crate::models::ErrorBody),
	Status403(crate::models::ErrorBody),
	Status404(crate::models::ErrorBody),
	Status408(crate::models::ErrorBody),
	Status429(crate::models::ErrorBody),
	Status500(crate::models::ErrorBody),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actors_v1_upgrade`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActorsV1UpgradeError {
	Status400(crate::models::ErrorBody),
	Status403(crate::models::ErrorBody),
	Status404(crate::models::ErrorBody),
	Status408(crate::models::ErrorBody),
	Status429(crate::models::ErrorBody),
	Status500(crate::models::ErrorBody),
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actors_v1_upgrade_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActorsV1UpgradeAllError {
	Status400(crate::models::ErrorBody),
	Status403(crate::models::ErrorBody),
	Status404(crate::models::ErrorBody),
	Status408(crate::models::ErrorBody),
	Status429(crate::models::ErrorBody),
	Status500(crate::models::ErrorBody),
	UnknownValue(serde_json::Value),
}

/// Create a new actor.
pub async fn actors_v1_create(
	configuration: &configuration::Configuration,
	actors_v1_create_actor_request: crate::models::ActorsV1CreateActorRequest,
	project: Option<&str>,
	environment: Option<&str>,
	endpoint_type: Option<crate::models::ActorsV1EndpointType>,
) -> Result<crate::models::ActorsV1CreateActorResponse, Error<ActorsV1CreateError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!("{}/actors", local_var_configuration.base_path);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

	if let Some(ref local_var_str) = project {
		local_var_req_builder =
			local_var_req_builder.query(&[("project", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = environment {
		local_var_req_builder =
			local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = endpoint_type {
		local_var_req_builder =
			local_var_req_builder.query(&[("endpoint_type", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}
	if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
		local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
	};
	local_var_req_builder = local_var_req_builder.json(&actors_v1_create_actor_request);

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<ActorsV1CreateError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

/// Destroy a actor.
pub async fn actors_v1_destroy(
	configuration: &configuration::Configuration,
	actor: &str,
	project: Option<&str>,
	environment: Option<&str>,
	override_kill_timeout: Option<i64>,
) -> Result<serde_json::Value, Error<ActorsV1DestroyError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!(
		"{}/actors/{actor}",
		local_var_configuration.base_path,
		actor = crate::apis::urlencode(actor)
	);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

	if let Some(ref local_var_str) = project {
		local_var_req_builder =
			local_var_req_builder.query(&[("project", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = environment {
		local_var_req_builder =
			local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = override_kill_timeout {
		local_var_req_builder =
			local_var_req_builder.query(&[("override_kill_timeout", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}
	if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
		local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
	};

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<ActorsV1DestroyError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

/// Gets a actor.
pub async fn actors_v1_get(
	configuration: &configuration::Configuration,
	actor: &str,
	project: Option<&str>,
	environment: Option<&str>,
	endpoint_type: Option<crate::models::ActorsV1EndpointType>,
) -> Result<crate::models::ActorsV1GetActorResponse, Error<ActorsV1GetError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!(
		"{}/actors/{actor}",
		local_var_configuration.base_path,
		actor = crate::apis::urlencode(actor)
	);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

	if let Some(ref local_var_str) = project {
		local_var_req_builder =
			local_var_req_builder.query(&[("project", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = environment {
		local_var_req_builder =
			local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = endpoint_type {
		local_var_req_builder =
			local_var_req_builder.query(&[("endpoint_type", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}
	if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
		local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
	};

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<ActorsV1GetError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

/// Lists all actors associated with the token used. Can be filtered by tags in the query string.
pub async fn actors_v1_list(
	configuration: &configuration::Configuration,
	project: Option<&str>,
	environment: Option<&str>,
	endpoint_type: Option<crate::models::ActorsV1EndpointType>,
	tags_json: Option<&str>,
	include_destroyed: Option<bool>,
	cursor: Option<&str>,
) -> Result<crate::models::ActorsV1ListActorsResponse, Error<ActorsV1ListError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!("{}/actors", local_var_configuration.base_path);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

	if let Some(ref local_var_str) = project {
		local_var_req_builder =
			local_var_req_builder.query(&[("project", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = environment {
		local_var_req_builder =
			local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = endpoint_type {
		local_var_req_builder =
			local_var_req_builder.query(&[("endpoint_type", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = tags_json {
		local_var_req_builder =
			local_var_req_builder.query(&[("tags_json", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = include_destroyed {
		local_var_req_builder =
			local_var_req_builder.query(&[("include_destroyed", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = cursor {
		local_var_req_builder =
			local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}
	if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
		local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
	};

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<ActorsV1ListError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

/// Upgrades a actor.
pub async fn actors_v1_upgrade(
	configuration: &configuration::Configuration,
	actor: &str,
	actors_v1_upgrade_actor_request: crate::models::ActorsV1UpgradeActorRequest,
	project: Option<&str>,
	environment: Option<&str>,
) -> Result<serde_json::Value, Error<ActorsV1UpgradeError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!(
		"{}/actors/{actor}/upgrade",
		local_var_configuration.base_path,
		actor = crate::apis::urlencode(actor)
	);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

	if let Some(ref local_var_str) = project {
		local_var_req_builder =
			local_var_req_builder.query(&[("project", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = environment {
		local_var_req_builder =
			local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}
	if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
		local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
	};
	local_var_req_builder = local_var_req_builder.json(&actors_v1_upgrade_actor_request);

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<ActorsV1UpgradeError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}

/// Upgrades all actors matching the given tags.
pub async fn actors_v1_upgrade_all(
	configuration: &configuration::Configuration,
	actors_v1_upgrade_all_actors_request: crate::models::ActorsV1UpgradeAllActorsRequest,
	project: Option<&str>,
	environment: Option<&str>,
) -> Result<crate::models::ActorsV1UpgradeAllActorsResponse, Error<ActorsV1UpgradeAllError>> {
	let local_var_configuration = configuration;

	let local_var_client = &local_var_configuration.client;

	let local_var_uri_str = format!("{}/actors/upgrade", local_var_configuration.base_path);
	let mut local_var_req_builder =
		local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

	if let Some(ref local_var_str) = project {
		local_var_req_builder =
			local_var_req_builder.query(&[("project", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_str) = environment {
		local_var_req_builder =
			local_var_req_builder.query(&[("environment", &local_var_str.to_string())]);
	}
	if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
		local_var_req_builder =
			local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
	}
	if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
		local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
	};
	local_var_req_builder = local_var_req_builder.json(&actors_v1_upgrade_all_actors_request);

	let local_var_req = local_var_req_builder.build()?;
	let local_var_resp = local_var_client.execute(local_var_req).await?;

	let local_var_status = local_var_resp.status();
	let local_var_content = local_var_resp.text().await?;

	if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
		serde_json::from_str(&local_var_content).map_err(Error::from)
	} else {
		let local_var_entity: Option<ActorsV1UpgradeAllError> =
			serde_json::from_str(&local_var_content).ok();
		let local_var_error = ResponseContent {
			status: local_var_status,
			content: local_var_content,
			entity: local_var_entity,
		};
		Err(Error::ResponseError(local_var_error))
	}
}
