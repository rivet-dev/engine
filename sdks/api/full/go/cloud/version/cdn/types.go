// This file was auto-generated by Fern from our API Definition.

package cdn

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	core "sdk/core"
)

// CDN configuration for a given version.
type Config struct {
	// _Configures Rivet CLI behavior. Has no effect on server behavior._
	BuildCommand *string `json:"build_command,omitempty"`
	// _Configures Rivet CLI behavior. Has no effect on server behavior._
	BuildOutput *string `json:"build_output,omitempty"`
	// _Configures Rivet CLI behavior. Has no effect on server behavior._
	BuildEnv map[string]string `json:"build_env,omitempty"`
	SiteId   *uuid.UUID        `json:"site_id,omitempty"`
	// Multiple CDN version routes.
	Routes []*Route `json:"routes,omitempty"`

	_rawJSON json.RawMessage
}

func (c *Config) UnmarshalJSON(data []byte) error {
	type unmarshaler Config
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Config(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Config) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CustomHeadersMiddleware struct {
	Headers []*Header `json:"headers,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CustomHeadersMiddleware) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomHeadersMiddleware
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomHeadersMiddleware(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomHeadersMiddleware) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Header struct {
	Name  string `json:"name"`
	Value string `json:"value"`

	_rawJSON json.RawMessage
}

func (h *Header) UnmarshalJSON(data []byte) error {
	type unmarshaler Header
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = Header(value)
	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *Header) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type Middleware struct {
	Kind *MiddlewareKind `json:"kind,omitempty"`

	_rawJSON json.RawMessage
}

func (m *Middleware) UnmarshalJSON(data []byte) error {
	type unmarshaler Middleware
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = Middleware(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *Middleware) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MiddlewareKind struct {
	CustomHeaders *CustomHeadersMiddleware `json:"custom_headers,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MiddlewareKind) UnmarshalJSON(data []byte) error {
	type unmarshaler MiddlewareKind
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MiddlewareKind(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MiddlewareKind) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type Route struct {
	Glob string `json:"glob"`
	// Unsigned 32 bit integer.
	Priority int `json:"priority"`
	// Multiple CDN version middleware.
	Middlewares []*Middleware `json:"middlewares,omitempty"`

	_rawJSON json.RawMessage
}

func (r *Route) UnmarshalJSON(data []byte) error {
	type unmarshaler Route
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Route(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *Route) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
