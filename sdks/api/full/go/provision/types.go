// This file was auto-generated by Fern from our API Definition.

package provision

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	core "sdk/core"
)

type PoolType string

const (
	PoolTypeJob             PoolType = "job"
	PoolTypeGg              PoolType = "gg"
	PoolTypeAts             PoolType = "ats"
	PoolTypePegboard        PoolType = "pegboard"
	PoolTypePegboardIsolate PoolType = "pegboard_isolate"
	PoolTypeFdb             PoolType = "fdb"
)

func NewPoolTypeFromString(s string) (PoolType, error) {
	switch s {
	case "job":
		return PoolTypeJob, nil
	case "gg":
		return PoolTypeGg, nil
	case "ats":
		return PoolTypeAts, nil
	case "pegboard":
		return PoolTypePegboard, nil
	case "pegboard_isolate":
		return PoolTypePegboardIsolate, nil
	case "fdb":
		return PoolTypeFdb, nil
	}
	var t PoolType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PoolType) Ptr() *PoolType {
	return &p
}

type Server struct {
	ServerId     uuid.UUID `json:"server_id"`
	DatacenterId uuid.UUID `json:"datacenter_id"`
	PoolType     PoolType  `json:"pool_type,omitempty"`
	LanIp        *string   `json:"lan_ip,omitempty"`
	WanIp        *string   `json:"wan_ip,omitempty"`

	_rawJSON json.RawMessage
}

func (s *Server) UnmarshalJSON(data []byte) error {
	type unmarshaler Server
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Server(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Server) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
