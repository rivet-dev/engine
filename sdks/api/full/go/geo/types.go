// This file was auto-generated by Fern from our API Definition.

package geo

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
)

// Geographical coordinates for a location on Planet Earth.
type Coord struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`

	_rawJSON json.RawMessage
}

func (c *Coord) UnmarshalJSON(data []byte) error {
	type unmarshaler Coord
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Coord(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Coord) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Distance available in multiple units.
type Distance struct {
	Kilometers float64 `json:"kilometers"`
	Miles      float64 `json:"miles"`

	_rawJSON json.RawMessage
}

func (d *Distance) UnmarshalJSON(data []byte) error {
	type unmarshaler Distance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Distance(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *Distance) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}
