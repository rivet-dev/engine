// This file was auto-generated by Fern from our API Definition.

package routes

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
)

type DeleteRouteResponse struct {
	_rawJSON json.RawMessage
}

func (d *DeleteRouteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteRouteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteRouteResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteRouteResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type ListRoutesResponse struct {
	Routes []*Route `json:"routes,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListRoutesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListRoutesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListRoutesResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRoutesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateRouteBody struct {
	Hostname string `json:"hostname"`
	Path     string `json:"path"`
	// Whether to remove the path prefix before sending the request to the actor.
	StripPrefix bool `json:"strip_prefix"`
	// Whether to route all subpaths of this path
	RouteSubpaths bool         `json:"route_subpaths"`
	Target        *RouteTarget `json:"target,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UpdateRouteBody) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateRouteBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateRouteBody(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateRouteBody) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateRouteResponse struct {
	_rawJSON json.RawMessage
}

func (u *UpdateRouteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateRouteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateRouteResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateRouteResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
