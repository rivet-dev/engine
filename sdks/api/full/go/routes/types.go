// This file was auto-generated by Fern from our API Definition.

package routes

import (
	json "encoding/json"
	fmt "fmt"
	sdk "sdk"
	core "sdk/core"
)

type DeleteRouteQuery struct {
	Project     *string `json:"-"`
	Environment *string `json:"-"`
}

type HistoryQuery struct {
	Project     *string `json:"-"`
	Environment *string `json:"-"`
	// Start timestamp in milliseconds
	Start int `json:"-"`
	// End timestamp in milliseconds
	End int `json:"-"`
	// Time bucket interval in milliseconds
	Interval int `json:"-"`
	// JSON-encoded query expression for filtering requests
	QueryJson *string `json:"-"`
	// JSON-encoded KeyPath for grouping results (e.g. {"property":"client_request_host"} or {"property":"tags","map_key":"version"})
	GroupBy *string `json:"-"`
}

type ListRoutesQuery struct {
	Project     *string `json:"-"`
	Environment *string `json:"-"`
}

type Route struct {
	Id        string        `json:"id"`
	CreatedAt sdk.Timestamp `json:"created_at"`
	UpdatedAt sdk.Timestamp `json:"updated_at"`
	Hostname  string        `json:"hostname"`
	Path      string        `json:"path"`
	// Whether to route all subpaths of this path
	RouteSubpaths bool `json:"route_subpaths"`
	// Whether to remove the path prefix before sending the request to the target.
	StripPrefix bool         `json:"strip_prefix"`
	Target      *RouteTarget `json:"target,omitempty"`

	_rawJSON json.RawMessage
}

func (r *Route) UnmarshalJSON(data []byte) error {
	type unmarshaler Route
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Route(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *Route) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RouteTarget struct {
	// Configuration for targeting actors.
	Actors *RouteTargetActors `json:"actors,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RouteTarget) UnmarshalJSON(data []byte) error {
	type unmarshaler RouteTarget
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RouteTarget(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RouteTarget) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Configuration for targeting actors.
type RouteTargetActors struct {
	// Tags of actors to route requests to.
	SelectorTags map[string]string `json:"selector_tags,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RouteTargetActors) UnmarshalJSON(data []byte) error {
	type unmarshaler RouteTargetActors
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RouteTargetActors(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RouteTargetActors) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type UpdateRouteQuery struct {
	Project     *string          `json:"-"`
	Environment *string          `json:"-"`
	Body        *UpdateRouteBody `json:"-"`
}

func (u *UpdateRouteQuery) UnmarshalJSON(data []byte) error {
	body := new(UpdateRouteBody)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.Body = body
	return nil
}

func (u *UpdateRouteQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}
