// This file was auto-generated by Fern from our API Definition.

package actor

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
)

type ListRegionsRequestQuery struct {
	Project     *string `json:"-"`
	Environment *string `json:"-"`
}

type ResolveRegionsRequestQuery struct {
	Long *float64 `json:"-"`
	Lat  *float64 `json:"-"`
}

type ListRegionsResponse struct {
	Regions []*Region `json:"regions,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListRegionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListRegionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListRegionsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRegionsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ResolveRegionResponse struct {
	Region *Region `json:"region,omitempty"`

	_rawJSON json.RawMessage
}

func (r *ResolveRegionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ResolveRegionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResolveRegionResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResolveRegionResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
