// This file was auto-generated by Fern from our API Definition.

package containers

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	sdk "sdk"
	core "sdk/core"
)

type CreateContainerRequest struct {
	Region    *string                        `json:"region,omitempty"`
	Tags      interface{}                    `json:"tags,omitempty"`
	Build     *uuid.UUID                     `json:"build,omitempty"`
	BuildTags interface{}                    `json:"build_tags,omitempty"`
	Runtime   *CreateContainerRuntimeRequest `json:"runtime,omitempty"`
	Network   *CreateContainerNetworkRequest `json:"network,omitempty"`
	Resources *Resources                     `json:"resources,omitempty"`
	Lifecycle *Lifecycle                     `json:"lifecycle,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateContainerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateContainerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateContainerRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateContainerRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateContainerResponse struct {
	// The container that was created
	Container *Container `json:"container,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateContainerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateContainerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateContainerResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateContainerResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DestroyContainerResponse struct {
	_rawJSON json.RawMessage
}

func (d *DestroyContainerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DestroyContainerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DestroyContainerResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DestroyContainerResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetContainerResponse struct {
	Container *Container `json:"container,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetContainerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetContainerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetContainerResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetContainerResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListContainersResponse struct {
	// A list of containers for the project associated with the token.
	Containers []*Container    `json:"containers,omitempty"`
	Pagination *sdk.Pagination `json:"pagination,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListContainersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListContainersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListContainersResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListContainersResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpgradeAllContainersRequest struct {
	Tags      interface{} `json:"tags,omitempty"`
	Build     *uuid.UUID  `json:"build,omitempty"`
	BuildTags interface{} `json:"build_tags,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UpgradeAllContainersRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpgradeAllContainersRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpgradeAllContainersRequest(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpgradeAllContainersRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpgradeAllContainersResponse struct {
	Count int64 `json:"count"`

	_rawJSON json.RawMessage
}

func (u *UpgradeAllContainersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpgradeAllContainersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpgradeAllContainersResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpgradeAllContainersResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpgradeContainerRequest struct {
	Build     *uuid.UUID  `json:"build,omitempty"`
	BuildTags interface{} `json:"build_tags,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UpgradeContainerRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpgradeContainerRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpgradeContainerRequest(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpgradeContainerRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpgradeContainerResponse struct {
	_rawJSON json.RawMessage
}

func (u *UpgradeContainerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpgradeContainerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpgradeContainerResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpgradeContainerResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
