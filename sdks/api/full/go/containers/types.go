// This file was auto-generated by Fern from our API Definition.

package containers

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	sdk "sdk"
	builds "sdk/builds"
	core "sdk/core"
)

type CreateContainerRequestQuery struct {
	Project      *string                 `json:"-"`
	Environment  *string                 `json:"-"`
	EndpointType *EndpointType           `json:"-"`
	Body         *CreateContainerRequest `json:"-"`
}

func (c *CreateContainerRequestQuery) UnmarshalJSON(data []byte) error {
	body := new(CreateContainerRequest)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	c.Body = body
	return nil
}

func (c *CreateContainerRequestQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Body)
}

type DestroyContainerRequestQuery struct {
	Project     *string `json:"-"`
	Environment *string `json:"-"`
	// The duration to wait for in milliseconds before killing the container. This should be used to override the default kill timeout if a faster time is needed, say for ignoring a graceful shutdown.
	OverrideKillTimeout *int64 `json:"-"`
}

type ListContainersRequestQuery struct {
	Project      *string       `json:"-"`
	Environment  *string       `json:"-"`
	EndpointType *EndpointType `json:"-"`
}

type GetContainersRequestQuery struct {
	Project          *string       `json:"-"`
	Environment      *string       `json:"-"`
	EndpointType     *EndpointType `json:"-"`
	TagsJson         *string       `json:"-"`
	IncludeDestroyed *bool         `json:"-"`
	Cursor           *string       `json:"-"`
}

type Container struct {
	Id          sdk.Id            `json:"id"`
	Region      string            `json:"region"`
	Tags        interface{}       `json:"tags,omitempty"`
	Build       uuid.UUID         `json:"build"`
	Arguments   []string          `json:"arguments,omitempty"`
	Environment map[string]string `json:"environment,omitempty"`
	Ports       map[string]*Port  `json:"ports,omitempty"`
	Resources   *builds.Resources `json:"resources,omitempty"`
	// The duration to wait for in milliseconds before force killing the actor after a DELETE request. This gives the actor time to perform a shutdown sequence before being killed. This should be set to a safe default, and can be overridden during a DELETE request if needed.
	KillTimeout *int64 `json:"kill_timeout,omitempty"`
	// If true, the actor will try to reschedule itself automatically in the event of a crash or a datacenter failover. The actor will not reschedule if it exits successfully.
	Durable     *bool          `json:"durable,omitempty"`
	CreatedAt   sdk.Timestamp  `json:"created_at"`
	StartedAt   *sdk.Timestamp `json:"started_at,omitempty"`
	DestroyedAt *sdk.Timestamp `json:"destroyed_at,omitempty"`

	_rawJSON json.RawMessage
}

func (c *Container) UnmarshalJSON(data []byte) error {
	type unmarshaler Container
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Container(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Container) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type EndpointType string

const (
	EndpointTypeHostname EndpointType = "hostname"
	EndpointTypePath     EndpointType = "path"
)

func NewEndpointTypeFromString(s string) (EndpointType, error) {
	switch s {
	case "hostname":
		return EndpointTypeHostname, nil
	case "path":
		return EndpointTypePath, nil
	}
	var t EndpointType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EndpointType) Ptr() *EndpointType {
	return &e
}

type Port struct {
	Protocol     builds.PortProtocol `json:"protocol,omitempty"`
	InternalPort *int                `json:"internal_port,omitempty"`
	Hostname     *string             `json:"hostname,omitempty"`
	Port         *int                `json:"port,omitempty"`
	Path         *string             `json:"path,omitempty"`
	// Fully formed connection URL including protocol, hostname, port, and path, if applicable.
	Url     *string             `json:"url,omitempty"`
	Routing *builds.PortRouting `json:"routing,omitempty"`

	_rawJSON json.RawMessage
}

func (p *Port) UnmarshalJSON(data []byte) error {
	type unmarshaler Port
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Port(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Port) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type UpgradeContainerRequestQuery struct {
	Project     *string                  `json:"-"`
	Environment *string                  `json:"-"`
	Body        *UpgradeContainerRequest `json:"-"`
}

func (u *UpgradeContainerRequestQuery) UnmarshalJSON(data []byte) error {
	body := new(UpgradeContainerRequest)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.Body = body
	return nil
}

func (u *UpgradeContainerRequestQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}

type UpgradeAllContainersRequestQuery struct {
	Project     *string                      `json:"-"`
	Environment *string                      `json:"-"`
	Body        *UpgradeAllContainersRequest `json:"-"`
}

func (u *UpgradeAllContainersRequestQuery) UnmarshalJSON(data []byte) error {
	body := new(UpgradeAllContainersRequest)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	u.Body = body
	return nil
}

func (u *UpgradeAllContainersRequestQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.Body)
}
