/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { Actors } from "./api/resources/actors/client/Client";
import { Builds } from "./api/resources/builds/client/Client";
import { Cloud } from "./api/resources/cloud/client/Client";
import { CoreIntercom } from "./api/resources/coreIntercom/client/Client";
import { EdgeIntercom } from "./api/resources/edgeIntercom/client/Client";
import { Group } from "./api/resources/group/client/Client";
import { Identity } from "./api/resources/identity/client/Client";
import { Provision } from "./api/resources/provision/client/Client";
import { Regions } from "./api/resources/regions/client/Client";
import { Servers } from "./api/resources/servers/client/Client";
import { Auth } from "./api/resources/auth/client/Client";
import { Games } from "./api/resources/games/client/Client";
import { Job } from "./api/resources/job/client/Client";
import { Matchmaker } from "./api/resources/matchmaker/client/Client";
import { Portal } from "./api/resources/portal/client/Client";

export declare namespace RivetClient {
    export interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-API-Version header */
        xApiVersion?: "25.2.2";
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
        /** Override the X-API-Version header */
        xApiVersion?: "25.2.2";
    }
}

export class RivetClient {
    protected _actors: Actors | undefined;
    protected _builds: Builds | undefined;
    protected _cloud: Cloud | undefined;
    protected _coreIntercom: CoreIntercom | undefined;
    protected _edgeIntercom: EdgeIntercom | undefined;
    protected _group: Group | undefined;
    protected _identity: Identity | undefined;
    protected _provision: Provision | undefined;
    protected _regions: Regions | undefined;
    protected _servers: Servers | undefined;
    protected _auth: Auth | undefined;
    protected _games: Games | undefined;
    protected _job: Job | undefined;
    protected _matchmaker: Matchmaker | undefined;
    protected _portal: Portal | undefined;

    constructor(protected readonly _options: RivetClient.Options = {}) {}

    public get actors(): Actors {
        return (this._actors ??= new Actors(this._options));
    }

    public get builds(): Builds {
        return (this._builds ??= new Builds(this._options));
    }

    public get cloud(): Cloud {
        return (this._cloud ??= new Cloud(this._options));
    }

    public get coreIntercom(): CoreIntercom {
        return (this._coreIntercom ??= new CoreIntercom(this._options));
    }

    public get edgeIntercom(): EdgeIntercom {
        return (this._edgeIntercom ??= new EdgeIntercom(this._options));
    }

    public get group(): Group {
        return (this._group ??= new Group(this._options));
    }

    public get identity(): Identity {
        return (this._identity ??= new Identity(this._options));
    }

    public get provision(): Provision {
        return (this._provision ??= new Provision(this._options));
    }

    public get regions(): Regions {
        return (this._regions ??= new Regions(this._options));
    }

    public get servers(): Servers {
        return (this._servers ??= new Servers(this._options));
    }

    public get auth(): Auth {
        return (this._auth ??= new Auth(this._options));
    }

    public get games(): Games {
        return (this._games ??= new Games(this._options));
    }

    public get job(): Job {
        return (this._job ??= new Job(this._options));
    }

    public get matchmaker(): Matchmaker {
        return (this._matchmaker ??= new Matchmaker(this._options));
    }

    public get portal(): Portal {
        return (this._portal ??= new Portal(this._options));
    }
}
