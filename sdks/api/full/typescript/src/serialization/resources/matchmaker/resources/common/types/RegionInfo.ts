/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Rivet from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { Identifier } from "../../../../common/types/Identifier";
import { DisplayName } from "../../../../common/types/DisplayName";
import { Coord } from "../../../../geo/resources/common/types/Coord";
import { Distance } from "../../../../geo/resources/common/types/Distance";

export const RegionInfo: core.serialization.ObjectSchema<
    serializers.matchmaker.RegionInfo.Raw,
    Rivet.matchmaker.RegionInfo
> = core.serialization.object({
    regionId: core.serialization.property("region_id", Identifier),
    providerDisplayName: core.serialization.property("provider_display_name", DisplayName),
    regionDisplayName: core.serialization.property("region_display_name", DisplayName),
    datacenterCoord: core.serialization.property("datacenter_coord", Coord),
    datacenterDistanceFromClient: core.serialization.property("datacenter_distance_from_client", Distance),
});

export declare namespace RegionInfo {
    interface Raw {
        region_id: Identifier.Raw;
        provider_display_name: DisplayName.Raw;
        region_display_name: DisplayName.Raw;
        datacenter_coord: Coord.Raw;
        datacenter_distance_from_client: Distance.Raw;
    }
}
