/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Rivet from "../../../../api/index";
import * as core from "../../../../core";
import { CreateContainerRuntimeRequest } from "./CreateContainerRuntimeRequest";
import { CreateContainerNetworkRequest } from "./CreateContainerNetworkRequest";
import { Resources } from "../resources/common/types/Resources";
import { Lifecycle } from "../resources/common/types/Lifecycle";

export const CreateContainerRequest: core.serialization.ObjectSchema<
    serializers.containers.CreateContainerRequest.Raw,
    Rivet.containers.CreateContainerRequest
> = core.serialization.object({
    region: core.serialization.string().optional(),
    tags: core.serialization.unknown(),
    build: core.serialization.string().optional(),
    buildTags: core.serialization.property("build_tags", core.serialization.unknown().optional()),
    runtime: CreateContainerRuntimeRequest.optional(),
    network: CreateContainerNetworkRequest.optional(),
    resources: Resources,
    lifecycle: Lifecycle.optional(),
});

export declare namespace CreateContainerRequest {
    export interface Raw {
        region?: string | null;
        tags?: unknown;
        build?: string | null;
        build_tags?: unknown | null;
        runtime?: CreateContainerRuntimeRequest.Raw | null;
        network?: CreateContainerNetworkRequest.Raw | null;
        resources: Resources.Raw;
        lifecycle?: Lifecycle.Raw | null;
    }
}
