/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Rivet from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { PrepareFile } from "../../../../upload/resources/common/types/PrepareFile";
import { BuildKind } from "./BuildKind";
import { BuildCompression } from "./BuildCompression";

export const CreateBuildRequest: core.serialization.ObjectSchema<
    serializers.servers.CreateBuildRequest.Raw,
    Rivet.servers.CreateBuildRequest
> = core.serialization.object({
    name: core.serialization.string(),
    imageTag: core.serialization.property("image_tag", core.serialization.string()),
    imageFile: core.serialization.property("image_file", PrepareFile),
    multipartUpload: core.serialization.property("multipart_upload", core.serialization.boolean().optional()),
    kind: BuildKind.optional(),
    compression: BuildCompression.optional(),
    prewarmDatacenters: core.serialization.property(
        "prewarm_datacenters",
        core.serialization.list(core.serialization.string()).optional()
    ),
});

export declare namespace CreateBuildRequest {
    interface Raw {
        name: string;
        image_tag: string;
        image_file: PrepareFile.Raw;
        multipart_upload?: boolean | null;
        kind?: BuildKind.Raw | null;
        compression?: BuildCompression.Raw | null;
        prewarm_datacenters?: string[] | null;
    }
}
