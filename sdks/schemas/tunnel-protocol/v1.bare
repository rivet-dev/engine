type RequestId data[16]  # UUIDv4
type MessageId data[16]  # UUIDv4
type Id str


# MARK: Ack
type Ack void

# MARK: HTTP
type ToServerRequestStart struct {
	actorId: Id
	method: str
	path: str
	headers: map<str><str>
	body: optional<data>
	stream: bool
}

type ToServerRequestChunk struct {
	body: data
	finish: bool
}

type ToServerRequestAbort void

type ToClientResponseStart struct {
	status: u16
	headers: map<str><str>
	body: optional<data>
	stream: bool
}

type ToClientResponseChunk struct {
	body: data
	finish: bool
}

type ToClientResponseAbort void

# MARK: WebSocket
type ToServerWebSocketOpen struct {
	actorId: Id
	path: str
	headers: map<str><str>
}

type ToServerWebSocketMessage struct {
	data: data
	binary: bool
}

type ToServerWebSocketClose struct {
	code: optional<u16>
	reason: optional<str>
}

type ToClientWebSocketOpen void

type ToClientWebSocketMessage struct {
	data: data
	binary: bool
}

type ToClientWebSocketClose struct {
	code: optional<u16>
	reason: optional<str>
}

# MARK: Message
type MessageKind union {
	Ack |

	# HTTP
	ToServerRequestStart |
	ToServerRequestChunk |
	ToServerRequestAbort |
	ToClientResponseStart |
	ToClientResponseChunk |
	ToClientResponseAbort |
	
	# WebSocket
	ToServerWebSocketOpen |
	ToServerWebSocketMessage |
	ToServerWebSocketClose |
	ToClientWebSocketOpen |
	ToClientWebSocketMessage |
	ToClientWebSocketClose
}

# MARK: Message sent over tunnel WebSocket
type RunnerMessage struct {
	requestId: RequestId
	messageId: MessageId
	messageKind: MessageKind
}

# MARK: Message sent over UPS
type PubSubMessage struct {
	requestId: RequestId
	messageId: MessageId
	# Subject to send replies to. Only sent when opening a new request from gateway -> runner.
	replyTo: optional<str>
	messageKind: MessageKind
}

