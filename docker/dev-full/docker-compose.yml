services:
  rivet-server:
    build:
      context: ../..
      dockerfile: docker/dev-full/server.Dockerfile
    command: /usr/bin/rivet-server start
    environment:
      - RUST_BACKTRACE=1
      - RUST_LOG=debug,hyper=info
      - RUST_LOG_TARGET=1
      - RUST_LOG_SPAN_PATH=1
    stop_grace_period: 0s
    ports:
      # API
      - "8080:8080"
      # API internal
      - "8081:8080"
      # Pegboard
      - "8082:8082"
    depends_on:
      cockroachdb:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      nats:
        condition: service_healthy
      # seaweedfs:
      #   condition: service_healthy
      vector-server:
        condition: service_started
    volumes:
      - ./rivet-server:/etc/rivet-server:ro
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8090/health"]
      interval: 2s
      timeout: 10s
      retries: 10

  rivet-shell:
    build:
      context: ../..
      dockerfile: docker/dev-full/server.Dockerfile
    command: sleep infinity
    environment:
      - RUST_BACKTRACE=1
    stop_grace_period: 0s
    volumes:
      - ./rivet-server:/etc/rivet-server:ro
    networks:
      - rivet-network

  rivet-client:
    build:
      context: ../..
      dockerfile: docker/dev-full/client.Dockerfile
    command: -c /etc/rivet-client/config.yaml
    environment:
      - RUST_BACKTRACE=1
    stop_grace_period: 0s
    volumes:
      - ./rivet-client:/etc/rivet-client:ro
      - client-data:/var/lib/rivet-client
    ports:
      # Enable host networking for actors
      #
      # Corresponds to `actor.network.wan_port_range_min` and
      # `actor.network.wan_port_range_max` in `rivet-client/config.yaml`.
      #
      # We only reserve 100 ports instead of the default 22,000 since each
      # individual port converts to an iptable rule when using Docker, which
      # can cause unexpected side effects. This limits the number of actors
      # using host networking to 100.
     - "20000-20100:20000-20100"
    networks:
      - rivet-network

  cockroachdb:
    image: cockroachdb/cockroach:v24.2.3
    command: start-single-node --insecure
    volumes:
      - cockroach-data:/cockroach/cockroach-data
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/health?ready=1"]
      interval: 2s
      timeout: 10s
      retries: 10

  redis:
    image: bitnami/valkey:8.0.1
    # TODO: Remove root user
    user: root
    volumes:
      - redis-data:/data
    command: redis-server --requirepass password --save 60 1 --appendonly yes
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 10s
      retries: 10

  clickhouse:
    image: bitnami/clickhouse:23.10.1
    environment:
      - CLICKHOUSE_ADMIN_PASSWORD=default
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./clickhouse/config.xml:/bitnami/clickhouse/etc/conf.d/config.xml
      - ./clickhouse/users.xml:/bitnami/clickhouse/etc/users.d/users.xml
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "clickhouse-client", "--password", "default", "--query", "SELECT 1"]
      interval: 2s
      timeout: 10s
      retries: 10

  nats:
    image: nats:2.10.22-scratch
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "nats-server", "--health"]
      interval: 2s
      timeout: 10s
      retries: 10

  seaweedfs:
    image: chrislusf/seaweedfs:3.79
    # TODO: Remove root user
    user: root
    # `raftHashicorp` speeds up initial leader election
    command: |
      server \
        -dir /var/lib/seaweedfs \
        -master.raftHashicorp \
        -s3 -s3.config /etc/seaweedfs/s3.json -s3.port=9000 -s3.allowEmptyFolder=false -s3.allowDeleteBucketNotEmpty=false
    volumes:
      - ./seaweedfs:/etc/seaweedfs:ro
      - seaweedfs-data:/var/lib/seaweedfs
    ports:
      # S3
      - "9000:9000"
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "nc", "-z", "127.0.0.1", "9000"]
      interval: 2s
      timeout: 10s

  vector-client:
    image: timberio/vector:0.42.0-distroless-static
    command: -C /etc/vector
    volumes:
      - ./vector-client:/etc/vector
      # Mount client data to read logs
      - client-data:/var/lib/rivet-client
    networks:
      - rivet-network

  vector-server:
    image: timberio/vector:0.42.0-distroless-static
    command: -C /etc/vector
    volumes:
      - vector-data:/var/lib/vector
      - ./vector-server:/etc/vector
    networks:
      - rivet-network

networks:
  rivet-network:
    driver: bridge

volumes:
  client-data:
  cockroach-data:
  redis-data:
  clickhouse-data:
  seaweedfs-data:
  vector-data:
