services:
  rivet-server:
    build:
      context: ../..
      dockerfile: docker/universal/Dockerfile
      target: server-full
    platform: linux/amd64
    restart: unless-stopped
    command: /usr/bin/rivet-server start
    environment:
      - RUST_BACKTRACE=1
      - RUST_LOG=debug,hyper=info
      - RUST_LOG_TARGET=1
      - RUST_LOG_SPAN_PATH=1
    stop_grace_period: 0s
    ports:
      # API
      - "8080:8080"
      # API internal
      - "8081:8081"
      # Pegboard
      - "8082:8082"
    depends_on:
      rivet-guard:
        condition: service_started
      cockroachdb:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      nats:
        condition: service_healthy
      seaweedfs:
        condition: service_healthy
      vector-server:
        condition: service_started
    volumes:
      - ./rivet-server:/etc/rivet-server:ro
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8090/health/liveness"]
      interval: 2s
      timeout: 10s
      retries: 10

  rivet-shell:
    build:
      context: ../..
      dockerfile: docker/universal/Dockerfile
      target: server-full
    platform: linux/amd64
    restart: unless-stopped
    command: sleep infinity
    environment:
      - RUST_BACKTRACE=1
    stop_grace_period: 0s
    volumes:
      - ./rivet-server:/etc/rivet-server:ro
    networks:
      - rivet-network

  rivet-guard:
    restart: unless-stopped
    image: traefik:v3.2.1
    command: --configFile=/etc/rivet-guard/traefik.yaml
    volumes:
      - ./rivet-guard:/etc/rivet-guard:ro
    ports:
      # HTTP
      - "7080:7080"
      # HTTPS
      - "7443:7443"
      # Dashboard
      - "9980:9980"
      # Enable TCP & UDP port ranges.
      #
      # Corresponds to `server.rivet.guard.min_ingress_port_tcp` and
      # `actor.network.wan_port_range_max` in `rivet-server/config.yaml`.
      #
      # We only reserve 100 ports instead of the default 22,000 since each
      # individual port converts to an iptable rule when using Docker, which
      # can cause unexpected side effects. This limits the number of actors
      # using host networking to 100.
      - "7500-7599:7500-7599"
    networks:
      - rivet-network

  cockroachdb:
    restart: unless-stopped
    image: cockroachdb/cockroach:v24.2.3
    command: start-single-node --insecure
    volumes:
      - cockroach-data:/cockroach/cockroach-data
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/health?ready=1"]
      interval: 2s
      timeout: 10s
      retries: 10

  rivet-client:
    build:
      context: ../..
      dockerfile: docker/universal/Dockerfile
      target: client-full
    # TODO(RVT-4168): Compile libfdb from scratch for ARM
    platform: linux/amd64
    restart: unless-stopped
    command: -c /etc/rivet-client/config.yaml
    environment:
      - RUST_BACKTRACE=1
    stop_grace_period: 0s
    depends_on:
      foundationdb:
        condition: service_healthy
    volumes:
      - ./rivet-client:/etc/rivet-client:ro
      - client-data:/var/lib/rivet-client
    ports:
      # Enable host networking for actors
      #
      # Corresponds to `actor.network.wan_port_range_min` and
      # `actor.network.wan_port_range_max` in `rivet-client/config.yaml`.
      #
      # We only reserve 100 ports instead of the default 22,000. See
      # rivet-guard for explanation.
      - "7600-7699:7600-7699"
    networks:
      - rivet-network

  redis:
    restart: unless-stopped
    image: bitnami/valkey:8.0.1
    # TODO: Remove root user
    user: root
    volumes:
      - redis-data:/data
    command: redis-server --requirepass password --save 60 1 --appendonly yes
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 10s
      retries: 10

  clickhouse:
    restart: unless-stopped
    image: clickhouse/clickhouse-server:23.10.1
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ./clickhouse/users.xml:/etc/clickhouse-server/users.d/users.xml
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "clickhouse-client", "--password", "default", "--query", "SELECT 1"]
      interval: 2s
      timeout: 10s
      retries: 10

  nats:
    restart: unless-stopped
    image: nats:2.10.22-scratch
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "nats-server", "--health"]
      interval: 2s
      timeout: 10s
      retries: 10

  seaweedfs:
    restart: unless-stopped
    image: chrislusf/seaweedfs:3.79
    # TODO: Remove root user
    user: root
    # `raftHashicorp` speeds up initial leader election
    command: |
      server \
        -dir /var/lib/seaweedfs \
        -master.raftBootstrap -master.raftHashicorp \
        -s3 -s3.config /etc/seaweedfs/s3.json -s3.port=9000 -s3.allowEmptyFolder=false -s3.allowDeleteBucketNotEmpty=false
    volumes:
      - ./seaweedfs:/etc/seaweedfs:ro
      - seaweedfs-data:/var/lib/seaweedfs
    ports:
      # S3
      - "9000:9000"
    networks:
      - rivet-network
    healthcheck:
      test: ["CMD", "nc", "-z", "127.0.0.1", "9000"]
      interval: 2s
      timeout: 10s

  foundationdb:
    restart: unless-stopped
    # See docs-internal/infrastructure/fdb/AVX.md
    image: foundationdb/foundationdb:7.1.60
    platform: linux/amd64
    entrypoint: ["/usr/bin/tini", "-g", "--", "/usr/local/bin/entrypoint.sh"]
    volumes:
      - ./foundationdb/entrypoint.sh:/usr/local/bin/entrypoint.sh
      - foundationdb-data:/var/fdb:rw
      - foundationdb-storage-data:/var/fdb/data:rw
    healthcheck:
      test: ["CMD", "fdbcli", "--exec", "status"]
      interval: 2s
      timeout: 10s
      retries: 10
    networks:
      - rivet-network

  vector-client:
    restart: unless-stopped
    image: timberio/vector:0.42.0-distroless-static
    command: -C /etc/vector
    volumes:
      - ./vector-client:/etc/vector
      # Mount client data to read logs
      - client-data:/var/lib/rivet-client
    networks:
      - rivet-network

  vector-server:
    restart: unless-stopped
    image: timberio/vector:0.42.0-distroless-static
    command: -C /etc/vector
    volumes:
      - vector-server-data:/var/lib/vector
      - ./vector-server:/etc/vector
    networks:
      - rivet-network

networks:
  rivet-network:
    driver: bridge

volumes:
  client-data:
  cockroach-data:
  redis-data:
  clickhouse-data:
  seaweedfs-data:
  vector-server-data:
  foundationdb-data:
  foundationdb-storage-data:
