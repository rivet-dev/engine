/**
 * This file was auto-generated by Fern from our API Definition.
 */

import type * as Rivet from "../../api/index";
import * as core from "../../core";
import type * as serializers from "../index";
import { CrashPolicy } from "./CrashPolicy";
import { RivetId } from "./RivetId";

export const Actor: core.serialization.ObjectSchema<
	serializers.Actor.Raw,
	Rivet.Actor
> = core.serialization.object({
	actorId: core.serialization.property("actor_id", RivetId),
	connectableTs: core.serialization.property(
		"connectable_ts",
		core.serialization.number().optional(),
	),
	crashPolicy: core.serialization.property("crash_policy", CrashPolicy),
	createTs: core.serialization.property(
		"create_ts",
		core.serialization.number(),
	),
	datacenter: core.serialization.string(),
	destroyTs: core.serialization.property(
		"destroy_ts",
		core.serialization.number().optional(),
	),
	key: core.serialization.string().optional(),
	name: core.serialization.string(),
	namespaceId: core.serialization.property("namespace_id", RivetId),
	pendingAllocationTs: core.serialization.property(
		"pending_allocation_ts",
		core.serialization.number().optional(),
	),
	runnerNameSelector: core.serialization.property(
		"runner_name_selector",
		core.serialization.string(),
	),
	sleepTs: core.serialization.property(
		"sleep_ts",
		core.serialization.number().optional(),
	),
	startTs: core.serialization.property(
		"start_ts",
		core.serialization.number().optional(),
	),
});

export declare namespace Actor {
	export interface Raw {
		actor_id: RivetId.Raw;
		connectable_ts?: number | null;
		crash_policy: CrashPolicy.Raw;
		create_ts: number;
		datacenter: string;
		destroy_ts?: number | null;
		key?: string | null;
		name: string;
		namespace_id: RivetId.Raw;
		pending_allocation_ts?: number | null;
		runner_name_selector: string;
		sleep_ts?: number | null;
		start_ts?: number | null;
	}
}
