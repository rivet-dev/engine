// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "sdk/core"
)

type ActorsCreateRequest struct {
	Namespace          string      `json:"-"`
	CrashPolicy        CrashPolicy `json:"crash_policy,omitempty"`
	Datacenter         *string     `json:"datacenter,omitempty"`
	Input              *string     `json:"input,omitempty"`
	Key                *string     `json:"key,omitempty"`
	Name               string      `json:"name"`
	RunnerNameSelector string      `json:"runner_name_selector"`
}

type ActorsDeleteRequest struct {
	Namespace *string `json:"-"`
}

type ActorsGetOrCreateRequest struct {
	Namespace          string      `json:"-"`
	CrashPolicy        CrashPolicy `json:"crash_policy,omitempty"`
	Datacenter         *string     `json:"datacenter,omitempty"`
	Input              *string     `json:"input,omitempty"`
	Key                string      `json:"key"`
	Name               string      `json:"name"`
	RunnerNameSelector string      `json:"runner_name_selector"`
}

type ActorsListRequest struct {
	Namespace        string  `json:"-"`
	Name             *string `json:"-"`
	Key              *string `json:"-"`
	ActorIds         *string `json:"-"`
	IncludeDestroyed *bool   `json:"-"`
	Limit            *int    `json:"-"`
	Cursor           *string `json:"-"`
}

type ActorsListNamesRequest struct {
	Namespace string  `json:"-"`
	Limit     *int    `json:"-"`
	Cursor    *string `json:"-"`
}

type RunnerConfigsDeleteRequest struct {
	Namespace string `json:"-"`
}

type RunnerConfigsListRequest struct {
	Namespace   string               `json:"-"`
	Limit       *int                 `json:"-"`
	Cursor      *string              `json:"-"`
	Variant     *RunnerConfigVariant `json:"-"`
	RunnerNames *string              `json:"-"`
}

type RunnerConfigsRefreshMetadataRequest struct {
	Namespace string                                  `json:"-"`
	Body      RunnerConfigsRefreshMetadataRequestBody `json:"-"`
}

func (r *RunnerConfigsRefreshMetadataRequest) UnmarshalJSON(data []byte) error {
	var body RunnerConfigsRefreshMetadataRequestBody
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	r.Body = body
	return nil
}

func (r *RunnerConfigsRefreshMetadataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(r.Body)
}

type RunnerConfigsServerlessHealthCheckRequest struct {
	Namespace string            `json:"-"`
	Headers   map[string]string `json:"headers,omitempty"`
	Url       string            `json:"url"`
}

type RunnerConfigsUpsertRequestBody struct {
	Namespace   string                   `json:"-"`
	Datacenters map[string]*RunnerConfig `json:"datacenters,omitempty"`
}

type Actor struct {
	ActorId             RivetId     `json:"actor_id"`
	ConnectableTs       *int64      `json:"connectable_ts,omitempty"`
	CrashPolicy         CrashPolicy `json:"crash_policy,omitempty"`
	CreateTs            int64       `json:"create_ts"`
	Datacenter          string      `json:"datacenter"`
	DestroyTs           *int64      `json:"destroy_ts,omitempty"`
	Key                 *string     `json:"key,omitempty"`
	Name                string      `json:"name"`
	NamespaceId         RivetId     `json:"namespace_id"`
	PendingAllocationTs *int64      `json:"pending_allocation_ts,omitempty"`
	RunnerNameSelector  string      `json:"runner_name_selector"`
	SleepTs             *int64      `json:"sleep_ts,omitempty"`
	StartTs             *int64      `json:"start_ts,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Actor) UnmarshalJSON(data []byte) error {
	type unmarshaler Actor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Actor(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Actor) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorName struct {
	Metadata map[string]interface{} `json:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActorName) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorName
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorName(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorName) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorsCreateResponse struct {
	Actor *Actor `json:"actor,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActorsCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorsCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorsCreateResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorsCreateResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorsDeleteResponse = map[string]interface{}

type ActorsGetOrCreateResponse struct {
	Actor   *Actor `json:"actor,omitempty"`
	Created bool   `json:"created"`

	_rawJSON json.RawMessage
}

func (a *ActorsGetOrCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorsGetOrCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorsGetOrCreateResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorsGetOrCreateResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorsListNamesResponse struct {
	Names      map[string]*ActorName `json:"names,omitempty"`
	Pagination *Pagination           `json:"pagination,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActorsListNamesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorsListNamesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorsListNamesResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorsListNamesResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActorsListResponse struct {
	Actors     []*Actor    `json:"actors,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ActorsListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ActorsListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActorsListResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActorsListResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CrashPolicy string

const (
	CrashPolicyRestart CrashPolicy = "restart"
	CrashPolicySleep   CrashPolicy = "sleep"
	CrashPolicyDestroy CrashPolicy = "destroy"
)

func NewCrashPolicyFromString(s string) (CrashPolicy, error) {
	switch s {
	case "restart":
		return CrashPolicyRestart, nil
	case "sleep":
		return CrashPolicySleep, nil
	case "destroy":
		return CrashPolicyDestroy, nil
	}
	var t CrashPolicy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CrashPolicy) Ptr() *CrashPolicy {
	return &c
}

type Datacenter struct {
	Label int    `json:"label"`
	Name  string `json:"name"`
	Url   string `json:"url"`

	_rawJSON json.RawMessage
}

func (d *Datacenter) UnmarshalJSON(data []byte) error {
	type unmarshaler Datacenter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Datacenter(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *Datacenter) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DatacenterHealth struct {
	DatacenterLabel int             `json:"datacenter_label"`
	DatacenterName  string          `json:"datacenter_name"`
	Error           *string         `json:"error,omitempty"`
	Response        *HealthResponse `json:"response,omitempty"`
	RttMs           *float64        `json:"rtt_ms,omitempty"`
	Status          HealthStatus    `json:"status,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DatacenterHealth) UnmarshalJSON(data []byte) error {
	type unmarshaler DatacenterHealth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DatacenterHealth(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DatacenterHealth) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DatacentersListResponse struct {
	Datacenters []*Datacenter `json:"datacenters,omitempty"`
	Pagination  *Pagination   `json:"pagination,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DatacentersListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DatacentersListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DatacentersListResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DatacentersListResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type HealthFanoutResponse struct {
	Datacenters []*DatacenterHealth `json:"datacenters,omitempty"`

	_rawJSON json.RawMessage
}

func (h *HealthFanoutResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler HealthFanoutResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HealthFanoutResponse(value)
	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HealthFanoutResponse) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HealthResponse struct {
	Runtime string `json:"runtime"`
	Status  string `json:"status"`
	Version string `json:"version"`

	_rawJSON json.RawMessage
}

func (h *HealthResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler HealthResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HealthResponse(value)
	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HealthResponse) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HealthStatus string

const (
	HealthStatusOk    HealthStatus = "ok"
	HealthStatusError HealthStatus = "error"
)

func NewHealthStatusFromString(s string) (HealthStatus, error) {
	switch s {
	case "ok":
		return HealthStatusOk, nil
	case "error":
		return HealthStatusError, nil
	}
	var t HealthStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (h HealthStatus) Ptr() *HealthStatus {
	return &h
}

type Namespace struct {
	CreateTs    int64   `json:"create_ts"`
	DisplayName string  `json:"display_name"`
	Name        string  `json:"name"`
	NamespaceId RivetId `json:"namespace_id"`

	_rawJSON json.RawMessage
}

func (n *Namespace) UnmarshalJSON(data []byte) error {
	type unmarshaler Namespace
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = Namespace(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *Namespace) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamespaceListResponse struct {
	Namespaces []*Namespace `json:"namespaces,omitempty"`
	Pagination *Pagination  `json:"pagination,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NamespaceListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NamespaceListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamespaceListResponse(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamespaceListResponse) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamespacesCreateResponse struct {
	Namespace *Namespace `json:"namespace,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NamespacesCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NamespacesCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamespacesCreateResponse(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamespacesCreateResponse) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type Pagination struct {
	Cursor *string `json:"cursor,omitempty"`

	_rawJSON json.RawMessage
}

func (p *Pagination) UnmarshalJSON(data []byte) error {
	type unmarshaler Pagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Pagination(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Pagination) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type RivetId = string

type Runner struct {
	CreateTs        int64                  `json:"create_ts"`
	Datacenter      string                 `json:"datacenter"`
	DrainTs         *int64                 `json:"drain_ts,omitempty"`
	Key             string                 `json:"key"`
	LastConnectedTs *int64                 `json:"last_connected_ts,omitempty"`
	LastPingTs      int64                  `json:"last_ping_ts"`
	LastRtt         int                    `json:"last_rtt"`
	Metadata        map[string]interface{} `json:"metadata,omitempty"`
	Name            string                 `json:"name"`
	NamespaceId     RivetId                `json:"namespace_id"`
	RemainingSlots  int                    `json:"remaining_slots"`
	RunnerId        RivetId                `json:"runner_id"`
	StopTs          *int64                 `json:"stop_ts,omitempty"`
	TotalSlots      int                    `json:"total_slots"`
	Version         int                    `json:"version"`

	_rawJSON json.RawMessage
}

func (r *Runner) UnmarshalJSON(data []byte) error {
	type unmarshaler Runner
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Runner(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *Runner) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfig struct {
	Normal     map[string]interface{}  `json:"normal,omitempty"`
	Serverless *RunnerConfigServerless `json:"serverless,omitempty"`
	Metadata   interface{}             `json:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfig(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfig) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigKind struct {
	typeName                   string
	RunnerConfigKindNormal     *RunnerConfigKindNormal
	RunnerConfigKindServerless *RunnerConfigKindServerless
}

func NewRunnerConfigKindFromRunnerConfigKindNormal(value *RunnerConfigKindNormal) *RunnerConfigKind {
	return &RunnerConfigKind{typeName: "runnerConfigKindNormal", RunnerConfigKindNormal: value}
}

func NewRunnerConfigKindFromRunnerConfigKindServerless(value *RunnerConfigKindServerless) *RunnerConfigKind {
	return &RunnerConfigKind{typeName: "runnerConfigKindServerless", RunnerConfigKindServerless: value}
}

func (r *RunnerConfigKind) UnmarshalJSON(data []byte) error {
	valueRunnerConfigKindNormal := new(RunnerConfigKindNormal)
	if err := json.Unmarshal(data, &valueRunnerConfigKindNormal); err == nil {
		r.typeName = "runnerConfigKindNormal"
		r.RunnerConfigKindNormal = valueRunnerConfigKindNormal
		return nil
	}
	valueRunnerConfigKindServerless := new(RunnerConfigKindServerless)
	if err := json.Unmarshal(data, &valueRunnerConfigKindServerless); err == nil {
		r.typeName = "runnerConfigKindServerless"
		r.RunnerConfigKindServerless = valueRunnerConfigKindServerless
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RunnerConfigKind) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "runnerConfigKindNormal":
		return json.Marshal(r.RunnerConfigKindNormal)
	case "runnerConfigKindServerless":
		return json.Marshal(r.RunnerConfigKindServerless)
	}
}

type RunnerConfigKindVisitor interface {
	VisitRunnerConfigKindNormal(*RunnerConfigKindNormal) error
	VisitRunnerConfigKindServerless(*RunnerConfigKindServerless) error
}

func (r *RunnerConfigKind) Accept(visitor RunnerConfigKindVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "runnerConfigKindNormal":
		return visitor.VisitRunnerConfigKindNormal(r.RunnerConfigKindNormal)
	case "runnerConfigKindServerless":
		return visitor.VisitRunnerConfigKindServerless(r.RunnerConfigKindServerless)
	}
}

type RunnerConfigKindNormal struct {
	Normal map[string]interface{} `json:"normal,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigKindNormal) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigKindNormal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigKindNormal(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigKindNormal) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigKindServerless struct {
	Serverless *RunnerConfigKindServerlessServerless `json:"serverless,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigKindServerless) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigKindServerless
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigKindServerless(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigKindServerless) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigKindServerlessServerless struct {
	Headers    map[string]string `json:"headers,omitempty"`
	MaxRunners int               `json:"max_runners"`
	MinRunners *int              `json:"min_runners,omitempty"`
	// Seconds.
	RequestLifespan int    `json:"request_lifespan"`
	RunnersMargin   *int   `json:"runners_margin,omitempty"`
	SlotsPerRunner  int    `json:"slots_per_runner"`
	Url             string `json:"url"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigKindServerlessServerless) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigKindServerlessServerless
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigKindServerlessServerless(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigKindServerlessServerless) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigServerless struct {
	Headers    map[string]string `json:"headers,omitempty"`
	MaxRunners int               `json:"max_runners"`
	MinRunners *int              `json:"min_runners,omitempty"`
	// Seconds.
	RequestLifespan int    `json:"request_lifespan"`
	RunnersMargin   *int   `json:"runners_margin,omitempty"`
	SlotsPerRunner  int    `json:"slots_per_runner"`
	Url             string `json:"url"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigServerless) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigServerless
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigServerless(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigServerless) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigVariant string

const (
	RunnerConfigVariantServerless RunnerConfigVariant = "serverless"
	RunnerConfigVariantNormal     RunnerConfigVariant = "normal"
)

func NewRunnerConfigVariantFromString(s string) (RunnerConfigVariant, error) {
	switch s {
	case "serverless":
		return RunnerConfigVariantServerless, nil
	case "normal":
		return RunnerConfigVariantNormal, nil
	}
	var t RunnerConfigVariant
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RunnerConfigVariant) Ptr() *RunnerConfigVariant {
	return &r
}

type RunnerConfigsDeleteResponse = map[string]interface{}

type RunnerConfigsListResponse struct {
	Pagination    *Pagination                                             `json:"pagination,omitempty"`
	RunnerConfigs map[string]*RunnerConfigsListResponseRunnerConfigsValue `json:"runner_configs,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsListResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsListResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsListResponseRunnerConfigsValue struct {
	Datacenters map[string]*RunnerConfig `json:"datacenters,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsListResponseRunnerConfigsValue) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsListResponseRunnerConfigsValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsListResponseRunnerConfigsValue(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsListResponseRunnerConfigsValue) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsRefreshMetadataRequestBody = map[string]interface{}

type RunnerConfigsRefreshMetadataResponse = map[string]interface{}

type RunnerConfigsServerlessHealthCheckResponse struct {
	typeName                                          string
	RunnerConfigsServerlessHealthCheckResponseSuccess *RunnerConfigsServerlessHealthCheckResponseSuccess
	RunnerConfigsServerlessHealthCheckResponseFailure *RunnerConfigsServerlessHealthCheckResponseFailure
}

func NewRunnerConfigsServerlessHealthCheckResponseFromRunnerConfigsServerlessHealthCheckResponseSuccess(value *RunnerConfigsServerlessHealthCheckResponseSuccess) *RunnerConfigsServerlessHealthCheckResponse {
	return &RunnerConfigsServerlessHealthCheckResponse{typeName: "runnerConfigsServerlessHealthCheckResponseSuccess", RunnerConfigsServerlessHealthCheckResponseSuccess: value}
}

func NewRunnerConfigsServerlessHealthCheckResponseFromRunnerConfigsServerlessHealthCheckResponseFailure(value *RunnerConfigsServerlessHealthCheckResponseFailure) *RunnerConfigsServerlessHealthCheckResponse {
	return &RunnerConfigsServerlessHealthCheckResponse{typeName: "runnerConfigsServerlessHealthCheckResponseFailure", RunnerConfigsServerlessHealthCheckResponseFailure: value}
}

func (r *RunnerConfigsServerlessHealthCheckResponse) UnmarshalJSON(data []byte) error {
	valueRunnerConfigsServerlessHealthCheckResponseSuccess := new(RunnerConfigsServerlessHealthCheckResponseSuccess)
	if err := json.Unmarshal(data, &valueRunnerConfigsServerlessHealthCheckResponseSuccess); err == nil {
		r.typeName = "runnerConfigsServerlessHealthCheckResponseSuccess"
		r.RunnerConfigsServerlessHealthCheckResponseSuccess = valueRunnerConfigsServerlessHealthCheckResponseSuccess
		return nil
	}
	valueRunnerConfigsServerlessHealthCheckResponseFailure := new(RunnerConfigsServerlessHealthCheckResponseFailure)
	if err := json.Unmarshal(data, &valueRunnerConfigsServerlessHealthCheckResponseFailure); err == nil {
		r.typeName = "runnerConfigsServerlessHealthCheckResponseFailure"
		r.RunnerConfigsServerlessHealthCheckResponseFailure = valueRunnerConfigsServerlessHealthCheckResponseFailure
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RunnerConfigsServerlessHealthCheckResponse) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "runnerConfigsServerlessHealthCheckResponseSuccess":
		return json.Marshal(r.RunnerConfigsServerlessHealthCheckResponseSuccess)
	case "runnerConfigsServerlessHealthCheckResponseFailure":
		return json.Marshal(r.RunnerConfigsServerlessHealthCheckResponseFailure)
	}
}

type RunnerConfigsServerlessHealthCheckResponseVisitor interface {
	VisitRunnerConfigsServerlessHealthCheckResponseSuccess(*RunnerConfigsServerlessHealthCheckResponseSuccess) error
	VisitRunnerConfigsServerlessHealthCheckResponseFailure(*RunnerConfigsServerlessHealthCheckResponseFailure) error
}

func (r *RunnerConfigsServerlessHealthCheckResponse) Accept(visitor RunnerConfigsServerlessHealthCheckResponseVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "runnerConfigsServerlessHealthCheckResponseSuccess":
		return visitor.VisitRunnerConfigsServerlessHealthCheckResponseSuccess(r.RunnerConfigsServerlessHealthCheckResponseSuccess)
	case "runnerConfigsServerlessHealthCheckResponseFailure":
		return visitor.VisitRunnerConfigsServerlessHealthCheckResponseFailure(r.RunnerConfigsServerlessHealthCheckResponseFailure)
	}
}

type RunnerConfigsServerlessHealthCheckResponseFailure struct {
	Failure *RunnerConfigsServerlessHealthCheckResponseFailureFailure `json:"failure,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessHealthCheckResponseFailure) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessHealthCheckResponseFailure
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessHealthCheckResponseFailure(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessHealthCheckResponseFailure) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessHealthCheckResponseFailureFailure struct {
	Error *RunnerConfigsServerlessMetadataError `json:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessHealthCheckResponseFailureFailure) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessHealthCheckResponseFailureFailure
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessHealthCheckResponseFailureFailure(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessHealthCheckResponseFailureFailure) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessHealthCheckResponseSuccess struct {
	Success *RunnerConfigsServerlessHealthCheckResponseSuccessSuccess `json:"success,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessHealthCheckResponseSuccess) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessHealthCheckResponseSuccess
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessHealthCheckResponseSuccess(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessHealthCheckResponseSuccess) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessHealthCheckResponseSuccessSuccess struct {
	Version string `json:"version"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessHealthCheckResponseSuccessSuccess) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessHealthCheckResponseSuccessSuccess
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessHealthCheckResponseSuccessSuccess(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessHealthCheckResponseSuccessSuccess) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessMetadataError struct {
	typeName                                                  string
	RunnerConfigsServerlessMetadataErrorInvalidRequest        *RunnerConfigsServerlessMetadataErrorInvalidRequest
	RunnerConfigsServerlessMetadataErrorRequestFailed         *RunnerConfigsServerlessMetadataErrorRequestFailed
	RunnerConfigsServerlessMetadataErrorRequestTimedOut       *RunnerConfigsServerlessMetadataErrorRequestTimedOut
	RunnerConfigsServerlessMetadataErrorNonSuccessStatus      *RunnerConfigsServerlessMetadataErrorNonSuccessStatus
	RunnerConfigsServerlessMetadataErrorInvalidResponseJson   *RunnerConfigsServerlessMetadataErrorInvalidResponseJson
	RunnerConfigsServerlessMetadataErrorInvalidResponseSchema *RunnerConfigsServerlessMetadataErrorInvalidResponseSchema
}

func NewRunnerConfigsServerlessMetadataErrorFromRunnerConfigsServerlessMetadataErrorInvalidRequest(value *RunnerConfigsServerlessMetadataErrorInvalidRequest) *RunnerConfigsServerlessMetadataError {
	return &RunnerConfigsServerlessMetadataError{typeName: "runnerConfigsServerlessMetadataErrorInvalidRequest", RunnerConfigsServerlessMetadataErrorInvalidRequest: value}
}

func NewRunnerConfigsServerlessMetadataErrorFromRunnerConfigsServerlessMetadataErrorRequestFailed(value *RunnerConfigsServerlessMetadataErrorRequestFailed) *RunnerConfigsServerlessMetadataError {
	return &RunnerConfigsServerlessMetadataError{typeName: "runnerConfigsServerlessMetadataErrorRequestFailed", RunnerConfigsServerlessMetadataErrorRequestFailed: value}
}

func NewRunnerConfigsServerlessMetadataErrorFromRunnerConfigsServerlessMetadataErrorRequestTimedOut(value *RunnerConfigsServerlessMetadataErrorRequestTimedOut) *RunnerConfigsServerlessMetadataError {
	return &RunnerConfigsServerlessMetadataError{typeName: "runnerConfigsServerlessMetadataErrorRequestTimedOut", RunnerConfigsServerlessMetadataErrorRequestTimedOut: value}
}

func NewRunnerConfigsServerlessMetadataErrorFromRunnerConfigsServerlessMetadataErrorNonSuccessStatus(value *RunnerConfigsServerlessMetadataErrorNonSuccessStatus) *RunnerConfigsServerlessMetadataError {
	return &RunnerConfigsServerlessMetadataError{typeName: "runnerConfigsServerlessMetadataErrorNonSuccessStatus", RunnerConfigsServerlessMetadataErrorNonSuccessStatus: value}
}

func NewRunnerConfigsServerlessMetadataErrorFromRunnerConfigsServerlessMetadataErrorInvalidResponseJson(value *RunnerConfigsServerlessMetadataErrorInvalidResponseJson) *RunnerConfigsServerlessMetadataError {
	return &RunnerConfigsServerlessMetadataError{typeName: "runnerConfigsServerlessMetadataErrorInvalidResponseJson", RunnerConfigsServerlessMetadataErrorInvalidResponseJson: value}
}

func NewRunnerConfigsServerlessMetadataErrorFromRunnerConfigsServerlessMetadataErrorInvalidResponseSchema(value *RunnerConfigsServerlessMetadataErrorInvalidResponseSchema) *RunnerConfigsServerlessMetadataError {
	return &RunnerConfigsServerlessMetadataError{typeName: "runnerConfigsServerlessMetadataErrorInvalidResponseSchema", RunnerConfigsServerlessMetadataErrorInvalidResponseSchema: value}
}

func (r *RunnerConfigsServerlessMetadataError) UnmarshalJSON(data []byte) error {
	valueRunnerConfigsServerlessMetadataErrorInvalidRequest := new(RunnerConfigsServerlessMetadataErrorInvalidRequest)
	if err := json.Unmarshal(data, &valueRunnerConfigsServerlessMetadataErrorInvalidRequest); err == nil {
		r.typeName = "runnerConfigsServerlessMetadataErrorInvalidRequest"
		r.RunnerConfigsServerlessMetadataErrorInvalidRequest = valueRunnerConfigsServerlessMetadataErrorInvalidRequest
		return nil
	}
	valueRunnerConfigsServerlessMetadataErrorRequestFailed := new(RunnerConfigsServerlessMetadataErrorRequestFailed)
	if err := json.Unmarshal(data, &valueRunnerConfigsServerlessMetadataErrorRequestFailed); err == nil {
		r.typeName = "runnerConfigsServerlessMetadataErrorRequestFailed"
		r.RunnerConfigsServerlessMetadataErrorRequestFailed = valueRunnerConfigsServerlessMetadataErrorRequestFailed
		return nil
	}
	valueRunnerConfigsServerlessMetadataErrorRequestTimedOut := new(RunnerConfigsServerlessMetadataErrorRequestTimedOut)
	if err := json.Unmarshal(data, &valueRunnerConfigsServerlessMetadataErrorRequestTimedOut); err == nil {
		r.typeName = "runnerConfigsServerlessMetadataErrorRequestTimedOut"
		r.RunnerConfigsServerlessMetadataErrorRequestTimedOut = valueRunnerConfigsServerlessMetadataErrorRequestTimedOut
		return nil
	}
	valueRunnerConfigsServerlessMetadataErrorNonSuccessStatus := new(RunnerConfigsServerlessMetadataErrorNonSuccessStatus)
	if err := json.Unmarshal(data, &valueRunnerConfigsServerlessMetadataErrorNonSuccessStatus); err == nil {
		r.typeName = "runnerConfigsServerlessMetadataErrorNonSuccessStatus"
		r.RunnerConfigsServerlessMetadataErrorNonSuccessStatus = valueRunnerConfigsServerlessMetadataErrorNonSuccessStatus
		return nil
	}
	valueRunnerConfigsServerlessMetadataErrorInvalidResponseJson := new(RunnerConfigsServerlessMetadataErrorInvalidResponseJson)
	if err := json.Unmarshal(data, &valueRunnerConfigsServerlessMetadataErrorInvalidResponseJson); err == nil {
		r.typeName = "runnerConfigsServerlessMetadataErrorInvalidResponseJson"
		r.RunnerConfigsServerlessMetadataErrorInvalidResponseJson = valueRunnerConfigsServerlessMetadataErrorInvalidResponseJson
		return nil
	}
	valueRunnerConfigsServerlessMetadataErrorInvalidResponseSchema := new(RunnerConfigsServerlessMetadataErrorInvalidResponseSchema)
	if err := json.Unmarshal(data, &valueRunnerConfigsServerlessMetadataErrorInvalidResponseSchema); err == nil {
		r.typeName = "runnerConfigsServerlessMetadataErrorInvalidResponseSchema"
		r.RunnerConfigsServerlessMetadataErrorInvalidResponseSchema = valueRunnerConfigsServerlessMetadataErrorInvalidResponseSchema
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RunnerConfigsServerlessMetadataError) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "runnerConfigsServerlessMetadataErrorInvalidRequest":
		return json.Marshal(r.RunnerConfigsServerlessMetadataErrorInvalidRequest)
	case "runnerConfigsServerlessMetadataErrorRequestFailed":
		return json.Marshal(r.RunnerConfigsServerlessMetadataErrorRequestFailed)
	case "runnerConfigsServerlessMetadataErrorRequestTimedOut":
		return json.Marshal(r.RunnerConfigsServerlessMetadataErrorRequestTimedOut)
	case "runnerConfigsServerlessMetadataErrorNonSuccessStatus":
		return json.Marshal(r.RunnerConfigsServerlessMetadataErrorNonSuccessStatus)
	case "runnerConfigsServerlessMetadataErrorInvalidResponseJson":
		return json.Marshal(r.RunnerConfigsServerlessMetadataErrorInvalidResponseJson)
	case "runnerConfigsServerlessMetadataErrorInvalidResponseSchema":
		return json.Marshal(r.RunnerConfigsServerlessMetadataErrorInvalidResponseSchema)
	}
}

type RunnerConfigsServerlessMetadataErrorVisitor interface {
	VisitRunnerConfigsServerlessMetadataErrorInvalidRequest(*RunnerConfigsServerlessMetadataErrorInvalidRequest) error
	VisitRunnerConfigsServerlessMetadataErrorRequestFailed(*RunnerConfigsServerlessMetadataErrorRequestFailed) error
	VisitRunnerConfigsServerlessMetadataErrorRequestTimedOut(*RunnerConfigsServerlessMetadataErrorRequestTimedOut) error
	VisitRunnerConfigsServerlessMetadataErrorNonSuccessStatus(*RunnerConfigsServerlessMetadataErrorNonSuccessStatus) error
	VisitRunnerConfigsServerlessMetadataErrorInvalidResponseJson(*RunnerConfigsServerlessMetadataErrorInvalidResponseJson) error
	VisitRunnerConfigsServerlessMetadataErrorInvalidResponseSchema(*RunnerConfigsServerlessMetadataErrorInvalidResponseSchema) error
}

func (r *RunnerConfigsServerlessMetadataError) Accept(visitor RunnerConfigsServerlessMetadataErrorVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "runnerConfigsServerlessMetadataErrorInvalidRequest":
		return visitor.VisitRunnerConfigsServerlessMetadataErrorInvalidRequest(r.RunnerConfigsServerlessMetadataErrorInvalidRequest)
	case "runnerConfigsServerlessMetadataErrorRequestFailed":
		return visitor.VisitRunnerConfigsServerlessMetadataErrorRequestFailed(r.RunnerConfigsServerlessMetadataErrorRequestFailed)
	case "runnerConfigsServerlessMetadataErrorRequestTimedOut":
		return visitor.VisitRunnerConfigsServerlessMetadataErrorRequestTimedOut(r.RunnerConfigsServerlessMetadataErrorRequestTimedOut)
	case "runnerConfigsServerlessMetadataErrorNonSuccessStatus":
		return visitor.VisitRunnerConfigsServerlessMetadataErrorNonSuccessStatus(r.RunnerConfigsServerlessMetadataErrorNonSuccessStatus)
	case "runnerConfigsServerlessMetadataErrorInvalidResponseJson":
		return visitor.VisitRunnerConfigsServerlessMetadataErrorInvalidResponseJson(r.RunnerConfigsServerlessMetadataErrorInvalidResponseJson)
	case "runnerConfigsServerlessMetadataErrorInvalidResponseSchema":
		return visitor.VisitRunnerConfigsServerlessMetadataErrorInvalidResponseSchema(r.RunnerConfigsServerlessMetadataErrorInvalidResponseSchema)
	}
}

type RunnerConfigsServerlessMetadataErrorInvalidRequest struct {
	InvalidRequest map[string]interface{} `json:"invalid_request,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessMetadataErrorInvalidRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessMetadataErrorInvalidRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessMetadataErrorInvalidRequest(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessMetadataErrorInvalidRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessMetadataErrorInvalidResponseJson struct {
	InvalidResponseJson *RunnerConfigsServerlessMetadataErrorInvalidResponseJsonInvalidResponseJson `json:"invalid_response_json,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessMetadataErrorInvalidResponseJson) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessMetadataErrorInvalidResponseJson
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessMetadataErrorInvalidResponseJson(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessMetadataErrorInvalidResponseJson) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessMetadataErrorInvalidResponseJsonInvalidResponseJson struct {
	Body string `json:"body"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessMetadataErrorInvalidResponseJsonInvalidResponseJson) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessMetadataErrorInvalidResponseJsonInvalidResponseJson
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessMetadataErrorInvalidResponseJsonInvalidResponseJson(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessMetadataErrorInvalidResponseJsonInvalidResponseJson) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessMetadataErrorInvalidResponseSchema struct {
	InvalidResponseSchema *RunnerConfigsServerlessMetadataErrorInvalidResponseSchemaInvalidResponseSchema `json:"invalid_response_schema,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessMetadataErrorInvalidResponseSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessMetadataErrorInvalidResponseSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessMetadataErrorInvalidResponseSchema(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessMetadataErrorInvalidResponseSchema) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessMetadataErrorInvalidResponseSchemaInvalidResponseSchema struct {
	Runtime string `json:"runtime"`
	Version string `json:"version"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessMetadataErrorInvalidResponseSchemaInvalidResponseSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessMetadataErrorInvalidResponseSchemaInvalidResponseSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessMetadataErrorInvalidResponseSchemaInvalidResponseSchema(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessMetadataErrorInvalidResponseSchemaInvalidResponseSchema) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessMetadataErrorNonSuccessStatus struct {
	NonSuccessStatus *RunnerConfigsServerlessMetadataErrorNonSuccessStatusNonSuccessStatus `json:"non_success_status,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessMetadataErrorNonSuccessStatus) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessMetadataErrorNonSuccessStatus
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessMetadataErrorNonSuccessStatus(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessMetadataErrorNonSuccessStatus) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessMetadataErrorNonSuccessStatusNonSuccessStatus struct {
	Body       string `json:"body"`
	StatusCode int    `json:"status_code"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessMetadataErrorNonSuccessStatusNonSuccessStatus) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessMetadataErrorNonSuccessStatusNonSuccessStatus
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessMetadataErrorNonSuccessStatusNonSuccessStatus(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessMetadataErrorNonSuccessStatusNonSuccessStatus) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessMetadataErrorRequestFailed struct {
	RequestFailed map[string]interface{} `json:"request_failed,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessMetadataErrorRequestFailed) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessMetadataErrorRequestFailed
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessMetadataErrorRequestFailed(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessMetadataErrorRequestFailed) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsServerlessMetadataErrorRequestTimedOut struct {
	RequestTimedOut map[string]interface{} `json:"request_timed_out,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsServerlessMetadataErrorRequestTimedOut) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsServerlessMetadataErrorRequestTimedOut
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsServerlessMetadataErrorRequestTimedOut(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsServerlessMetadataErrorRequestTimedOut) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnerConfigsUpsertResponse struct {
	EndpointConfigChanged bool `json:"endpoint_config_changed"`

	_rawJSON json.RawMessage
}

func (r *RunnerConfigsUpsertResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnerConfigsUpsertResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnerConfigsUpsertResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnerConfigsUpsertResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnersListNamesResponse struct {
	Names      []string    `json:"names,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnersListNamesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnersListNamesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnersListNamesResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnersListNamesResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RunnersListResponse struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	Runners    []*Runner   `json:"runners,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RunnersListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RunnersListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RunnersListResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RunnersListResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
