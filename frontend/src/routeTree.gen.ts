/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutNamespacesRouteImport } from './routes/_layout/namespaces'
import { Route as LayoutNsNamespaceRouteImport } from './routes/_layout/ns.$namespace'
import { Route as LayoutNsNamespaceIndexRouteImport } from './routes/_layout/ns.$namespace/index'
import { Route as LayoutNsNamespaceRunnersRouteImport } from './routes/_layout/ns.$namespace/runners'

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutNamespacesRoute = LayoutNamespacesRouteImport.update({
  id: '/namespaces',
  path: '/namespaces',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutNsNamespaceRoute = LayoutNsNamespaceRouteImport.update({
  id: '/ns/$namespace',
  path: '/ns/$namespace',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutNsNamespaceIndexRoute = LayoutNsNamespaceIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutNsNamespaceRoute,
} as any)
const LayoutNsNamespaceRunnersRoute =
  LayoutNsNamespaceRunnersRouteImport.update({
    id: '/runners',
    path: '/runners',
    getParentRoute: () => LayoutNsNamespaceRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/namespaces': typeof LayoutNamespacesRoute
  '/': typeof LayoutIndexRoute
  '/ns/$namespace': typeof LayoutNsNamespaceRouteWithChildren
  '/ns/$namespace/runners': typeof LayoutNsNamespaceRunnersRoute
  '/ns/$namespace/': typeof LayoutNsNamespaceIndexRoute
}
export interface FileRoutesByTo {
  '/namespaces': typeof LayoutNamespacesRoute
  '/': typeof LayoutIndexRoute
  '/ns/$namespace/runners': typeof LayoutNsNamespaceRunnersRoute
  '/ns/$namespace': typeof LayoutNsNamespaceIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/namespaces': typeof LayoutNamespacesRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/ns/$namespace': typeof LayoutNsNamespaceRouteWithChildren
  '/_layout/ns/$namespace/runners': typeof LayoutNsNamespaceRunnersRoute
  '/_layout/ns/$namespace/': typeof LayoutNsNamespaceIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/namespaces'
    | '/'
    | '/ns/$namespace'
    | '/ns/$namespace/runners'
    | '/ns/$namespace/'
  fileRoutesByTo: FileRoutesByTo
  to: '/namespaces' | '/' | '/ns/$namespace/runners' | '/ns/$namespace'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/namespaces'
    | '/_layout/'
    | '/_layout/ns/$namespace'
    | '/_layout/ns/$namespace/runners'
    | '/_layout/ns/$namespace/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/namespaces': {
      id: '/_layout/namespaces'
      path: '/namespaces'
      fullPath: '/namespaces'
      preLoaderRoute: typeof LayoutNamespacesRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/ns/$namespace': {
      id: '/_layout/ns/$namespace'
      path: '/ns/$namespace'
      fullPath: '/ns/$namespace'
      preLoaderRoute: typeof LayoutNsNamespaceRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/ns/$namespace/': {
      id: '/_layout/ns/$namespace/'
      path: '/'
      fullPath: '/ns/$namespace/'
      preLoaderRoute: typeof LayoutNsNamespaceIndexRouteImport
      parentRoute: typeof LayoutNsNamespaceRoute
    }
    '/_layout/ns/$namespace/runners': {
      id: '/_layout/ns/$namespace/runners'
      path: '/runners'
      fullPath: '/ns/$namespace/runners'
      preLoaderRoute: typeof LayoutNsNamespaceRunnersRouteImport
      parentRoute: typeof LayoutNsNamespaceRoute
    }
  }
}

interface LayoutNsNamespaceRouteChildren {
  LayoutNsNamespaceRunnersRoute: typeof LayoutNsNamespaceRunnersRoute
  LayoutNsNamespaceIndexRoute: typeof LayoutNsNamespaceIndexRoute
}

const LayoutNsNamespaceRouteChildren: LayoutNsNamespaceRouteChildren = {
  LayoutNsNamespaceRunnersRoute: LayoutNsNamespaceRunnersRoute,
  LayoutNsNamespaceIndexRoute: LayoutNsNamespaceIndexRoute,
}

const LayoutNsNamespaceRouteWithChildren =
  LayoutNsNamespaceRoute._addFileChildren(LayoutNsNamespaceRouteChildren)

interface LayoutRouteChildren {
  LayoutNamespacesRoute: typeof LayoutNamespacesRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutNsNamespaceRoute: typeof LayoutNsNamespaceRouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutNamespacesRoute: LayoutNamespacesRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutNsNamespaceRoute: LayoutNsNamespaceRouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
