import {
	Icon,
	faExclamationTriangle,
	faInfoCircle,
	faLightbulbOn,
} from "@rivet-gg/icons";

export { Button } from "../ui/button";
import type { ComponentProps, PropsWithChildren, ReactNode } from "react";
import { CtaCard } from "../cta-card";
import { Alert, AlertDescription, AlertTitle } from "../ui/alert";
import { Badge } from "../ui/badge";
import { WithTooltip } from "../ui/tooltip";
import { Link } from "../ui/typography";

export const a = Link;

// biome-ignore lint/a11y/useAltText: dev's responsibility
export const Image = (props: ComponentProps<"img">) => <img {...props} />;

export const table = function Table(props: ComponentProps<"table">) {
	return (
		<div className="overflow-x-auto">
			<table {...props} />
		</div>
	);
};

export function Tooltip({
	tip,
	children,
}: { tip: string; children: ReactNode }) {
	return (
		<WithTooltip
			content={tip}
			trigger={
				<span className="underline decoration-cream-400 decoration-dotted decoration-2 underline-offset-4 dark:decoration-charcole-500">
					{children}
				</span>
			}
		/>
	);
}

export function ComingSoon() {
	return <Note>Documentation coming very soon!</Note>;
}

export function Outdated() {
	return (
		<Info>
			ðŸš§ This documentation page is no longer maintained and potentially
			outdated ðŸš§
		</Info>
	);
}

export function WorkInProgress() {
	return <Info>ðŸš§ This documentation page is a work in progress ðŸš§</Info>;
}

export function EnvTokenClient() {
	return (
		<Info>
			<p>
				In development,&nbsp;<code>RIVET_TOKEN</code> will use the
				development token generated by <code>rivet run</code>. In
				production,&nbsp;<code>RIVET_TOKEN</code> will be automatically
				added by the CDN.
			</p>

			<p>More info:</p>

			<ul>
				<li>
					<Link href="https://rivet.gg/docs/tokens">
						Handling game tokens
					</Link>
				</li>
				<li>
					<Link href="https://rivet.gg/docs/tokens">
						Development tokens
					</Link>
				</li>
				<li>
					<Link href="https://rivet.gg/docs/tokens">
						Public tokens
					</Link>
				</li>
			</ul>
		</Info>
	);
}

export function EnvTokenServer() {
	return (
		<Info>
			<p>
				In development, <code>RIVET_TOKEN</code> will use the
				development token generated by <code>rivet run</code>. In
				production,&nbsp;<code>RIVET_TOKEN</code> is automatically added
				to your environment by Rivet.
			</p>

			<p>More info:</p>

			<ul>
				<li>
					<Link href="https://rivet.gg/docs/tokens">
						Handling game tokens
					</Link>
				</li>
				<li>
					<Link href="https://rivet.gg/docs/tokens">
						Development tokens
					</Link>
				</li>
			</ul>
		</Info>
	);
}

export function PreRivetBranch() {
	return (
		<Info>
			<p>
				The <code>pre-rivet</code> branch contains the source code of
				this project without Rivet implemented, in contrast to the{" "}
				<code>main</code> branch. View these side by side to get a good
				picture of what it takes to integrate Rivet for your game.
			</p>
		</Info>
	);
}

export function InstallCli() {
	return (
		<Note>
			Make sure you have installed the Rivet CLI{" "}
			<Link
				href="https://github.com/rivet-gg/cli#installing"
				target="_blank"
			>
				here
			</Link>
			.
		</Note>
	);
}

export const Card = ({
	href,
	...props
}: ComponentProps<typeof CtaCard> & { href?: string }) => {
	if (href) {
		return (
			<Link href={href} className="h-full">
				<CtaCard className="h-full" {...props} />
			</Link>
		);
	}
};

export const CardGroup = ({ children }: PropsWithChildren) => {
	return (
		<div className="not-prose grid gap-4 md:grid-cols-2">{children}</div>
	);
};

export const Warning = ({
	title = "Notice",
	children,
}: { title?: string; children: ReactNode }) => {
	return (
		<Alert variant="warning" className="my-4">
			<AlertTitle className="flex items-center text-foreground">
				<Icon
					icon={faExclamationTriangle}
					className="mr-2 text-warning"
				/>
				{title}
			</AlertTitle>
			<AlertDescription className="prose-invert prose">
				{children}
			</AlertDescription>
		</Alert>
	);
};

export const Tip = ({
	title = "Tip",
	children,
}: { title?: string; children: ReactNode }) => {
	return (
		<Alert className="my-4">
			<AlertTitle className="flex items-center text-foreground">
				<Icon icon={faLightbulbOn} className="mr-2 text-primary" />
				{title}
			</AlertTitle>
			<AlertDescription className="prose-invert prose">
				{children}
			</AlertDescription>
		</Alert>
	);
};

export const Info = ({
	title = "Info",
	children,
}: { title?: string; children: ReactNode }) => {
	return (
		<Alert className="my-4">
			<AlertTitle className="flex items-center text-foreground">
				<Icon icon={faInfoCircle} className="mr-2" />
				{title}
			</AlertTitle>
			<AlertDescription className="prose-invert prose">
				{children}
			</AlertDescription>
		</Alert>
	);
};

export const Note = ({
	title = "Note",
	children,
}: { title?: string; children: ReactNode }) => {
	return (
		<Alert className="my-4">
			<AlertTitle className="prose-invert flex items-center text-foreground [&_p]:first-of-type:my-0">
				<Icon icon={faInfoCircle} className="mr-2" />
				{title}
			</AlertTitle>
			<AlertDescription className="prose-invert prose max-w-full w-full">
				{children}
			</AlertDescription>
		</Alert>
	);
};

export const Tags = ({ tags }: { tags: string[] }) => {
	return (
		<div className="flex flex-wrap gap-1">
			{tags.map((tag) => (
				<Badge key={tag}>{tag}</Badge>
			))}
		</div>
	);
};

export function HideOnHub() {
	return null;
}

export { Step, Steps } from "../steps";
export * from "./tabs";
export * from "./code";
