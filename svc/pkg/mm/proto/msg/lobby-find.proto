syntax = "proto3";

package rivet.backend.pkg.mm.msg.lobby_find;

import "legacy/proto/common.proto";
import "legacy/proto/backend/net.proto";
import "legacy/proto/backend/matchmaker/query.proto";

message Player {
	rivet.common.Uuid player_id = 1;
	rivet.common.Uuid token_session_id = 2;
	optional rivet.backend.net.ClientInfo client_info = 3;
}

/// name = "msg-mm-lobby-find"
/// parameters = [
/// 	{ name = "namespace_id" },
/// 	{ name = "query_id" },
/// ]
message Message {
	// Game namespace to find a lobby in.
	rivet.common.Uuid namespace_id = 1;

	// Unique ID for this query.
	rivet.common.Uuid query_id = 2;

	// How the player is joining this lobby. This affects the max player count
	// to use.
	rivet.backend.matchmaker.query.JoinKind join_kind = 3;

	// Players to create.
	repeated Player players = 4;

	oneof query {
		rivet.backend.matchmaker.query.Direct direct = 101;
		rivet.backend.matchmaker.query.LobbyGroup lobby_group = 102;
	};

	// The user ID of the game user creating this find request (if there is one).
	optional rivet.common.Uuid user_id = 201;
	// JSON verification data from the user.
	optional string verification_data_json = 202;
	// Bypasses user data verification (if the give lobby group has any).
	bool bypass_verification = 203;
	map<string, string> tags = 204;
	// User configured player count that overrides the config.
	optional uint32 dynamic_max_players = 205;

	optional Debug debug = 301;
}

message Debug {
	// Intentionally throw an error between inserting in to Redis an
	// inserting in to SQL in order to test how this failure is
	// handled.
	bool fail_sql = 301;
}
